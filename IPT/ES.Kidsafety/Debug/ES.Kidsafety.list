
ES.Kidsafety.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4ec  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  0800e680  0800e680  0001e680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee68  0800ee68  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee68  0800ee68  0001ee68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee70  0800ee70  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee70  0800ee70  0001ee70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee74  0800ee74  0001ee74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800ee78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  20000218  0800f090  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000790  0800f090  00020790  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e5b  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b22  00000000  00000000  000380a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001668  00000000  00000000  0003abc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001528  00000000  00000000  0003c230  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024292  00000000  00000000  0003d758  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000114a4  00000000  00000000  000619ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e2394  00000000  00000000  00072e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00155222  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007170  00000000  00000000  001552a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e664 	.word	0x0800e664

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	0800e664 	.word	0x0800e664

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2uiz>:
 8000b08:	004a      	lsls	r2, r1, #1
 8000b0a:	d211      	bcs.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d211      	bcs.n	8000b36 <__aeabi_d2uiz+0x2e>
 8000b12:	d50d      	bpl.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d40e      	bmi.n	8000b3c <__aeabi_d2uiz+0x34>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_d2uiz+0x3a>
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0000 	mov.w	r0, #0
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <DelayMicro>:
uint8_t checkNewMes = 0;
uint8_t Mes_index = 0;
float latCen, lngCen = 0;
//-----------------------------------------------------------------//
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
micros *= (SystemCoreClock / 1000000) / 9;
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <DelayMicro+0x34>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <DelayMicro+0x38>)
 8000ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8000efa:	0ddb      	lsrs	r3, r3, #23
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	fb02 f303 	mul.w	r3, r2, r3
 8000f02:	607b      	str	r3, [r7, #4]
/* Wait till done */
while (micros--) ;
 8000f04:	bf00      	nop
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	1e5a      	subs	r2, r3, #1
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1fa      	bne.n	8000f06 <DelayMicro+0x1e>
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	20000038 	.word	0x20000038
 8000f20:	ee9bfab5 	.word	0xee9bfab5

08000f24 <HAL_RTC_AlarmAEventCallback>:
#else
 #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
//------------------------------Set_Time/Alarm--------------------------------//
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	if (time_stage == 5)
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_RTC_AlarmAEventCallback+0x30>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b05      	cmp	r3, #5
 8000f32:	d102      	bne.n	8000f3a <HAL_RTC_AlarmAEventCallback+0x16>
		flag_Alarm = 2;
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_RTC_AlarmAEventCallback+0x34>)
 8000f36:	2202      	movs	r2, #2
 8000f38:	701a      	strb	r2, [r3, #0]
	if (time_stage == 30)
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_RTC_AlarmAEventCallback+0x30>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b1e      	cmp	r3, #30
 8000f40:	d102      	bne.n	8000f48 <HAL_RTC_AlarmAEventCallback+0x24>
		flag_Alarm = 1;
 8000f42:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_RTC_AlarmAEventCallback+0x34>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
	HAL_ResumeTick();
 8000f48:	f003 f8c0 	bl	80040cc <HAL_ResumeTick>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000035 	.word	0x20000035
 8000f58:	20000034 	.word	0x20000034

08000f5c <DecimalToBCD>:

uint8_t DecimalToBCD(int number)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	return (((number / 10) << 4) | (number % 10));
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a0f      	ldr	r2, [pc, #60]	; (8000fa4 <DecimalToBCD+0x48>)
 8000f68:	fb82 1203 	smull	r1, r2, r2, r3
 8000f6c:	1092      	asrs	r2, r2, #2
 8000f6e:	17db      	asrs	r3, r3, #31
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	011b      	lsls	r3, r3, #4
 8000f74:	b258      	sxtb	r0, r3
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <DecimalToBCD+0x48>)
 8000f7a:	fb83 1302 	smull	r1, r3, r3, r2
 8000f7e:	1099      	asrs	r1, r3, #2
 8000f80:	17d3      	asrs	r3, r2, #31
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	460b      	mov	r3, r1
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	440b      	add	r3, r1
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	1ad1      	subs	r1, r2, r3
 8000f8e:	b24b      	sxtb	r3, r1
 8000f90:	4303      	orrs	r3, r0
 8000f92:	b25b      	sxtb	r3, r3
 8000f94:	b2db      	uxtb	r3, r3
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	66666667 	.word	0x66666667

08000fa8 <setTime>:

void setTime(uint8_t weekday, uint8_t date, uint8_t month, uint8_t year, uint8_t hour, uint8_t minute, uint8_t second)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4604      	mov	r4, r0
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4623      	mov	r3, r4
 8000fb8:	71fb      	strb	r3, [r7, #7]
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71bb      	strb	r3, [r7, #6]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	717b      	strb	r3, [r7, #5]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	713b      	strb	r3, [r7, #4]
	sDate.WeekDay 	= DecimalToBCD(weekday);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ffc7 	bl	8000f5c <DecimalToBCD>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b20      	ldr	r3, [pc, #128]	; (8001054 <setTime+0xac>)
 8000fd4:	701a      	strb	r2, [r3, #0]
	sDate.Date 		= DecimalToBCD(date);
 8000fd6:	79bb      	ldrb	r3, [r7, #6]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ffbf 	bl	8000f5c <DecimalToBCD>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <setTime+0xac>)
 8000fe4:	709a      	strb	r2, [r3, #2]
	sDate.Month 	= DecimalToBCD(month);
 8000fe6:	797b      	ldrb	r3, [r7, #5]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ffb7 	bl	8000f5c <DecimalToBCD>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <setTime+0xac>)
 8000ff4:	705a      	strb	r2, [r3, #1]
	sDate.Year 		= DecimalToBCD(year);
 8000ff6:	793b      	ldrb	r3, [r7, #4]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ffaf 	bl	8000f5c <DecimalToBCD>
 8000ffe:	4603      	mov	r3, r0
 8001000:	461a      	mov	r2, r3
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <setTime+0xac>)
 8001004:	70da      	strb	r2, [r3, #3]

	sTime.Hours		= DecimalToBCD(hour);
 8001006:	7e3b      	ldrb	r3, [r7, #24]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ffa7 	bl	8000f5c <DecimalToBCD>
 800100e:	4603      	mov	r3, r0
 8001010:	461a      	mov	r2, r3
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <setTime+0xb0>)
 8001014:	701a      	strb	r2, [r3, #0]
	sTime.Minutes	= DecimalToBCD(minute);
 8001016:	7f3b      	ldrb	r3, [r7, #28]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff9f 	bl	8000f5c <DecimalToBCD>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <setTime+0xb0>)
 8001024:	705a      	strb	r2, [r3, #1]
	sTime.Seconds	= DecimalToBCD(second);
 8001026:	f897 3020 	ldrb.w	r3, [r7, #32]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ff96 	bl	8000f5c <DecimalToBCD>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <setTime+0xb0>)
 8001036:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BCD);
 8001038:	2201      	movs	r2, #1
 800103a:	4907      	ldr	r1, [pc, #28]	; (8001058 <setTime+0xb0>)
 800103c:	4807      	ldr	r0, [pc, #28]	; (800105c <setTime+0xb4>)
 800103e:	f005 fe02 	bl	8006c46 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, FORMAT_BCD);
 8001042:	2201      	movs	r2, #1
 8001044:	4903      	ldr	r1, [pc, #12]	; (8001054 <setTime+0xac>)
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <setTime+0xb4>)
 8001048:	f005 fef6 	bl	8006e38 <HAL_RTC_SetDate>
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bd90      	pop	{r4, r7, pc}
 8001054:	20000248 	.word	0x20000248
 8001058:	20000234 	.word	0x20000234
 800105c:	200006a0 	.word	0x200006a0

08001060 <getTime>:

void getTime(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 8001064:	2200      	movs	r2, #0
 8001066:	4913      	ldr	r1, [pc, #76]	; (80010b4 <getTime+0x54>)
 8001068:	4813      	ldr	r0, [pc, #76]	; (80010b8 <getTime+0x58>)
 800106a:	f005 fe89 	bl	8006d80 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 800106e:	2200      	movs	r2, #0
 8001070:	4912      	ldr	r1, [pc, #72]	; (80010bc <getTime+0x5c>)
 8001072:	4811      	ldr	r0, [pc, #68]	; (80010b8 <getTime+0x58>)
 8001074:	f005 ff67 	bl	8006f46 <HAL_RTC_GetDate>

	Weekday = sDate.WeekDay;
 8001078:	4b10      	ldr	r3, [pc, #64]	; (80010bc <getTime+0x5c>)
 800107a:	781a      	ldrb	r2, [r3, #0]
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <getTime+0x60>)
 800107e:	701a      	strb	r2, [r3, #0]
	Date 	= sDate.Date;
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <getTime+0x5c>)
 8001082:	789a      	ldrb	r2, [r3, #2]
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <getTime+0x64>)
 8001086:	701a      	strb	r2, [r3, #0]
	Month 	= sDate.Month;
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <getTime+0x5c>)
 800108a:	785a      	ldrb	r2, [r3, #1]
 800108c:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <getTime+0x68>)
 800108e:	701a      	strb	r2, [r3, #0]
	Year 	= sDate.Year;
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <getTime+0x5c>)
 8001092:	78da      	ldrb	r2, [r3, #3]
 8001094:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <getTime+0x6c>)
 8001096:	701a      	strb	r2, [r3, #0]

	Hour 	= sTime.Hours;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <getTime+0x54>)
 800109a:	781a      	ldrb	r2, [r3, #0]
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <getTime+0x70>)
 800109e:	701a      	strb	r2, [r3, #0]
	Minute 	= sTime.Minutes;
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <getTime+0x54>)
 80010a2:	785a      	ldrb	r2, [r3, #1]
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <getTime+0x74>)
 80010a6:	701a      	strb	r2, [r3, #0]
	Second	= sTime.Seconds;
 80010a8:	4b02      	ldr	r3, [pc, #8]	; (80010b4 <getTime+0x54>)
 80010aa:	789a      	ldrb	r2, [r3, #2]
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <getTime+0x78>)
 80010ae:	701a      	strb	r2, [r3, #0]
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000234 	.word	0x20000234
 80010b8:	200006a0 	.word	0x200006a0
 80010bc:	20000248 	.word	0x20000248
 80010c0:	2000050a 	.word	0x2000050a
 80010c4:	2000059c 	.word	0x2000059c
 80010c8:	2000073b 	.word	0x2000073b
 80010cc:	200006c6 	.word	0x200006c6
 80010d0:	2000039e 	.word	0x2000039e
 80010d4:	20000693 	.word	0x20000693
 80010d8:	20000390 	.word	0x20000390

080010dc <set_Alarm>:

void set_Alarm(uint8_t set_hour, uint8_t set_minute, uint8_t set_second, uint8_t set_day, uint8_t time_stage)
{
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4604      	mov	r4, r0
 80010e4:	4608      	mov	r0, r1
 80010e6:	4611      	mov	r1, r2
 80010e8:	461a      	mov	r2, r3
 80010ea:	4623      	mov	r3, r4
 80010ec:	71fb      	strb	r3, [r7, #7]
 80010ee:	4603      	mov	r3, r0
 80010f0:	71bb      	strb	r3, [r7, #6]
 80010f2:	460b      	mov	r3, r1
 80010f4:	717b      	strb	r3, [r7, #5]
 80010f6:	4613      	mov	r3, r2
 80010f8:	713b      	strb	r3, [r7, #4]
//	  uint8_t set_minute_Alarm = (set_minute + time_stage)%60;
//	  if (set_minute_Alarm < set_minute) set_hour++;
	  uint8_t set_second_Alarm = (set_second + time_stage)%60;
 80010fa:	797a      	ldrb	r2, [r7, #5]
 80010fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001100:	441a      	add	r2, r3
 8001102:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <set_Alarm+0xe0>)
 8001104:	fb83 1302 	smull	r1, r3, r3, r2
 8001108:	4413      	add	r3, r2
 800110a:	1159      	asrs	r1, r3, #5
 800110c:	17d3      	asrs	r3, r2, #31
 800110e:	1ac9      	subs	r1, r1, r3
 8001110:	460b      	mov	r3, r1
 8001112:	011b      	lsls	r3, r3, #4
 8001114:	1a5b      	subs	r3, r3, r1
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	1ad1      	subs	r1, r2, r3
 800111a:	460b      	mov	r3, r1
 800111c:	73fb      	strb	r3, [r7, #15]
	  if (set_second_Alarm < set_second) set_minute++;
 800111e:	7bfa      	ldrb	r2, [r7, #15]
 8001120:	797b      	ldrb	r3, [r7, #5]
 8001122:	429a      	cmp	r2, r3
 8001124:	d202      	bcs.n	800112c <set_Alarm+0x50>
 8001126:	79bb      	ldrb	r3, [r7, #6]
 8001128:	3301      	adds	r3, #1
 800112a:	71bb      	strb	r3, [r7, #6]
	  if (set_minute == 60)
 800112c:	79bb      	ldrb	r3, [r7, #6]
 800112e:	2b3c      	cmp	r3, #60	; 0x3c
 8001130:	d104      	bne.n	800113c <set_Alarm+0x60>
	  {
		  set_minute = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	71bb      	strb	r3, [r7, #6]
		  set_hour++;
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	3301      	adds	r3, #1
 800113a:	71fb      	strb	r3, [r7, #7]
	  }
	  sAlarm.AlarmTime.Hours = DecimalToBCD(set_hour);
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff0c 	bl	8000f5c <DecimalToBCD>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <set_Alarm+0xe4>)
 800114a:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = DecimalToBCD(set_minute);
 800114c:	79bb      	ldrb	r3, [r7, #6]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff04 	bl	8000f5c <DecimalToBCD>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <set_Alarm+0xe4>)
 800115a:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = DecimalToBCD(set_second_Alarm);
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fefc 	bl	8000f5c <DecimalToBCD>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <set_Alarm+0xe4>)
 800116a:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <set_Alarm+0xe4>)
 800116e:	2200      	movs	r2, #0
 8001170:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <set_Alarm+0xe4>)
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <set_Alarm+0xe4>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS;
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <set_Alarm+0xe4>)
 8001180:	4a10      	ldr	r2, [pc, #64]	; (80011c4 <set_Alarm+0xe8>)
 8001182:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001184:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <set_Alarm+0xe4>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800118a:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <set_Alarm+0xe4>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <set_Alarm+0xe4>)
 8001192:	2201      	movs	r2, #1
 8001194:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  sAlarm.Alarm = RTC_ALARM_A;
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <set_Alarm+0xe4>)
 800119a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800119e:	629a      	str	r2, [r3, #40]	; 0x28
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80011a0:	2201      	movs	r2, #1
 80011a2:	4907      	ldr	r1, [pc, #28]	; (80011c0 <set_Alarm+0xe4>)
 80011a4:	4808      	ldr	r0, [pc, #32]	; (80011c8 <set_Alarm+0xec>)
 80011a6:	f005 ff1b 	bl	8006fe0 <HAL_RTC_SetAlarm_IT>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <set_Alarm+0xd8>
	  {
	    Error_Handler();
 80011b0:	f002 fca2 	bl	8003af8 <Error_Handler>
	  }
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd90      	pop	{r4, r7, pc}
 80011bc:	88888889 	.word	0x88888889
 80011c0:	2000024c 	.word	0x2000024c
 80011c4:	80800000 	.word	0x80800000
 80011c8:	200006a0 	.word	0x200006a0

080011cc <HAL_UART_RxCpltCallback>:

//-----------------------Tranceive_UART-------------------------//
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == LPUART1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a4b      	ldr	r2, [pc, #300]	; (8001308 <HAL_UART_RxCpltCallback+0x13c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d13a      	bne.n	8001254 <HAL_UART_RxCpltCallback+0x88>
	{
		if (Rx_Data[0] == '$')
 80011de:	4b4b      	ldr	r3, [pc, #300]	; (800130c <HAL_UART_RxCpltCallback+0x140>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b24      	cmp	r3, #36	; 0x24
 80011e4:	d106      	bne.n	80011f4 <HAL_UART_RxCpltCallback+0x28>
		{
			start_Receive = 1;
 80011e6:	4b4a      	ldr	r3, [pc, #296]	; (8001310 <HAL_UART_RxCpltCallback+0x144>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	701a      	strb	r2, [r3, #0]
			Rx_index = 0;
 80011ec:	4b49      	ldr	r3, [pc, #292]	; (8001314 <HAL_UART_RxCpltCallback+0x148>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	801a      	strh	r2, [r3, #0]
 80011f2:	e013      	b.n	800121c <HAL_UART_RxCpltCallback+0x50>
		} else
		if ((Rx_Data[0] == '\r')||(Rx_Data[0] == '\n'))
 80011f4:	4b45      	ldr	r3, [pc, #276]	; (800130c <HAL_UART_RxCpltCallback+0x140>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b0d      	cmp	r3, #13
 80011fa:	d003      	beq.n	8001204 <HAL_UART_RxCpltCallback+0x38>
 80011fc:	4b43      	ldr	r3, [pc, #268]	; (800130c <HAL_UART_RxCpltCallback+0x140>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b0a      	cmp	r3, #10
 8001202:	d106      	bne.n	8001212 <HAL_UART_RxCpltCallback+0x46>
		{
			start_Receive = 0;
 8001204:	4b42      	ldr	r3, [pc, #264]	; (8001310 <HAL_UART_RxCpltCallback+0x144>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
//			HAL_UART_Receive_IT(&huart1, (uint8_t*)Rx_Data, 1);
			HAL_UART_Abort_IT(&hlpuart1);
 800120a:	4843      	ldr	r0, [pc, #268]	; (8001318 <HAL_UART_RxCpltCallback+0x14c>)
 800120c:	f007 f832 	bl	8008274 <HAL_UART_Abort_IT>
 8001210:	e004      	b.n	800121c <HAL_UART_RxCpltCallback+0x50>
		} else
			HAL_UART_Receive_IT(&hlpuart1, (uint8_t*)Rx_Data, 1);
 8001212:	2201      	movs	r2, #1
 8001214:	493d      	ldr	r1, [pc, #244]	; (800130c <HAL_UART_RxCpltCallback+0x140>)
 8001216:	4840      	ldr	r0, [pc, #256]	; (8001318 <HAL_UART_RxCpltCallback+0x14c>)
 8001218:	f006 ff8a 	bl	8008130 <HAL_UART_Receive_IT>

		if ((start_Receive)&&(Rx_index < MAX_ARRAY))
 800121c:	4b3c      	ldr	r3, [pc, #240]	; (8001310 <HAL_UART_RxCpltCallback+0x144>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d014      	beq.n	800124e <HAL_UART_RxCpltCallback+0x82>
 8001224:	4b3b      	ldr	r3, [pc, #236]	; (8001314 <HAL_UART_RxCpltCallback+0x148>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	2b63      	cmp	r3, #99	; 0x63
 800122a:	d810      	bhi.n	800124e <HAL_UART_RxCpltCallback+0x82>
		{
			Rx_Buffer[Rx_index++] = Rx_Data[0];
 800122c:	4b39      	ldr	r3, [pc, #228]	; (8001314 <HAL_UART_RxCpltCallback+0x148>)
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	b291      	uxth	r1, r2
 8001234:	4a37      	ldr	r2, [pc, #220]	; (8001314 <HAL_UART_RxCpltCallback+0x148>)
 8001236:	8011      	strh	r1, [r2, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	4b34      	ldr	r3, [pc, #208]	; (800130c <HAL_UART_RxCpltCallback+0x140>)
 800123c:	7819      	ldrb	r1, [r3, #0]
 800123e:	4b37      	ldr	r3, [pc, #220]	; (800131c <HAL_UART_RxCpltCallback+0x150>)
 8001240:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&hlpuart1, (uint8_t*)Rx_Data, 1);
 8001242:	2201      	movs	r2, #1
 8001244:	4931      	ldr	r1, [pc, #196]	; (800130c <HAL_UART_RxCpltCallback+0x140>)
 8001246:	4834      	ldr	r0, [pc, #208]	; (8001318 <HAL_UART_RxCpltCallback+0x14c>)
 8001248:	f006 ff72 	bl	8008130 <HAL_UART_Receive_IT>
 800124c:	e002      	b.n	8001254 <HAL_UART_RxCpltCallback+0x88>
		}
		else
		{
			end_Buffer = 1;
 800124e:	4b34      	ldr	r3, [pc, #208]	; (8001320 <HAL_UART_RxCpltCallback+0x154>)
 8001250:	2201      	movs	r2, #1
 8001252:	701a      	strb	r2, [r3, #0]
//			HAL_UART_Abort_IT(&hlpuart1);
		}
	}
	if(huart -> Instance == USART1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a32      	ldr	r2, [pc, #200]	; (8001324 <HAL_UART_RxCpltCallback+0x158>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d150      	bne.n	8001300 <HAL_UART_RxCpltCallback+0x134>
	  {
	    HAL_UART_Receive_IT(&huart1, (uint8_t *)Rx_data_sim, 1);
 800125e:	2201      	movs	r2, #1
 8001260:	4931      	ldr	r1, [pc, #196]	; (8001328 <HAL_UART_RxCpltCallback+0x15c>)
 8001262:	4832      	ldr	r0, [pc, #200]	; (800132c <HAL_UART_RxCpltCallback+0x160>)
 8001264:	f006 ff64 	bl	8008130 <HAL_UART_Receive_IT>
	    Rx_buffer_sim[Rx_index_sim++] = Rx_data_sim[0];
 8001268:	4b31      	ldr	r3, [pc, #196]	; (8001330 <HAL_UART_RxCpltCallback+0x164>)
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	1c5a      	adds	r2, r3, #1
 800126e:	b291      	uxth	r1, r2
 8001270:	4a2f      	ldr	r2, [pc, #188]	; (8001330 <HAL_UART_RxCpltCallback+0x164>)
 8001272:	8011      	strh	r1, [r2, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b2c      	ldr	r3, [pc, #176]	; (8001328 <HAL_UART_RxCpltCallback+0x15c>)
 8001278:	7819      	ldrb	r1, [r3, #0]
 800127a:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <HAL_UART_RxCpltCallback+0x168>)
 800127c:	5499      	strb	r1, [r3, r2]
	    if (Rx_data_sim[0] == 'C') checkNewMes = 1;
 800127e:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <HAL_UART_RxCpltCallback+0x15c>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b43      	cmp	r3, #67	; 0x43
 8001284:	d102      	bne.n	800128c <HAL_UART_RxCpltCallback+0xc0>
 8001286:	4b2c      	ldr	r3, [pc, #176]	; (8001338 <HAL_UART_RxCpltCallback+0x16c>)
 8001288:	2201      	movs	r2, #1
 800128a:	701a      	strb	r2, [r3, #0]
	    if (Rx_data_sim[0] == 'M' && checkNewMes == 1) checkNewMes = 2;
 800128c:	4b26      	ldr	r3, [pc, #152]	; (8001328 <HAL_UART_RxCpltCallback+0x15c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b4d      	cmp	r3, #77	; 0x4d
 8001292:	d106      	bne.n	80012a2 <HAL_UART_RxCpltCallback+0xd6>
 8001294:	4b28      	ldr	r3, [pc, #160]	; (8001338 <HAL_UART_RxCpltCallback+0x16c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d102      	bne.n	80012a2 <HAL_UART_RxCpltCallback+0xd6>
 800129c:	4b26      	ldr	r3, [pc, #152]	; (8001338 <HAL_UART_RxCpltCallback+0x16c>)
 800129e:	2202      	movs	r2, #2
 80012a0:	701a      	strb	r2, [r3, #0]
	    if (Rx_data_sim[0] == 'T' && checkNewMes == 2) checkNewMes = 3;
 80012a2:	4b21      	ldr	r3, [pc, #132]	; (8001328 <HAL_UART_RxCpltCallback+0x15c>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b54      	cmp	r3, #84	; 0x54
 80012a8:	d106      	bne.n	80012b8 <HAL_UART_RxCpltCallback+0xec>
 80012aa:	4b23      	ldr	r3, [pc, #140]	; (8001338 <HAL_UART_RxCpltCallback+0x16c>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d102      	bne.n	80012b8 <HAL_UART_RxCpltCallback+0xec>
 80012b2:	4b21      	ldr	r3, [pc, #132]	; (8001338 <HAL_UART_RxCpltCallback+0x16c>)
 80012b4:	2203      	movs	r2, #3
 80012b6:	701a      	strb	r2, [r3, #0]
	    if (Rx_data_sim[0] == 'I' && checkNewMes == 3) checkNewMes = 4;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <HAL_UART_RxCpltCallback+0x15c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b49      	cmp	r3, #73	; 0x49
 80012be:	d106      	bne.n	80012ce <HAL_UART_RxCpltCallback+0x102>
 80012c0:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <HAL_UART_RxCpltCallback+0x16c>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d102      	bne.n	80012ce <HAL_UART_RxCpltCallback+0x102>
 80012c8:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <HAL_UART_RxCpltCallback+0x16c>)
 80012ca:	2204      	movs	r2, #4
 80012cc:	701a      	strb	r2, [r3, #0]
	    if (checkNewMes == 4)
 80012ce:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <HAL_UART_RxCpltCallback+0x16c>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d114      	bne.n	8001300 <HAL_UART_RxCpltCallback+0x134>
	    {
	      SaveMes[Mes_index++] = Rx_data_sim[0];
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_UART_RxCpltCallback+0x170>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	b2d1      	uxtb	r1, r2
 80012de:	4a17      	ldr	r2, [pc, #92]	; (800133c <HAL_UART_RxCpltCallback+0x170>)
 80012e0:	7011      	strb	r1, [r2, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <HAL_UART_RxCpltCallback+0x15c>)
 80012e6:	7819      	ldrb	r1, [r3, #0]
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_UART_RxCpltCallback+0x174>)
 80012ea:	5499      	strb	r1, [r3, r2]
	      if (Rx_data_sim[0] == '\r')
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <HAL_UART_RxCpltCallback+0x15c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b0d      	cmp	r3, #13
 80012f2:	d105      	bne.n	8001300 <HAL_UART_RxCpltCallback+0x134>
	      {
	        NewSms = 1;
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <HAL_UART_RxCpltCallback+0x178>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	701a      	strb	r2, [r3, #0]
	        checkNewMes = 0;
 80012fa:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <HAL_UART_RxCpltCallback+0x16c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]
	      }
	    }
	  }
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40008000 	.word	0x40008000
 800130c:	200002dc 	.word	0x200002dc
 8001310:	20000376 	.word	0x20000376
 8001314:	20000372 	.word	0x20000372
 8001318:	2000051c 	.word	0x2000051c
 800131c:	20000278 	.word	0x20000278
 8001320:	20000375 	.word	0x20000375
 8001324:	40013800 	.word	0x40013800
 8001328:	2000072c 	.word	0x2000072c
 800132c:	20000610 	.word	0x20000610
 8001330:	20000378 	.word	0x20000378
 8001334:	200003ac 	.word	0x200003ac
 8001338:	20000382 	.word	0x20000382
 800133c:	20000383 	.word	0x20000383
 8001340:	20000308 	.word	0x20000308
 8001344:	20000381 	.word	0x20000381

08001348 <check_Valid_Header>:
		return 1;
	} else return 0;
}
//-----------------------Take Position-------------------------//
uint8_t check_Valid_Header(char *Rx_Buffer, uint8_t case_return)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	70fb      	strb	r3, [r7, #3]
//	while (end_Buffer != 1)
//	{
//		HAL_UART_Receive_IT(&hlpuart1, (uint8_t*)Rx_Data, 1);
//	}
	char header[6] = {0};
 8001354:	f107 0308 	add.w	r3, r7, #8
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	809a      	strh	r2, [r3, #4]
	end_Buffer = 0;
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <check_Valid_Header+0xac>)
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < MAX_ARRAY; i++)
 8001364:	2300      	movs	r3, #0
 8001366:	81fb      	strh	r3, [r7, #14]
 8001368:	e03b      	b.n	80013e2 <check_Valid_Header+0x9a>
	{
		if (Rx_Buffer[i] == '$')
 800136a:	89fb      	ldrh	r3, [r7, #14]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	4413      	add	r3, r2
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b24      	cmp	r3, #36	; 0x24
 8001374:	d132      	bne.n	80013dc <check_Valid_Header+0x94>
		{
			strncpy(header, Rx_Buffer + i + 1, 5);
 8001376:	89fb      	ldrh	r3, [r7, #14]
 8001378:	3301      	adds	r3, #1
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	18d1      	adds	r1, r2, r3
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	2205      	movs	r2, #5
 8001384:	4618      	mov	r0, r3
 8001386:	f007 ffc7 	bl	8009318 <strncpy>
			if (strstr(header, "GPGGA"))
 800138a:	f107 0308 	add.w	r3, r7, #8
 800138e:	491a      	ldr	r1, [pc, #104]	; (80013f8 <check_Valid_Header+0xb0>)
 8001390:	4618      	mov	r0, r3
 8001392:	f007 ffd6 	bl	8009342 <strstr>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d009      	beq.n	80013b0 <check_Valid_Header+0x68>
			{
				if (case_return == 0) return 1;
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <check_Valid_Header+0x5e>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e021      	b.n	80013ea <check_Valid_Header+0xa2>
				else return (i+1);
 80013a6:	89fb      	ldrh	r3, [r7, #14]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	3301      	adds	r3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	e01c      	b.n	80013ea <check_Valid_Header+0xa2>
			} else
			if (strstr(header, "GPRMC"))
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	4911      	ldr	r1, [pc, #68]	; (80013fc <check_Valid_Header+0xb4>)
 80013b6:	4618      	mov	r0, r3
 80013b8:	f007 ffc3 	bl	8009342 <strstr>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d009      	beq.n	80013d6 <check_Valid_Header+0x8e>
			{
				if (case_return == 0) return 2;
 80013c2:	78fb      	ldrb	r3, [r7, #3]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d101      	bne.n	80013cc <check_Valid_Header+0x84>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e00e      	b.n	80013ea <check_Valid_Header+0xa2>
				else return (i+1);
 80013cc:	89fb      	ldrh	r3, [r7, #14]
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	3301      	adds	r3, #1
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	e009      	b.n	80013ea <check_Valid_Header+0xa2>
			} else
//			HAL_UART_Receive_IT(&hlpuart1, (uint8_t*)Rx_Data, 1);
		    flag_Alarm = 2;
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <check_Valid_Header+0xb8>)
 80013d8:	2202      	movs	r2, #2
 80013da:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < MAX_ARRAY; i++)
 80013dc:	89fb      	ldrh	r3, [r7, #14]
 80013de:	3301      	adds	r3, #1
 80013e0:	81fb      	strh	r3, [r7, #14]
 80013e2:	89fb      	ldrh	r3, [r7, #14]
 80013e4:	2b63      	cmp	r3, #99	; 0x63
 80013e6:	d9c0      	bls.n	800136a <check_Valid_Header+0x22>
		}
	}
	return 0;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000375 	.word	0x20000375
 80013f8:	0800e688 	.word	0x0800e688
 80013fc:	0800e690 	.word	0x0800e690
 8001400:	20000034 	.word	0x20000034

08001404 <take_Coordinate>:

uint8_t take_Coordinate(char *Rx_Buffer)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	uint8_t start_pos = check_Valid_Header(Rx_Buffer, 1);
 800140c:	2101      	movs	r1, #1
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ff9a 	bl	8001348 <check_Valid_Header>
 8001414:	4603      	mov	r3, r0
 8001416:	73fb      	strb	r3, [r7, #15]
	uint8_t valid_Header = check_Valid_Header(Rx_Buffer, 0);
 8001418:	2100      	movs	r1, #0
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ff94 	bl	8001348 <check_Valid_Header>
 8001420:	4603      	mov	r3, r0
 8001422:	75fb      	strb	r3, [r7, #23]
	while (valid_Header == 0)
 8001424:	e00a      	b.n	800143c <take_Coordinate+0x38>
	{
		HAL_UART_Receive_IT(&hlpuart1, (uint8_t*)Rx_Data, 1);
 8001426:	2201      	movs	r2, #1
 8001428:	4945      	ldr	r1, [pc, #276]	; (8001540 <take_Coordinate+0x13c>)
 800142a:	4846      	ldr	r0, [pc, #280]	; (8001544 <take_Coordinate+0x140>)
 800142c:	f006 fe80 	bl	8008130 <HAL_UART_Receive_IT>
		valid_Header = check_Valid_Header(Rx_Buffer, 0);
 8001430:	2100      	movs	r1, #0
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ff88 	bl	8001348 <check_Valid_Header>
 8001438:	4603      	mov	r3, r0
 800143a:	75fb      	strb	r3, [r7, #23]
	while (valid_Header == 0)
 800143c:	7dfb      	ldrb	r3, [r7, #23]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f1      	beq.n	8001426 <take_Coordinate+0x22>
	}
	uint8_t lat_domain, lng_domain;
	if (check_Valid_Header(Rx_Buffer, 0) == 1)
 8001442:	2100      	movs	r1, #0
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff7f 	bl	8001348 <check_Valid_Header>
 800144a:	4603      	mov	r3, r0
 800144c:	2b01      	cmp	r3, #1
 800144e:	d104      	bne.n	800145a <take_Coordinate+0x56>
	{
		lat_domain = 3;
 8001450:	2303      	movs	r3, #3
 8001452:	75bb      	strb	r3, [r7, #22]
		lng_domain = 5;
 8001454:	2305      	movs	r3, #5
 8001456:	757b      	strb	r3, [r7, #21]
 8001458:	e00d      	b.n	8001476 <take_Coordinate+0x72>
	} else
	if (check_Valid_Header(Rx_Buffer, 0) == 2)
 800145a:	2100      	movs	r1, #0
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff73 	bl	8001348 <check_Valid_Header>
 8001462:	4603      	mov	r3, r0
 8001464:	2b02      	cmp	r3, #2
 8001466:	d104      	bne.n	8001472 <take_Coordinate+0x6e>
	{
		lat_domain = 4;
 8001468:	2304      	movs	r3, #4
 800146a:	75bb      	strb	r3, [r7, #22]
		lng_domain = 6;
 800146c:	2306      	movs	r3, #6
 800146e:	757b      	strb	r3, [r7, #21]
 8001470:	e001      	b.n	8001476 <take_Coordinate+0x72>
	} else return 0;
 8001472:	2300      	movs	r3, #0
 8001474:	e060      	b.n	8001538 <take_Coordinate+0x134>

	uint8_t domain = 1; //mien trong cau truc NMEA
 8001476:	2301      	movs	r3, #1
 8001478:	753b      	strb	r3, [r7, #20]
	for (uint16_t i = start_pos; i < MAX_ARRAY; i++)
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	827b      	strh	r3, [r7, #18]
 800147e:	e054      	b.n	800152a <take_Coordinate+0x126>
	{
		if (Rx_Buffer[i] == ',')
 8001480:	8a7b      	ldrh	r3, [r7, #18]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b2c      	cmp	r3, #44	; 0x2c
 800148a:	d14b      	bne.n	8001524 <take_Coordinate+0x120>
		{
			domain++;
 800148c:	7d3b      	ldrb	r3, [r7, #20]
 800148e:	3301      	adds	r3, #1
 8001490:	753b      	strb	r3, [r7, #20]
			if (domain == lat_domain)
 8001492:	7d3a      	ldrb	r2, [r7, #20]
 8001494:	7dbb      	ldrb	r3, [r7, #22]
 8001496:	429a      	cmp	r2, r3
 8001498:	d11f      	bne.n	80014da <take_Coordinate+0xd6>
			{
				for (uint8_t  j = i+1; j < i+9; j++)
 800149a:	8a7b      	ldrh	r3, [r7, #18]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	3301      	adds	r3, #1
 80014a0:	747b      	strb	r3, [r7, #17]
 80014a2:	e00a      	b.n	80014ba <take_Coordinate+0xb6>
					if (Rx_Buffer[j] == ',' )
 80014a4:	7c7b      	ldrb	r3, [r7, #17]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b2c      	cmp	r3, #44	; 0x2c
 80014ae:	d101      	bne.n	80014b4 <take_Coordinate+0xb0>
						return 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	e041      	b.n	8001538 <take_Coordinate+0x134>
				for (uint8_t  j = i+1; j < i+9; j++)
 80014b4:	7c7b      	ldrb	r3, [r7, #17]
 80014b6:	3301      	adds	r3, #1
 80014b8:	747b      	strb	r3, [r7, #17]
 80014ba:	7c7a      	ldrb	r2, [r7, #17]
 80014bc:	8a7b      	ldrh	r3, [r7, #18]
 80014be:	3309      	adds	r3, #9
 80014c0:	429a      	cmp	r2, r3
 80014c2:	dbef      	blt.n	80014a4 <take_Coordinate+0xa0>
				strncpy(lat_Array, Rx_Buffer + i + 1, 9);
 80014c4:	8a7b      	ldrh	r3, [r7, #18]
 80014c6:	3301      	adds	r3, #1
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	4413      	add	r3, r2
 80014cc:	2209      	movs	r2, #9
 80014ce:	4619      	mov	r1, r3
 80014d0:	481d      	ldr	r0, [pc, #116]	; (8001548 <take_Coordinate+0x144>)
 80014d2:	f007 ff21 	bl	8009318 <strncpy>
				__NOP();
 80014d6:	bf00      	nop
 80014d8:	e024      	b.n	8001524 <take_Coordinate+0x120>
			} else
			if (domain == lng_domain)
 80014da:	7d3a      	ldrb	r2, [r7, #20]
 80014dc:	7d7b      	ldrb	r3, [r7, #21]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d120      	bne.n	8001524 <take_Coordinate+0x120>
			{
				for (uint8_t  j = i+1; j < i+10; j++)
 80014e2:	8a7b      	ldrh	r3, [r7, #18]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	3301      	adds	r3, #1
 80014e8:	743b      	strb	r3, [r7, #16]
 80014ea:	e00a      	b.n	8001502 <take_Coordinate+0xfe>
					if (Rx_Buffer[j] == ',' )
 80014ec:	7c3b      	ldrb	r3, [r7, #16]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b2c      	cmp	r3, #44	; 0x2c
 80014f6:	d101      	bne.n	80014fc <take_Coordinate+0xf8>
						return 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	e01d      	b.n	8001538 <take_Coordinate+0x134>
				for (uint8_t  j = i+1; j < i+10; j++)
 80014fc:	7c3b      	ldrb	r3, [r7, #16]
 80014fe:	3301      	adds	r3, #1
 8001500:	743b      	strb	r3, [r7, #16]
 8001502:	7c3a      	ldrb	r2, [r7, #16]
 8001504:	8a7b      	ldrh	r3, [r7, #18]
 8001506:	330a      	adds	r3, #10
 8001508:	429a      	cmp	r2, r3
 800150a:	dbef      	blt.n	80014ec <take_Coordinate+0xe8>
				strncpy(lng_Array, Rx_Buffer + i + 1, 10);
 800150c:	8a7b      	ldrh	r3, [r7, #18]
 800150e:	3301      	adds	r3, #1
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	4413      	add	r3, r2
 8001514:	220a      	movs	r2, #10
 8001516:	4619      	mov	r1, r3
 8001518:	480c      	ldr	r0, [pc, #48]	; (800154c <take_Coordinate+0x148>)
 800151a:	f007 fefd 	bl	8009318 <strncpy>
				__NOP();
 800151e:	bf00      	nop
				return 1;
 8001520:	2301      	movs	r3, #1
 8001522:	e009      	b.n	8001538 <take_Coordinate+0x134>
	for (uint16_t i = start_pos; i < MAX_ARRAY; i++)
 8001524:	8a7b      	ldrh	r3, [r7, #18]
 8001526:	3301      	adds	r3, #1
 8001528:	827b      	strh	r3, [r7, #18]
 800152a:	8a7b      	ldrh	r3, [r7, #18]
 800152c:	2b63      	cmp	r3, #99	; 0x63
 800152e:	d9a7      	bls.n	8001480 <take_Coordinate+0x7c>
			}
		}
	} flag_Alarm = 2;
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <take_Coordinate+0x14c>)
 8001532:	2202      	movs	r2, #2
 8001534:	701a      	strb	r2, [r3, #0]
	return 0;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	200002dc 	.word	0x200002dc
 8001544:	2000051c 	.word	0x2000051c
 8001548:	200002e0 	.word	0x200002e0
 800154c:	200002ec 	.word	0x200002ec
 8001550:	20000034 	.word	0x20000034

08001554 <send_Coordinate_to_Serve>:
uint8_t send_Coordinate_to_Serve(char *lat_Array, char *lng_Array)
{
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	b08d      	sub	sp, #52	; 0x34
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
	char location_str_1[5] = {0};
 800155e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	711a      	strb	r2, [r3, #4]
	char location_str_2[5] = {0};
 8001568:	f107 0320 	add.w	r3, r7, #32
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	711a      	strb	r2, [r3, #4]
	volatile float lat_Location_Update, lng_Location_Update;
	if (take_Coordinate(Rx_Buffer) == 1)
 8001572:	4865      	ldr	r0, [pc, #404]	; (8001708 <send_Coordinate_to_Serve+0x1b4>)
 8001574:	f7ff ff46 	bl	8001404 <take_Coordinate>
 8001578:	4603      	mov	r3, r0
 800157a:	2b01      	cmp	r3, #1
 800157c:	f040 80be 	bne.w	80016fc <send_Coordinate_to_Serve+0x1a8>
	{
		//-------------------------	Latitude ----------------------------//
		volatile float lat_1 = 0, lat_2 = 0;
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	f04f 0300 	mov.w	r3, #0
 800158a:	613b      	str	r3, [r7, #16]
		strncpy(location_str_1, lat_Array, 2);	lat_1 = strtof(location_str_1,NULL);
 800158c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001590:	2202      	movs	r2, #2
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4618      	mov	r0, r3
 8001596:	f007 febf 	bl	8009318 <strncpy>
 800159a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f008 fcf9 	bl	8009f98 <strtof>
 80015a6:	eef0 7a40 	vmov.f32	s15, s0
 80015aa:	edc7 7a05 	vstr	s15, [r7, #20]
		strncpy(location_str_2, lat_Array + 2, 7);	lat_2 = strtof(location_str_2,NULL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	1c99      	adds	r1, r3, #2
 80015b2:	f107 0320 	add.w	r3, r7, #32
 80015b6:	2207      	movs	r2, #7
 80015b8:	4618      	mov	r0, r3
 80015ba:	f007 fead 	bl	8009318 <strncpy>
 80015be:	f107 0320 	add.w	r3, r7, #32
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f008 fce7 	bl	8009f98 <strtof>
 80015ca:	eef0 7a40 	vmov.f32	s15, s0
 80015ce:	edc7 7a04 	vstr	s15, [r7, #16]
		lat_Location_Update = lat_1 + lat_2/60;
 80015d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80015d6:	eddf 6a4d 	vldr	s13, [pc, #308]	; 800170c <send_Coordinate_to_Serve+0x1b8>
 80015da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80015de:	edd7 7a05 	vldr	s15, [r7, #20]
 80015e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e6:	edc7 7a07 	vstr	s15, [r7, #28]
		gcvt(lat_Location_Update, 9, Latitude_ARR);
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ff5b 	bl	80004a8 <__aeabi_f2d>
 80015f2:	4603      	mov	r3, r0
 80015f4:	460c      	mov	r4, r1
 80015f6:	4946      	ldr	r1, [pc, #280]	; (8001710 <send_Coordinate_to_Serve+0x1bc>)
 80015f8:	2009      	movs	r0, #9
 80015fa:	ec44 3b10 	vmov	d0, r3, r4
 80015fe:	f007 fe11 	bl	8009224 <gcvt>
		//-------------------------- Longitude --------------------------//
		volatile float lng_1 = 0, lng_2 = 0;
 8001602:	f04f 0300 	mov.w	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	f04f 0300 	mov.w	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
		strncpy(location_str_1, lng_Array, 3);	lng_1 = strtof(location_str_1,NULL);
 800160e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001612:	2203      	movs	r2, #3
 8001614:	6839      	ldr	r1, [r7, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f007 fe7e 	bl	8009318 <strncpy>
 800161c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f008 fcb8 	bl	8009f98 <strtof>
 8001628:	eef0 7a40 	vmov.f32	s15, s0
 800162c:	edc7 7a03 	vstr	s15, [r7, #12]
		strncpy(location_str_2, lng_Array + 3, 7);	lng_2 = strtof(location_str_2,NULL);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	1cd9      	adds	r1, r3, #3
 8001634:	f107 0320 	add.w	r3, r7, #32
 8001638:	2207      	movs	r2, #7
 800163a:	4618      	mov	r0, r3
 800163c:	f007 fe6c 	bl	8009318 <strncpy>
 8001640:	f107 0320 	add.w	r3, r7, #32
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f008 fca6 	bl	8009f98 <strtof>
 800164c:	eef0 7a40 	vmov.f32	s15, s0
 8001650:	edc7 7a02 	vstr	s15, [r7, #8]
		lng_Location_Update = lng_1 + lng_2/60;
 8001654:	edd7 7a02 	vldr	s15, [r7, #8]
 8001658:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800170c <send_Coordinate_to_Serve+0x1b8>
 800165c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001660:	edd7 7a03 	vldr	s15, [r7, #12]
 8001664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001668:	edc7 7a06 	vstr	s15, [r7, #24]
		gcvt(lng_Location_Update, 10, Longtitude_ARR);
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe ff1a 	bl	80004a8 <__aeabi_f2d>
 8001674:	4603      	mov	r3, r0
 8001676:	460c      	mov	r4, r1
 8001678:	4926      	ldr	r1, [pc, #152]	; (8001714 <send_Coordinate_to_Serve+0x1c0>)
 800167a:	200a      	movs	r0, #10
 800167c:	ec44 3b10 	vmov	d0, r3, r4
 8001680:	f007 fdd0 	bl	8009224 <gcvt>
		__NOP();
 8001684:	bf00      	nop
		distance1 = Haversine(lat_Location, lng_Location, lat_Location_Update, lng_Location_Update);
 8001686:	4b24      	ldr	r3, [pc, #144]	; (8001718 <send_Coordinate_to_Serve+0x1c4>)
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	4b23      	ldr	r3, [pc, #140]	; (800171c <send_Coordinate_to_Serve+0x1c8>)
 800168e:	ed93 7a00 	vldr	s14, [r3]
 8001692:	edd7 6a07 	vldr	s13, [r7, #28]
 8001696:	ed97 6a06 	vldr	s12, [r7, #24]
 800169a:	eef0 1a46 	vmov.f32	s3, s12
 800169e:	eeb0 1a66 	vmov.f32	s2, s13
 80016a2:	eef0 0a47 	vmov.f32	s1, s14
 80016a6:	eeb0 0a67 	vmov.f32	s0, s15
 80016aa:	f000 f83d 	bl	8001728 <Haversine>
 80016ae:	eef0 7a40 	vmov.f32	s15, s0
 80016b2:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <send_Coordinate_to_Serve+0x1cc>)
 80016b4:	edc3 7a00 	vstr	s15, [r3]
	//		if (distance1 > 0.01)
	//		{
				lat_Location = lat_Location_Update;
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	4a17      	ldr	r2, [pc, #92]	; (8001718 <send_Coordinate_to_Serve+0x1c4>)
 80016bc:	6013      	str	r3, [r2, #0]
				lng_Location = lng_Location_Update;
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	4a16      	ldr	r2, [pc, #88]	; (800171c <send_Coordinate_to_Serve+0x1c8>)
 80016c2:	6013      	str	r3, [r2, #0]
				gcvt(lat_Location, 10, Latitude_ARR);
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <send_Coordinate_to_Serve+0x1c4>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe feed 	bl	80004a8 <__aeabi_f2d>
 80016ce:	4603      	mov	r3, r0
 80016d0:	460c      	mov	r4, r1
 80016d2:	490f      	ldr	r1, [pc, #60]	; (8001710 <send_Coordinate_to_Serve+0x1bc>)
 80016d4:	200a      	movs	r0, #10
 80016d6:	ec44 3b10 	vmov	d0, r3, r4
 80016da:	f007 fda3 	bl	8009224 <gcvt>
				gcvt(lng_Location, 10, Longtitude_ARR);
 80016de:	4b0f      	ldr	r3, [pc, #60]	; (800171c <send_Coordinate_to_Serve+0x1c8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe fee0 	bl	80004a8 <__aeabi_f2d>
 80016e8:	4603      	mov	r3, r0
 80016ea:	460c      	mov	r4, r1
 80016ec:	4909      	ldr	r1, [pc, #36]	; (8001714 <send_Coordinate_to_Serve+0x1c0>)
 80016ee:	200a      	movs	r0, #10
 80016f0:	ec44 3b10 	vmov	d0, r3, r4
 80016f4:	f007 fd96 	bl	8009224 <gcvt>
				return 1;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <send_Coordinate_to_Serve+0x1aa>
		//}
	} else
		return 0;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3734      	adds	r7, #52	; 0x34
 8001702:	46bd      	mov	sp, r7
 8001704:	bd90      	pop	{r4, r7, pc}
 8001706:	bf00      	nop
 8001708:	20000278 	.word	0x20000278
 800170c:	42700000 	.word	0x42700000
 8001710:	20000000 	.word	0x20000000
 8001714:	2000000c 	.word	0x2000000c
 8001718:	2000002c 	.word	0x2000002c
 800171c:	20000030 	.word	0x20000030
 8001720:	2000060c 	.word	0x2000060c
 8001724:	00000000 	.word	0x00000000

08001728 <Haversine>:
float Haversine(float Lat_Center, float Long_Center, float Lat_Location, float Long_Location)
{
 8001728:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800172c:	b08c      	sub	sp, #48	; 0x30
 800172e:	af00      	add	r7, sp, #0
 8001730:	ed87 0a03 	vstr	s0, [r7, #12]
 8001734:	edc7 0a02 	vstr	s1, [r7, #8]
 8001738:	ed87 1a01 	vstr	s2, [r7, #4]
 800173c:	edc7 1a00 	vstr	s3, [r7]
	float distance, hav;
	float lat1, lat2, long1, long2, dlat, dlong;

	/*Chuyen do sang radian*/
	lat1 = Lat_Location / (180 / M_PI);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7fe feb1 	bl	80004a8 <__aeabi_f2d>
 8001746:	a376      	add	r3, pc, #472	; (adr r3, 8001920 <Haversine+0x1f8>)
 8001748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174c:	f7ff f82e 	bl	80007ac <__aeabi_ddiv>
 8001750:	4603      	mov	r3, r0
 8001752:	460c      	mov	r4, r1
 8001754:	4618      	mov	r0, r3
 8001756:	4621      	mov	r1, r4
 8001758:	f7ff f9f6 	bl	8000b48 <__aeabi_d2f>
 800175c:	4603      	mov	r3, r0
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
	long1 = Long_Location / (180 / M_PI);
 8001760:	6838      	ldr	r0, [r7, #0]
 8001762:	f7fe fea1 	bl	80004a8 <__aeabi_f2d>
 8001766:	a36e      	add	r3, pc, #440	; (adr r3, 8001920 <Haversine+0x1f8>)
 8001768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176c:	f7ff f81e 	bl	80007ac <__aeabi_ddiv>
 8001770:	4603      	mov	r3, r0
 8001772:	460c      	mov	r4, r1
 8001774:	4618      	mov	r0, r3
 8001776:	4621      	mov	r1, r4
 8001778:	f7ff f9e6 	bl	8000b48 <__aeabi_d2f>
 800177c:	4603      	mov	r3, r0
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28
	lat2 = Lat_Center / (180 / M_PI);
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f7fe fe91 	bl	80004a8 <__aeabi_f2d>
 8001786:	a366      	add	r3, pc, #408	; (adr r3, 8001920 <Haversine+0x1f8>)
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	f7ff f80e 	bl	80007ac <__aeabi_ddiv>
 8001790:	4603      	mov	r3, r0
 8001792:	460c      	mov	r4, r1
 8001794:	4618      	mov	r0, r3
 8001796:	4621      	mov	r1, r4
 8001798:	f7ff f9d6 	bl	8000b48 <__aeabi_d2f>
 800179c:	4603      	mov	r3, r0
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
	long2 = Long_Center / (180 / M_PI);
 80017a0:	68b8      	ldr	r0, [r7, #8]
 80017a2:	f7fe fe81 	bl	80004a8 <__aeabi_f2d>
 80017a6:	a35e      	add	r3, pc, #376	; (adr r3, 8001920 <Haversine+0x1f8>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f7fe fffe 	bl	80007ac <__aeabi_ddiv>
 80017b0:	4603      	mov	r3, r0
 80017b2:	460c      	mov	r4, r1
 80017b4:	4618      	mov	r0, r3
 80017b6:	4621      	mov	r1, r4
 80017b8:	f7ff f9c6 	bl	8000b48 <__aeabi_d2f>
 80017bc:	4603      	mov	r3, r0
 80017be:	623b      	str	r3, [r7, #32]

	/*Khoang cach giua latitude va longtitude*/
	dlat = lat2 - lat1;
 80017c0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80017c4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80017c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017cc:	edc7 7a07 	vstr	s15, [r7, #28]
	dlong = long2 - long1;
 80017d0:	ed97 7a08 	vldr	s14, [r7, #32]
 80017d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017dc:	edc7 7a06 	vstr	s15, [r7, #24]

	/*Cong thuc haversine*/
	hav = sqrt (pow (sin(dlat / 2), 2) + cos (lat1) * cos (lat2) * pow(sin(dlong/2), 2));
 80017e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80017e4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80017e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017ec:	ee16 0a90 	vmov	r0, s13
 80017f0:	f7fe fe5a 	bl	80004a8 <__aeabi_f2d>
 80017f4:	4603      	mov	r3, r0
 80017f6:	460c      	mov	r4, r1
 80017f8:	ec44 3b10 	vmov	d0, r3, r4
 80017fc:	f00a fc94 	bl	800c128 <sin>
 8001800:	eeb0 7a40 	vmov.f32	s14, s0
 8001804:	eef0 7a60 	vmov.f32	s15, s1
 8001808:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8001918 <Haversine+0x1f0>
 800180c:	eeb0 0a47 	vmov.f32	s0, s14
 8001810:	eef0 0a67 	vmov.f32	s1, s15
 8001814:	f00a fd28 	bl	800c268 <pow>
 8001818:	ec59 8b10 	vmov	r8, r9, d0
 800181c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800181e:	f7fe fe43 	bl	80004a8 <__aeabi_f2d>
 8001822:	4603      	mov	r3, r0
 8001824:	460c      	mov	r4, r1
 8001826:	ec44 3b10 	vmov	d0, r3, r4
 800182a:	f00a fc39 	bl	800c0a0 <cos>
 800182e:	ec55 4b10 	vmov	r4, r5, d0
 8001832:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001834:	f7fe fe38 	bl	80004a8 <__aeabi_f2d>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	ec43 2b10 	vmov	d0, r2, r3
 8001840:	f00a fc2e 	bl	800c0a0 <cos>
 8001844:	ec53 2b10 	vmov	r2, r3, d0
 8001848:	4620      	mov	r0, r4
 800184a:	4629      	mov	r1, r5
 800184c:	f7fe fe84 	bl	8000558 <__aeabi_dmul>
 8001850:	4603      	mov	r3, r0
 8001852:	460c      	mov	r4, r1
 8001854:	4625      	mov	r5, r4
 8001856:	461c      	mov	r4, r3
 8001858:	edd7 7a06 	vldr	s15, [r7, #24]
 800185c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001860:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001864:	ee16 0a90 	vmov	r0, s13
 8001868:	f7fe fe1e 	bl	80004a8 <__aeabi_f2d>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	ec43 2b10 	vmov	d0, r2, r3
 8001874:	f00a fc58 	bl	800c128 <sin>
 8001878:	eeb0 7a40 	vmov.f32	s14, s0
 800187c:	eef0 7a60 	vmov.f32	s15, s1
 8001880:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8001918 <Haversine+0x1f0>
 8001884:	eeb0 0a47 	vmov.f32	s0, s14
 8001888:	eef0 0a67 	vmov.f32	s1, s15
 800188c:	f00a fcec 	bl	800c268 <pow>
 8001890:	ec53 2b10 	vmov	r2, r3, d0
 8001894:	4620      	mov	r0, r4
 8001896:	4629      	mov	r1, r5
 8001898:	f7fe fe5e 	bl	8000558 <__aeabi_dmul>
 800189c:	4603      	mov	r3, r0
 800189e:	460c      	mov	r4, r1
 80018a0:	461a      	mov	r2, r3
 80018a2:	4623      	mov	r3, r4
 80018a4:	4640      	mov	r0, r8
 80018a6:	4649      	mov	r1, r9
 80018a8:	f7fe fca0 	bl	80001ec <__adddf3>
 80018ac:	4603      	mov	r3, r0
 80018ae:	460c      	mov	r4, r1
 80018b0:	ec44 3b17 	vmov	d7, r3, r4
 80018b4:	eeb0 0a47 	vmov.f32	s0, s14
 80018b8:	eef0 0a67 	vmov.f32	s1, s15
 80018bc:	f00a fe44 	bl	800c548 <sqrt>
 80018c0:	ec54 3b10 	vmov	r3, r4, d0
 80018c4:	4618      	mov	r0, r3
 80018c6:	4621      	mov	r1, r4
 80018c8:	f7ff f93e 	bl	8000b48 <__aeabi_d2f>
 80018cc:	4603      	mov	r3, r0
 80018ce:	617b      	str	r3, [r7, #20]
	distance = 2 * 6371 * asin(hav);
 80018d0:	6978      	ldr	r0, [r7, #20]
 80018d2:	f7fe fde9 	bl	80004a8 <__aeabi_f2d>
 80018d6:	4603      	mov	r3, r0
 80018d8:	460c      	mov	r4, r1
 80018da:	ec44 3b10 	vmov	d0, r3, r4
 80018de:	f00a fc6b 	bl	800c1b8 <asin>
 80018e2:	ec51 0b10 	vmov	r0, r1, d0
 80018e6:	a310      	add	r3, pc, #64	; (adr r3, 8001928 <Haversine+0x200>)
 80018e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ec:	f7fe fe34 	bl	8000558 <__aeabi_dmul>
 80018f0:	4603      	mov	r3, r0
 80018f2:	460c      	mov	r4, r1
 80018f4:	4618      	mov	r0, r3
 80018f6:	4621      	mov	r1, r4
 80018f8:	f7ff f926 	bl	8000b48 <__aeabi_d2f>
 80018fc:	4603      	mov	r3, r0
 80018fe:	613b      	str	r3, [r7, #16]

	return distance;
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	ee07 3a90 	vmov	s15, r3
}
 8001906:	eeb0 0a67 	vmov.f32	s0, s15
 800190a:	3730      	adds	r7, #48	; 0x30
 800190c:	46bd      	mov	sp, r7
 800190e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001912:	bf00      	nop
 8001914:	f3af 8000 	nop.w
 8001918:	00000000 	.word	0x00000000
 800191c:	40000000 	.word	0x40000000
 8001920:	1a63c1f8 	.word	0x1a63c1f8
 8001924:	404ca5dc 	.word	0x404ca5dc
 8001928:	00000000 	.word	0x00000000
 800192c:	40c8e300 	.word	0x40c8e300

08001930 <ON_OFF_Pulse>:
//-----------------------ON_OF_Pulse-------------------------//
void ON_OFF_Pulse(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	DelayMicro(300);
 8001934:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001938:	f7ff fad6 	bl	8000ee8 <DelayMicro>
    HAL_GPIO_WritePin(PIN_PWR_GPIO_Port, PIN_PWR_Pin, GPIO_PIN_RESET);
 800193c:	2200      	movs	r2, #0
 800193e:	2102      	movs	r1, #2
 8001940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001944:	f003 feee 	bl	8005724 <HAL_GPIO_WritePin>
    DelayMicro(300);
 8001948:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800194c:	f7ff facc 	bl	8000ee8 <DelayMicro>
    HAL_GPIO_WritePin(PIN_PWR_GPIO_Port, PIN_PWR_Pin, GPIO_PIN_SET);
 8001950:	2201      	movs	r2, #1
 8001952:	2102      	movs	r1, #2
 8001954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001958:	f003 fee4 	bl	8005724 <HAL_GPIO_WritePin>
    DelayMicro(300);
 800195c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001960:	f7ff fac2 	bl	8000ee8 <DelayMicro>
    HAL_GPIO_WritePin(PIN_PWR_GPIO_Port, PIN_PWR_Pin, GPIO_PIN_RESET);
 8001964:	2200      	movs	r2, #0
 8001966:	2102      	movs	r1, #2
 8001968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196c:	f003 feda 	bl	8005724 <HAL_GPIO_WritePin>
    HAL_Delay(800);
 8001970:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001974:	f002 fb78 	bl	8004068 <HAL_Delay>
	HAL_GPIO_WritePin(PIN_PWR_GPIO_Port, PIN_PWR_Pin, GPIO_PIN_RESET);
 8001978:	2200      	movs	r2, #0
 800197a:	2102      	movs	r1, #2
 800197c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001980:	f003 fed0 	bl	8005724 <HAL_GPIO_WritePin>
	DelayMicro(300);
 8001984:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001988:	f7ff faae 	bl	8000ee8 <DelayMicro>
	HAL_GPIO_WritePin(PIN_PWR_GPIO_Port, PIN_PWR_Pin, GPIO_PIN_SET);
 800198c:	2201      	movs	r2, #1
 800198e:	2102      	movs	r1, #2
 8001990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001994:	f003 fec6 	bl	8005724 <HAL_GPIO_WritePin>
	DelayMicro(300);
 8001998:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800199c:	f7ff faa4 	bl	8000ee8 <DelayMicro>
	HAL_GPIO_WritePin(PIN_PWR_GPIO_Port, PIN_PWR_Pin, GPIO_PIN_RESET);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2102      	movs	r1, #2
 80019a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a8:	f003 febc 	bl	8005724 <HAL_GPIO_WritePin>
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <convert_Mode>:
void convert_Mode(uint8_t mode)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
	if (mode)
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00d      	beq.n	80019dc <convert_Mode+0x2c>
	{
	   while (HAL_GPIO_ReadPin(PIN_WAKEUP_GPIO_Port, PIN_WAKEUP_Pin) != 1)
 80019c0:	e001      	b.n	80019c6 <convert_Mode+0x16>
		   ON_OFF_Pulse();
 80019c2:	f7ff ffb5 	bl	8001930 <ON_OFF_Pulse>
	   while (HAL_GPIO_ReadPin(PIN_WAKEUP_GPIO_Port, PIN_WAKEUP_Pin) != 1)
 80019c6:	2110      	movs	r1, #16
 80019c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019cc:	f003 fe92 	bl	80056f4 <HAL_GPIO_ReadPin>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d1f5      	bne.n	80019c2 <convert_Mode+0x12>
	} else
	   while (HAL_GPIO_ReadPin(PIN_WAKEUP_GPIO_Port, PIN_WAKEUP_Pin) == 1)
		   ON_OFF_Pulse();
}
 80019d6:	e009      	b.n	80019ec <convert_Mode+0x3c>
		   ON_OFF_Pulse();
 80019d8:	f7ff ffaa 	bl	8001930 <ON_OFF_Pulse>
	   while (HAL_GPIO_ReadPin(PIN_WAKEUP_GPIO_Port, PIN_WAKEUP_Pin) == 1)
 80019dc:	2110      	movs	r1, #16
 80019de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e2:	f003 fe87 	bl	80056f4 <HAL_GPIO_ReadPin>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d0f5      	beq.n	80019d8 <convert_Mode+0x28>
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_GPIO_EXTI_Callback>:
//-----------------------Deteching-------------------------//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == DETACH_PIN_Pin)
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	2b80      	cmp	r3, #128	; 0x80
 8001a02:	d120      	bne.n	8001a46 <HAL_GPIO_EXTI_Callback+0x52>
  {
    for(int i = 0; i < 100000; i++); //Delay
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	e002      	b.n	8001a10 <HAL_GPIO_EXTI_Callback+0x1c>
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	4a30      	ldr	r2, [pc, #192]	; (8001ad4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	ddf8      	ble.n	8001a0a <HAL_GPIO_EXTI_Callback+0x16>
    if (HAL_GPIO_ReadPin(GPIOA, DETACH_PIN_Pin))
 8001a18:	2180      	movs	r1, #128	; 0x80
 8001a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a1e:	f003 fe69 	bl	80056f4 <HAL_GPIO_ReadPin>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_EXTI_Callback+0x3c>
      Detach = 1;
 8001a28:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
 8001a2e:	e002      	b.n	8001a36 <HAL_GPIO_EXTI_Callback+0x42>
    else Detach = 0;
 8001a30:	4b29      	ldr	r3, [pc, #164]	; (8001ad8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
    EXTI->PR1 |= DETACH_PIN_Pin;
 8001a36:	4b29      	ldr	r3, [pc, #164]	; (8001adc <HAL_GPIO_EXTI_Callback+0xe8>)
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	4a28      	ldr	r2, [pc, #160]	; (8001adc <HAL_GPIO_EXTI_Callback+0xe8>)
 8001a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a40:	6153      	str	r3, [r2, #20]
    //Tắt treo Systick
    HAL_ResumeTick();
 8001a42:	f002 fb43 	bl	80040cc <HAL_ResumeTick>
  }
  if (GPIO_Pin == ALLOW_DETACH_PIN_Pin)
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d12f      	bne.n	8001aac <HAL_GPIO_EXTI_Callback+0xb8>
  {
    AllowDetach = 1;
 8001a4c:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <HAL_GPIO_EXTI_Callback+0xec>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 100000; i++); //Delay
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	e002      	b.n	8001a5e <HAL_GPIO_EXTI_Callback+0x6a>
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	ddf8      	ble.n	8001a58 <HAL_GPIO_EXTI_Callback+0x64>
    int timeout;
    while(!HAL_GPIO_ReadPin(GPIOA, ALLOW_DETACH_PIN_Pin) & (timeout < 50000)) // �?ợi đến khi thả nút nhấn trong khoảng th�?i gian nhất định
 8001a66:	e002      	b.n	8001a6e <HAL_GPIO_EXTI_Callback+0x7a>
    {
      timeout++;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	60fb      	str	r3, [r7, #12]
    while(!HAL_GPIO_ReadPin(GPIOA, ALLOW_DETACH_PIN_Pin) & (timeout < 50000)) // �?ợi đến khi thả nút nhấn trong khoảng th�?i gian nhất định
 8001a6e:	2101      	movs	r1, #1
 8001a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a74:	f003 fe3e 	bl	80056f4 <HAL_GPIO_ReadPin>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	bf0c      	ite	eq
 8001a7e:	2301      	moveq	r3, #1
 8001a80:	2300      	movne	r3, #0
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f24c 314f 	movw	r1, #49999	; 0xc34f
 8001a8a:	428b      	cmp	r3, r1
 8001a8c:	bfd4      	ite	le
 8001a8e:	2301      	movle	r3, #1
 8001a90:	2300      	movgt	r3, #0
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	4013      	ands	r3, r2
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1e5      	bne.n	8001a68 <HAL_GPIO_EXTI_Callback+0x74>
    }
    EXTI->PR1 |= ALLOW_DETACH_PIN_Pin;
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <HAL_GPIO_EXTI_Callback+0xe8>)
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <HAL_GPIO_EXTI_Callback+0xe8>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6153      	str	r3, [r2, #20]
    //Tắt treo Systick
    HAL_ResumeTick();
 8001aa8:	f002 fb10 	bl	80040cc <HAL_ResumeTick>
  }
  if(GPIO_Pin == RI_SIM_Pin)
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d10b      	bne.n	8001aca <HAL_GPIO_EXTI_Callback+0xd6>
  {
    /*Ngat danh thuc va thoat Low power mode trên STM32*/
    Ring = 1;
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
    __NOP();
 8001ab8:	bf00      	nop
    EXTI->PR1 |= RI_SIM_Pin; //Xóa pending ngắt
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <HAL_GPIO_EXTI_Callback+0xe8>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	4a07      	ldr	r2, [pc, #28]	; (8001adc <HAL_GPIO_EXTI_Callback+0xe8>)
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	6153      	str	r3, [r2, #20]
    //Tắt treo Systick
    HAL_ResumeTick();
 8001ac6:	f002 fb01 	bl	80040cc <HAL_ResumeTick>
  }
}
 8001aca:	bf00      	nop
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	0001869f 	.word	0x0001869f
 8001ad8:	2000037c 	.word	0x2000037c
 8001adc:	40010400 	.word	0x40010400
 8001ae0:	2000037e 	.word	0x2000037e
 8001ae4:	2000037b 	.word	0x2000037b

08001ae8 <deleteBuffer>:
//--------------------------------- Cac ham Module SIM ---------------------------------//
void deleteBuffer(char ch[], int sophantu)
/*Xoa bo dem*/
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
	for (int j = 0; j < sophantu; j++)
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	e007      	b.n	8001b08 <deleteBuffer+0x20>
	{
		ch[j] = '\0';
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < sophantu; j++)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	3301      	adds	r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	dbf3      	blt.n	8001af8 <deleteBuffer+0x10>
 	}
	Rx_index_sim = 0;
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <deleteBuffer+0x3c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	801a      	strh	r2, [r3, #0]
}
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000378 	.word	0x20000378

08001b28 <SaraU201Command>:
uint8_t SaraU201Command(char ch[], char str[], int timeout)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
	uint8_t CheckError = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	77fb      	strb	r3, [r7, #31]
	do
	{
		HAL_UART_Transmit(&huart1, (uint8_t *)ch, strlen(ch), 1000);
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f7fe fb49 	bl	80001d0 <strlen>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b46:	68f9      	ldr	r1, [r7, #12]
 8001b48:	481b      	ldr	r0, [pc, #108]	; (8001bb8 <SaraU201Command+0x90>)
 8001b4a:	f006 fa5e 	bl	800800a <HAL_UART_Transmit>
		/*Delay*/
		uint32_t tickstart = HAL_GetTick();
 8001b4e:	f002 fa7f 	bl	8004050 <HAL_GetTick>
 8001b52:	6178      	str	r0, [r7, #20]
		uint32_t wait = timeout;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	61bb      	str	r3, [r7, #24]
		if (wait < HAL_MAX_DELAY)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5e:	d00e      	beq.n	8001b7e <SaraU201Command+0x56>
		{
			wait += (uint32_t)(uwTickFreq);
 8001b60:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <SaraU201Command+0x94>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4413      	add	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
		}
		while((HAL_GetTick() - tickstart) < wait)
 8001b6a:	e008      	b.n	8001b7e <SaraU201Command+0x56>
		{
			if (strstr(Rx_buffer_sim, str))
 8001b6c:	68b9      	ldr	r1, [r7, #8]
 8001b6e:	4814      	ldr	r0, [pc, #80]	; (8001bc0 <SaraU201Command+0x98>)
 8001b70:	f007 fbe7 	bl	8009342 <strstr>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <SaraU201Command+0x56>
				return 1;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e017      	b.n	8001bae <SaraU201Command+0x86>
		while((HAL_GetTick() - tickstart) < wait)
 8001b7e:	f002 fa67 	bl	8004050 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d8ee      	bhi.n	8001b6c <SaraU201Command+0x44>
		}
		CheckError++;
 8001b8e:	7ffb      	ldrb	r3, [r7, #31]
 8001b90:	3301      	adds	r3, #1
 8001b92:	77fb      	strb	r3, [r7, #31]
		if (CheckError == 2)
 8001b94:	7ffb      	ldrb	r3, [r7, #31]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d101      	bne.n	8001b9e <SaraU201Command+0x76>
		{
			return 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	e007      	b.n	8001bae <SaraU201Command+0x86>
		}
	}
	while(strstr(Rx_buffer_sim, str)==NULL);
 8001b9e:	68b9      	ldr	r1, [r7, #8]
 8001ba0:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <SaraU201Command+0x98>)
 8001ba2:	f007 fbce 	bl	8009342 <strstr>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0c5      	beq.n	8001b38 <SaraU201Command+0x10>
	return 1;
 8001bac:	2301      	movs	r3, #1
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3720      	adds	r7, #32
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000610 	.word	0x20000610
 8001bbc:	20000040 	.word	0x20000040
 8001bc0:	200003ac 	.word	0x200003ac

08001bc4 <resetHardwareSARAU201>:
void resetHardwareSARAU201(void)
/*Reset bang chan PWR_ON*/
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
	//Tat module
	HAL_GPIO_WritePin(PWR_SIM_GPIO_Port, PWR_SIM_Pin, GPIO_PIN_RESET);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd2:	f003 fda7 	bl	8005724 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8001bd6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bda:	f002 fa45 	bl	8004068 <HAL_Delay>
	HAL_GPIO_WritePin(PWR_SIM_GPIO_Port, PWR_SIM_Pin, GPIO_PIN_SET);
 8001bde:	2201      	movs	r2, #1
 8001be0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be8:	f003 fd9c 	bl	8005724 <HAL_GPIO_WritePin>

	//Bat Module
	HAL_GPIO_WritePin(PWR_SIM_GPIO_Port, PWR_SIM_Pin, GPIO_PIN_RESET);
 8001bec:	2200      	movs	r2, #0
 8001bee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf6:	f003 fd95 	bl	8005724 <HAL_GPIO_WritePin>
	DelayMicro(200);
 8001bfa:	20c8      	movs	r0, #200	; 0xc8
 8001bfc:	f7ff f974 	bl	8000ee8 <DelayMicro>
	HAL_GPIO_WritePin(PWR_SIM_GPIO_Port, PWR_SIM_Pin, GPIO_PIN_SET);
 8001c00:	2201      	movs	r2, #1
 8001c02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c0a:	f003 fd8b 	bl	8005724 <HAL_GPIO_WritePin>
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <resetSoftwareSARAU201>:
uint8_t resetSoftwareSARAU201(void)
/*Reset bang lenh AT*/
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
	//Set the MT to minimum functionality
	deleteBuffer(Rx_buffer_sim, Rx_index_sim);
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <resetSoftwareSARAU201+0x50>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4812      	ldr	r0, [pc, #72]	; (8001c68 <resetSoftwareSARAU201+0x54>)
 8001c20:	f7ff ff62 	bl	8001ae8 <deleteBuffer>
	if (!SaraU201Command("AT+CFUN=0\r\n", "OK", 5000)) return 0;
 8001c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c28:	4910      	ldr	r1, [pc, #64]	; (8001c6c <resetSoftwareSARAU201+0x58>)
 8001c2a:	4811      	ldr	r0, [pc, #68]	; (8001c70 <resetSoftwareSARAU201+0x5c>)
 8001c2c:	f7ff ff7c 	bl	8001b28 <SaraU201Command>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <resetSoftwareSARAU201+0x26>
 8001c36:	2300      	movs	r3, #0
 8001c38:	e011      	b.n	8001c5e <resetSoftwareSARAU201+0x4a>
	//Set the MT to full functionality
	deleteBuffer(Rx_buffer_sim, Rx_index_sim);
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <resetSoftwareSARAU201+0x50>)
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4809      	ldr	r0, [pc, #36]	; (8001c68 <resetSoftwareSARAU201+0x54>)
 8001c42:	f7ff ff51 	bl	8001ae8 <deleteBuffer>
	if (!SaraU201Command("AT+CFUN=1\r\n", "OK", 5000)) return 0;
 8001c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4a:	4908      	ldr	r1, [pc, #32]	; (8001c6c <resetSoftwareSARAU201+0x58>)
 8001c4c:	4809      	ldr	r0, [pc, #36]	; (8001c74 <resetSoftwareSARAU201+0x60>)
 8001c4e:	f7ff ff6b 	bl	8001b28 <SaraU201Command>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <resetSoftwareSARAU201+0x48>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	e000      	b.n	8001c5e <resetSoftwareSARAU201+0x4a>
	return 1;
 8001c5c:	2301      	movs	r3, #1
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000378 	.word	0x20000378
 8001c68:	200003ac 	.word	0x200003ac
 8001c6c:	0800e698 	.word	0x0800e698
 8001c70:	0800e69c 	.word	0x0800e69c
 8001c74:	0800e6a8 	.word	0x0800e6a8

08001c78 <contcatenateString>:
void contcatenateString(char str1[],char str2[],char str3[],char str4[],char str5[])
/*Noi chuoi*/
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	603b      	str	r3, [r7, #0]
	strcat(str1, str2);
 8001c86:	68b9      	ldr	r1, [r7, #8]
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f007 fb29 	bl	80092e0 <strcat>
	strcat(str1, str3);
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f007 fb25 	bl	80092e0 <strcat>
	strcat(str1, str4);
 8001c96:	6839      	ldr	r1, [r7, #0]
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f007 fb21 	bl	80092e0 <strcat>
	strcat(str1, str5);
 8001c9e:	69b9      	ldr	r1, [r7, #24]
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f007 fb1d 	bl	80092e0 <strcat>
}
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <CheckValidDataTime>:
			return i + 4;
	}
	return 0;
}
uint8_t CheckValidDataTime(char Data[])
{
 8001cae:	b590      	push	{r4, r7, lr}
 8001cb0:	b085      	sub	sp, #20
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; i < strlen(Data); i++)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	73fb      	strb	r3, [r7, #15]
 8001cba:	e021      	b.n	8001d00 <CheckValidDataTime+0x52>
	{
		if (Data[i] == 'D' && Data[i + 1] == 'a' && Data[i + 2] == 't' && Data[i + 3] == 'e')
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b44      	cmp	r3, #68	; 0x44
 8001cc6:	d118      	bne.n	8001cfa <CheckValidDataTime+0x4c>
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	4413      	add	r3, r2
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b61      	cmp	r3, #97	; 0x61
 8001cd4:	d111      	bne.n	8001cfa <CheckValidDataTime+0x4c>
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	3302      	adds	r3, #2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b74      	cmp	r3, #116	; 0x74
 8001ce2:	d10a      	bne.n	8001cfa <CheckValidDataTime+0x4c>
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
 8001ce6:	3303      	adds	r3, #3
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	4413      	add	r3, r2
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b65      	cmp	r3, #101	; 0x65
 8001cf0:	d103      	bne.n	8001cfa <CheckValidDataTime+0x4c>
			return i + 4;
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	e00a      	b.n	8001d10 <CheckValidDataTime+0x62>
	for (i = 0; i < strlen(Data); i++)
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	73fb      	strb	r3, [r7, #15]
 8001d00:	7bfc      	ldrb	r4, [r7, #15]
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7fe fa64 	bl	80001d0 <strlen>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	429c      	cmp	r4, r3
 8001d0c:	d3d6      	bcc.n	8001cbc <CheckValidDataTime+0xe>
	}
	return 0;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd90      	pop	{r4, r7, pc}

08001d18 <CheckValidDataServer>:
uint8_t CheckValidDataServer(char Data[])
{
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; i < strlen(Data); i++)
 8001d20:	2300      	movs	r3, #0
 8001d22:	73fb      	strb	r3, [r7, #15]
 8001d24:	e00c      	b.n	8001d40 <CheckValidDataServer+0x28>
	{
		if (Data[i] == '|')
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b7c      	cmp	r3, #124	; 0x7c
 8001d30:	d103      	bne.n	8001d3a <CheckValidDataServer+0x22>
			return i + 1;
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
 8001d34:	3301      	adds	r3, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	e00a      	b.n	8001d50 <CheckValidDataServer+0x38>
	for (i = 0; i < strlen(Data); i++)
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
 8001d40:	7bfc      	ldrb	r4, [r7, #15]
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7fe fa44 	bl	80001d0 <strlen>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	429c      	cmp	r4, r3
 8001d4c:	d3eb      	bcc.n	8001d26 <CheckValidDataServer+0xe>
	}
	return 0;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd90      	pop	{r4, r7, pc}

08001d58 <checkRSSI>:
uint8_t checkRSSI(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af02      	add	r7, sp, #8
	deleteBuffer(Rssi1, 5);
 8001d5e:	2105      	movs	r1, #5
 8001d60:	481b      	ldr	r0, [pc, #108]	; (8001dd0 <checkRSSI+0x78>)
 8001d62:	f7ff fec1 	bl	8001ae8 <deleteBuffer>
	deleteBuffer(Rssi2, 5);
 8001d66:	2105      	movs	r1, #5
 8001d68:	481a      	ldr	r0, [pc, #104]	; (8001dd4 <checkRSSI+0x7c>)
 8001d6a:	f7ff febd 	bl	8001ae8 <deleteBuffer>
	CutString(1, 0, Rx_buffer_sim, Rssi1, ":", ",");
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <checkRSSI+0x80>)
 8001d70:	9301      	str	r3, [sp, #4]
 8001d72:	4b1a      	ldr	r3, [pc, #104]	; (8001ddc <checkRSSI+0x84>)
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <checkRSSI+0x78>)
 8001d78:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <checkRSSI+0x88>)
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f000 fcbd 	bl	80026fc <CutString>
	CutString(1, 0, Rx_buffer_sim, Rssi2, ",", "\r");
 8001d82:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <checkRSSI+0x8c>)
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <checkRSSI+0x80>)
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <checkRSSI+0x7c>)
 8001d8c:	4a14      	ldr	r2, [pc, #80]	; (8001de0 <checkRSSI+0x88>)
 8001d8e:	2100      	movs	r1, #0
 8001d90:	2001      	movs	r0, #1
 8001d92:	f000 fcb3 	bl	80026fc <CutString>
	Rssi1_num = atoi(Rssi1);
 8001d96:	480e      	ldr	r0, [pc, #56]	; (8001dd0 <checkRSSI+0x78>)
 8001d98:	f007 fa3f 	bl	800921a <atoi>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <checkRSSI+0x90>)
 8001da2:	701a      	strb	r2, [r3, #0]
	Rssi2_num = atoi(Rssi2);
 8001da4:	480b      	ldr	r0, [pc, #44]	; (8001dd4 <checkRSSI+0x7c>)
 8001da6:	f007 fa38 	bl	800921a <atoi>
 8001daa:	4603      	mov	r3, r0
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <checkRSSI+0x94>)
 8001db0:	701a      	strb	r2, [r3, #0]
	if (Rssi1_num != 99 && Rssi2_num != 99)
 8001db2:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <checkRSSI+0x90>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b63      	cmp	r3, #99	; 0x63
 8001db8:	d005      	beq.n	8001dc6 <checkRSSI+0x6e>
 8001dba:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <checkRSSI+0x94>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b63      	cmp	r3, #99	; 0x63
 8001dc0:	d001      	beq.n	8001dc6 <checkRSSI+0x6e>
		return 1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <checkRSSI+0x70>
	return 0;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200002f8 	.word	0x200002f8
 8001dd4:	20000300 	.word	0x20000300
 8001dd8:	0800e6d0 	.word	0x0800e6d0
 8001ddc:	0800e6d4 	.word	0x0800e6d4
 8001de0:	200003ac 	.word	0x200003ac
 8001de4:	0800e6d8 	.word	0x0800e6d8
 8001de8:	200006c5 	.word	0x200006c5
 8001dec:	20000380 	.word	0x20000380

08001df0 <checkMessage>:

void checkMessage(char phoneNumber[])
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af02      	add	r7, sp, #8
 8001df6:	6078      	str	r0, [r7, #4]
  //Lay vị tri luu tru cua tin nhan
  uint8_t locate_sms;
  CutString(1, 0, SaveMes, locateMes, ",", "\r");
 8001df8:	4b34      	ldr	r3, [pc, #208]	; (8001ecc <checkMessage+0xdc>)
 8001dfa:	9301      	str	r3, [sp, #4]
 8001dfc:	4b34      	ldr	r3, [pc, #208]	; (8001ed0 <checkMessage+0xe0>)
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	4b34      	ldr	r3, [pc, #208]	; (8001ed4 <checkMessage+0xe4>)
 8001e02:	4a35      	ldr	r2, [pc, #212]	; (8001ed8 <checkMessage+0xe8>)
 8001e04:	2100      	movs	r1, #0
 8001e06:	2001      	movs	r0, #1
 8001e08:	f000 fc78 	bl	80026fc <CutString>
  locate_sms = atoi(locateMes);
 8001e0c:	4831      	ldr	r0, [pc, #196]	; (8001ed4 <checkMessage+0xe4>)
 8001e0e:	f007 fa04 	bl	800921a <atoi>
 8001e12:	4603      	mov	r3, r0
 8001e14:	73fb      	strb	r3, [r7, #15]
  if (locate_sms > 0 && locate_sms <= 340)
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d047      	beq.n	8001eac <checkMessage+0xbc>
  {
    deleteBuffer(SaveMes, 100);
 8001e1c:	2164      	movs	r1, #100	; 0x64
 8001e1e:	482e      	ldr	r0, [pc, #184]	; (8001ed8 <checkMessage+0xe8>)
 8001e20:	f7ff fe62 	bl	8001ae8 <deleteBuffer>
    Mes_index = 0;
 8001e24:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <checkMessage+0xec>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
    //Doc tin nhan tu vi tri luu tru
    deleteBuffer(tempARR, 100);
 8001e2a:	2164      	movs	r1, #100	; 0x64
 8001e2c:	482c      	ldr	r0, [pc, #176]	; (8001ee0 <checkMessage+0xf0>)
 8001e2e:	f7ff fe5b 	bl	8001ae8 <deleteBuffer>
    deleteBuffer(Rx_buffer_sim, Rx_index_sim);
 8001e32:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <checkMessage+0xf4>)
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	4619      	mov	r1, r3
 8001e38:	482b      	ldr	r0, [pc, #172]	; (8001ee8 <checkMessage+0xf8>)
 8001e3a:	f7ff fe55 	bl	8001ae8 <deleteBuffer>
    contcatenateString(tempARR, "AT+CMGR=", locateMes, "\r\n", "");
 8001e3e:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <checkMessage+0xfc>)
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	4b2b      	ldr	r3, [pc, #172]	; (8001ef0 <checkMessage+0x100>)
 8001e44:	4a23      	ldr	r2, [pc, #140]	; (8001ed4 <checkMessage+0xe4>)
 8001e46:	492b      	ldr	r1, [pc, #172]	; (8001ef4 <checkMessage+0x104>)
 8001e48:	4825      	ldr	r0, [pc, #148]	; (8001ee0 <checkMessage+0xf0>)
 8001e4a:	f7ff ff15 	bl	8001c78 <contcatenateString>
    SaraU201Command(tempARR, "OK\r\n", 5000);
 8001e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e52:	4929      	ldr	r1, [pc, #164]	; (8001ef8 <checkMessage+0x108>)
 8001e54:	4822      	ldr	r0, [pc, #136]	; (8001ee0 <checkMessage+0xf0>)
 8001e56:	f7ff fe67 	bl	8001b28 <SaraU201Command>

    //Kiem tra co dung noi dung tin nhan
    if(strstr(Rx_buffer_sim, "TOADO"))
 8001e5a:	4928      	ldr	r1, [pc, #160]	; (8001efc <checkMessage+0x10c>)
 8001e5c:	4822      	ldr	r0, [pc, #136]	; (8001ee8 <checkMessage+0xf8>)
 8001e5e:	f007 fa70 	bl	8009342 <strstr>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00e      	beq.n	8001e86 <checkMessage+0x96>
    {
      if (!sendMsg(3, teleNumber, Latitude_ARR, Longtitude_ARR, Battery_ARR)) checkMes = 1;
 8001e68:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <checkMessage+0x110>)
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	4b25      	ldr	r3, [pc, #148]	; (8001f04 <checkMessage+0x114>)
 8001e6e:	4a26      	ldr	r2, [pc, #152]	; (8001f08 <checkMessage+0x118>)
 8001e70:	4926      	ldr	r1, [pc, #152]	; (8001f0c <checkMessage+0x11c>)
 8001e72:	2003      	movs	r0, #3
 8001e74:	f000 f99e 	bl	80021b4 <sendMsg>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d116      	bne.n	8001eac <checkMessage+0xbc>
 8001e7e:	4b24      	ldr	r3, [pc, #144]	; (8001f10 <checkMessage+0x120>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
 8001e84:	e012      	b.n	8001eac <checkMessage+0xbc>
    }
    else if(strstr(Rx_buffer_sim, "BATLOA"))
 8001e86:	4923      	ldr	r1, [pc, #140]	; (8001f14 <checkMessage+0x124>)
 8001e88:	4817      	ldr	r0, [pc, #92]	; (8001ee8 <checkMessage+0xf8>)
 8001e8a:	f007 fa5a 	bl	8009342 <strstr>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <checkMessage+0xaa>
    {
      enableSpeaker();
 8001e94:	f001 f920 	bl	80030d8 <enableSpeaker>
 8001e98:	e008      	b.n	8001eac <checkMessage+0xbc>
    }
    else if(strstr(Rx_buffer_sim, "THAO"))
 8001e9a:	491f      	ldr	r1, [pc, #124]	; (8001f18 <checkMessage+0x128>)
 8001e9c:	4812      	ldr	r0, [pc, #72]	; (8001ee8 <checkMessage+0xf8>)
 8001e9e:	f007 fa50 	bl	8009342 <strstr>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <checkMessage+0xbc>
    {
      enableDetach();
 8001ea8:	f001 f934 	bl	8003114 <enableDetach>
    }
  }
  deleteBuffer(Rx_buffer_sim, Rx_index_sim);
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <checkMessage+0xf4>)
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	480d      	ldr	r0, [pc, #52]	; (8001ee8 <checkMessage+0xf8>)
 8001eb4:	f7ff fe18 	bl	8001ae8 <deleteBuffer>
  SaraU201Command("AT+CMGD=1,4\r\n", "OK", 5000);
 8001eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebc:	4917      	ldr	r1, [pc, #92]	; (8001f1c <checkMessage+0x12c>)
 8001ebe:	4818      	ldr	r0, [pc, #96]	; (8001f20 <checkMessage+0x130>)
 8001ec0:	f7ff fe32 	bl	8001b28 <SaraU201Command>
}
 8001ec4:	bf00      	nop
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	0800e6d8 	.word	0x0800e6d8
 8001ed0:	0800e6d0 	.word	0x0800e6d0
 8001ed4:	2000036c 	.word	0x2000036c
 8001ed8:	20000308 	.word	0x20000308
 8001edc:	20000383 	.word	0x20000383
 8001ee0:	200006c8 	.word	0x200006c8
 8001ee4:	20000378 	.word	0x20000378
 8001ee8:	200003ac 	.word	0x200003ac
 8001eec:	0800e6ec 	.word	0x0800e6ec
 8001ef0:	0800e6dc 	.word	0x0800e6dc
 8001ef4:	0800e6e0 	.word	0x0800e6e0
 8001ef8:	0800e6f0 	.word	0x0800e6f0
 8001efc:	0800e6f8 	.word	0x0800e6f8
 8001f00:	20000024 	.word	0x20000024
 8001f04:	2000000c 	.word	0x2000000c
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	20000018 	.word	0x20000018
 8001f10:	200006c7 	.word	0x200006c7
 8001f14:	0800e700 	.word	0x0800e700
 8001f18:	0800e708 	.word	0x0800e708
 8001f1c:	0800e698 	.word	0x0800e698
 8001f20:	0800e6b4 	.word	0x0800e6b4

08001f24 <checkDataServer>:

uint8_t checkDataServer(char stat[], char lat_center[], char lng_center[], char rad[])
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af02      	add	r7, sp, #8
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	603b      	str	r3, [r7, #0]
  uint8_t vitri = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	75fb      	strb	r3, [r7, #23]
  if (strstr(Rx_buffer_sim, "+URDFILE" ) && strstr(Rx_buffer_sim, "\r\nOK"))
 8001f36:	4937      	ldr	r1, [pc, #220]	; (8002014 <checkDataServer+0xf0>)
 8001f38:	4837      	ldr	r0, [pc, #220]	; (8002018 <checkDataServer+0xf4>)
 8001f3a:	f007 fa02 	bl	8009342 <strstr>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d061      	beq.n	8002008 <checkDataServer+0xe4>
 8001f44:	4935      	ldr	r1, [pc, #212]	; (800201c <checkDataServer+0xf8>)
 8001f46:	4834      	ldr	r0, [pc, #208]	; (8002018 <checkDataServer+0xf4>)
 8001f48:	f007 f9fb 	bl	8009342 <strstr>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d05a      	beq.n	8002008 <checkDataServer+0xe4>
  {
    vitri = CheckValidDataServer(Rx_buffer_sim);
 8001f52:	4831      	ldr	r0, [pc, #196]	; (8002018 <checkDataServer+0xf4>)
 8001f54:	f7ff fee0 	bl	8001d18 <CheckValidDataServer>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	75fb      	strb	r3, [r7, #23]
    if (vitri != 0)
 8001f5c:	7dfb      	ldrb	r3, [r7, #23]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d050      	beq.n	8002004 <checkDataServer+0xe0>
    {
      /*Xoa mang*/
      deleteBuffer(stat, strlen(stat));
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f7fe f934 	bl	80001d0 <strlen>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f7ff fdbb 	bl	8001ae8 <deleteBuffer>
      deleteBuffer(lat_center, strlen(lat_center));
 8001f72:	68b8      	ldr	r0, [r7, #8]
 8001f74:	f7fe f92c 	bl	80001d0 <strlen>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	68b8      	ldr	r0, [r7, #8]
 8001f7e:	f7ff fdb3 	bl	8001ae8 <deleteBuffer>
      deleteBuffer(lng_center, strlen(lng_center));
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7fe f924 	bl	80001d0 <strlen>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff fdab 	bl	8001ae8 <deleteBuffer>
      deleteBuffer(rad, strlen(rad));
 8001f92:	6838      	ldr	r0, [r7, #0]
 8001f94:	f7fe f91c 	bl	80001d0 <strlen>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	6838      	ldr	r0, [r7, #0]
 8001f9e:	f7ff fda3 	bl	8001ae8 <deleteBuffer>
      /*Tach chuoi du lieu*/
//      CutString(2, vitri, Rx_buffer_sim, lat_center, ":", "-");
//      CutString(3, vitri, Rx_buffer_sim, lng_center, ":", "-");
//      CutString(4, vitri, Rx_buffer_sim, rad, ":", "-");
//      CutString(5, vitri, Rx_buffer_sim, stat, ":", "\"");
      CutString(4, vitri, Rx_buffer_sim, lat_center, " ", " ");
 8001fa2:	7df9      	ldrb	r1, [r7, #23]
 8001fa4:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <checkDataServer+0xfc>)
 8001fa6:	9301      	str	r3, [sp, #4]
 8001fa8:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <checkDataServer+0xfc>)
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4a1a      	ldr	r2, [pc, #104]	; (8002018 <checkDataServer+0xf4>)
 8001fb0:	2004      	movs	r0, #4
 8001fb2:	f000 fba3 	bl	80026fc <CutString>
      CutString(7, vitri, Rx_buffer_sim, lng_center, " ", " ");
 8001fb6:	7df9      	ldrb	r1, [r7, #23]
 8001fb8:	4b19      	ldr	r3, [pc, #100]	; (8002020 <checkDataServer+0xfc>)
 8001fba:	9301      	str	r3, [sp, #4]
 8001fbc:	4b18      	ldr	r3, [pc, #96]	; (8002020 <checkDataServer+0xfc>)
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a15      	ldr	r2, [pc, #84]	; (8002018 <checkDataServer+0xf4>)
 8001fc4:	2007      	movs	r0, #7
 8001fc6:	f000 fb99 	bl	80026fc <CutString>
      CutString(10, vitri, Rx_buffer_sim, rad, " ", " ");
 8001fca:	7df9      	ldrb	r1, [r7, #23]
 8001fcc:	4b14      	ldr	r3, [pc, #80]	; (8002020 <checkDataServer+0xfc>)
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	4b13      	ldr	r3, [pc, #76]	; (8002020 <checkDataServer+0xfc>)
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	4a10      	ldr	r2, [pc, #64]	; (8002018 <checkDataServer+0xf4>)
 8001fd8:	200a      	movs	r0, #10
 8001fda:	f000 fb8f 	bl	80026fc <CutString>
      CutString(13, vitri, Rx_buffer_sim, stat, " ", "\"");
 8001fde:	7df9      	ldrb	r1, [r7, #23]
 8001fe0:	4b10      	ldr	r3, [pc, #64]	; (8002024 <checkDataServer+0x100>)
 8001fe2:	9301      	str	r3, [sp, #4]
 8001fe4:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <checkDataServer+0xfc>)
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4a0b      	ldr	r2, [pc, #44]	; (8002018 <checkDataServer+0xf4>)
 8001fec:	200d      	movs	r0, #13
 8001fee:	f000 fb85 	bl	80026fc <CutString>
      //Chuyen chuoi thanh so
      StatusAllowRemove = atoi(Status);
 8001ff2:	480d      	ldr	r0, [pc, #52]	; (8002028 <checkDataServer+0x104>)
 8001ff4:	f007 f911 	bl	800921a <atoi>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <checkDataServer+0x108>)
 8001ffe:	701a      	strb	r2, [r3, #0]
      return 1;
 8002000:	2301      	movs	r3, #1
 8002002:	e002      	b.n	800200a <checkDataServer+0xe6>
    }
    return 0;
 8002004:	2300      	movs	r3, #0
 8002006:	e000      	b.n	800200a <checkDataServer+0xe6>
  }
  return 0;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	0800e710 	.word	0x0800e710
 8002018:	200003ac 	.word	0x200003ac
 800201c:	0800e71c 	.word	0x0800e71c
 8002020:	0800e724 	.word	0x0800e724
 8002024:	0800e728 	.word	0x0800e728
 8002028:	2000050c 	.word	0x2000050c
 800202c:	20000391 	.word	0x20000391

08002030 <initSIM>:

uint8_t initSIM(void)
// Khoi tao module SIM, cau hinh mang,...
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
//	while(HAL_GPIO_ReadPin(STAT_SIM_GPIO_Port, STAT_SIM_Pin)==0)
//	{
//	}
	/*Kiem tra ket noi voi module sim*/
	deleteBuffer(Rx_buffer_sim, Rx_index_sim);
 8002034:	4b50      	ldr	r3, [pc, #320]	; (8002178 <initSIM+0x148>)
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	4619      	mov	r1, r3
 800203a:	4850      	ldr	r0, [pc, #320]	; (800217c <initSIM+0x14c>)
 800203c:	f7ff fd54 	bl	8001ae8 <deleteBuffer>
	if (!SaraU201Command("AT\r\n", "OK", 500)) return 0;
 8002040:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002044:	494e      	ldr	r1, [pc, #312]	; (8002180 <initSIM+0x150>)
 8002046:	484f      	ldr	r0, [pc, #316]	; (8002184 <initSIM+0x154>)
 8002048:	f7ff fd6e 	bl	8001b28 <SaraU201Command>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <initSIM+0x26>
 8002052:	2300      	movs	r3, #0
 8002054:	e08e      	b.n	8002174 <initSIM+0x144>
	/*tat chuc nang phan hoi, Echo*/
	deleteBuffer(Rx_buffer_sim, Rx_index_sim);
 8002056:	4b48      	ldr	r3, [pc, #288]	; (8002178 <initSIM+0x148>)
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	4619      	mov	r1, r3
 800205c:	4847      	ldr	r0, [pc, #284]	; (800217c <initSIM+0x14c>)
 800205e:	f7ff fd43 	bl	8001ae8 <deleteBuffer>
	if (!SaraU201Command("ATE0\r\n", "OK", 500)) return 0;
 8002062:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002066:	4946      	ldr	r1, [pc, #280]	; (8002180 <initSIM+0x150>)
 8002068:	4847      	ldr	r0, [pc, #284]	; (8002188 <initSIM+0x158>)
 800206a:	f7ff fd5d 	bl	8001b28 <SaraU201Command>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <initSIM+0x48>
 8002074:	2300      	movs	r3, #0
 8002076:	e07d      	b.n	8002174 <initSIM+0x144>
	/*Kiem tra Sim co hoat dong khong*/
	deleteBuffer(Rx_buffer_sim, Rx_index_sim);
 8002078:	4b3f      	ldr	r3, [pc, #252]	; (8002178 <initSIM+0x148>)
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	4619      	mov	r1, r3
 800207e:	483f      	ldr	r0, [pc, #252]	; (800217c <initSIM+0x14c>)
 8002080:	f7ff fd32 	bl	8001ae8 <deleteBuffer>
	if (!SaraU201Command("AT+CPIN?\r\n", "+CPIN: READY", 500)) return 0;
 8002084:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002088:	4940      	ldr	r1, [pc, #256]	; (800218c <initSIM+0x15c>)
 800208a:	4841      	ldr	r0, [pc, #260]	; (8002190 <initSIM+0x160>)
 800208c:	f7ff fd4c 	bl	8001b28 <SaraU201Command>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <initSIM+0x6a>
 8002096:	2300      	movs	r3, #0
 8002098:	e06c      	b.n	8002174 <initSIM+0x144>
	/*Cau hinh dinh dang tin nhan*/ /*Set msg message format (0:PDU mode/ 1: Text mode)*/
	deleteBuffer(Rx_buffer_sim, Rx_index_sim);
 800209a:	4b37      	ldr	r3, [pc, #220]	; (8002178 <initSIM+0x148>)
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	4619      	mov	r1, r3
 80020a0:	4836      	ldr	r0, [pc, #216]	; (800217c <initSIM+0x14c>)
 80020a2:	f7ff fd21 	bl	8001ae8 <deleteBuffer>
	if (!SaraU201Command("AT+CMGF=1\r\n", "OK", 500)) return 0;
 80020a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80020aa:	4935      	ldr	r1, [pc, #212]	; (8002180 <initSIM+0x150>)
 80020ac:	4839      	ldr	r0, [pc, #228]	; (8002194 <initSIM+0x164>)
 80020ae:	f7ff fd3b 	bl	8001b28 <SaraU201Command>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <initSIM+0x8c>
 80020b8:	2300      	movs	r3, #0
 80020ba:	e05b      	b.n	8002174 <initSIM+0x144>
	/*Thong bao khi co tin nhan moi */
	deleteBuffer(Rx_buffer_sim, Rx_index_sim);
 80020bc:	4b2e      	ldr	r3, [pc, #184]	; (8002178 <initSIM+0x148>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	4619      	mov	r1, r3
 80020c2:	482e      	ldr	r0, [pc, #184]	; (800217c <initSIM+0x14c>)
 80020c4:	f7ff fd10 	bl	8001ae8 <deleteBuffer>
	if (!SaraU201Command("AT+CNMI=1,1\r\n", "OK", 500)) return 0;
 80020c8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80020cc:	492c      	ldr	r1, [pc, #176]	; (8002180 <initSIM+0x150>)
 80020ce:	4832      	ldr	r0, [pc, #200]	; (8002198 <initSIM+0x168>)
 80020d0:	f7ff fd2a 	bl	8001b28 <SaraU201Command>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <initSIM+0xae>
 80020da:	2300      	movs	r3, #0
 80020dc:	e04a      	b.n	8002174 <initSIM+0x144>
	/*Disable flow control*/
	deleteBuffer(Rx_buffer_sim, Rx_index_sim);
 80020de:	4b26      	ldr	r3, [pc, #152]	; (8002178 <initSIM+0x148>)
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	4619      	mov	r1, r3
 80020e4:	4825      	ldr	r0, [pc, #148]	; (800217c <initSIM+0x14c>)
 80020e6:	f7ff fcff 	bl	8001ae8 <deleteBuffer>
	if (!SaraU201Command("AT&K0\r\n", "OK", 500)) return 0;
 80020ea:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80020ee:	4924      	ldr	r1, [pc, #144]	; (8002180 <initSIM+0x150>)
 80020f0:	482a      	ldr	r0, [pc, #168]	; (800219c <initSIM+0x16c>)
 80020f2:	f7ff fd19 	bl	8001b28 <SaraU201Command>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <initSIM+0xd0>
 80020fc:	2300      	movs	r3, #0
 80020fe:	e039      	b.n	8002174 <initSIM+0x144>
	/*Enable Power Saving is controlled by RTS*/
	deleteBuffer(Rx_buffer_sim, Rx_index_sim);
 8002100:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <initSIM+0x148>)
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	4619      	mov	r1, r3
 8002106:	481d      	ldr	r0, [pc, #116]	; (800217c <initSIM+0x14c>)
 8002108:	f7ff fcee 	bl	8001ae8 <deleteBuffer>
	if (!SaraU201Command("AT+UPSV=2\r\n", "OK", 500)) return 0;
 800210c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002110:	491b      	ldr	r1, [pc, #108]	; (8002180 <initSIM+0x150>)
 8002112:	4823      	ldr	r0, [pc, #140]	; (80021a0 <initSIM+0x170>)
 8002114:	f7ff fd08 	bl	8001b28 <SaraU201Command>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <initSIM+0xf2>
 800211e:	2300      	movs	r3, #0
 8002120:	e028      	b.n	8002174 <initSIM+0x144>
	/*Network registration status*/
	deleteBuffer(Rx_buffer_sim, Rx_index_sim);
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <initSIM+0x148>)
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	4619      	mov	r1, r3
 8002128:	4814      	ldr	r0, [pc, #80]	; (800217c <initSIM+0x14c>)
 800212a:	f7ff fcdd 	bl	8001ae8 <deleteBuffer>
	if (!SaraU201Command("AT+UREG?\r\n", "+UREG: 0,6\r\n\r\nOK", 5000)) return 0;
 800212e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002132:	491c      	ldr	r1, [pc, #112]	; (80021a4 <initSIM+0x174>)
 8002134:	481c      	ldr	r0, [pc, #112]	; (80021a8 <initSIM+0x178>)
 8002136:	f7ff fcf7 	bl	8001b28 <SaraU201Command>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <initSIM+0x114>
 8002140:	2300      	movs	r3, #0
 8002142:	e017      	b.n	8002174 <initSIM+0x144>
	deleteBuffer(Rx_buffer_sim, Rx_index_sim);
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <initSIM+0x148>)
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	4619      	mov	r1, r3
 800214a:	480c      	ldr	r0, [pc, #48]	; (800217c <initSIM+0x14c>)
 800214c:	f7ff fccc 	bl	8001ae8 <deleteBuffer>
	if (!SaraU201Command("AT&W\r\n", "OK\r\n", 500)) return 0;
 8002150:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002154:	4915      	ldr	r1, [pc, #84]	; (80021ac <initSIM+0x17c>)
 8002156:	4816      	ldr	r0, [pc, #88]	; (80021b0 <initSIM+0x180>)
 8002158:	f7ff fce6 	bl	8001b28 <SaraU201Command>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <initSIM+0x136>
 8002162:	2300      	movs	r3, #0
 8002164:	e006      	b.n	8002174 <initSIM+0x144>
	deleteBuffer(Rx_buffer_sim, Rx_index_sim);
 8002166:	4b04      	ldr	r3, [pc, #16]	; (8002178 <initSIM+0x148>)
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	4619      	mov	r1, r3
 800216c:	4803      	ldr	r0, [pc, #12]	; (800217c <initSIM+0x14c>)
 800216e:	f7ff fcbb 	bl	8001ae8 <deleteBuffer>
	return 1;
 8002172:	2301      	movs	r3, #1
}
 8002174:	4618      	mov	r0, r3
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000378 	.word	0x20000378
 800217c:	200003ac 	.word	0x200003ac
 8002180:	0800e698 	.word	0x0800e698
 8002184:	0800e72c 	.word	0x0800e72c
 8002188:	0800e734 	.word	0x0800e734
 800218c:	0800e73c 	.word	0x0800e73c
 8002190:	0800e74c 	.word	0x0800e74c
 8002194:	0800e758 	.word	0x0800e758
 8002198:	0800e764 	.word	0x0800e764
 800219c:	0800e774 	.word	0x0800e774
 80021a0:	0800e77c 	.word	0x0800e77c
 80021a4:	0800e788 	.word	0x0800e788
 80021a8:	0800e79c 	.word	0x0800e79c
 80021ac:	0800e6f0 	.word	0x0800e6f0
 80021b0:	0800e7a8 	.word	0x0800e7a8

080021b4 <sendMsg>:
uint8_t sendMsg(int Case, char PhoneNumber[], char Latitude[], char Longtitude[], char Battery[])
{
 80021b4:	b5b0      	push	{r4, r5, r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]
	char Phone[12] = {0};
 80021c2:	f107 0314 	add.w	r3, r7, #20
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	609a      	str	r2, [r3, #8]
	deleteBuffer(Rx_buffer_sim, Rx_index_sim);
 80021ce:	4ba2      	ldr	r3, [pc, #648]	; (8002458 <sendMsg+0x2a4>)
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	4619      	mov	r1, r3
 80021d4:	48a1      	ldr	r0, [pc, #644]	; (800245c <sendMsg+0x2a8>)
 80021d6:	f7ff fc87 	bl	8001ae8 <deleteBuffer>
	deleteBuffer(tempARR, 100); //Xóa mảng tempARR
 80021da:	2164      	movs	r1, #100	; 0x64
 80021dc:	48a0      	ldr	r0, [pc, #640]	; (8002460 <sendMsg+0x2ac>)
 80021de:	f7ff fc83 	bl	8001ae8 <deleteBuffer>
	//Noi chuoi so dien thoai
	strcat(Phone, "+84");
 80021e2:	f107 0314 	add.w	r3, r7, #20
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fd fff2 	bl	80001d0 <strlen>
 80021ec:	4603      	mov	r3, r0
 80021ee:	461a      	mov	r2, r3
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	4413      	add	r3, r2
 80021f6:	4a9b      	ldr	r2, [pc, #620]	; (8002464 <sendMsg+0x2b0>)
 80021f8:	6810      	ldr	r0, [r2, #0]
 80021fa:	6018      	str	r0, [r3, #0]
	strcat(Phone, PhoneNumber);
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	4618      	mov	r0, r3
 8002204:	f007 f86c 	bl	80092e0 <strcat>
	//Noi chuoi de gui lenh AT
	strcat(tempARR, "AT+CMGS=\"");
 8002208:	4895      	ldr	r0, [pc, #596]	; (8002460 <sendMsg+0x2ac>)
 800220a:	f7fd ffe1 	bl	80001d0 <strlen>
 800220e:	4603      	mov	r3, r0
 8002210:	461a      	mov	r2, r3
 8002212:	4b93      	ldr	r3, [pc, #588]	; (8002460 <sendMsg+0x2ac>)
 8002214:	4413      	add	r3, r2
 8002216:	4994      	ldr	r1, [pc, #592]	; (8002468 <sendMsg+0x2b4>)
 8002218:	461a      	mov	r2, r3
 800221a:	460b      	mov	r3, r1
 800221c:	cb03      	ldmia	r3!, {r0, r1}
 800221e:	6010      	str	r0, [r2, #0]
 8002220:	6051      	str	r1, [r2, #4]
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	8113      	strh	r3, [r2, #8]
	strcat(tempARR, Phone);
 8002226:	f107 0314 	add.w	r3, r7, #20
 800222a:	4619      	mov	r1, r3
 800222c:	488c      	ldr	r0, [pc, #560]	; (8002460 <sendMsg+0x2ac>)
 800222e:	f007 f857 	bl	80092e0 <strcat>
	strcat(tempARR, "\"\r");
 8002232:	488b      	ldr	r0, [pc, #556]	; (8002460 <sendMsg+0x2ac>)
 8002234:	f7fd ffcc 	bl	80001d0 <strlen>
 8002238:	4603      	mov	r3, r0
 800223a:	461a      	mov	r2, r3
 800223c:	4b88      	ldr	r3, [pc, #544]	; (8002460 <sendMsg+0x2ac>)
 800223e:	4413      	add	r3, r2
 8002240:	4a8a      	ldr	r2, [pc, #552]	; (800246c <sendMsg+0x2b8>)
 8002242:	8811      	ldrh	r1, [r2, #0]
 8002244:	7892      	ldrb	r2, [r2, #2]
 8002246:	8019      	strh	r1, [r3, #0]
 8002248:	709a      	strb	r2, [r3, #2]
	if (!SaraU201Command(tempARR, ">", 1000)) return 0;
 800224a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800224e:	4988      	ldr	r1, [pc, #544]	; (8002470 <sendMsg+0x2bc>)
 8002250:	4883      	ldr	r0, [pc, #524]	; (8002460 <sendMsg+0x2ac>)
 8002252:	f7ff fc69 	bl	8001b28 <SaraU201Command>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <sendMsg+0xac>
 800225c:	2300      	movs	r3, #0
 800225e:	e187      	b.n	8002570 <sendMsg+0x3bc>
	if (Case == 1)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d17b      	bne.n	800235e <sendMsg+0x1aa>
	{
		/*Thông báo ra khoi vùng an toàn + Link toa do + Phan tram pin*/
		deleteBuffer(tempARR, 100);
 8002266:	2164      	movs	r1, #100	; 0x64
 8002268:	487d      	ldr	r0, [pc, #500]	; (8002460 <sendMsg+0x2ac>)
 800226a:	f7ff fc3d 	bl	8001ae8 <deleteBuffer>
		strcat(tempARR, "OutOfSafeArea\n");
 800226e:	487c      	ldr	r0, [pc, #496]	; (8002460 <sendMsg+0x2ac>)
 8002270:	f7fd ffae 	bl	80001d0 <strlen>
 8002274:	4603      	mov	r3, r0
 8002276:	461a      	mov	r2, r3
 8002278:	4b79      	ldr	r3, [pc, #484]	; (8002460 <sendMsg+0x2ac>)
 800227a:	4413      	add	r3, r2
 800227c:	4a7d      	ldr	r2, [pc, #500]	; (8002474 <sendMsg+0x2c0>)
 800227e:	461c      	mov	r4, r3
 8002280:	4613      	mov	r3, r2
 8002282:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002284:	6020      	str	r0, [r4, #0]
 8002286:	6061      	str	r1, [r4, #4]
 8002288:	60a2      	str	r2, [r4, #8]
 800228a:	881a      	ldrh	r2, [r3, #0]
 800228c:	789b      	ldrb	r3, [r3, #2]
 800228e:	81a2      	strh	r2, [r4, #12]
 8002290:	73a3      	strb	r3, [r4, #14]
		strcat(tempARR, "http://maps.google.com/maps?q=");
 8002292:	4873      	ldr	r0, [pc, #460]	; (8002460 <sendMsg+0x2ac>)
 8002294:	f7fd ff9c 	bl	80001d0 <strlen>
 8002298:	4603      	mov	r3, r0
 800229a:	461a      	mov	r2, r3
 800229c:	4b70      	ldr	r3, [pc, #448]	; (8002460 <sendMsg+0x2ac>)
 800229e:	4413      	add	r3, r2
 80022a0:	4a75      	ldr	r2, [pc, #468]	; (8002478 <sendMsg+0x2c4>)
 80022a2:	461d      	mov	r5, r3
 80022a4:	4614      	mov	r4, r2
 80022a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a8:	6028      	str	r0, [r5, #0]
 80022aa:	6069      	str	r1, [r5, #4]
 80022ac:	60aa      	str	r2, [r5, #8]
 80022ae:	60eb      	str	r3, [r5, #12]
 80022b0:	cc07      	ldmia	r4!, {r0, r1, r2}
 80022b2:	6128      	str	r0, [r5, #16]
 80022b4:	6169      	str	r1, [r5, #20]
 80022b6:	61aa      	str	r2, [r5, #24]
 80022b8:	8823      	ldrh	r3, [r4, #0]
 80022ba:	78a2      	ldrb	r2, [r4, #2]
 80022bc:	83ab      	strh	r3, [r5, #28]
 80022be:	4613      	mov	r3, r2
 80022c0:	77ab      	strb	r3, [r5, #30]
		strcat(tempARR, Latitude);
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4866      	ldr	r0, [pc, #408]	; (8002460 <sendMsg+0x2ac>)
 80022c6:	f007 f80b 	bl	80092e0 <strcat>
		strcat(tempARR, ",");
 80022ca:	4865      	ldr	r0, [pc, #404]	; (8002460 <sendMsg+0x2ac>)
 80022cc:	f7fd ff80 	bl	80001d0 <strlen>
 80022d0:	4603      	mov	r3, r0
 80022d2:	461a      	mov	r2, r3
 80022d4:	4b62      	ldr	r3, [pc, #392]	; (8002460 <sendMsg+0x2ac>)
 80022d6:	4413      	add	r3, r2
 80022d8:	4968      	ldr	r1, [pc, #416]	; (800247c <sendMsg+0x2c8>)
 80022da:	461a      	mov	r2, r3
 80022dc:	460b      	mov	r3, r1
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	8013      	strh	r3, [r2, #0]
		strcat(tempARR, Longtitude);
 80022e2:	6839      	ldr	r1, [r7, #0]
 80022e4:	485e      	ldr	r0, [pc, #376]	; (8002460 <sendMsg+0x2ac>)
 80022e6:	f006 fffb 	bl	80092e0 <strcat>
		strcat(tempARR, "\n");
 80022ea:	485d      	ldr	r0, [pc, #372]	; (8002460 <sendMsg+0x2ac>)
 80022ec:	f7fd ff70 	bl	80001d0 <strlen>
 80022f0:	4603      	mov	r3, r0
 80022f2:	461a      	mov	r2, r3
 80022f4:	4b5a      	ldr	r3, [pc, #360]	; (8002460 <sendMsg+0x2ac>)
 80022f6:	4413      	add	r3, r2
 80022f8:	4961      	ldr	r1, [pc, #388]	; (8002480 <sendMsg+0x2cc>)
 80022fa:	461a      	mov	r2, r3
 80022fc:	460b      	mov	r3, r1
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	8013      	strh	r3, [r2, #0]
		strcat(tempARR, "Battery: 90%");
 8002302:	4857      	ldr	r0, [pc, #348]	; (8002460 <sendMsg+0x2ac>)
 8002304:	f7fd ff64 	bl	80001d0 <strlen>
 8002308:	4603      	mov	r3, r0
 800230a:	461a      	mov	r2, r3
 800230c:	4b54      	ldr	r3, [pc, #336]	; (8002460 <sendMsg+0x2ac>)
 800230e:	4413      	add	r3, r2
 8002310:	4a5c      	ldr	r2, [pc, #368]	; (8002484 <sendMsg+0x2d0>)
 8002312:	461c      	mov	r4, r3
 8002314:	4613      	mov	r3, r2
 8002316:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002318:	6020      	str	r0, [r4, #0]
 800231a:	6061      	str	r1, [r4, #4]
 800231c:	60a2      	str	r2, [r4, #8]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	7323      	strb	r3, [r4, #12]
		strcat(tempARR, "\x1A");
 8002322:	484f      	ldr	r0, [pc, #316]	; (8002460 <sendMsg+0x2ac>)
 8002324:	f7fd ff54 	bl	80001d0 <strlen>
 8002328:	4603      	mov	r3, r0
 800232a:	461a      	mov	r2, r3
 800232c:	4b4c      	ldr	r3, [pc, #304]	; (8002460 <sendMsg+0x2ac>)
 800232e:	4413      	add	r3, r2
 8002330:	4955      	ldr	r1, [pc, #340]	; (8002488 <sendMsg+0x2d4>)
 8002332:	461a      	mov	r2, r3
 8002334:	460b      	mov	r3, r1
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	8013      	strh	r3, [r2, #0]
		deleteBuffer(Rx_buffer_sim, Rx_index_sim);
 800233a:	4b47      	ldr	r3, [pc, #284]	; (8002458 <sendMsg+0x2a4>)
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	4619      	mov	r1, r3
 8002340:	4846      	ldr	r0, [pc, #280]	; (800245c <sendMsg+0x2a8>)
 8002342:	f7ff fbd1 	bl	8001ae8 <deleteBuffer>
		if (!SaraU201Command(tempARR, "OK", 5000)) return 0;
 8002346:	f241 3288 	movw	r2, #5000	; 0x1388
 800234a:	4950      	ldr	r1, [pc, #320]	; (800248c <sendMsg+0x2d8>)
 800234c:	4844      	ldr	r0, [pc, #272]	; (8002460 <sendMsg+0x2ac>)
 800234e:	f7ff fbeb 	bl	8001b28 <SaraU201Command>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	f040 810a 	bne.w	800256e <sendMsg+0x3ba>
 800235a:	2300      	movs	r3, #0
 800235c:	e108      	b.n	8002570 <sendMsg+0x3bc>
	}
	else if (Case == 2)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b02      	cmp	r3, #2
 8002362:	f040 8099 	bne.w	8002498 <sendMsg+0x2e4>
	{
		/*Thong bao thao thiet bi+ Link toa do + Phan tram pin*/
		deleteBuffer(tempARR, 100);
 8002366:	2164      	movs	r1, #100	; 0x64
 8002368:	483d      	ldr	r0, [pc, #244]	; (8002460 <sendMsg+0x2ac>)
 800236a:	f7ff fbbd 	bl	8001ae8 <deleteBuffer>
		strcat(tempARR, "Detaching\n");
 800236e:	483c      	ldr	r0, [pc, #240]	; (8002460 <sendMsg+0x2ac>)
 8002370:	f7fd ff2e 	bl	80001d0 <strlen>
 8002374:	4603      	mov	r3, r0
 8002376:	461a      	mov	r2, r3
 8002378:	4b39      	ldr	r3, [pc, #228]	; (8002460 <sendMsg+0x2ac>)
 800237a:	4413      	add	r3, r2
 800237c:	4944      	ldr	r1, [pc, #272]	; (8002490 <sendMsg+0x2dc>)
 800237e:	461a      	mov	r2, r3
 8002380:	460b      	mov	r3, r1
 8002382:	cb03      	ldmia	r3!, {r0, r1}
 8002384:	6010      	str	r0, [r2, #0]
 8002386:	6051      	str	r1, [r2, #4]
 8002388:	8819      	ldrh	r1, [r3, #0]
 800238a:	789b      	ldrb	r3, [r3, #2]
 800238c:	8111      	strh	r1, [r2, #8]
 800238e:	7293      	strb	r3, [r2, #10]
		strcat(tempARR, "http://maps.google.com/maps?q=");
 8002390:	4833      	ldr	r0, [pc, #204]	; (8002460 <sendMsg+0x2ac>)
 8002392:	f7fd ff1d 	bl	80001d0 <strlen>
 8002396:	4603      	mov	r3, r0
 8002398:	461a      	mov	r2, r3
 800239a:	4b31      	ldr	r3, [pc, #196]	; (8002460 <sendMsg+0x2ac>)
 800239c:	4413      	add	r3, r2
 800239e:	4a36      	ldr	r2, [pc, #216]	; (8002478 <sendMsg+0x2c4>)
 80023a0:	461d      	mov	r5, r3
 80023a2:	4614      	mov	r4, r2
 80023a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023a6:	6028      	str	r0, [r5, #0]
 80023a8:	6069      	str	r1, [r5, #4]
 80023aa:	60aa      	str	r2, [r5, #8]
 80023ac:	60eb      	str	r3, [r5, #12]
 80023ae:	cc07      	ldmia	r4!, {r0, r1, r2}
 80023b0:	6128      	str	r0, [r5, #16]
 80023b2:	6169      	str	r1, [r5, #20]
 80023b4:	61aa      	str	r2, [r5, #24]
 80023b6:	8823      	ldrh	r3, [r4, #0]
 80023b8:	78a2      	ldrb	r2, [r4, #2]
 80023ba:	83ab      	strh	r3, [r5, #28]
 80023bc:	4613      	mov	r3, r2
 80023be:	77ab      	strb	r3, [r5, #30]
		strcat(tempARR, Latitude);
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4827      	ldr	r0, [pc, #156]	; (8002460 <sendMsg+0x2ac>)
 80023c4:	f006 ff8c 	bl	80092e0 <strcat>
		strcat(tempARR, ",");
 80023c8:	4825      	ldr	r0, [pc, #148]	; (8002460 <sendMsg+0x2ac>)
 80023ca:	f7fd ff01 	bl	80001d0 <strlen>
 80023ce:	4603      	mov	r3, r0
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b23      	ldr	r3, [pc, #140]	; (8002460 <sendMsg+0x2ac>)
 80023d4:	4413      	add	r3, r2
 80023d6:	4929      	ldr	r1, [pc, #164]	; (800247c <sendMsg+0x2c8>)
 80023d8:	461a      	mov	r2, r3
 80023da:	460b      	mov	r3, r1
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	8013      	strh	r3, [r2, #0]
		strcat(tempARR, Longtitude);
 80023e0:	6839      	ldr	r1, [r7, #0]
 80023e2:	481f      	ldr	r0, [pc, #124]	; (8002460 <sendMsg+0x2ac>)
 80023e4:	f006 ff7c 	bl	80092e0 <strcat>
		strcat(tempARR, "\n");
 80023e8:	481d      	ldr	r0, [pc, #116]	; (8002460 <sendMsg+0x2ac>)
 80023ea:	f7fd fef1 	bl	80001d0 <strlen>
 80023ee:	4603      	mov	r3, r0
 80023f0:	461a      	mov	r2, r3
 80023f2:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <sendMsg+0x2ac>)
 80023f4:	4413      	add	r3, r2
 80023f6:	4922      	ldr	r1, [pc, #136]	; (8002480 <sendMsg+0x2cc>)
 80023f8:	461a      	mov	r2, r3
 80023fa:	460b      	mov	r3, r1
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	8013      	strh	r3, [r2, #0]
		strcat(tempARR, "Battery:85%");
 8002400:	4817      	ldr	r0, [pc, #92]	; (8002460 <sendMsg+0x2ac>)
 8002402:	f7fd fee5 	bl	80001d0 <strlen>
 8002406:	4603      	mov	r3, r0
 8002408:	461a      	mov	r2, r3
 800240a:	4b15      	ldr	r3, [pc, #84]	; (8002460 <sendMsg+0x2ac>)
 800240c:	4413      	add	r3, r2
 800240e:	4a21      	ldr	r2, [pc, #132]	; (8002494 <sendMsg+0x2e0>)
 8002410:	461c      	mov	r4, r3
 8002412:	4613      	mov	r3, r2
 8002414:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002416:	6020      	str	r0, [r4, #0]
 8002418:	6061      	str	r1, [r4, #4]
 800241a:	60a2      	str	r2, [r4, #8]
		strcat(tempARR, "\x1A");
 800241c:	4810      	ldr	r0, [pc, #64]	; (8002460 <sendMsg+0x2ac>)
 800241e:	f7fd fed7 	bl	80001d0 <strlen>
 8002422:	4603      	mov	r3, r0
 8002424:	461a      	mov	r2, r3
 8002426:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <sendMsg+0x2ac>)
 8002428:	4413      	add	r3, r2
 800242a:	4917      	ldr	r1, [pc, #92]	; (8002488 <sendMsg+0x2d4>)
 800242c:	461a      	mov	r2, r3
 800242e:	460b      	mov	r3, r1
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	8013      	strh	r3, [r2, #0]
		deleteBuffer(Rx_buffer_sim, Rx_index_sim);
 8002434:	4b08      	ldr	r3, [pc, #32]	; (8002458 <sendMsg+0x2a4>)
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	4619      	mov	r1, r3
 800243a:	4808      	ldr	r0, [pc, #32]	; (800245c <sendMsg+0x2a8>)
 800243c:	f7ff fb54 	bl	8001ae8 <deleteBuffer>
		if (!SaraU201Command(tempARR, "OK", 5000)) return 0;
 8002440:	f241 3288 	movw	r2, #5000	; 0x1388
 8002444:	4911      	ldr	r1, [pc, #68]	; (800248c <sendMsg+0x2d8>)
 8002446:	4806      	ldr	r0, [pc, #24]	; (8002460 <sendMsg+0x2ac>)
 8002448:	f7ff fb6e 	bl	8001b28 <SaraU201Command>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	f040 808d 	bne.w	800256e <sendMsg+0x3ba>
 8002454:	2300      	movs	r3, #0
 8002456:	e08b      	b.n	8002570 <sendMsg+0x3bc>
 8002458:	20000378 	.word	0x20000378
 800245c:	200003ac 	.word	0x200003ac
 8002460:	200006c8 	.word	0x200006c8
 8002464:	0800e7b0 	.word	0x0800e7b0
 8002468:	0800e7b4 	.word	0x0800e7b4
 800246c:	0800e7c0 	.word	0x0800e7c0
 8002470:	0800e7c4 	.word	0x0800e7c4
 8002474:	0800e7c8 	.word	0x0800e7c8
 8002478:	0800e7d8 	.word	0x0800e7d8
 800247c:	0800e6d0 	.word	0x0800e6d0
 8002480:	0800e7f8 	.word	0x0800e7f8
 8002484:	0800e7fc 	.word	0x0800e7fc
 8002488:	0800e80c 	.word	0x0800e80c
 800248c:	0800e698 	.word	0x0800e698
 8002490:	0800e810 	.word	0x0800e810
 8002494:	0800e81c 	.word	0x0800e81c
	}
	else if (Case == 3)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b03      	cmp	r3, #3
 800249c:	d167      	bne.n	800256e <sendMsg+0x3ba>
	{
		/*Gửi link đuong dan toa do + Phan tram pin*/
		deleteBuffer(tempARR, 100);
 800249e:	2164      	movs	r1, #100	; 0x64
 80024a0:	4835      	ldr	r0, [pc, #212]	; (8002578 <sendMsg+0x3c4>)
 80024a2:	f7ff fb21 	bl	8001ae8 <deleteBuffer>
		strcat(tempARR, "http://maps.google.com/maps?q=");
 80024a6:	4834      	ldr	r0, [pc, #208]	; (8002578 <sendMsg+0x3c4>)
 80024a8:	f7fd fe92 	bl	80001d0 <strlen>
 80024ac:	4603      	mov	r3, r0
 80024ae:	461a      	mov	r2, r3
 80024b0:	4b31      	ldr	r3, [pc, #196]	; (8002578 <sendMsg+0x3c4>)
 80024b2:	4413      	add	r3, r2
 80024b4:	4a31      	ldr	r2, [pc, #196]	; (800257c <sendMsg+0x3c8>)
 80024b6:	461d      	mov	r5, r3
 80024b8:	4614      	mov	r4, r2
 80024ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024bc:	6028      	str	r0, [r5, #0]
 80024be:	6069      	str	r1, [r5, #4]
 80024c0:	60aa      	str	r2, [r5, #8]
 80024c2:	60eb      	str	r3, [r5, #12]
 80024c4:	cc07      	ldmia	r4!, {r0, r1, r2}
 80024c6:	6128      	str	r0, [r5, #16]
 80024c8:	6169      	str	r1, [r5, #20]
 80024ca:	61aa      	str	r2, [r5, #24]
 80024cc:	8823      	ldrh	r3, [r4, #0]
 80024ce:	78a2      	ldrb	r2, [r4, #2]
 80024d0:	83ab      	strh	r3, [r5, #28]
 80024d2:	4613      	mov	r3, r2
 80024d4:	77ab      	strb	r3, [r5, #30]
		strcat(tempARR, Latitude);
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4827      	ldr	r0, [pc, #156]	; (8002578 <sendMsg+0x3c4>)
 80024da:	f006 ff01 	bl	80092e0 <strcat>
		strcat(tempARR, ",");
 80024de:	4826      	ldr	r0, [pc, #152]	; (8002578 <sendMsg+0x3c4>)
 80024e0:	f7fd fe76 	bl	80001d0 <strlen>
 80024e4:	4603      	mov	r3, r0
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b23      	ldr	r3, [pc, #140]	; (8002578 <sendMsg+0x3c4>)
 80024ea:	4413      	add	r3, r2
 80024ec:	4924      	ldr	r1, [pc, #144]	; (8002580 <sendMsg+0x3cc>)
 80024ee:	461a      	mov	r2, r3
 80024f0:	460b      	mov	r3, r1
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	8013      	strh	r3, [r2, #0]
		strcat(tempARR, Longtitude);
 80024f6:	6839      	ldr	r1, [r7, #0]
 80024f8:	481f      	ldr	r0, [pc, #124]	; (8002578 <sendMsg+0x3c4>)
 80024fa:	f006 fef1 	bl	80092e0 <strcat>
		strcat(tempARR, "\n");
 80024fe:	481e      	ldr	r0, [pc, #120]	; (8002578 <sendMsg+0x3c4>)
 8002500:	f7fd fe66 	bl	80001d0 <strlen>
 8002504:	4603      	mov	r3, r0
 8002506:	461a      	mov	r2, r3
 8002508:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <sendMsg+0x3c4>)
 800250a:	4413      	add	r3, r2
 800250c:	491d      	ldr	r1, [pc, #116]	; (8002584 <sendMsg+0x3d0>)
 800250e:	461a      	mov	r2, r3
 8002510:	460b      	mov	r3, r1
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	8013      	strh	r3, [r2, #0]
		strcat(tempARR, "Battery:");
 8002516:	4818      	ldr	r0, [pc, #96]	; (8002578 <sendMsg+0x3c4>)
 8002518:	f7fd fe5a 	bl	80001d0 <strlen>
 800251c:	4603      	mov	r3, r0
 800251e:	461a      	mov	r2, r3
 8002520:	4b15      	ldr	r3, [pc, #84]	; (8002578 <sendMsg+0x3c4>)
 8002522:	4413      	add	r3, r2
 8002524:	4918      	ldr	r1, [pc, #96]	; (8002588 <sendMsg+0x3d4>)
 8002526:	461a      	mov	r2, r3
 8002528:	460b      	mov	r3, r1
 800252a:	cb03      	ldmia	r3!, {r0, r1}
 800252c:	6010      	str	r0, [r2, #0]
 800252e:	6051      	str	r1, [r2, #4]
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	7213      	strb	r3, [r2, #8]
		strcat(tempARR, "\x1A");
 8002534:	4810      	ldr	r0, [pc, #64]	; (8002578 <sendMsg+0x3c4>)
 8002536:	f7fd fe4b 	bl	80001d0 <strlen>
 800253a:	4603      	mov	r3, r0
 800253c:	461a      	mov	r2, r3
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <sendMsg+0x3c4>)
 8002540:	4413      	add	r3, r2
 8002542:	4912      	ldr	r1, [pc, #72]	; (800258c <sendMsg+0x3d8>)
 8002544:	461a      	mov	r2, r3
 8002546:	460b      	mov	r3, r1
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	8013      	strh	r3, [r2, #0]
		deleteBuffer(Rx_buffer_sim, Rx_index_sim);
 800254c:	4b10      	ldr	r3, [pc, #64]	; (8002590 <sendMsg+0x3dc>)
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	4619      	mov	r1, r3
 8002552:	4810      	ldr	r0, [pc, #64]	; (8002594 <sendMsg+0x3e0>)
 8002554:	f7ff fac8 	bl	8001ae8 <deleteBuffer>
		if (!SaraU201Command(tempARR, "OK", 5000)) return 0;
 8002558:	f241 3288 	movw	r2, #5000	; 0x1388
 800255c:	490e      	ldr	r1, [pc, #56]	; (8002598 <sendMsg+0x3e4>)
 800255e:	4806      	ldr	r0, [pc, #24]	; (8002578 <sendMsg+0x3c4>)
 8002560:	f7ff fae2 	bl	8001b28 <SaraU201Command>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <sendMsg+0x3ba>
 800256a:	2300      	movs	r3, #0
 800256c:	e000      	b.n	8002570 <sendMsg+0x3bc>
	}
	return 1;
 800256e:	2301      	movs	r3, #1
}
 8002570:	4618      	mov	r0, r3
 8002572:	3720      	adds	r7, #32
 8002574:	46bd      	mov	sp, r7
 8002576:	bdb0      	pop	{r4, r5, r7, pc}
 8002578:	200006c8 	.word	0x200006c8
 800257c:	0800e7d8 	.word	0x0800e7d8
 8002580:	0800e6d0 	.word	0x0800e6d0
 8002584:	0800e7f8 	.word	0x0800e7f8
 8002588:	0800e828 	.word	0x0800e828
 800258c:	0800e80c 	.word	0x0800e80c
 8002590:	20000378 	.word	0x20000378
 8002594:	200003ac 	.word	0x200003ac
 8002598:	0800e698 	.word	0x0800e698

0800259c <makeCall>:
uint8_t makeCall(char phoneNumber[])
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
	char Phone[12] = {0};
 80025a4:	f107 030c 	add.w	r3, r7, #12
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
	uint32_t count = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61bb      	str	r3, [r7, #24]
	uint8_t Call = 0; //Bien dem so cuoc goi
 80025b4:	2300      	movs	r3, #0
 80025b6:	77fb      	strb	r3, [r7, #31]
	//Cai dat thong bao tinh trang cuoc goi(Set reporting call status)
	deleteBuffer(Rx_buffer_sim, 300);
 80025b8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80025bc:	4847      	ldr	r0, [pc, #284]	; (80026dc <makeCall+0x140>)
 80025be:	f7ff fa93 	bl	8001ae8 <deleteBuffer>
	if (!SaraU201Command("AT+UCALLSTAT=1\r\n", "OK", 1000)) return 0;
 80025c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025c6:	4946      	ldr	r1, [pc, #280]	; (80026e0 <makeCall+0x144>)
 80025c8:	4846      	ldr	r0, [pc, #280]	; (80026e4 <makeCall+0x148>)
 80025ca:	f7ff faad 	bl	8001b28 <SaraU201Command>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <makeCall+0x3c>
 80025d4:	2300      	movs	r3, #0
 80025d6:	e07c      	b.n	80026d2 <makeCall+0x136>
	do
	{
		//Xoa bo dem
		deleteBuffer(Rx_buffer_sim, 256);
 80025d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025dc:	483f      	ldr	r0, [pc, #252]	; (80026dc <makeCall+0x140>)
 80025de:	f7ff fa83 	bl	8001ae8 <deleteBuffer>
		deleteBuffer(tempARR, 100);
 80025e2:	2164      	movs	r1, #100	; 0x64
 80025e4:	4840      	ldr	r0, [pc, #256]	; (80026e8 <makeCall+0x14c>)
 80025e6:	f7ff fa7f 	bl	8001ae8 <deleteBuffer>
		deleteBuffer(Phone, 12);
 80025ea:	f107 030c 	add.w	r3, r7, #12
 80025ee:	210c      	movs	r1, #12
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fa79 	bl	8001ae8 <deleteBuffer>
		//Noi chuoi
		strcat(Phone, "+84");
 80025f6:	f107 030c 	add.w	r3, r7, #12
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fd fde8 	bl	80001d0 <strlen>
 8002600:	4603      	mov	r3, r0
 8002602:	461a      	mov	r2, r3
 8002604:	f107 030c 	add.w	r3, r7, #12
 8002608:	4413      	add	r3, r2
 800260a:	4a38      	ldr	r2, [pc, #224]	; (80026ec <makeCall+0x150>)
 800260c:	6810      	ldr	r0, [r2, #0]
 800260e:	6018      	str	r0, [r3, #0]
		strcat(Phone, phoneNumber);
 8002610:	f107 030c 	add.w	r3, r7, #12
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4618      	mov	r0, r3
 8002618:	f006 fe62 	bl	80092e0 <strcat>
		strcat(tempARR, "ATD");
 800261c:	4832      	ldr	r0, [pc, #200]	; (80026e8 <makeCall+0x14c>)
 800261e:	f7fd fdd7 	bl	80001d0 <strlen>
 8002622:	4603      	mov	r3, r0
 8002624:	461a      	mov	r2, r3
 8002626:	4b30      	ldr	r3, [pc, #192]	; (80026e8 <makeCall+0x14c>)
 8002628:	4413      	add	r3, r2
 800262a:	4a31      	ldr	r2, [pc, #196]	; (80026f0 <makeCall+0x154>)
 800262c:	6810      	ldr	r0, [r2, #0]
 800262e:	6018      	str	r0, [r3, #0]
		strcat(tempARR, Phone);
 8002630:	f107 030c 	add.w	r3, r7, #12
 8002634:	4619      	mov	r1, r3
 8002636:	482c      	ldr	r0, [pc, #176]	; (80026e8 <makeCall+0x14c>)
 8002638:	f006 fe52 	bl	80092e0 <strcat>
		strcat(tempARR, ";\r\n");
 800263c:	482a      	ldr	r0, [pc, #168]	; (80026e8 <makeCall+0x14c>)
 800263e:	f7fd fdc7 	bl	80001d0 <strlen>
 8002642:	4603      	mov	r3, r0
 8002644:	461a      	mov	r2, r3
 8002646:	4b28      	ldr	r3, [pc, #160]	; (80026e8 <makeCall+0x14c>)
 8002648:	4413      	add	r3, r2
 800264a:	4a2a      	ldr	r2, [pc, #168]	; (80026f4 <makeCall+0x158>)
 800264c:	6810      	ldr	r0, [r2, #0]
 800264e:	6018      	str	r0, [r3, #0]
//		contcatenateString(Phone,"+84",phoneNumber,"","");
//		contcatenateString(tempARR, "ATD",Phone, ";\r\n", "");
		//Dem thoi gian
		count = HAL_GetTick();
 8002650:	f001 fcfe 	bl	8004050 <HAL_GetTick>
 8002654:	61b8      	str	r0, [r7, #24]
		//Goi dien den khi nhac may
		if (!SaraU201Command(tempARR, "OK", 2000)) return 0;
 8002656:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800265a:	4921      	ldr	r1, [pc, #132]	; (80026e0 <makeCall+0x144>)
 800265c:	4822      	ldr	r0, [pc, #136]	; (80026e8 <makeCall+0x14c>)
 800265e:	f7ff fa63 	bl	8001b28 <SaraU201Command>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d108      	bne.n	800267a <makeCall+0xde>
 8002668:	2300      	movs	r3, #0
 800266a:	e032      	b.n	80026d2 <makeCall+0x136>
		while (HAL_GetTick() - count < 40000)//HAL_GetTick() - count < 43000
		{
			if (strstr(Rx_buffer_sim, "0"))
 800266c:	2130      	movs	r1, #48	; 0x30
 800266e:	481b      	ldr	r0, [pc, #108]	; (80026dc <makeCall+0x140>)
 8002670:	f006 fe45 	bl	80092fe <strchr>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d109      	bne.n	800268e <makeCall+0xf2>
		while (HAL_GetTick() - count < 40000)//HAL_GetTick() - count < 43000
 800267a:	f001 fce9 	bl	8004050 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8002688:	4293      	cmp	r3, r2
 800268a:	d9ef      	bls.n	800266c <makeCall+0xd0>
 800268c:	e000      	b.n	8002690 <makeCall+0xf4>
				break;
 800268e:	bf00      	nop
		}
		//Tat cuoc goi
		if (!SaraU201Command("ATH\r\n", "OK", 500)) return 0;
 8002690:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002694:	4912      	ldr	r1, [pc, #72]	; (80026e0 <makeCall+0x144>)
 8002696:	4818      	ldr	r0, [pc, #96]	; (80026f8 <makeCall+0x15c>)
 8002698:	f7ff fa46 	bl	8001b28 <SaraU201Command>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <makeCall+0x10a>
 80026a2:	2300      	movs	r3, #0
 80026a4:	e015      	b.n	80026d2 <makeCall+0x136>
		Call++;
 80026a6:	7ffb      	ldrb	r3, [r7, #31]
 80026a8:	3301      	adds	r3, #1
 80026aa:	77fb      	strb	r3, [r7, #31]
		HAL_Delay(3000);
 80026ac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80026b0:	f001 fcda 	bl	8004068 <HAL_Delay>
		if (Call == 5) break;
 80026b4:	7ffb      	ldrb	r3, [r7, #31]
 80026b6:	2b05      	cmp	r3, #5
 80026b8:	d009      	beq.n	80026ce <makeCall+0x132>
	}
	while(HAL_GetTick() - count > 40000);
 80026ba:	f001 fcc9 	bl	8004050 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f649 4240 	movw	r2, #40000	; 0x9c40
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d885      	bhi.n	80025d8 <makeCall+0x3c>
 80026cc:	e000      	b.n	80026d0 <makeCall+0x134>
		if (Call == 5) break;
 80026ce:	bf00      	nop
	return 1;
 80026d0:	2301      	movs	r3, #1
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3720      	adds	r7, #32
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	200003ac 	.word	0x200003ac
 80026e0:	0800e698 	.word	0x0800e698
 80026e4:	0800e834 	.word	0x0800e834
 80026e8:	200006c8 	.word	0x200006c8
 80026ec:	0800e7b0 	.word	0x0800e7b0
 80026f0:	0800e848 	.word	0x0800e848
 80026f4:	0800e84c 	.word	0x0800e84c
 80026f8:	0800e850 	.word	0x0800e850

080026fc <CutString>:

void CutString(int stringpos, int startpos, char parentstring[], char childstring[], char startchar[], char endchar[])
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	603b      	str	r3, [r7, #0]
	//Du lieu bat dau tu day
	int count = 0;
 800270a:	2300      	movs	r3, #0
 800270c:	61fb      	str	r3, [r7, #28]
	for (int i = startpos; i < strlen(parentstring); i++)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	61bb      	str	r3, [r7, #24]
 8002712:	e037      	b.n	8002784 <CutString+0x88>
	{
		if (parentstring[i] == startchar[0])
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	781a      	ldrb	r2, [r3, #0]
 800271c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d102      	bne.n	800272a <CutString+0x2e>
			count++;
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	3301      	adds	r3, #1
 8002728:	61fb      	str	r3, [r7, #28]
		if (count == stringpos)
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	429a      	cmp	r2, r3
 8002730:	d125      	bne.n	800277e <CutString+0x82>
		{
			int t = 0;
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
			for (int j = i + 1; j < strlen(parentstring); j++)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	3301      	adds	r3, #1
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	e015      	b.n	800276a <CutString+0x6e>
			{
				if (parentstring[j] == endchar[0]) break;
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	4413      	add	r3, r2
 8002744:	781a      	ldrb	r2, [r3, #0]
 8002746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d015      	beq.n	800277a <CutString+0x7e>
				childstring[t] = parentstring[j];
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	441a      	add	r2, r3
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	6839      	ldr	r1, [r7, #0]
 8002758:	440b      	add	r3, r1
 800275a:	7812      	ldrb	r2, [r2, #0]
 800275c:	701a      	strb	r2, [r3, #0]
				t++;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	3301      	adds	r3, #1
 8002762:	617b      	str	r3, [r7, #20]
			for (int j = i + 1; j < strlen(parentstring); j++)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	3301      	adds	r3, #1
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7fd fd30 	bl	80001d0 <strlen>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	429a      	cmp	r2, r3
 8002776:	d8e2      	bhi.n	800273e <CutString+0x42>
			}
			break;
 8002778:	e00b      	b.n	8002792 <CutString+0x96>
				if (parentstring[j] == endchar[0]) break;
 800277a:	bf00      	nop
			break;
 800277c:	e009      	b.n	8002792 <CutString+0x96>
	for (int i = startpos; i < strlen(parentstring); i++)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	3301      	adds	r3, #1
 8002782:	61bb      	str	r3, [r7, #24]
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7fd fd23 	bl	80001d0 <strlen>
 800278a:	4602      	mov	r2, r0
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	429a      	cmp	r2, r3
 8002790:	d8c0      	bhi.n	8002714 <CutString+0x18>
		}
	}
}
 8002792:	bf00      	nop
 8002794:	3720      	adds	r7, #32
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <DataServer>:
uint8_t DataServer(char Latitude[], char Longtitude[], char Battery[])
{
 800279c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
	/*Check the GPRS attach status*/
//	while(HAL_GPIO_ReadPin(STAT_SIM_GPIO_Port, STAT_SIM_Pin)==0)
//	{
//	}
	deleteBuffer(Rx_buffer_sim, Rx_index_sim);
 80027a8:	4b75      	ldr	r3, [pc, #468]	; (8002980 <DataServer+0x1e4>)
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	4619      	mov	r1, r3
 80027ae:	4875      	ldr	r0, [pc, #468]	; (8002984 <DataServer+0x1e8>)
 80027b0:	f7ff f99a 	bl	8001ae8 <deleteBuffer>
	if (!SaraU201Command("AT+CSQ\r\n", "OK\r\n", 10000)) return 0;
 80027b4:	f242 7210 	movw	r2, #10000	; 0x2710
 80027b8:	4973      	ldr	r1, [pc, #460]	; (8002988 <DataServer+0x1ec>)
 80027ba:	4874      	ldr	r0, [pc, #464]	; (800298c <DataServer+0x1f0>)
 80027bc:	f7ff f9b4 	bl	8001b28 <SaraU201Command>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <DataServer+0x2e>
 80027c6:	2300      	movs	r3, #0
 80027c8:	e0d6      	b.n	8002978 <DataServer+0x1dc>
	if (!checkRSSI()) return 0;
 80027ca:	f7ff fac5 	bl	8001d58 <checkRSSI>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <DataServer+0x3c>
 80027d4:	2300      	movs	r3, #0
 80027d6:	e0cf      	b.n	8002978 <DataServer+0x1dc>
	deleteBuffer(Rx_buffer_sim, Rx_index_sim);
 80027d8:	4b69      	ldr	r3, [pc, #420]	; (8002980 <DataServer+0x1e4>)
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	4619      	mov	r1, r3
 80027de:	4869      	ldr	r0, [pc, #420]	; (8002984 <DataServer+0x1e8>)
 80027e0:	f7ff f982 	bl	8001ae8 <deleteBuffer>
	if (!SaraU201Command("AT+CGATT?\r\n", "+CGATT: 1\r\n\r\nOK\r\n", 10000)) return 0;
 80027e4:	f242 7210 	movw	r2, #10000	; 0x2710
 80027e8:	4969      	ldr	r1, [pc, #420]	; (8002990 <DataServer+0x1f4>)
 80027ea:	486a      	ldr	r0, [pc, #424]	; (8002994 <DataServer+0x1f8>)
 80027ec:	f7ff f99c 	bl	8001b28 <SaraU201Command>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <DataServer+0x5e>
 80027f6:	2300      	movs	r3, #0
 80027f8:	e0be      	b.n	8002978 <DataServer+0x1dc>
	/*Activate the GPRS connection.*/
	deleteBuffer(Rx_buffer_sim, Rx_index_sim);
 80027fa:	4b61      	ldr	r3, [pc, #388]	; (8002980 <DataServer+0x1e4>)
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	4619      	mov	r1, r3
 8002800:	4860      	ldr	r0, [pc, #384]	; (8002984 <DataServer+0x1e8>)
 8002802:	f7ff f971 	bl	8001ae8 <deleteBuffer>
	if (!SaraU201Command("AT+UPSDA=0,3\r\n", "OK\r\n", 90000))
 8002806:	4a64      	ldr	r2, [pc, #400]	; (8002998 <DataServer+0x1fc>)
 8002808:	495f      	ldr	r1, [pc, #380]	; (8002988 <DataServer+0x1ec>)
 800280a:	4864      	ldr	r0, [pc, #400]	; (800299c <DataServer+0x200>)
 800280c:	f7ff f98c 	bl	8001b28 <SaraU201Command>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d107      	bne.n	8002826 <DataServer+0x8a>
	{
		SaraU201Command("AT+UPSDA=0,4\r\n", "OK\r\n", 5000);
 8002816:	f241 3288 	movw	r2, #5000	; 0x1388
 800281a:	495b      	ldr	r1, [pc, #364]	; (8002988 <DataServer+0x1ec>)
 800281c:	4860      	ldr	r0, [pc, #384]	; (80029a0 <DataServer+0x204>)
 800281e:	f7ff f983 	bl	8001b28 <SaraU201Command>
		return 0;
 8002822:	2300      	movs	r3, #0
 8002824:	e0a8      	b.n	8002978 <DataServer+0x1dc>
	}
	/*Set the server domain name*/
	deleteBuffer(Rx_buffer_sim, Rx_index_sim);
 8002826:	4b56      	ldr	r3, [pc, #344]	; (8002980 <DataServer+0x1e4>)
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	4619      	mov	r1, r3
 800282c:	4855      	ldr	r0, [pc, #340]	; (8002984 <DataServer+0x1e8>)
 800282e:	f7ff f95b 	bl	8001ae8 <deleteBuffer>
	if (!SaraU201Command("AT+UHTTP=0,1,\"ipteks.tapit.vn\"\r\n", "OK\r\n", 2000)) return 0;
 8002832:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002836:	4954      	ldr	r1, [pc, #336]	; (8002988 <DataServer+0x1ec>)
 8002838:	485a      	ldr	r0, [pc, #360]	; (80029a4 <DataServer+0x208>)
 800283a:	f7ff f975 	bl	8001b28 <SaraU201Command>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <DataServer+0xac>
 8002844:	2300      	movs	r3, #0
 8002846:	e097      	b.n	8002978 <DataServer+0x1dc>

	/*Xoa bo dem va noi chuoi*/
	deleteBuffer(tempARR, 100);
 8002848:	2164      	movs	r1, #100	; 0x64
 800284a:	4857      	ldr	r0, [pc, #348]	; (80029a8 <DataServer+0x20c>)
 800284c:	f7ff f94c 	bl	8001ae8 <deleteBuffer>

	strcat(tempARR, "AT+UHTTPC=0,1,\"/insert.php?device=1&lat=");
 8002850:	4855      	ldr	r0, [pc, #340]	; (80029a8 <DataServer+0x20c>)
 8002852:	f7fd fcbd 	bl	80001d0 <strlen>
 8002856:	4603      	mov	r3, r0
 8002858:	461a      	mov	r2, r3
 800285a:	4b53      	ldr	r3, [pc, #332]	; (80029a8 <DataServer+0x20c>)
 800285c:	4413      	add	r3, r2
 800285e:	4a53      	ldr	r2, [pc, #332]	; (80029ac <DataServer+0x210>)
 8002860:	4614      	mov	r4, r2
 8002862:	469c      	mov	ip, r3
 8002864:	f104 0e20 	add.w	lr, r4, #32
 8002868:	4665      	mov	r5, ip
 800286a:	4626      	mov	r6, r4
 800286c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800286e:	6028      	str	r0, [r5, #0]
 8002870:	6069      	str	r1, [r5, #4]
 8002872:	60aa      	str	r2, [r5, #8]
 8002874:	60eb      	str	r3, [r5, #12]
 8002876:	3410      	adds	r4, #16
 8002878:	f10c 0c10 	add.w	ip, ip, #16
 800287c:	4574      	cmp	r4, lr
 800287e:	d1f3      	bne.n	8002868 <DataServer+0xcc>
 8002880:	4662      	mov	r2, ip
 8002882:	4623      	mov	r3, r4
 8002884:	cb03      	ldmia	r3!, {r0, r1}
 8002886:	6010      	str	r0, [r2, #0]
 8002888:	6051      	str	r1, [r2, #4]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	7213      	strb	r3, [r2, #8]
	strcat(tempARR, Latitude);
 800288e:	68f9      	ldr	r1, [r7, #12]
 8002890:	4845      	ldr	r0, [pc, #276]	; (80029a8 <DataServer+0x20c>)
 8002892:	f006 fd25 	bl	80092e0 <strcat>
	strcat(tempARR, "&lng=");
 8002896:	4844      	ldr	r0, [pc, #272]	; (80029a8 <DataServer+0x20c>)
 8002898:	f7fd fc9a 	bl	80001d0 <strlen>
 800289c:	4603      	mov	r3, r0
 800289e:	461a      	mov	r2, r3
 80028a0:	4b41      	ldr	r3, [pc, #260]	; (80029a8 <DataServer+0x20c>)
 80028a2:	4413      	add	r3, r2
 80028a4:	4a42      	ldr	r2, [pc, #264]	; (80029b0 <DataServer+0x214>)
 80028a6:	6810      	ldr	r0, [r2, #0]
 80028a8:	6018      	str	r0, [r3, #0]
 80028aa:	8892      	ldrh	r2, [r2, #4]
 80028ac:	809a      	strh	r2, [r3, #4]
	strcat(tempARR, Longtitude);
 80028ae:	68b9      	ldr	r1, [r7, #8]
 80028b0:	483d      	ldr	r0, [pc, #244]	; (80029a8 <DataServer+0x20c>)
 80028b2:	f006 fd15 	bl	80092e0 <strcat>

	strcat(tempARR, "&pin=");
 80028b6:	483c      	ldr	r0, [pc, #240]	; (80029a8 <DataServer+0x20c>)
 80028b8:	f7fd fc8a 	bl	80001d0 <strlen>
 80028bc:	4603      	mov	r3, r0
 80028be:	461a      	mov	r2, r3
 80028c0:	4b39      	ldr	r3, [pc, #228]	; (80029a8 <DataServer+0x20c>)
 80028c2:	4413      	add	r3, r2
 80028c4:	4a3b      	ldr	r2, [pc, #236]	; (80029b4 <DataServer+0x218>)
 80028c6:	6810      	ldr	r0, [r2, #0]
 80028c8:	6018      	str	r0, [r3, #0]
 80028ca:	8892      	ldrh	r2, [r2, #4]
 80028cc:	809a      	strh	r2, [r3, #4]
	strcat(tempARR, Battery);
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	4835      	ldr	r0, [pc, #212]	; (80029a8 <DataServer+0x20c>)
 80028d2:	f006 fd05 	bl	80092e0 <strcat>
	strcat(tempARR, "\",\"get.ffs\"");
 80028d6:	4834      	ldr	r0, [pc, #208]	; (80029a8 <DataServer+0x20c>)
 80028d8:	f7fd fc7a 	bl	80001d0 <strlen>
 80028dc:	4603      	mov	r3, r0
 80028de:	461a      	mov	r2, r3
 80028e0:	4b31      	ldr	r3, [pc, #196]	; (80029a8 <DataServer+0x20c>)
 80028e2:	4413      	add	r3, r2
 80028e4:	4a34      	ldr	r2, [pc, #208]	; (80029b8 <DataServer+0x21c>)
 80028e6:	461c      	mov	r4, r3
 80028e8:	4613      	mov	r3, r2
 80028ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80028ec:	6020      	str	r0, [r4, #0]
 80028ee:	6061      	str	r1, [r4, #4]
 80028f0:	60a2      	str	r2, [r4, #8]
	strcat(tempARR, "\r\n");
 80028f2:	482d      	ldr	r0, [pc, #180]	; (80029a8 <DataServer+0x20c>)
 80028f4:	f7fd fc6c 	bl	80001d0 <strlen>
 80028f8:	4603      	mov	r3, r0
 80028fa:	461a      	mov	r2, r3
 80028fc:	4b2a      	ldr	r3, [pc, #168]	; (80029a8 <DataServer+0x20c>)
 80028fe:	4413      	add	r3, r2
 8002900:	4a2e      	ldr	r2, [pc, #184]	; (80029bc <DataServer+0x220>)
 8002902:	8811      	ldrh	r1, [r2, #0]
 8002904:	7892      	ldrb	r2, [r2, #2]
 8002906:	8019      	strh	r1, [r3, #0]
 8002908:	709a      	strb	r2, [r3, #2]
//	contcatenateString(tempARR, "AT+UHTTPC=0,1,\"/insert.php?device=1&lat=", Latitude, "&lng=", Longtitude);
//	contcatenateString(tempARR, "&pin=",Battery, "\",\"get.ffs\"", "\r\n");
	/*GET request to HTTP server*/
	deleteBuffer(Rx_buffer_sim, 100);
 800290a:	2164      	movs	r1, #100	; 0x64
 800290c:	481d      	ldr	r0, [pc, #116]	; (8002984 <DataServer+0x1e8>)
 800290e:	f7ff f8eb 	bl	8001ae8 <deleteBuffer>
	if (!SaraU201Command(tempARR, "+UUHTTPCR: 0,1,1\r\n", 10000))
 8002912:	f242 7210 	movw	r2, #10000	; 0x2710
 8002916:	492a      	ldr	r1, [pc, #168]	; (80029c0 <DataServer+0x224>)
 8002918:	4823      	ldr	r0, [pc, #140]	; (80029a8 <DataServer+0x20c>)
 800291a:	f7ff f905 	bl	8001b28 <SaraU201Command>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d107      	bne.n	8002934 <DataServer+0x198>
	{
		SaraU201Command("AT+UPSDA=0,4\r\n", "OK", 5000);
 8002924:	f241 3288 	movw	r2, #5000	; 0x1388
 8002928:	4926      	ldr	r1, [pc, #152]	; (80029c4 <DataServer+0x228>)
 800292a:	481d      	ldr	r0, [pc, #116]	; (80029a0 <DataServer+0x204>)
 800292c:	f7ff f8fc 	bl	8001b28 <SaraU201Command>
		return 0;
 8002930:	2300      	movs	r3, #0
 8002932:	e021      	b.n	8002978 <DataServer+0x1dc>
	}
	/*Context deactivation*/
	deleteBuffer(Rx_buffer_sim, Rx_index_sim);
 8002934:	4b12      	ldr	r3, [pc, #72]	; (8002980 <DataServer+0x1e4>)
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	4619      	mov	r1, r3
 800293a:	4812      	ldr	r0, [pc, #72]	; (8002984 <DataServer+0x1e8>)
 800293c:	f7ff f8d4 	bl	8001ae8 <deleteBuffer>
	if (!SaraU201Command("AT+UPSDA=0,4\r\n", "OK", 5000)) return 0;
 8002940:	f241 3288 	movw	r2, #5000	; 0x1388
 8002944:	491f      	ldr	r1, [pc, #124]	; (80029c4 <DataServer+0x228>)
 8002946:	4816      	ldr	r0, [pc, #88]	; (80029a0 <DataServer+0x204>)
 8002948:	f7ff f8ee 	bl	8001b28 <SaraU201Command>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <DataServer+0x1ba>
 8002952:	2300      	movs	r3, #0
 8002954:	e010      	b.n	8002978 <DataServer+0x1dc>
	/*Read file*/
	deleteBuffer(Rx_buffer_sim, 300);
 8002956:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800295a:	480a      	ldr	r0, [pc, #40]	; (8002984 <DataServer+0x1e8>)
 800295c:	f7ff f8c4 	bl	8001ae8 <deleteBuffer>
	if (!SaraU201Command("AT+URDFILE=\"get.ffs\"\r\n", "\r\nOK", 15000)) return 0;
 8002960:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002964:	4918      	ldr	r1, [pc, #96]	; (80029c8 <DataServer+0x22c>)
 8002966:	4819      	ldr	r0, [pc, #100]	; (80029cc <DataServer+0x230>)
 8002968:	f7ff f8de 	bl	8001b28 <SaraU201Command>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <DataServer+0x1da>
 8002972:	2300      	movs	r3, #0
 8002974:	e000      	b.n	8002978 <DataServer+0x1dc>
	return 1;
 8002976:	2301      	movs	r3, #1
}
 8002978:	4618      	mov	r0, r3
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002980:	20000378 	.word	0x20000378
 8002984:	200003ac 	.word	0x200003ac
 8002988:	0800e6f0 	.word	0x0800e6f0
 800298c:	0800e858 	.word	0x0800e858
 8002990:	0800e864 	.word	0x0800e864
 8002994:	0800e878 	.word	0x0800e878
 8002998:	00015f90 	.word	0x00015f90
 800299c:	0800e884 	.word	0x0800e884
 80029a0:	0800e894 	.word	0x0800e894
 80029a4:	0800e8a4 	.word	0x0800e8a4
 80029a8:	200006c8 	.word	0x200006c8
 80029ac:	0800e8c8 	.word	0x0800e8c8
 80029b0:	0800e8f4 	.word	0x0800e8f4
 80029b4:	0800e8fc 	.word	0x0800e8fc
 80029b8:	0800e904 	.word	0x0800e904
 80029bc:	0800e6dc 	.word	0x0800e6dc
 80029c0:	0800e910 	.word	0x0800e910
 80029c4:	0800e698 	.word	0x0800e698
 80029c8:	0800e71c 	.word	0x0800e71c
 80029cc:	0800e924 	.word	0x0800e924

080029d0 <getTimeServer>:
uint8_t getTimeServer(uint8_t* day, uint8_t* date, uint8_t* month, uint8_t* year, uint8_t* hour, uint8_t* minute, uint8_t* second)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	603b      	str	r3, [r7, #0]
	uint8_t vitri = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	75fb      	strb	r3, [r7, #23]
	vitri = CheckValidDataTime(Rx_buffer_sim);
 80029e2:	485c      	ldr	r0, [pc, #368]	; (8002b54 <getTimeServer+0x184>)
 80029e4:	f7ff f963 	bl	8001cae <CheckValidDataTime>
 80029e8:	4603      	mov	r3, r0
 80029ea:	75fb      	strb	r3, [r7, #23]
	if (vitri != 0)
 80029ec:	7dfb      	ldrb	r3, [r7, #23]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 80ab 	beq.w	8002b4a <getTimeServer+0x17a>
	{
		//Xoa cac buffer
		deleteBuffer(Thu, 3);
 80029f4:	2103      	movs	r1, #3
 80029f6:	4858      	ldr	r0, [pc, #352]	; (8002b58 <getTimeServer+0x188>)
 80029f8:	f7ff f876 	bl	8001ae8 <deleteBuffer>
		deleteBuffer(Ngay, 2);
 80029fc:	2102      	movs	r1, #2
 80029fe:	4857      	ldr	r0, [pc, #348]	; (8002b5c <getTimeServer+0x18c>)
 8002a00:	f7ff f872 	bl	8001ae8 <deleteBuffer>
		deleteBuffer(Thang, 2);
 8002a04:	2102      	movs	r1, #2
 8002a06:	4856      	ldr	r0, [pc, #344]	; (8002b60 <getTimeServer+0x190>)
 8002a08:	f7ff f86e 	bl	8001ae8 <deleteBuffer>
		deleteBuffer(Nam, 4);
 8002a0c:	2104      	movs	r1, #4
 8002a0e:	4855      	ldr	r0, [pc, #340]	; (8002b64 <getTimeServer+0x194>)
 8002a10:	f7ff f86a 	bl	8001ae8 <deleteBuffer>
		deleteBuffer(Gio, 2);
 8002a14:	2102      	movs	r1, #2
 8002a16:	4854      	ldr	r0, [pc, #336]	; (8002b68 <getTimeServer+0x198>)
 8002a18:	f7ff f866 	bl	8001ae8 <deleteBuffer>
		deleteBuffer(Phut, 2);
 8002a1c:	2102      	movs	r1, #2
 8002a1e:	4853      	ldr	r0, [pc, #332]	; (8002b6c <getTimeServer+0x19c>)
 8002a20:	f7ff f862 	bl	8001ae8 <deleteBuffer>
		deleteBuffer(Giay, 2);
 8002a24:	2102      	movs	r1, #2
 8002a26:	4852      	ldr	r0, [pc, #328]	; (8002b70 <getTimeServer+0x1a0>)
 8002a28:	f7ff f85e 	bl	8001ae8 <deleteBuffer>

		CutString(1, vitri, Rx_buffer_sim, Thu, " ", ",");
 8002a2c:	7df9      	ldrb	r1, [r7, #23]
 8002a2e:	4b51      	ldr	r3, [pc, #324]	; (8002b74 <getTimeServer+0x1a4>)
 8002a30:	9301      	str	r3, [sp, #4]
 8002a32:	4b51      	ldr	r3, [pc, #324]	; (8002b78 <getTimeServer+0x1a8>)
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	4b48      	ldr	r3, [pc, #288]	; (8002b58 <getTimeServer+0x188>)
 8002a38:	4a46      	ldr	r2, [pc, #280]	; (8002b54 <getTimeServer+0x184>)
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	f7ff fe5e 	bl	80026fc <CutString>
		CutString(2, vitri, Rx_buffer_sim, Ngay, " ", " ");
 8002a40:	7df9      	ldrb	r1, [r7, #23]
 8002a42:	4b4d      	ldr	r3, [pc, #308]	; (8002b78 <getTimeServer+0x1a8>)
 8002a44:	9301      	str	r3, [sp, #4]
 8002a46:	4b4c      	ldr	r3, [pc, #304]	; (8002b78 <getTimeServer+0x1a8>)
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	4b44      	ldr	r3, [pc, #272]	; (8002b5c <getTimeServer+0x18c>)
 8002a4c:	4a41      	ldr	r2, [pc, #260]	; (8002b54 <getTimeServer+0x184>)
 8002a4e:	2002      	movs	r0, #2
 8002a50:	f7ff fe54 	bl	80026fc <CutString>
		CutString(3, vitri, Rx_buffer_sim, Thang, " ", " ");
 8002a54:	7df9      	ldrb	r1, [r7, #23]
 8002a56:	4b48      	ldr	r3, [pc, #288]	; (8002b78 <getTimeServer+0x1a8>)
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	4b47      	ldr	r3, [pc, #284]	; (8002b78 <getTimeServer+0x1a8>)
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	4b40      	ldr	r3, [pc, #256]	; (8002b60 <getTimeServer+0x190>)
 8002a60:	4a3c      	ldr	r2, [pc, #240]	; (8002b54 <getTimeServer+0x184>)
 8002a62:	2003      	movs	r0, #3
 8002a64:	f7ff fe4a 	bl	80026fc <CutString>
		CutString(4, vitri, Rx_buffer_sim, Nam, " ", " ");
 8002a68:	7df9      	ldrb	r1, [r7, #23]
 8002a6a:	4b43      	ldr	r3, [pc, #268]	; (8002b78 <getTimeServer+0x1a8>)
 8002a6c:	9301      	str	r3, [sp, #4]
 8002a6e:	4b42      	ldr	r3, [pc, #264]	; (8002b78 <getTimeServer+0x1a8>)
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	4b3c      	ldr	r3, [pc, #240]	; (8002b64 <getTimeServer+0x194>)
 8002a74:	4a37      	ldr	r2, [pc, #220]	; (8002b54 <getTimeServer+0x184>)
 8002a76:	2004      	movs	r0, #4
 8002a78:	f7ff fe40 	bl	80026fc <CutString>
		CutString(5, vitri, Rx_buffer_sim, Gio, " ", ":");
 8002a7c:	7df9      	ldrb	r1, [r7, #23]
 8002a7e:	4b3f      	ldr	r3, [pc, #252]	; (8002b7c <getTimeServer+0x1ac>)
 8002a80:	9301      	str	r3, [sp, #4]
 8002a82:	4b3d      	ldr	r3, [pc, #244]	; (8002b78 <getTimeServer+0x1a8>)
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	4b38      	ldr	r3, [pc, #224]	; (8002b68 <getTimeServer+0x198>)
 8002a88:	4a32      	ldr	r2, [pc, #200]	; (8002b54 <getTimeServer+0x184>)
 8002a8a:	2005      	movs	r0, #5
 8002a8c:	f7ff fe36 	bl	80026fc <CutString>
		CutString(2, vitri, Rx_buffer_sim, Phut, ":", ":");
 8002a90:	7df9      	ldrb	r1, [r7, #23]
 8002a92:	4b3a      	ldr	r3, [pc, #232]	; (8002b7c <getTimeServer+0x1ac>)
 8002a94:	9301      	str	r3, [sp, #4]
 8002a96:	4b39      	ldr	r3, [pc, #228]	; (8002b7c <getTimeServer+0x1ac>)
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	4b34      	ldr	r3, [pc, #208]	; (8002b6c <getTimeServer+0x19c>)
 8002a9c:	4a2d      	ldr	r2, [pc, #180]	; (8002b54 <getTimeServer+0x184>)
 8002a9e:	2002      	movs	r0, #2
 8002aa0:	f7ff fe2c 	bl	80026fc <CutString>
		CutString(3, vitri, Rx_buffer_sim, Giay, ":", " ");
 8002aa4:	7df9      	ldrb	r1, [r7, #23]
 8002aa6:	4b34      	ldr	r3, [pc, #208]	; (8002b78 <getTimeServer+0x1a8>)
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	4b34      	ldr	r3, [pc, #208]	; (8002b7c <getTimeServer+0x1ac>)
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	4b30      	ldr	r3, [pc, #192]	; (8002b70 <getTimeServer+0x1a0>)
 8002ab0:	4a28      	ldr	r2, [pc, #160]	; (8002b54 <getTimeServer+0x184>)
 8002ab2:	2003      	movs	r0, #3
 8002ab4:	f7ff fe22 	bl	80026fc <CutString>

		//Chuyen chuoi thanh so
		*day	= ConverDay(Thu);
 8002ab8:	4827      	ldr	r0, [pc, #156]	; (8002b58 <getTimeServer+0x188>)
 8002aba:	f000 f865 	bl	8002b88 <ConverDay>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	701a      	strb	r2, [r3, #0]
		*date	= atoi(Ngay);
 8002ac6:	4825      	ldr	r0, [pc, #148]	; (8002b5c <getTimeServer+0x18c>)
 8002ac8:	f006 fba7 	bl	800921a <atoi>
 8002acc:	4603      	mov	r3, r0
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	701a      	strb	r2, [r3, #0]
		*month	= ConverMonth(Thang);
 8002ad4:	4822      	ldr	r0, [pc, #136]	; (8002b60 <getTimeServer+0x190>)
 8002ad6:	f000 f8a3 	bl	8002c20 <ConverMonth>
 8002ada:	4603      	mov	r3, r0
 8002adc:	461a      	mov	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	701a      	strb	r2, [r3, #0]
		*year	= atoi(Nam) % 100;
 8002ae2:	4820      	ldr	r0, [pc, #128]	; (8002b64 <getTimeServer+0x194>)
 8002ae4:	f006 fb99 	bl	800921a <atoi>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4b25      	ldr	r3, [pc, #148]	; (8002b80 <getTimeServer+0x1b0>)
 8002aec:	fb83 1302 	smull	r1, r3, r3, r2
 8002af0:	1159      	asrs	r1, r3, #5
 8002af2:	17d3      	asrs	r3, r2, #31
 8002af4:	1acb      	subs	r3, r1, r3
 8002af6:	2164      	movs	r1, #100	; 0x64
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	701a      	strb	r2, [r3, #0]
		*hour	= (atoi(Gio) + 7) % 24;
 8002b04:	4818      	ldr	r0, [pc, #96]	; (8002b68 <getTimeServer+0x198>)
 8002b06:	f006 fb88 	bl	800921a <atoi>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	1dda      	adds	r2, r3, #7
 8002b0e:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <getTimeServer+0x1b4>)
 8002b10:	fb83 1302 	smull	r1, r3, r3, r2
 8002b14:	1099      	asrs	r1, r3, #2
 8002b16:	17d3      	asrs	r3, r2, #31
 8002b18:	1ac9      	subs	r1, r1, r3
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	440b      	add	r3, r1
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	1ad1      	subs	r1, r2, r3
 8002b24:	b2ca      	uxtb	r2, r1
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	701a      	strb	r2, [r3, #0]
		*minute = atoi(Phut);
 8002b2a:	4810      	ldr	r0, [pc, #64]	; (8002b6c <getTimeServer+0x19c>)
 8002b2c:	f006 fb75 	bl	800921a <atoi>
 8002b30:	4603      	mov	r3, r0
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	701a      	strb	r2, [r3, #0]
		*second = atoi(Giay);
 8002b38:	480d      	ldr	r0, [pc, #52]	; (8002b70 <getTimeServer+0x1a0>)
 8002b3a:	f006 fb6e 	bl	800921a <atoi>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b44:	701a      	strb	r2, [r3, #0]
		return 1;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <getTimeServer+0x17c>
	}
	return 0;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	200003ac 	.word	0x200003ac
 8002b58:	20000738 	.word	0x20000738
 8002b5c:	200005a0 	.word	0x200005a0
 8002b60:	20000514 	.word	0x20000514
 8002b64:	2000069c 	.word	0x2000069c
 8002b68:	2000073c 	.word	0x2000073c
 8002b6c:	20000784 	.word	0x20000784
 8002b70:	20000690 	.word	0x20000690
 8002b74:	0800e6d0 	.word	0x0800e6d0
 8002b78:	0800e724 	.word	0x0800e724
 8002b7c:	0800e6d4 	.word	0x0800e6d4
 8002b80:	51eb851f 	.word	0x51eb851f
 8002b84:	2aaaaaab 	.word	0x2aaaaaab

08002b88 <ConverDay>:
uint8_t ConverDay(char Day[])
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	if (strstr(Day, "Mon")) return 1;
 8002b90:	491d      	ldr	r1, [pc, #116]	; (8002c08 <ConverDay+0x80>)
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f006 fbd5 	bl	8009342 <strstr>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <ConverDay+0x1a>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e02d      	b.n	8002bfe <ConverDay+0x76>
	else if (strstr(Day, "Tue")) return 2;
 8002ba2:	491a      	ldr	r1, [pc, #104]	; (8002c0c <ConverDay+0x84>)
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f006 fbcc 	bl	8009342 <strstr>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <ConverDay+0x2c>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e024      	b.n	8002bfe <ConverDay+0x76>
	else if (strstr(Day, "Wed")) return 3;
 8002bb4:	4916      	ldr	r1, [pc, #88]	; (8002c10 <ConverDay+0x88>)
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f006 fbc3 	bl	8009342 <strstr>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <ConverDay+0x3e>
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e01b      	b.n	8002bfe <ConverDay+0x76>
	else if (strstr(Day, "Thu")) return 4;
 8002bc6:	4913      	ldr	r1, [pc, #76]	; (8002c14 <ConverDay+0x8c>)
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f006 fbba 	bl	8009342 <strstr>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <ConverDay+0x50>
 8002bd4:	2304      	movs	r3, #4
 8002bd6:	e012      	b.n	8002bfe <ConverDay+0x76>
	else if (strstr(Day, "Fri")) return 5;
 8002bd8:	490f      	ldr	r1, [pc, #60]	; (8002c18 <ConverDay+0x90>)
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f006 fbb1 	bl	8009342 <strstr>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <ConverDay+0x62>
 8002be6:	2305      	movs	r3, #5
 8002be8:	e009      	b.n	8002bfe <ConverDay+0x76>
	else if (strstr(Day, "Sat")) return 6;
 8002bea:	490c      	ldr	r1, [pc, #48]	; (8002c1c <ConverDay+0x94>)
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f006 fba8 	bl	8009342 <strstr>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <ConverDay+0x74>
 8002bf8:	2306      	movs	r3, #6
 8002bfa:	e000      	b.n	8002bfe <ConverDay+0x76>
	else return 7; //if (strstr(Day, "Sun"))
 8002bfc:	2307      	movs	r3, #7
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	0800e93c 	.word	0x0800e93c
 8002c0c:	0800e940 	.word	0x0800e940
 8002c10:	0800e944 	.word	0x0800e944
 8002c14:	0800e948 	.word	0x0800e948
 8002c18:	0800e94c 	.word	0x0800e94c
 8002c1c:	0800e950 	.word	0x0800e950

08002c20 <ConverMonth>:
uint8_t ConverMonth(char Month[])
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
	if (strstr(Month, "Jan")) return 1;
 8002c28:	4933      	ldr	r1, [pc, #204]	; (8002cf8 <ConverMonth+0xd8>)
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f006 fb89 	bl	8009342 <strstr>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <ConverMonth+0x1a>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e05a      	b.n	8002cf0 <ConverMonth+0xd0>
	else if (strstr(Month, "Feb")) return 2;
 8002c3a:	4930      	ldr	r1, [pc, #192]	; (8002cfc <ConverMonth+0xdc>)
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f006 fb80 	bl	8009342 <strstr>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <ConverMonth+0x2c>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e051      	b.n	8002cf0 <ConverMonth+0xd0>
	else if (strstr(Month, "Mar")) return 3;
 8002c4c:	492c      	ldr	r1, [pc, #176]	; (8002d00 <ConverMonth+0xe0>)
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f006 fb77 	bl	8009342 <strstr>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <ConverMonth+0x3e>
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e048      	b.n	8002cf0 <ConverMonth+0xd0>
	else if (strstr(Month, "Apr")) return 4;
 8002c5e:	4929      	ldr	r1, [pc, #164]	; (8002d04 <ConverMonth+0xe4>)
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f006 fb6e 	bl	8009342 <strstr>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <ConverMonth+0x50>
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	e03f      	b.n	8002cf0 <ConverMonth+0xd0>
	else if (strstr(Month, "May")) return 5;
 8002c70:	4925      	ldr	r1, [pc, #148]	; (8002d08 <ConverMonth+0xe8>)
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f006 fb65 	bl	8009342 <strstr>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <ConverMonth+0x62>
 8002c7e:	2305      	movs	r3, #5
 8002c80:	e036      	b.n	8002cf0 <ConverMonth+0xd0>
	else if (strstr(Month, "Jun")) return 6;
 8002c82:	4922      	ldr	r1, [pc, #136]	; (8002d0c <ConverMonth+0xec>)
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f006 fb5c 	bl	8009342 <strstr>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <ConverMonth+0x74>
 8002c90:	2306      	movs	r3, #6
 8002c92:	e02d      	b.n	8002cf0 <ConverMonth+0xd0>
	else if (strstr(Month, "Jul")) return 7;
 8002c94:	491e      	ldr	r1, [pc, #120]	; (8002d10 <ConverMonth+0xf0>)
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f006 fb53 	bl	8009342 <strstr>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <ConverMonth+0x86>
 8002ca2:	2307      	movs	r3, #7
 8002ca4:	e024      	b.n	8002cf0 <ConverMonth+0xd0>
	else if (strstr(Month, "Aug")) return 8;
 8002ca6:	491b      	ldr	r1, [pc, #108]	; (8002d14 <ConverMonth+0xf4>)
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f006 fb4a 	bl	8009342 <strstr>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <ConverMonth+0x98>
 8002cb4:	2308      	movs	r3, #8
 8002cb6:	e01b      	b.n	8002cf0 <ConverMonth+0xd0>
	else if (strstr(Month, "Sep")) return 9;
 8002cb8:	4917      	ldr	r1, [pc, #92]	; (8002d18 <ConverMonth+0xf8>)
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f006 fb41 	bl	8009342 <strstr>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <ConverMonth+0xaa>
 8002cc6:	2309      	movs	r3, #9
 8002cc8:	e012      	b.n	8002cf0 <ConverMonth+0xd0>
	else if (strstr(Month, "Oct")) return 10;
 8002cca:	4914      	ldr	r1, [pc, #80]	; (8002d1c <ConverMonth+0xfc>)
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f006 fb38 	bl	8009342 <strstr>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <ConverMonth+0xbc>
 8002cd8:	230a      	movs	r3, #10
 8002cda:	e009      	b.n	8002cf0 <ConverMonth+0xd0>
	else if (strstr(Month, "Nov")) return 11;
 8002cdc:	4910      	ldr	r1, [pc, #64]	; (8002d20 <ConverMonth+0x100>)
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f006 fb2f 	bl	8009342 <strstr>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <ConverMonth+0xce>
 8002cea:	230b      	movs	r3, #11
 8002cec:	e000      	b.n	8002cf0 <ConverMonth+0xd0>
	else  return 12;
 8002cee:	230c      	movs	r3, #12
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	0800e954 	.word	0x0800e954
 8002cfc:	0800e958 	.word	0x0800e958
 8002d00:	0800e95c 	.word	0x0800e95c
 8002d04:	0800e960 	.word	0x0800e960
 8002d08:	0800e964 	.word	0x0800e964
 8002d0c:	0800e968 	.word	0x0800e968
 8002d10:	0800e96c 	.word	0x0800e96c
 8002d14:	0800e970 	.word	0x0800e970
 8002d18:	0800e974 	.word	0x0800e974
 8002d1c:	0800e978 	.word	0x0800e978
 8002d20:	0800e97c 	.word	0x0800e97c

08002d24 <nextDay>:
void nextDay(uint8_t* date, uint8_t* day, uint8_t* month, uint8_t* year)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	603b      	str	r3, [r7, #0]
	/*Thu*/
	if (*date == 7) *date = 1;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b07      	cmp	r3, #7
 8002d38:	d103      	bne.n	8002d42 <nextDay+0x1e>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	e005      	b.n	8002d4e <nextDay+0x2a>
	else *date += 1;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	3301      	adds	r3, #1
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	701a      	strb	r2, [r3, #0]
	/*Ngay thang nam*/
	if (*day == 31)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b1f      	cmp	r3, #31
 8002d54:	d117      	bne.n	8002d86 <nextDay+0x62>
	{
		*day = 1;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
		if (*month != 12) *month += 1;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b0c      	cmp	r3, #12
 8002d62:	d006      	beq.n	8002d72 <nextDay+0x4e>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	701a      	strb	r2, [r3, #0]
		else
			*day += 1;
	}
	else
		*day += 1;
}
 8002d70:	e077      	b.n	8002e62 <nextDay+0x13e>
			*month = 1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
			*year += 1;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	701a      	strb	r2, [r3, #0]
}
 8002d84:	e06d      	b.n	8002e62 <nextDay+0x13e>
	else if (*day == 30 && (*month == 4 || *month == 6 || *month == 9 || *month == 11))
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b1e      	cmp	r3, #30
 8002d8c:	d119      	bne.n	8002dc2 <nextDay+0x9e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d00b      	beq.n	8002dae <nextDay+0x8a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b06      	cmp	r3, #6
 8002d9c:	d007      	beq.n	8002dae <nextDay+0x8a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b09      	cmp	r3, #9
 8002da4:	d003      	beq.n	8002dae <nextDay+0x8a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b0b      	cmp	r3, #11
 8002dac:	d109      	bne.n	8002dc2 <nextDay+0x9e>
		*day = 1;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2201      	movs	r2, #1
 8002db2:	701a      	strb	r2, [r3, #0]
		*month += 1;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	3301      	adds	r3, #1
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	701a      	strb	r2, [r3, #0]
 8002dc0:	e04f      	b.n	8002e62 <nextDay+0x13e>
	else if ((*day == 29 || *day == 28) && (*month == 2))
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b1d      	cmp	r3, #29
 8002dc8:	d003      	beq.n	8002dd2 <nextDay+0xae>
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b1c      	cmp	r3, #28
 8002dd0:	d140      	bne.n	8002e54 <nextDay+0x130>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d13c      	bne.n	8002e54 <nextDay+0x130>
		if (*day == 29 || (*day == 28 && ((*year % 400 != 0) && (*year % 4 != 0 || *year % 100 == 0))))
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b1d      	cmp	r3, #29
 8002de0:	d027      	beq.n	8002e32 <nextDay+0x10e>
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b1c      	cmp	r3, #28
 8002de8:	d12d      	bne.n	8002e46 <nextDay+0x122>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	4b1f      	ldr	r3, [pc, #124]	; (8002e70 <nextDay+0x14c>)
 8002df2:	fb83 1302 	smull	r1, r3, r3, r2
 8002df6:	11d9      	asrs	r1, r3, #7
 8002df8:	17d3      	asrs	r3, r2, #31
 8002dfa:	1acb      	subs	r3, r1, r3
 8002dfc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d01d      	beq.n	8002e46 <nextDay+0x122>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10c      	bne.n	8002e32 <nextDay+0x10e>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	4a14      	ldr	r2, [pc, #80]	; (8002e70 <nextDay+0x14c>)
 8002e1e:	fba2 1203 	umull	r1, r2, r2, r3
 8002e22:	0952      	lsrs	r2, r2, #5
 8002e24:	2164      	movs	r1, #100	; 0x64
 8002e26:	fb01 f202 	mul.w	r2, r1, r2
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <nextDay+0x122>
			*day = 1;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2201      	movs	r2, #1
 8002e36:	701a      	strb	r2, [r3, #0]
			*month += 1;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	701a      	strb	r2, [r3, #0]
		if (*day == 29 || (*day == 28 && ((*year % 400 != 0) && (*year % 4 != 0 || *year % 100 == 0))))
 8002e44:	e00d      	b.n	8002e62 <nextDay+0x13e>
			*day += 1;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	701a      	strb	r2, [r3, #0]
		if (*day == 29 || (*day == 28 && ((*year % 400 != 0) && (*year % 4 != 0 || *year % 100 == 0))))
 8002e52:	e006      	b.n	8002e62 <nextDay+0x13e>
		*day += 1;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	701a      	strb	r2, [r3, #0]
}
 8002e60:	e7ff      	b.n	8002e62 <nextDay+0x13e>
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	51eb851f 	.word	0x51eb851f

08002e74 <checkSafeArea>:
uint8_t checkSafeArea(char lat_Center[], char lng_Center[], char Rad[], char lat_Current[], char lng_Current[])
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08a      	sub	sp, #40	; 0x28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
 8002e80:	603b      	str	r3, [r7, #0]
	uint16_t d;
	float lat_Cen, lng_Cen, lat_Cur, lng_Cur;
	int rad = atoi(Rad);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f006 f9c9 	bl	800921a <atoi>
 8002e88:	6278      	str	r0, [r7, #36]	; 0x24
	lat_Cen = strtof(lat_Center, NULL);
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f007 f883 	bl	8009f98 <strtof>
 8002e92:	ed87 0a08 	vstr	s0, [r7, #32]
	lng_Cen = strtof(lng_Center, NULL);
 8002e96:	2100      	movs	r1, #0
 8002e98:	68b8      	ldr	r0, [r7, #8]
 8002e9a:	f007 f87d 	bl	8009f98 <strtof>
 8002e9e:	ed87 0a07 	vstr	s0, [r7, #28]
	lat_Cur = strtof(lat_Current, NULL);
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	6838      	ldr	r0, [r7, #0]
 8002ea6:	f007 f877 	bl	8009f98 <strtof>
 8002eaa:	ed87 0a06 	vstr	s0, [r7, #24]
	lng_Cur = strtof(lng_Current, NULL);
 8002eae:	2100      	movs	r1, #0
 8002eb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eb2:	f007 f871 	bl	8009f98 <strtof>
 8002eb6:	ed87 0a05 	vstr	s0, [r7, #20]
	d = Haversine(lat_Cen, lng_Cen, lat_Cur , lng_Cur);
 8002eba:	edd7 1a05 	vldr	s3, [r7, #20]
 8002ebe:	ed97 1a06 	vldr	s2, [r7, #24]
 8002ec2:	edd7 0a07 	vldr	s1, [r7, #28]
 8002ec6:	ed97 0a08 	vldr	s0, [r7, #32]
 8002eca:	f7fe fc2d 	bl	8001728 <Haversine>
 8002ece:	eef0 7a40 	vmov.f32	s15, s0
 8002ed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ed6:	ee17 3a90 	vmov	r3, s15
 8002eda:	827b      	strh	r3, [r7, #18]
	if (d*1000 > (float)rad)
 8002edc:	8a7b      	ldrh	r3, [r7, #18]
 8002ede:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ee2:	fb02 f303 	mul.w	r3, r2, r3
 8002ee6:	ee07 3a90 	vmov	s15, r3
 8002eea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	ee07 3a90 	vmov	s15, r3
 8002ef4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ef8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f00:	dd01      	ble.n	8002f06 <checkSafeArea+0x92>
		return 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e000      	b.n	8002f08 <checkSafeArea+0x94>
	return 1;
 8002f06:	2301      	movs	r3, #1
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3728      	adds	r7, #40	; 0x28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <send_getDataServer>:
void send_getDataServer(void)
{
 8002f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af04      	add	r7, sp, #16
	/*Gui va nhan du lieu tu Server*/
	if (!DataServer(Latitude_ARR, Longtitude_ARR, Battery_ARR)) checkSer = 1;
 8002f16:	4a43      	ldr	r2, [pc, #268]	; (8003024 <send_getDataServer+0x114>)
 8002f18:	4943      	ldr	r1, [pc, #268]	; (8003028 <send_getDataServer+0x118>)
 8002f1a:	4844      	ldr	r0, [pc, #272]	; (800302c <send_getDataServer+0x11c>)
 8002f1c:	f7ff fc3e 	bl	800279c <DataServer>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d102      	bne.n	8002f2c <send_getDataServer+0x1c>
 8002f26:	4b42      	ldr	r3, [pc, #264]	; (8003030 <send_getDataServer+0x120>)
 8002f28:	2201      	movs	r2, #1
 8002f2a:	701a      	strb	r2, [r3, #0]
	/*lay thoi gian tu Server*/
	if (getTimeServer(&thu, &ngay, &thang, &nam, &gio, &phut, &giay))
 8002f2c:	4b41      	ldr	r3, [pc, #260]	; (8003034 <send_getDataServer+0x124>)
 8002f2e:	9302      	str	r3, [sp, #8]
 8002f30:	4b41      	ldr	r3, [pc, #260]	; (8003038 <send_getDataServer+0x128>)
 8002f32:	9301      	str	r3, [sp, #4]
 8002f34:	4b41      	ldr	r3, [pc, #260]	; (800303c <send_getDataServer+0x12c>)
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	4b41      	ldr	r3, [pc, #260]	; (8003040 <send_getDataServer+0x130>)
 8002f3a:	4a42      	ldr	r2, [pc, #264]	; (8003044 <send_getDataServer+0x134>)
 8002f3c:	4942      	ldr	r1, [pc, #264]	; (8003048 <send_getDataServer+0x138>)
 8002f3e:	4843      	ldr	r0, [pc, #268]	; (800304c <send_getDataServer+0x13c>)
 8002f40:	f7ff fd46 	bl	80029d0 <getTimeServer>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d048      	beq.n	8002fdc <send_getDataServer+0xcc>
	{
		if (atoi(Gio) + 7 >= 24)
 8002f4a:	4841      	ldr	r0, [pc, #260]	; (8003050 <send_getDataServer+0x140>)
 8002f4c:	f006 f965 	bl	800921a <atoi>
 8002f50:	4603      	mov	r3, r0
 8002f52:	3307      	adds	r3, #7
 8002f54:	2b17      	cmp	r3, #23
 8002f56:	dd05      	ble.n	8002f64 <send_getDataServer+0x54>
			nextDay(&thu, &ngay, &thang, &nam);
 8002f58:	4b39      	ldr	r3, [pc, #228]	; (8003040 <send_getDataServer+0x130>)
 8002f5a:	4a3a      	ldr	r2, [pc, #232]	; (8003044 <send_getDataServer+0x134>)
 8002f5c:	493a      	ldr	r1, [pc, #232]	; (8003048 <send_getDataServer+0x138>)
 8002f5e:	483b      	ldr	r0, [pc, #236]	; (800304c <send_getDataServer+0x13c>)
 8002f60:	f7ff fee0 	bl	8002d24 <nextDay>
		//Lay TG tu RTC
		getTime();
 8002f64:	f7fe f87c 	bl	8001060 <getTime>
		if (Hour != gio || Minute != phut || Weekday != thu || Date != ngay || Month != thang || Year != nam)
 8002f68:	4b3a      	ldr	r3, [pc, #232]	; (8003054 <send_getDataServer+0x144>)
 8002f6a:	781a      	ldrb	r2, [r3, #0]
 8002f6c:	4b33      	ldr	r3, [pc, #204]	; (800303c <send_getDataServer+0x12c>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d11d      	bne.n	8002fb0 <send_getDataServer+0xa0>
 8002f74:	4b38      	ldr	r3, [pc, #224]	; (8003058 <send_getDataServer+0x148>)
 8002f76:	781a      	ldrb	r2, [r3, #0]
 8002f78:	4b2f      	ldr	r3, [pc, #188]	; (8003038 <send_getDataServer+0x128>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d117      	bne.n	8002fb0 <send_getDataServer+0xa0>
 8002f80:	4b36      	ldr	r3, [pc, #216]	; (800305c <send_getDataServer+0x14c>)
 8002f82:	781a      	ldrb	r2, [r3, #0]
 8002f84:	4b31      	ldr	r3, [pc, #196]	; (800304c <send_getDataServer+0x13c>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d111      	bne.n	8002fb0 <send_getDataServer+0xa0>
 8002f8c:	4b34      	ldr	r3, [pc, #208]	; (8003060 <send_getDataServer+0x150>)
 8002f8e:	781a      	ldrb	r2, [r3, #0]
 8002f90:	4b2d      	ldr	r3, [pc, #180]	; (8003048 <send_getDataServer+0x138>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d10b      	bne.n	8002fb0 <send_getDataServer+0xa0>
 8002f98:	4b32      	ldr	r3, [pc, #200]	; (8003064 <send_getDataServer+0x154>)
 8002f9a:	781a      	ldrb	r2, [r3, #0]
 8002f9c:	4b29      	ldr	r3, [pc, #164]	; (8003044 <send_getDataServer+0x134>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d105      	bne.n	8002fb0 <send_getDataServer+0xa0>
 8002fa4:	4b30      	ldr	r3, [pc, #192]	; (8003068 <send_getDataServer+0x158>)
 8002fa6:	781a      	ldrb	r2, [r3, #0]
 8002fa8:	4b25      	ldr	r3, [pc, #148]	; (8003040 <send_getDataServer+0x130>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d015      	beq.n	8002fdc <send_getDataServer+0xcc>
		{
			setTime(thu, ngay, thang, nam, gio, phut, giay);
 8002fb0:	4b26      	ldr	r3, [pc, #152]	; (800304c <send_getDataServer+0x13c>)
 8002fb2:	7818      	ldrb	r0, [r3, #0]
 8002fb4:	4b24      	ldr	r3, [pc, #144]	; (8003048 <send_getDataServer+0x138>)
 8002fb6:	781c      	ldrb	r4, [r3, #0]
 8002fb8:	4b22      	ldr	r3, [pc, #136]	; (8003044 <send_getDataServer+0x134>)
 8002fba:	781d      	ldrb	r5, [r3, #0]
 8002fbc:	4b20      	ldr	r3, [pc, #128]	; (8003040 <send_getDataServer+0x130>)
 8002fbe:	781e      	ldrb	r6, [r3, #0]
 8002fc0:	4b1e      	ldr	r3, [pc, #120]	; (800303c <send_getDataServer+0x12c>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	4a1c      	ldr	r2, [pc, #112]	; (8003038 <send_getDataServer+0x128>)
 8002fc6:	7812      	ldrb	r2, [r2, #0]
 8002fc8:	491a      	ldr	r1, [pc, #104]	; (8003034 <send_getDataServer+0x124>)
 8002fca:	7809      	ldrb	r1, [r1, #0]
 8002fcc:	9102      	str	r1, [sp, #8]
 8002fce:	9201      	str	r2, [sp, #4]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	4633      	mov	r3, r6
 8002fd4:	462a      	mov	r2, r5
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	f7fd ffe6 	bl	8000fa8 <setTime>
		}
	}
	if (checkDataServer(Status, LatCenter, LngCenter, Radius))
 8002fdc:	4b23      	ldr	r3, [pc, #140]	; (800306c <send_getDataServer+0x15c>)
 8002fde:	4a24      	ldr	r2, [pc, #144]	; (8003070 <send_getDataServer+0x160>)
 8002fe0:	4924      	ldr	r1, [pc, #144]	; (8003074 <send_getDataServer+0x164>)
 8002fe2:	4825      	ldr	r0, [pc, #148]	; (8003078 <send_getDataServer+0x168>)
 8002fe4:	f7fe ff9e 	bl	8001f24 <checkDataServer>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d011      	beq.n	8003012 <send_getDataServer+0x102>
	{
		/*Kiem tra vi tri hien tai co nam trong vung an toan*/
		if (!checkSafeArea(LatCenter, LngCenter, Radius, Latitude_ARR, Longtitude_ARR))
 8002fee:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <send_getDataServer+0x118>)
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	4b0e      	ldr	r3, [pc, #56]	; (800302c <send_getDataServer+0x11c>)
 8002ff4:	4a1d      	ldr	r2, [pc, #116]	; (800306c <send_getDataServer+0x15c>)
 8002ff6:	491e      	ldr	r1, [pc, #120]	; (8003070 <send_getDataServer+0x160>)
 8002ff8:	481e      	ldr	r0, [pc, #120]	; (8003074 <send_getDataServer+0x164>)
 8002ffa:	f7ff ff3b 	bl	8002e74 <checkSafeArea>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d103      	bne.n	800300c <send_getDataServer+0xfc>
			SafeArea = 1;
 8003004:	4b1d      	ldr	r3, [pc, #116]	; (800307c <send_getDataServer+0x16c>)
 8003006:	2201      	movs	r2, #1
 8003008:	701a      	strb	r2, [r3, #0]
 800300a:	e002      	b.n	8003012 <send_getDataServer+0x102>
		else SafeArea = 0;
 800300c:	4b1b      	ldr	r3, [pc, #108]	; (800307c <send_getDataServer+0x16c>)
 800300e:	2200      	movs	r2, #0
 8003010:	701a      	strb	r2, [r3, #0]
	}
	deleteBuffer(Rx_buffer_sim, 300);
 8003012:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003016:	481a      	ldr	r0, [pc, #104]	; (8003080 <send_getDataServer+0x170>)
 8003018:	f7fe fd66 	bl	8001ae8 <deleteBuffer>
}
 800301c:	bf00      	nop
 800301e:	3704      	adds	r7, #4
 8003020:	46bd      	mov	sp, r7
 8003022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003024:	20000024 	.word	0x20000024
 8003028:	2000000c 	.word	0x2000000c
 800302c:	20000000 	.word	0x20000000
 8003030:	2000037a 	.word	0x2000037a
 8003034:	2000037f 	.word	0x2000037f
 8003038:	20000517 	.word	0x20000517
 800303c:	2000073e 	.word	0x2000073e
 8003040:	20000692 	.word	0x20000692
 8003044:	20000694 	.word	0x20000694
 8003048:	20000608 	.word	0x20000608
 800304c:	200006c4 	.word	0x200006c4
 8003050:	2000073c 	.word	0x2000073c
 8003054:	2000039e 	.word	0x2000039e
 8003058:	20000693 	.word	0x20000693
 800305c:	2000050a 	.word	0x2000050a
 8003060:	2000059c 	.word	0x2000059c
 8003064:	2000073b 	.word	0x2000073b
 8003068:	200006c6 	.word	0x200006c6
 800306c:	20000510 	.word	0x20000510
 8003070:	200003a0 	.word	0x200003a0
 8003074:	20000394 	.word	0x20000394
 8003078:	2000050c 	.word	0x2000050c
 800307c:	2000037d 	.word	0x2000037d
 8003080:	200003ac 	.word	0x200003ac

08003084 <allowDetaching>:
void allowDetaching(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RTS_SIM_GPIO_Port, RTS_SIM_Pin, RESET);
 8003088:	2200      	movs	r2, #0
 800308a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800308e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003092:	f002 fb47 	bl	8005724 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8003096:	2014      	movs	r0, #20
 8003098:	f000 ffe6 	bl	8004068 <HAL_Delay>
	send_getDataServer();
 800309c:	f7ff ff38 	bl	8002f10 <send_getDataServer>
	flag_Alarm = 0;
 80030a0:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <allowDetaching+0x48>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	701a      	strb	r2, [r3, #0]
	if (StatusAllowRemove == 1)//Kiem tra thiet bi da dc cho phep thao
 80030a6:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <allowDetaching+0x4c>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <allowDetaching+0x2e>
	{
	  enableDetach();
 80030ae:	f000 f831 	bl	8003114 <enableDetach>
	}
	AllowDetach = 0;
 80030b2:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <allowDetaching+0x50>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RTS_SIM_GPIO_Port, RTS_SIM_Pin, SET);
 80030b8:	2201      	movs	r2, #1
 80030ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030c2:	f002 fb2f 	bl	8005724 <HAL_GPIO_WritePin>
//	// Gui va lay du lieu tu Server
//	if (!DataServer(Latitude_ARR, Longtitude_ARR, Battery_ARR)) checkSer = 1;
//
//	//Tach chuoi lay gia tri can thiet
//	checkDataServer(Status, LatCenter, LngCenter, Radius);
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000034 	.word	0x20000034
 80030d0:	20000391 	.word	0x20000391
 80030d4:	2000037e 	.word	0x2000037e

080030d8 <enableSpeaker>:
void enableSpeaker(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
	HAL_TIMEx_PWMN_Start(&htim16, TIM_CHANNEL_1);
 80030de:	2100      	movs	r1, #0
 80030e0:	480b      	ldr	r0, [pc, #44]	; (8003110 <enableSpeaker+0x38>)
 80030e2:	f004 fe35 	bl	8007d50 <HAL_TIMEx_PWMN_Start>
	uint32_t start = HAL_GetTick();
 80030e6:	f000 ffb3 	bl	8004050 <HAL_GetTick>
 80030ea:	6078      	str	r0, [r7, #4]
	while ((HAL_GetTick() - start) < 10000)
 80030ec:	bf00      	nop
 80030ee:	f000 ffaf 	bl	8004050 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d9f6      	bls.n	80030ee <enableSpeaker+0x16>
	{
	}
	HAL_TIMEx_PWMN_Stop(&htim16, TIM_CHANNEL_1);
 8003100:	2100      	movs	r1, #0
 8003102:	4803      	ldr	r0, [pc, #12]	; (8003110 <enableSpeaker+0x38>)
 8003104:	f004 fe54 	bl	8007db0 <HAL_TIMEx_PWMN_Stop>
}
 8003108:	bf00      	nop
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20000740 	.word	0x20000740

08003114 <enableDetach>:
void enableDetach(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
	uint32_t start = HAL_GetTick();
 800311a:	f000 ff99 	bl	8004050 <HAL_GetTick>
 800311e:	6078      	str	r0, [r7, #4]
	while ((HAL_GetTick() - start) < 60000)
 8003120:	e007      	b.n	8003132 <enableDetach+0x1e>
	{
		if (HAL_GPIO_ReadPin(DETACH_PIN_GPIO_Port, DETACH_PIN_Pin) == 0)
 8003122:	2180      	movs	r1, #128	; 0x80
 8003124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003128:	f002 fae4 	bl	80056f4 <HAL_GPIO_ReadPin>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d009      	beq.n	8003146 <enableDetach+0x32>
	while ((HAL_GetTick() - start) < 60000)
 8003132:	f000 ff8d 	bl	8004050 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003140:	4293      	cmp	r3, r2
 8003142:	d9ee      	bls.n	8003122 <enableDetach+0xe>
 8003144:	e000      	b.n	8003148 <enableDetach+0x34>
			break;
 8003146:	bf00      	nop
	}
	Detach = 0;
 8003148:	4b03      	ldr	r3, [pc, #12]	; (8003158 <enableDetach+0x44>)
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	2000037c 	.word	0x2000037c

0800315c <warningDetached>:
void warningDetached(void) //canh bao thao go
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(RTS_SIM_GPIO_Port, RTS_SIM_Pin, RESET);
 8003162:	2200      	movs	r2, #0
 8003164:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800316c:	f002 fada 	bl	8005724 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8003170:	2014      	movs	r0, #20
 8003172:	f000 ff79 	bl	8004068 <HAL_Delay>
	send_getDataServer();
 8003176:	f7ff fecb 	bl	8002f10 <send_getDataServer>
	if (StatusAllowRemove == 0)
 800317a:	4b18      	ldr	r3, [pc, #96]	; (80031dc <warningDetached+0x80>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d122      	bne.n	80031c8 <warningDetached+0x6c>
	{
		if (!sendMsg(2, teleNumber, Latitude_ARR, Longtitude_ARR, Battery_ARR)) checkMes = 1;
 8003182:	4b17      	ldr	r3, [pc, #92]	; (80031e0 <warningDetached+0x84>)
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	4b17      	ldr	r3, [pc, #92]	; (80031e4 <warningDetached+0x88>)
 8003188:	4a17      	ldr	r2, [pc, #92]	; (80031e8 <warningDetached+0x8c>)
 800318a:	4918      	ldr	r1, [pc, #96]	; (80031ec <warningDetached+0x90>)
 800318c:	2002      	movs	r0, #2
 800318e:	f7ff f811 	bl	80021b4 <sendMsg>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d102      	bne.n	800319e <warningDetached+0x42>
 8003198:	4b15      	ldr	r3, [pc, #84]	; (80031f0 <warningDetached+0x94>)
 800319a:	2201      	movs	r2, #1
 800319c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(5000);
 800319e:	f241 3088 	movw	r0, #5000	; 0x1388
 80031a2:	f000 ff61 	bl	8004068 <HAL_Delay>
		if (!makeCall(teleNumber)) checkCall = 1;
 80031a6:	4811      	ldr	r0, [pc, #68]	; (80031ec <warningDetached+0x90>)
 80031a8:	f7ff f9f8 	bl	800259c <makeCall>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d102      	bne.n	80031b8 <warningDetached+0x5c>
 80031b2:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <warningDetached+0x98>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	701a      	strb	r2, [r3, #0]
		enableSpeaker();
 80031b8:	f7ff ff8e 	bl	80030d8 <enableSpeaker>
		Detach = 0;
 80031bc:	4b0e      	ldr	r3, [pc, #56]	; (80031f8 <warningDetached+0x9c>)
 80031be:	2200      	movs	r2, #0
 80031c0:	701a      	strb	r2, [r3, #0]
		flag_Alarm = 0;
 80031c2:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <warningDetached+0xa0>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(RTS_SIM_GPIO_Port, RTS_SIM_Pin, SET);
 80031c8:	2201      	movs	r2, #1
 80031ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031d2:	f002 faa7 	bl	8005724 <HAL_GPIO_WritePin>
}
 80031d6:	bf00      	nop
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	20000391 	.word	0x20000391
 80031e0:	20000024 	.word	0x20000024
 80031e4:	2000000c 	.word	0x2000000c
 80031e8:	20000000 	.word	0x20000000
 80031ec:	20000018 	.word	0x20000018
 80031f0:	200006c7 	.word	0x200006c7
 80031f4:	20000780 	.word	0x20000780
 80031f8:	2000037c 	.word	0x2000037c
 80031fc:	20000034 	.word	0x20000034

08003200 <warningOutSafeArea>:
void warningOutSafeArea(void) //canh bao ra khoi vung an toan
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(RTS_SIM_GPIO_Port, RTS_SIM_Pin, RESET);
 8003206:	2200      	movs	r2, #0
 8003208:	f44f 7180 	mov.w	r1, #256	; 0x100
 800320c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003210:	f002 fa88 	bl	8005724 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8003214:	2014      	movs	r0, #20
 8003216:	f000 ff27 	bl	8004068 <HAL_Delay>
	//Gui tin nhan thong bao ra khoi vung an toan
	if (!sendMsg(1, teleNumber, Latitude_ARR, Longtitude_ARR, Battery_ARR)) checkMes = 1;
 800321a:	4b11      	ldr	r3, [pc, #68]	; (8003260 <warningOutSafeArea+0x60>)
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	4b11      	ldr	r3, [pc, #68]	; (8003264 <warningOutSafeArea+0x64>)
 8003220:	4a11      	ldr	r2, [pc, #68]	; (8003268 <warningOutSafeArea+0x68>)
 8003222:	4912      	ldr	r1, [pc, #72]	; (800326c <warningOutSafeArea+0x6c>)
 8003224:	2001      	movs	r0, #1
 8003226:	f7fe ffc5 	bl	80021b4 <sendMsg>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d102      	bne.n	8003236 <warningOutSafeArea+0x36>
 8003230:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <warningOutSafeArea+0x70>)
 8003232:	2201      	movs	r2, #1
 8003234:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5000);
 8003236:	f241 3088 	movw	r0, #5000	; 0x1388
 800323a:	f000 ff15 	bl	8004068 <HAL_Delay>
	//Goi dien kiem tra co duoc nhac may
	if (!makeCall(teleNumber)) checkCall = 1;
 800323e:	480b      	ldr	r0, [pc, #44]	; (800326c <warningOutSafeArea+0x6c>)
 8003240:	f7ff f9ac 	bl	800259c <makeCall>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d102      	bne.n	8003250 <warningOutSafeArea+0x50>
 800324a:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <warningOutSafeArea+0x74>)
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
	enableSpeaker();
 8003250:	f7ff ff42 	bl	80030d8 <enableSpeaker>
    SafeArea = 0;
 8003254:	4b08      	ldr	r3, [pc, #32]	; (8003278 <warningOutSafeArea+0x78>)
 8003256:	2200      	movs	r2, #0
 8003258:	701a      	strb	r2, [r3, #0]
}
 800325a:	bf00      	nop
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20000024 	.word	0x20000024
 8003264:	2000000c 	.word	0x2000000c
 8003268:	20000000 	.word	0x20000000
 800326c:	20000018 	.word	0x20000018
 8003270:	200006c7 	.word	0x200006c7
 8003274:	20000780 	.word	0x20000780
 8003278:	2000037d 	.word	0x2000037d

0800327c <periodicUpdateData>:
void periodicUpdateData(uint8_t stage)
{
 800327c:	b590      	push	{r4, r7, lr}
 800327e:	b085      	sub	sp, #20
 8003280:	af02      	add	r7, sp, #8
 8003282:	4603      	mov	r3, r0
 8003284:	71fb      	strb	r3, [r7, #7]
	if (stage == 1)
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d121      	bne.n	80032d0 <periodicUpdateData+0x54>
	{
		stage = 0;
 800328c:	2300      	movs	r3, #0
 800328e:	71fb      	strb	r3, [r7, #7]
		convert_Mode(1);
 8003290:	2001      	movs	r0, #1
 8003292:	f7fe fb8d 	bl	80019b0 <convert_Mode>
		getTime();
 8003296:	f7fd fee3 	bl	8001060 <getTime>
		time_stage = 5;
 800329a:	4b34      	ldr	r3, [pc, #208]	; (800336c <periodicUpdateData+0xf0>)
 800329c:	2205      	movs	r2, #5
 800329e:	701a      	strb	r2, [r3, #0]
		set_Alarm(Hour, Minute, Second, Date, time_stage);
 80032a0:	4b33      	ldr	r3, [pc, #204]	; (8003370 <periodicUpdateData+0xf4>)
 80032a2:	7818      	ldrb	r0, [r3, #0]
 80032a4:	4b33      	ldr	r3, [pc, #204]	; (8003374 <periodicUpdateData+0xf8>)
 80032a6:	7819      	ldrb	r1, [r3, #0]
 80032a8:	4b33      	ldr	r3, [pc, #204]	; (8003378 <periodicUpdateData+0xfc>)
 80032aa:	781a      	ldrb	r2, [r3, #0]
 80032ac:	4b33      	ldr	r3, [pc, #204]	; (800337c <periodicUpdateData+0x100>)
 80032ae:	781c      	ldrb	r4, [r3, #0]
 80032b0:	4b2e      	ldr	r3, [pc, #184]	; (800336c <periodicUpdateData+0xf0>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	4623      	mov	r3, r4
 80032b8:	f7fd ff10 	bl	80010dc <set_Alarm>
		HAL_UART_Abort_IT(&hlpuart1);
 80032bc:	4830      	ldr	r0, [pc, #192]	; (8003380 <periodicUpdateData+0x104>)
 80032be:	f004 ffd9 	bl	8008274 <HAL_UART_Abort_IT>
		HAL_GPIO_WritePin(RTS_SIM_GPIO_Port, RTS_SIM_Pin, SET);
 80032c2:	2201      	movs	r2, #1
 80032c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032cc:	f002 fa2a 	bl	8005724 <HAL_GPIO_WritePin>
	}
	if (stage == 2)
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d13c      	bne.n	8003350 <periodicUpdateData+0xd4>
	{
		while (end_Buffer != 1)
 80032d6:	e004      	b.n	80032e2 <periodicUpdateData+0x66>
		{
		  HAL_UART_Receive_IT(&hlpuart1, (uint8_t*)Rx_Data, 1);
 80032d8:	2201      	movs	r2, #1
 80032da:	492a      	ldr	r1, [pc, #168]	; (8003384 <periodicUpdateData+0x108>)
 80032dc:	4828      	ldr	r0, [pc, #160]	; (8003380 <periodicUpdateData+0x104>)
 80032de:	f004 ff27 	bl	8008130 <HAL_UART_Receive_IT>
		while (end_Buffer != 1)
 80032e2:	4b29      	ldr	r3, [pc, #164]	; (8003388 <periodicUpdateData+0x10c>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d1f6      	bne.n	80032d8 <periodicUpdateData+0x5c>
		}
		valid_GPS = send_Coordinate_to_Serve(lat_Array, lng_Array);
 80032ea:	4928      	ldr	r1, [pc, #160]	; (800338c <periodicUpdateData+0x110>)
 80032ec:	4828      	ldr	r0, [pc, #160]	; (8003390 <periodicUpdateData+0x114>)
 80032ee:	f7fe f931 	bl	8001554 <send_Coordinate_to_Serve>
 80032f2:	4603      	mov	r3, r0
 80032f4:	461a      	mov	r2, r3
 80032f6:	4b27      	ldr	r3, [pc, #156]	; (8003394 <periodicUpdateData+0x118>)
 80032f8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(RTS_SIM_GPIO_Port, RTS_SIM_Pin, RESET);
 80032fa:	2200      	movs	r2, #0
 80032fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003304:	f002 fa0e 	bl	8005724 <HAL_GPIO_WritePin>
		HAL_Delay(20);
 8003308:	2014      	movs	r0, #20
 800330a:	f000 fead 	bl	8004068 <HAL_Delay>
		send_getDataServer();
 800330e:	f7ff fdff 	bl	8002f10 <send_getDataServer>
//	  		if (check_Valid_Header(Rx_Buffer, 0) != 0)
//	  		{
//	  		  convert_Mode(0);
//	  		  flag_Alarm = 2;
//	  		}
		stage = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	71fb      	strb	r3, [r7, #7]
		convert_Mode(0);
 8003316:	2000      	movs	r0, #0
 8003318:	f7fe fb4a 	bl	80019b0 <convert_Mode>
		getTime();
 800331c:	f7fd fea0 	bl	8001060 <getTime>
		time_stage = 30;
 8003320:	4b12      	ldr	r3, [pc, #72]	; (800336c <periodicUpdateData+0xf0>)
 8003322:	221e      	movs	r2, #30
 8003324:	701a      	strb	r2, [r3, #0]
		set_Alarm(Hour, Minute, Second, Date, time_stage);
 8003326:	4b12      	ldr	r3, [pc, #72]	; (8003370 <periodicUpdateData+0xf4>)
 8003328:	7818      	ldrb	r0, [r3, #0]
 800332a:	4b12      	ldr	r3, [pc, #72]	; (8003374 <periodicUpdateData+0xf8>)
 800332c:	7819      	ldrb	r1, [r3, #0]
 800332e:	4b12      	ldr	r3, [pc, #72]	; (8003378 <periodicUpdateData+0xfc>)
 8003330:	781a      	ldrb	r2, [r3, #0]
 8003332:	4b12      	ldr	r3, [pc, #72]	; (800337c <periodicUpdateData+0x100>)
 8003334:	781c      	ldrb	r4, [r3, #0]
 8003336:	4b0d      	ldr	r3, [pc, #52]	; (800336c <periodicUpdateData+0xf0>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	4623      	mov	r3, r4
 800333e:	f7fd fecd 	bl	80010dc <set_Alarm>
		HAL_GPIO_WritePin(RTS_SIM_GPIO_Port, RTS_SIM_Pin, SET);
 8003342:	2201      	movs	r2, #1
 8003344:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800334c:	f002 f9ea 	bl	8005724 <HAL_GPIO_WritePin>
	}
	if (stage == 0)
 8003350:	79fb      	ldrb	r3, [r7, #7]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d105      	bne.n	8003362 <periodicUpdateData+0xe6>
	{
		HAL_SuspendTick();
 8003356:	f000 fea9 	bl	80040ac <HAL_SuspendTick>
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800335a:	2101      	movs	r1, #1
 800335c:	2000      	movs	r0, #0
 800335e:	f002 fa11 	bl	8005784 <HAL_PWR_EnterSLEEPMode>
	}
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	bd90      	pop	{r4, r7, pc}
 800336a:	bf00      	nop
 800336c:	20000035 	.word	0x20000035
 8003370:	2000039e 	.word	0x2000039e
 8003374:	20000693 	.word	0x20000693
 8003378:	20000390 	.word	0x20000390
 800337c:	2000059c 	.word	0x2000059c
 8003380:	2000051c 	.word	0x2000051c
 8003384:	200002dc 	.word	0x200002dc
 8003388:	20000375 	.word	0x20000375
 800338c:	200002ec 	.word	0x200002ec
 8003390:	200002e0 	.word	0x200002e0
 8003394:	20000374 	.word	0x20000374

08003398 <HAL_ADC_ConvCpltCallback>:
uint32_t value_adc;
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
	value_adc = HAL_ADC_GetValue(&hadc1);
 80033a0:	4804      	ldr	r0, [pc, #16]	; (80033b4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80033a2:	f001 f98f 	bl	80046c4 <HAL_ADC_GetValue>
 80033a6:	4602      	mov	r2, r0
 80033a8:	4b03      	ldr	r3, [pc, #12]	; (80033b8 <HAL_ADC_ConvCpltCallback+0x20>)
 80033aa:	601a      	str	r2, [r3, #0]
}
 80033ac:	bf00      	nop
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	200005a4 	.word	0x200005a4
 80033b8:	20000698 	.word	0x20000698

080033bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033c0:	f000 fde1 	bl	8003f86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033c4:	f000 f8b8 	bl	8003538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033c8:	f000 fafe 	bl	80039c8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80033cc:	f000 f9c2 	bl	8003754 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80033d0:	f000 f9f0 	bl	80037b4 <MX_RTC_Init>
  MX_ADC1_Init();
 80033d4:	f000 f92c 	bl	8003630 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 80033d8:	f000 f990 	bl	80036fc <MX_LPUART1_UART_Init>
  MX_TIM16_Init();
 80033dc:	f000 fa7c 	bl	80038d8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)Rx_data_sim, 1);
 80033e0:	2201      	movs	r2, #1
 80033e2:	4949      	ldr	r1, [pc, #292]	; (8003508 <main+0x14c>)
 80033e4:	4849      	ldr	r0, [pc, #292]	; (800350c <main+0x150>)
 80033e6:	f004 fea3 	bl	8008130 <HAL_UART_Receive_IT>
  //Tat power saving
  HAL_GPIO_WritePin(RTS_SIM_GPIO_Port, RTS_SIM_Pin, RESET);
 80033ea:	2200      	movs	r2, #0
 80033ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033f4:	f002 f996 	bl	8005724 <HAL_GPIO_WritePin>
  //Bat module (set chan PWR)
  HAL_GPIO_WritePin(PIN_PWR_GPIO_Port, PIN_PWR_Pin, SET);
 80033f8:	2201      	movs	r2, #1
 80033fa:	2102      	movs	r1, #2
 80033fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003400:	f002 f990 	bl	8005724 <HAL_GPIO_WritePin>
  //Cho khoi dong module
  HAL_Delay(4000);
 8003404:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8003408:	f000 fe2e 	bl	8004068 <HAL_Delay>


//  Initial Module Sim
//  while (!initSIM())
//  {
	  resetHardwareSARAU201();
 800340c:	f7fe fbda 	bl	8001bc4 <resetHardwareSARAU201>
//  }
  //Turn on Power Saving module SIM
  HAL_Delay(20);
 8003410:	2014      	movs	r0, #20
 8003412:	f000 fe29 	bl	8004068 <HAL_Delay>
  HAL_GPIO_WritePin(RTS_SIM_GPIO_Port, RTS_SIM_Pin, SET);
 8003416:	2201      	movs	r2, #1
 8003418:	f44f 7180 	mov.w	r1, #256	; 0x100
 800341c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003420:	f002 f980 	bl	8005724 <HAL_GPIO_WritePin>
  while (1)
  {
//	  DataServer(Latitude_ARR, Longtitude_ARR, Battery_ARR);
//	  makeCall(teleNumber);
//	  HAL_GPIO_WritePin(SPEAKER_PIN_GPIO_Port, SPEAKER_PIN_Pin, RESET);
	  if (checkCall == 1 || checkMes == 1 || checkSer == 1)
 8003424:	4b3a      	ldr	r3, [pc, #232]	; (8003510 <main+0x154>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d007      	beq.n	800343c <main+0x80>
 800342c:	4b39      	ldr	r3, [pc, #228]	; (8003514 <main+0x158>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d003      	beq.n	800343c <main+0x80>
 8003434:	4b38      	ldr	r3, [pc, #224]	; (8003518 <main+0x15c>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d12b      	bne.n	8003494 <main+0xd8>
	  {
		HAL_GPIO_WritePin(RTS_SIM_GPIO_Port, RTS_SIM_Pin, RESET);
 800343c:	2200      	movs	r2, #0
 800343e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003446:	f002 f96d 	bl	8005724 <HAL_GPIO_WritePin>
		HAL_Delay(30);
 800344a:	201e      	movs	r0, #30
 800344c:	f000 fe0c 	bl	8004068 <HAL_Delay>
		resetSoftwareSARAU201();
 8003450:	f7fe fbe0 	bl	8001c14 <resetSoftwareSARAU201>
		initSIM();
 8003454:	f7fe fdec 	bl	8002030 <initSIM>
		if (checkSer == 1) flag_Alarm = 2;
 8003458:	4b2f      	ldr	r3, [pc, #188]	; (8003518 <main+0x15c>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d102      	bne.n	8003466 <main+0xaa>
 8003460:	4b2e      	ldr	r3, [pc, #184]	; (800351c <main+0x160>)
 8003462:	2202      	movs	r2, #2
 8003464:	701a      	strb	r2, [r3, #0]
		if (checkCall == 1 || checkMes == 1) Detach = 1;
 8003466:	4b2a      	ldr	r3, [pc, #168]	; (8003510 <main+0x154>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d003      	beq.n	8003476 <main+0xba>
 800346e:	4b29      	ldr	r3, [pc, #164]	; (8003514 <main+0x158>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d102      	bne.n	800347c <main+0xc0>
 8003476:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <main+0x164>)
 8003478:	2201      	movs	r2, #1
 800347a:	701a      	strb	r2, [r3, #0]
		checkCall = checkMes = checkSer = 0;
 800347c:	4b26      	ldr	r3, [pc, #152]	; (8003518 <main+0x15c>)
 800347e:	2200      	movs	r2, #0
 8003480:	701a      	strb	r2, [r3, #0]
 8003482:	4b25      	ldr	r3, [pc, #148]	; (8003518 <main+0x15c>)
 8003484:	781a      	ldrb	r2, [r3, #0]
 8003486:	4b23      	ldr	r3, [pc, #140]	; (8003514 <main+0x158>)
 8003488:	701a      	strb	r2, [r3, #0]
 800348a:	4b22      	ldr	r3, [pc, #136]	; (8003514 <main+0x158>)
 800348c:	781a      	ldrb	r2, [r3, #0]
 800348e:	4b20      	ldr	r3, [pc, #128]	; (8003510 <main+0x154>)
 8003490:	701a      	strb	r2, [r3, #0]
 8003492:	e032      	b.n	80034fa <main+0x13e>
	  }
	  else if (NewSms == 1) //Khi co tin nhan moi
 8003494:	4b23      	ldr	r3, [pc, #140]	; (8003524 <main+0x168>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d11a      	bne.n	80034d2 <main+0x116>
	  {
		HAL_GPIO_WritePin(RTS_SIM_GPIO_Port, RTS_SIM_Pin, RESET);
 800349c:	2200      	movs	r2, #0
 800349e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034a6:	f002 f93d 	bl	8005724 <HAL_GPIO_WritePin>
		HAL_Delay(20);
 80034aa:	2014      	movs	r0, #20
 80034ac:	f000 fddc 	bl	8004068 <HAL_Delay>
		checkMessage(teleNumber);
 80034b0:	481d      	ldr	r0, [pc, #116]	; (8003528 <main+0x16c>)
 80034b2:	f7fe fc9d 	bl	8001df0 <checkMessage>
		Ring = 0;
 80034b6:	4b1d      	ldr	r3, [pc, #116]	; (800352c <main+0x170>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
		NewSms = 0;
 80034bc:	4b19      	ldr	r3, [pc, #100]	; (8003524 <main+0x168>)
 80034be:	2200      	movs	r2, #0
 80034c0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(RTS_SIM_GPIO_Port, RTS_SIM_Pin, SET);
 80034c2:	2201      	movs	r2, #1
 80034c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034cc:	f002 f92a 	bl	8005724 <HAL_GPIO_WritePin>
 80034d0:	e013      	b.n	80034fa <main+0x13e>
	  }
	  else if (AllowDetach == 1)//Cho pheo thao thiet bi
 80034d2:	4b17      	ldr	r3, [pc, #92]	; (8003530 <main+0x174>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d102      	bne.n	80034e0 <main+0x124>
	  {
		  allowDetaching();
 80034da:	f7ff fdd3 	bl	8003084 <allowDetaching>
 80034de:	e00c      	b.n	80034fa <main+0x13e>
	  }
	  else if (Detach == 1) //Kiểm tra nếu tháo thiết bị mà không cho phép
 80034e0:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <main+0x164>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d102      	bne.n	80034ee <main+0x132>
	  {
		  warningDetached();
 80034e8:	f7ff fe38 	bl	800315c <warningDetached>
 80034ec:	e005      	b.n	80034fa <main+0x13e>
	  }
	  else if (SafeArea == 1) //Khi ra khoi vung an toàn
 80034ee:	4b11      	ldr	r3, [pc, #68]	; (8003534 <main+0x178>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d101      	bne.n	80034fa <main+0x13e>
	  {
		  warningOutSafeArea();
 80034f6:	f7ff fe83 	bl	8003200 <warningOutSafeArea>
	  }
	  periodicUpdateData(flag_Alarm);
 80034fa:	4b08      	ldr	r3, [pc, #32]	; (800351c <main+0x160>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff febc 	bl	800327c <periodicUpdateData>
	  if (checkCall == 1 || checkMes == 1 || checkSer == 1)
 8003504:	e78e      	b.n	8003424 <main+0x68>
 8003506:	bf00      	nop
 8003508:	2000072c 	.word	0x2000072c
 800350c:	20000610 	.word	0x20000610
 8003510:	20000780 	.word	0x20000780
 8003514:	200006c7 	.word	0x200006c7
 8003518:	2000037a 	.word	0x2000037a
 800351c:	20000034 	.word	0x20000034
 8003520:	2000037c 	.word	0x2000037c
 8003524:	20000381 	.word	0x20000381
 8003528:	20000018 	.word	0x20000018
 800352c:	2000037b 	.word	0x2000037b
 8003530:	2000037e 	.word	0x2000037e
 8003534:	2000037d 	.word	0x2000037d

08003538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b0ac      	sub	sp, #176	; 0xb0
 800353c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800353e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003542:	2244      	movs	r2, #68	; 0x44
 8003544:	2100      	movs	r1, #0
 8003546:	4618      	mov	r0, r3
 8003548:	f005 fec2 	bl	80092d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800354c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800355c:	1d3b      	adds	r3, r7, #4
 800355e:	2254      	movs	r2, #84	; 0x54
 8003560:	2100      	movs	r1, #0
 8003562:	4618      	mov	r0, r3
 8003564:	f005 feb4 	bl	80092d0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8003568:	2318      	movs	r3, #24
 800356a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800356c:	2301      	movs	r3, #1
 800356e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003572:	2301      	movs	r3, #1
 8003574:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800357e:	2360      	movs	r3, #96	; 0x60
 8003580:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003584:	2300      	movs	r3, #0
 8003586:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800358a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800358e:	4618      	mov	r0, r3
 8003590:	f002 f9d8 	bl	8005944 <HAL_RCC_OscConfig>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800359a:	f000 faad 	bl	8003af8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800359e:	230f      	movs	r3, #15
 80035a0:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80035a2:	2300      	movs	r3, #0
 80035a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035a6:	2300      	movs	r3, #0
 80035a8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80035aa:	2300      	movs	r3, #0
 80035ac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035ae:	2300      	movs	r3, #0
 80035b0:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80035b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035b6:	2100      	movs	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f002 fde3 	bl	8006184 <HAL_RCC_ClockConfig>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80035c4:	f000 fa98 	bl	8003af8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 80035c8:	4b18      	ldr	r3, [pc, #96]	; (800362c <SystemClock_Config+0xf4>)
 80035ca:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80035cc:	2300      	movs	r3, #0
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80035d0:	2300      	movs	r3, #0
 80035d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80035d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80035d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80035da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035de:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80035e0:	2301      	movs	r3, #1
 80035e2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80035e4:	2301      	movs	r3, #1
 80035e6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80035e8:	2310      	movs	r3, #16
 80035ea:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80035ec:	2307      	movs	r3, #7
 80035ee:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80035f0:	2302      	movs	r3, #2
 80035f2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80035f4:	2302      	movs	r3, #2
 80035f6:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80035f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035fc:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035fe:	1d3b      	adds	r3, r7, #4
 8003600:	4618      	mov	r0, r3
 8003602:	f002 ffc3 	bl	800658c <HAL_RCCEx_PeriphCLKConfig>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800360c:	f000 fa74 	bl	8003af8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003610:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003614:	f002 f8f8 	bl	8005808 <HAL_PWREx_ControlVoltageScaling>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800361e:	f000 fa6b 	bl	8003af8 <Error_Handler>
  }
}
 8003622:	bf00      	nop
 8003624:	37b0      	adds	r7, #176	; 0xb0
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	00024021 	.word	0x00024021

08003630 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003636:	463b      	mov	r3, r7
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	60da      	str	r2, [r3, #12]
 8003642:	611a      	str	r2, [r3, #16]
 8003644:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8003646:	4b2a      	ldr	r3, [pc, #168]	; (80036f0 <MX_ADC1_Init+0xc0>)
 8003648:	4a2a      	ldr	r2, [pc, #168]	; (80036f4 <MX_ADC1_Init+0xc4>)
 800364a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800364c:	4b28      	ldr	r3, [pc, #160]	; (80036f0 <MX_ADC1_Init+0xc0>)
 800364e:	2200      	movs	r2, #0
 8003650:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003652:	4b27      	ldr	r3, [pc, #156]	; (80036f0 <MX_ADC1_Init+0xc0>)
 8003654:	2200      	movs	r2, #0
 8003656:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003658:	4b25      	ldr	r3, [pc, #148]	; (80036f0 <MX_ADC1_Init+0xc0>)
 800365a:	2200      	movs	r2, #0
 800365c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800365e:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <MX_ADC1_Init+0xc0>)
 8003660:	2200      	movs	r2, #0
 8003662:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003664:	4b22      	ldr	r3, [pc, #136]	; (80036f0 <MX_ADC1_Init+0xc0>)
 8003666:	2204      	movs	r2, #4
 8003668:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800366a:	4b21      	ldr	r3, [pc, #132]	; (80036f0 <MX_ADC1_Init+0xc0>)
 800366c:	2200      	movs	r2, #0
 800366e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003670:	4b1f      	ldr	r3, [pc, #124]	; (80036f0 <MX_ADC1_Init+0xc0>)
 8003672:	2200      	movs	r2, #0
 8003674:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003676:	4b1e      	ldr	r3, [pc, #120]	; (80036f0 <MX_ADC1_Init+0xc0>)
 8003678:	2201      	movs	r2, #1
 800367a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800367c:	4b1c      	ldr	r3, [pc, #112]	; (80036f0 <MX_ADC1_Init+0xc0>)
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8003684:	4b1a      	ldr	r3, [pc, #104]	; (80036f0 <MX_ADC1_Init+0xc0>)
 8003686:	2201      	movs	r2, #1
 8003688:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800368a:	4b19      	ldr	r3, [pc, #100]	; (80036f0 <MX_ADC1_Init+0xc0>)
 800368c:	2200      	movs	r2, #0
 800368e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003690:	4b17      	ldr	r3, [pc, #92]	; (80036f0 <MX_ADC1_Init+0xc0>)
 8003692:	2200      	movs	r2, #0
 8003694:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003696:	4b16      	ldr	r3, [pc, #88]	; (80036f0 <MX_ADC1_Init+0xc0>)
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800369e:	4b14      	ldr	r3, [pc, #80]	; (80036f0 <MX_ADC1_Init+0xc0>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80036a4:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <MX_ADC1_Init+0xc0>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80036ac:	4810      	ldr	r0, [pc, #64]	; (80036f0 <MX_ADC1_Init+0xc0>)
 80036ae:	f000 fec3 	bl	8004438 <HAL_ADC_Init>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80036b8:	f000 fa1e 	bl	8003af8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80036bc:	4b0e      	ldr	r3, [pc, #56]	; (80036f8 <MX_ADC1_Init+0xc8>)
 80036be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80036c0:	2306      	movs	r3, #6
 80036c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80036c4:	2307      	movs	r3, #7
 80036c6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80036c8:	237f      	movs	r3, #127	; 0x7f
 80036ca:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80036cc:	2304      	movs	r3, #4
 80036ce:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036d4:	463b      	mov	r3, r7
 80036d6:	4619      	mov	r1, r3
 80036d8:	4805      	ldr	r0, [pc, #20]	; (80036f0 <MX_ADC1_Init+0xc0>)
 80036da:	f001 f9c9 	bl	8004a70 <HAL_ADC_ConfigChannel>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80036e4:	f000 fa08 	bl	8003af8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80036e8:	bf00      	nop
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	200005a4 	.word	0x200005a4
 80036f4:	50040000 	.word	0x50040000
 80036f8:	80000001 	.word	0x80000001

080036fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003700:	4b12      	ldr	r3, [pc, #72]	; (800374c <MX_LPUART1_UART_Init+0x50>)
 8003702:	4a13      	ldr	r2, [pc, #76]	; (8003750 <MX_LPUART1_UART_Init+0x54>)
 8003704:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 4800;
 8003706:	4b11      	ldr	r3, [pc, #68]	; (800374c <MX_LPUART1_UART_Init+0x50>)
 8003708:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 800370c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800370e:	4b0f      	ldr	r3, [pc, #60]	; (800374c <MX_LPUART1_UART_Init+0x50>)
 8003710:	2200      	movs	r2, #0
 8003712:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003714:	4b0d      	ldr	r3, [pc, #52]	; (800374c <MX_LPUART1_UART_Init+0x50>)
 8003716:	2200      	movs	r2, #0
 8003718:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800371a:	4b0c      	ldr	r3, [pc, #48]	; (800374c <MX_LPUART1_UART_Init+0x50>)
 800371c:	2200      	movs	r2, #0
 800371e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003720:	4b0a      	ldr	r3, [pc, #40]	; (800374c <MX_LPUART1_UART_Init+0x50>)
 8003722:	220c      	movs	r2, #12
 8003724:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003726:	4b09      	ldr	r3, [pc, #36]	; (800374c <MX_LPUART1_UART_Init+0x50>)
 8003728:	2200      	movs	r2, #0
 800372a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800372c:	4b07      	ldr	r3, [pc, #28]	; (800374c <MX_LPUART1_UART_Init+0x50>)
 800372e:	2200      	movs	r2, #0
 8003730:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003732:	4b06      	ldr	r3, [pc, #24]	; (800374c <MX_LPUART1_UART_Init+0x50>)
 8003734:	2200      	movs	r2, #0
 8003736:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003738:	4804      	ldr	r0, [pc, #16]	; (800374c <MX_LPUART1_UART_Init+0x50>)
 800373a:	f004 fc18 	bl	8007f6e <HAL_UART_Init>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8003744:	f000 f9d8 	bl	8003af8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003748:	bf00      	nop
 800374a:	bd80      	pop	{r7, pc}
 800374c:	2000051c 	.word	0x2000051c
 8003750:	40008000 	.word	0x40008000

08003754 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003758:	4b14      	ldr	r3, [pc, #80]	; (80037ac <MX_USART1_UART_Init+0x58>)
 800375a:	4a15      	ldr	r2, [pc, #84]	; (80037b0 <MX_USART1_UART_Init+0x5c>)
 800375c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 800375e:	4b13      	ldr	r3, [pc, #76]	; (80037ac <MX_USART1_UART_Init+0x58>)
 8003760:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8003764:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003766:	4b11      	ldr	r3, [pc, #68]	; (80037ac <MX_USART1_UART_Init+0x58>)
 8003768:	2200      	movs	r2, #0
 800376a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800376c:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <MX_USART1_UART_Init+0x58>)
 800376e:	2200      	movs	r2, #0
 8003770:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003772:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <MX_USART1_UART_Init+0x58>)
 8003774:	2200      	movs	r2, #0
 8003776:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003778:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <MX_USART1_UART_Init+0x58>)
 800377a:	220c      	movs	r2, #12
 800377c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800377e:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <MX_USART1_UART_Init+0x58>)
 8003780:	2200      	movs	r2, #0
 8003782:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003784:	4b09      	ldr	r3, [pc, #36]	; (80037ac <MX_USART1_UART_Init+0x58>)
 8003786:	2200      	movs	r2, #0
 8003788:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800378a:	4b08      	ldr	r3, [pc, #32]	; (80037ac <MX_USART1_UART_Init+0x58>)
 800378c:	2200      	movs	r2, #0
 800378e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003790:	4b06      	ldr	r3, [pc, #24]	; (80037ac <MX_USART1_UART_Init+0x58>)
 8003792:	2200      	movs	r2, #0
 8003794:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003796:	4805      	ldr	r0, [pc, #20]	; (80037ac <MX_USART1_UART_Init+0x58>)
 8003798:	f004 fbe9 	bl	8007f6e <HAL_UART_Init>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80037a2:	f000 f9a9 	bl	8003af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80037a6:	bf00      	nop
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	20000610 	.word	0x20000610
 80037b0:	40013800 	.word	0x40013800

080037b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b092      	sub	sp, #72	; 0x48
 80037b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80037ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	605a      	str	r2, [r3, #4]
 80037c4:	609a      	str	r2, [r3, #8]
 80037c6:	60da      	str	r2, [r3, #12]
 80037c8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80037ca:	2300      	movs	r3, #0
 80037cc:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 80037ce:	1d3b      	adds	r3, r7, #4
 80037d0:	222c      	movs	r2, #44	; 0x2c
 80037d2:	2100      	movs	r1, #0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f005 fd7b 	bl	80092d0 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80037da:	4b3c      	ldr	r3, [pc, #240]	; (80038cc <MX_RTC_Init+0x118>)
 80037dc:	4a3c      	ldr	r2, [pc, #240]	; (80038d0 <MX_RTC_Init+0x11c>)
 80037de:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80037e0:	4b3a      	ldr	r3, [pc, #232]	; (80038cc <MX_RTC_Init+0x118>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80037e6:	4b39      	ldr	r3, [pc, #228]	; (80038cc <MX_RTC_Init+0x118>)
 80037e8:	227f      	movs	r2, #127	; 0x7f
 80037ea:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80037ec:	4b37      	ldr	r3, [pc, #220]	; (80038cc <MX_RTC_Init+0x118>)
 80037ee:	22ff      	movs	r2, #255	; 0xff
 80037f0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80037f2:	4b36      	ldr	r3, [pc, #216]	; (80038cc <MX_RTC_Init+0x118>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80037f8:	4b34      	ldr	r3, [pc, #208]	; (80038cc <MX_RTC_Init+0x118>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80037fe:	4b33      	ldr	r3, [pc, #204]	; (80038cc <MX_RTC_Init+0x118>)
 8003800:	2200      	movs	r2, #0
 8003802:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003804:	4b31      	ldr	r3, [pc, #196]	; (80038cc <MX_RTC_Init+0x118>)
 8003806:	2200      	movs	r2, #0
 8003808:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800380a:	4830      	ldr	r0, [pc, #192]	; (80038cc <MX_RTC_Init+0x118>)
 800380c:	f003 f9a0 	bl	8006b50 <HAL_RTC_Init>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8003816:	f000 f96f 	bl	8003af8 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x5;
 800381a:	2305      	movs	r3, #5
 800381c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x10;
 8003820:	2310      	movs	r3, #16
 8003822:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8003826:	2300      	movs	r3, #0
 8003828:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800382c:	2300      	movs	r3, #0
 800382e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003830:	2300      	movs	r3, #0
 8003832:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003834:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003838:	2201      	movs	r2, #1
 800383a:	4619      	mov	r1, r3
 800383c:	4823      	ldr	r0, [pc, #140]	; (80038cc <MX_RTC_Init+0x118>)
 800383e:	f003 fa02 	bl	8006c46 <HAL_RTC_SetTime>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8003848:	f000 f956 	bl	8003af8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800384c:	2301      	movs	r3, #1
 800384e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8003852:	2301      	movs	r3, #1
 8003854:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8003858:	2301      	movs	r3, #1
 800385a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 800385e:	2300      	movs	r3, #0
 8003860:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003864:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003868:	2201      	movs	r2, #1
 800386a:	4619      	mov	r1, r3
 800386c:	4817      	ldr	r0, [pc, #92]	; (80038cc <MX_RTC_Init+0x118>)
 800386e:	f003 fae3 	bl	8006e38 <HAL_RTC_SetDate>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8003878:	f000 f93e 	bl	8003af8 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x5;
 800387c:	2305      	movs	r3, #5
 800387e:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x10;
 8003880:	2310      	movs	r3, #16
 8003882:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x30;
 8003884:	2330      	movs	r3, #48	; 0x30
 8003886:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8003888:	2300      	movs	r3, #0
 800388a:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800388c:	2300      	movs	r3, #0
 800388e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS;
 8003894:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <MX_RTC_Init+0x120>)
 8003896:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003898:	2300      	movs	r3, #0
 800389a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800389c:	2300      	movs	r3, #0
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 80038a0:	2301      	movs	r3, #1
 80038a2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80038a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80038ac:	1d3b      	adds	r3, r7, #4
 80038ae:	2201      	movs	r2, #1
 80038b0:	4619      	mov	r1, r3
 80038b2:	4806      	ldr	r0, [pc, #24]	; (80038cc <MX_RTC_Init+0x118>)
 80038b4:	f003 fb94 	bl	8006fe0 <HAL_RTC_SetAlarm_IT>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 80038be:	f000 f91b 	bl	8003af8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80038c2:	bf00      	nop
 80038c4:	3748      	adds	r7, #72	; 0x48
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	200006a0 	.word	0x200006a0
 80038d0:	40002800 	.word	0x40002800
 80038d4:	80800000 	.word	0x80800000

080038d8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b092      	sub	sp, #72	; 0x48
 80038dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80038de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	605a      	str	r2, [r3, #4]
 80038e8:	609a      	str	r2, [r3, #8]
 80038ea:	60da      	str	r2, [r3, #12]
 80038ec:	611a      	str	r2, [r3, #16]
 80038ee:	615a      	str	r2, [r3, #20]
 80038f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80038f2:	463b      	mov	r3, r7
 80038f4:	222c      	movs	r2, #44	; 0x2c
 80038f6:	2100      	movs	r1, #0
 80038f8:	4618      	mov	r0, r3
 80038fa:	f005 fce9 	bl	80092d0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80038fe:	4b30      	ldr	r3, [pc, #192]	; (80039c0 <MX_TIM16_Init+0xe8>)
 8003900:	4a30      	ldr	r2, [pc, #192]	; (80039c4 <MX_TIM16_Init+0xec>)
 8003902:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3;
 8003904:	4b2e      	ldr	r3, [pc, #184]	; (80039c0 <MX_TIM16_Init+0xe8>)
 8003906:	2203      	movs	r2, #3
 8003908:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800390a:	4b2d      	ldr	r3, [pc, #180]	; (80039c0 <MX_TIM16_Init+0xe8>)
 800390c:	2200      	movs	r2, #0
 800390e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 499;
 8003910:	4b2b      	ldr	r3, [pc, #172]	; (80039c0 <MX_TIM16_Init+0xe8>)
 8003912:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003916:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003918:	4b29      	ldr	r3, [pc, #164]	; (80039c0 <MX_TIM16_Init+0xe8>)
 800391a:	2200      	movs	r2, #0
 800391c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800391e:	4b28      	ldr	r3, [pc, #160]	; (80039c0 <MX_TIM16_Init+0xe8>)
 8003920:	2200      	movs	r2, #0
 8003922:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003924:	4b26      	ldr	r3, [pc, #152]	; (80039c0 <MX_TIM16_Init+0xe8>)
 8003926:	2200      	movs	r2, #0
 8003928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800392a:	4825      	ldr	r0, [pc, #148]	; (80039c0 <MX_TIM16_Init+0xe8>)
 800392c:	f003 fdb6 	bl	800749c <HAL_TIM_Base_Init>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8003936:	f000 f8df 	bl	8003af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800393a:	4821      	ldr	r0, [pc, #132]	; (80039c0 <MX_TIM16_Init+0xe8>)
 800393c:	f003 fdd9 	bl	80074f2 <HAL_TIM_PWM_Init>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8003946:	f000 f8d7 	bl	8003af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800394a:	2360      	movs	r3, #96	; 0x60
 800394c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 199;
 800394e:	23c7      	movs	r3, #199	; 0xc7
 8003950:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003952:	2300      	movs	r3, #0
 8003954:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003956:	2300      	movs	r3, #0
 8003958:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800395a:	2300      	movs	r3, #0
 800395c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800395e:	2300      	movs	r3, #0
 8003960:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003962:	2300      	movs	r3, #0
 8003964:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800396a:	2200      	movs	r2, #0
 800396c:	4619      	mov	r1, r3
 800396e:	4814      	ldr	r0, [pc, #80]	; (80039c0 <MX_TIM16_Init+0xe8>)
 8003970:	f003 fdf4 	bl	800755c <HAL_TIM_PWM_ConfigChannel>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800397a:	f000 f8bd 	bl	8003af8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800397e:	2300      	movs	r3, #0
 8003980:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003982:	2300      	movs	r3, #0
 8003984:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800398e:	2300      	movs	r3, #0
 8003990:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003996:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003998:	2300      	movs	r3, #0
 800399a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800399c:	463b      	mov	r3, r7
 800399e:	4619      	mov	r1, r3
 80039a0:	4807      	ldr	r0, [pc, #28]	; (80039c0 <MX_TIM16_Init+0xe8>)
 80039a2:	f004 fa47 	bl	8007e34 <HAL_TIMEx_ConfigBreakDeadTime>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 80039ac:	f000 f8a4 	bl	8003af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80039b0:	4803      	ldr	r0, [pc, #12]	; (80039c0 <MX_TIM16_Init+0xe8>)
 80039b2:	f000 f9b9 	bl	8003d28 <HAL_TIM_MspPostInit>

}
 80039b6:	bf00      	nop
 80039b8:	3748      	adds	r7, #72	; 0x48
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	20000740 	.word	0x20000740
 80039c4:	40014400 	.word	0x40014400

080039c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ce:	f107 030c 	add.w	r3, r7, #12
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	605a      	str	r2, [r3, #4]
 80039d8:	609a      	str	r2, [r3, #8]
 80039da:	60da      	str	r2, [r3, #12]
 80039dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039de:	4b43      	ldr	r3, [pc, #268]	; (8003aec <MX_GPIO_Init+0x124>)
 80039e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e2:	4a42      	ldr	r2, [pc, #264]	; (8003aec <MX_GPIO_Init+0x124>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039ea:	4b40      	ldr	r3, [pc, #256]	; (8003aec <MX_GPIO_Init+0x124>)
 80039ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039f6:	4b3d      	ldr	r3, [pc, #244]	; (8003aec <MX_GPIO_Init+0x124>)
 80039f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fa:	4a3c      	ldr	r2, [pc, #240]	; (8003aec <MX_GPIO_Init+0x124>)
 80039fc:	f043 0302 	orr.w	r3, r3, #2
 8003a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a02:	4b3a      	ldr	r3, [pc, #232]	; (8003aec <MX_GPIO_Init+0x124>)
 8003a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	607b      	str	r3, [r7, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN_PWR_Pin|RTS_SIM_Pin, GPIO_PIN_RESET);
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f44f 7181 	mov.w	r1, #258	; 0x102
 8003a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a18:	f001 fe84 	bl	8005724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_SIM_GPIO_Port, PWR_SIM_Pin, GPIO_PIN_SET);
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a26:	f001 fe7d 	bl	8005724 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIN_PWR_Pin RTS_SIM_Pin PWR_SIM_Pin */
  GPIO_InitStruct.Pin = PIN_PWR_Pin|RTS_SIM_Pin|PWR_SIM_Pin;
 8003a2a:	f640 1302 	movw	r3, #2306	; 0x902
 8003a2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a30:	2301      	movs	r3, #1
 8003a32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a3c:	f107 030c 	add.w	r3, r7, #12
 8003a40:	4619      	mov	r1, r3
 8003a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a46:	f001 fceb 	bl	8005420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIN_WAKEUP_Pin */
  GPIO_InitStruct.Pin = PIN_WAKEUP_Pin;
 8003a4a:	2310      	movs	r3, #16
 8003a4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PIN_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8003a56:	f107 030c 	add.w	r3, r7, #12
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a60:	f001 fcde 	bl	8005420 <HAL_GPIO_Init>

  /*Configure GPIO pin : DETACH_PIN_Pin */
  GPIO_InitStruct.Pin = DETACH_PIN_Pin;
 8003a64:	2380      	movs	r3, #128	; 0x80
 8003a66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a68:	4b21      	ldr	r3, [pc, #132]	; (8003af0 <MX_GPIO_Init+0x128>)
 8003a6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DETACH_PIN_GPIO_Port, &GPIO_InitStruct);
 8003a70:	f107 030c 	add.w	r3, r7, #12
 8003a74:	4619      	mov	r1, r3
 8003a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a7a:	f001 fcd1 	bl	8005420 <HAL_GPIO_Init>

  /*Configure GPIO pins : ALLOW_DETACH_PIN_Pin RI_SIM_Pin */
  GPIO_InitStruct.Pin = ALLOW_DETACH_PIN_Pin|RI_SIM_Pin;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a82:	4b1b      	ldr	r3, [pc, #108]	; (8003af0 <MX_GPIO_Init+0x128>)
 8003a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a86:	2301      	movs	r3, #1
 8003a88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a8a:	f107 030c 	add.w	r3, r7, #12
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4818      	ldr	r0, [pc, #96]	; (8003af4 <MX_GPIO_Init+0x12c>)
 8003a92:	f001 fcc5 	bl	8005420 <HAL_GPIO_Init>

  /*Configure GPIO pin : STAT_SIM_Pin */
  GPIO_InitStruct.Pin = STAT_SIM_Pin;
 8003a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(STAT_SIM_GPIO_Port, &GPIO_InitStruct);
 8003aa4:	f107 030c 	add.w	r3, r7, #12
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003aae:	f001 fcb7 	bl	8005420 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	2006      	movs	r0, #6
 8003ab8:	f001 fc3b 	bl	8005332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003abc:	2006      	movs	r0, #6
 8003abe:	f001 fc54 	bl	800536a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	2007      	movs	r0, #7
 8003ac8:	f001 fc33 	bl	8005332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003acc:	2007      	movs	r0, #7
 8003ace:	f001 fc4c 	bl	800536a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	2017      	movs	r0, #23
 8003ad8:	f001 fc2b 	bl	8005332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003adc:	2017      	movs	r0, #23
 8003ade:	f001 fc44 	bl	800536a <HAL_NVIC_EnableIRQ>

}
 8003ae2:	bf00      	nop
 8003ae4:	3720      	adds	r7, #32
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40021000 	.word	0x40021000
 8003af0:	10110000 	.word	0x10110000
 8003af4:	48000400 	.word	0x48000400

08003af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003afc:	bf00      	nop
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
	...

08003b08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b0e:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <HAL_MspInit+0x44>)
 8003b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b12:	4a0e      	ldr	r2, [pc, #56]	; (8003b4c <HAL_MspInit+0x44>)
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	6613      	str	r3, [r2, #96]	; 0x60
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <HAL_MspInit+0x44>)
 8003b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	607b      	str	r3, [r7, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b26:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <HAL_MspInit+0x44>)
 8003b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2a:	4a08      	ldr	r2, [pc, #32]	; (8003b4c <HAL_MspInit+0x44>)
 8003b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b30:	6593      	str	r3, [r2, #88]	; 0x58
 8003b32:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <HAL_MspInit+0x44>)
 8003b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40021000 	.word	0x40021000

08003b50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a0d      	ldr	r2, [pc, #52]	; (8003b94 <HAL_ADC_MspInit+0x44>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d113      	bne.n	8003b8a <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003b62:	4b0d      	ldr	r3, [pc, #52]	; (8003b98 <HAL_ADC_MspInit+0x48>)
 8003b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b66:	4a0c      	ldr	r2, [pc, #48]	; (8003b98 <HAL_ADC_MspInit+0x48>)
 8003b68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b6e:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <HAL_ADC_MspInit+0x48>)
 8003b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	2102      	movs	r1, #2
 8003b7e:	2012      	movs	r0, #18
 8003b80:	f001 fbd7 	bl	8005332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8003b84:	2012      	movs	r0, #18
 8003b86:	f001 fbf0 	bl	800536a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003b8a:	bf00      	nop
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	50040000 	.word	0x50040000
 8003b98:	40021000 	.word	0x40021000

08003b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08c      	sub	sp, #48	; 0x30
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba4:	f107 031c 	add.w	r3, r7, #28
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	605a      	str	r2, [r3, #4]
 8003bae:	609a      	str	r2, [r3, #8]
 8003bb0:	60da      	str	r2, [r3, #12]
 8003bb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a37      	ldr	r2, [pc, #220]	; (8003c98 <HAL_UART_MspInit+0xfc>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d131      	bne.n	8003c22 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003bbe:	4b37      	ldr	r3, [pc, #220]	; (8003c9c <HAL_UART_MspInit+0x100>)
 8003bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc2:	4a36      	ldr	r2, [pc, #216]	; (8003c9c <HAL_UART_MspInit+0x100>)
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003bca:	4b34      	ldr	r3, [pc, #208]	; (8003c9c <HAL_UART_MspInit+0x100>)
 8003bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	61bb      	str	r3, [r7, #24]
 8003bd4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bd6:	4b31      	ldr	r3, [pc, #196]	; (8003c9c <HAL_UART_MspInit+0x100>)
 8003bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bda:	4a30      	ldr	r2, [pc, #192]	; (8003c9c <HAL_UART_MspInit+0x100>)
 8003bdc:	f043 0301 	orr.w	r3, r3, #1
 8003be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003be2:	4b2e      	ldr	r3, [pc, #184]	; (8003c9c <HAL_UART_MspInit+0x100>)
 8003be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003bee:	230c      	movs	r3, #12
 8003bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003bfe:	2308      	movs	r3, #8
 8003c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c02:	f107 031c 	add.w	r3, r7, #28
 8003c06:	4619      	mov	r1, r3
 8003c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c0c:	f001 fc08 	bl	8005420 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003c10:	2200      	movs	r2, #0
 8003c12:	2100      	movs	r1, #0
 8003c14:	2046      	movs	r0, #70	; 0x46
 8003c16:	f001 fb8c 	bl	8005332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003c1a:	2046      	movs	r0, #70	; 0x46
 8003c1c:	f001 fba5 	bl	800536a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003c20:	e036      	b.n	8003c90 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART1)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a1e      	ldr	r2, [pc, #120]	; (8003ca0 <HAL_UART_MspInit+0x104>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d131      	bne.n	8003c90 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <HAL_UART_MspInit+0x100>)
 8003c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c30:	4a1a      	ldr	r2, [pc, #104]	; (8003c9c <HAL_UART_MspInit+0x100>)
 8003c32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c36:	6613      	str	r3, [r2, #96]	; 0x60
 8003c38:	4b18      	ldr	r3, [pc, #96]	; (8003c9c <HAL_UART_MspInit+0x100>)
 8003c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c40:	613b      	str	r3, [r7, #16]
 8003c42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c44:	4b15      	ldr	r3, [pc, #84]	; (8003c9c <HAL_UART_MspInit+0x100>)
 8003c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c48:	4a14      	ldr	r2, [pc, #80]	; (8003c9c <HAL_UART_MspInit+0x100>)
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c50:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <HAL_UART_MspInit+0x100>)
 8003c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003c5c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c62:	2302      	movs	r3, #2
 8003c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c6e:	2307      	movs	r3, #7
 8003c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c72:	f107 031c 	add.w	r3, r7, #28
 8003c76:	4619      	mov	r1, r3
 8003c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c7c:	f001 fbd0 	bl	8005420 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c80:	2200      	movs	r2, #0
 8003c82:	2100      	movs	r1, #0
 8003c84:	2025      	movs	r0, #37	; 0x25
 8003c86:	f001 fb54 	bl	8005332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c8a:	2025      	movs	r0, #37	; 0x25
 8003c8c:	f001 fb6d 	bl	800536a <HAL_NVIC_EnableIRQ>
}
 8003c90:	bf00      	nop
 8003c92:	3730      	adds	r7, #48	; 0x30
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40008000 	.word	0x40008000
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40013800 	.word	0x40013800

08003ca4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a0b      	ldr	r2, [pc, #44]	; (8003ce0 <HAL_RTC_MspInit+0x3c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d10f      	bne.n	8003cd6 <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <HAL_RTC_MspInit+0x40>)
 8003cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbc:	4a09      	ldr	r2, [pc, #36]	; (8003ce4 <HAL_RTC_MspInit+0x40>)
 8003cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2100      	movs	r1, #0
 8003cca:	2029      	movs	r0, #41	; 0x29
 8003ccc:	f001 fb31 	bl	8005332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8003cd0:	2029      	movs	r0, #41	; 0x29
 8003cd2:	f001 fb4a 	bl	800536a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40002800 	.word	0x40002800
 8003ce4:	40021000 	.word	0x40021000

08003ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a0a      	ldr	r2, [pc, #40]	; (8003d20 <HAL_TIM_Base_MspInit+0x38>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d10b      	bne.n	8003d12 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <HAL_TIM_Base_MspInit+0x3c>)
 8003cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cfe:	4a09      	ldr	r2, [pc, #36]	; (8003d24 <HAL_TIM_Base_MspInit+0x3c>)
 8003d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d04:	6613      	str	r3, [r2, #96]	; 0x60
 8003d06:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <HAL_TIM_Base_MspInit+0x3c>)
 8003d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003d12:	bf00      	nop
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40014400 	.word	0x40014400
 8003d24:	40021000 	.word	0x40021000

08003d28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d30:	f107 030c 	add.w	r3, r7, #12
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	609a      	str	r2, [r3, #8]
 8003d3c:	60da      	str	r2, [r3, #12]
 8003d3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a11      	ldr	r2, [pc, #68]	; (8003d8c <HAL_TIM_MspPostInit+0x64>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d11b      	bne.n	8003d82 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d4a:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <HAL_TIM_MspPostInit+0x68>)
 8003d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d4e:	4a10      	ldr	r2, [pc, #64]	; (8003d90 <HAL_TIM_MspPostInit+0x68>)
 8003d50:	f043 0302 	orr.w	r3, r3, #2
 8003d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d56:	4b0e      	ldr	r3, [pc, #56]	; (8003d90 <HAL_TIM_MspPostInit+0x68>)
 8003d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	60bb      	str	r3, [r7, #8]
 8003d60:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration    
    PB6     ------> TIM16_CH1N 
    */
    GPIO_InitStruct.Pin = SPEAKER_PIN_Pin;
 8003d62:	2340      	movs	r3, #64	; 0x40
 8003d64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d66:	2302      	movs	r3, #2
 8003d68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8003d72:	230e      	movs	r3, #14
 8003d74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SPEAKER_PIN_GPIO_Port, &GPIO_InitStruct);
 8003d76:	f107 030c 	add.w	r3, r7, #12
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4805      	ldr	r0, [pc, #20]	; (8003d94 <HAL_TIM_MspPostInit+0x6c>)
 8003d7e:	f001 fb4f 	bl	8005420 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8003d82:	bf00      	nop
 8003d84:	3720      	adds	r7, #32
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40014400 	.word	0x40014400
 8003d90:	40021000 	.word	0x40021000
 8003d94:	48000400 	.word	0x48000400

08003d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003d9c:	bf00      	nop
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003da6:	b480      	push	{r7}
 8003da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003daa:	e7fe      	b.n	8003daa <HardFault_Handler+0x4>

08003dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003db0:	e7fe      	b.n	8003db0 <MemManage_Handler+0x4>

08003db2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003db2:	b480      	push	{r7}
 8003db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003db6:	e7fe      	b.n	8003db6 <BusFault_Handler+0x4>

08003db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003dbc:	e7fe      	b.n	8003dbc <UsageFault_Handler+0x4>

08003dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dc2:	bf00      	nop
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dd0:	bf00      	nop
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dde:	bf00      	nop
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003dec:	f000 f91e 	bl	800402c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003df0:	bf00      	nop
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003df8:	2001      	movs	r0, #1
 8003dfa:	f001 fcab 	bl	8005754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003e06:	2002      	movs	r0, #2
 8003e08:	f001 fca4 	bl	8005754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003e0c:	bf00      	nop
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003e14:	4802      	ldr	r0, [pc, #8]	; (8003e20 <ADC1_IRQHandler+0x10>)
 8003e16:	f000 fc62 	bl	80046de <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003e1a:	bf00      	nop
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	200005a4 	.word	0x200005a4

08003e24 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003e28:	2080      	movs	r0, #128	; 0x80
 8003e2a:	f001 fc93 	bl	8005754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003e2e:	bf00      	nop
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e38:	4802      	ldr	r0, [pc, #8]	; (8003e44 <USART1_IRQHandler+0x10>)
 8003e3a:	f004 fad3 	bl	80083e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e3e:	bf00      	nop
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000610 	.word	0x20000610

08003e48 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003e4c:	4802      	ldr	r0, [pc, #8]	; (8003e58 <RTC_Alarm_IRQHandler+0x10>)
 8003e4e:	f003 fa03 	bl	8007258 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	200006a0 	.word	0x200006a0

08003e5c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003e60:	4802      	ldr	r0, [pc, #8]	; (8003e6c <LPUART1_IRQHandler+0x10>)
 8003e62:	f004 fabf 	bl	80083e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003e66:	bf00      	nop
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	2000051c 	.word	0x2000051c

08003e70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003e78:	4b11      	ldr	r3, [pc, #68]	; (8003ec0 <_sbrk+0x50>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d102      	bne.n	8003e86 <_sbrk+0x16>
		heap_end = &end;
 8003e80:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <_sbrk+0x50>)
 8003e82:	4a10      	ldr	r2, [pc, #64]	; (8003ec4 <_sbrk+0x54>)
 8003e84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003e86:	4b0e      	ldr	r3, [pc, #56]	; (8003ec0 <_sbrk+0x50>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <_sbrk+0x50>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4413      	add	r3, r2
 8003e94:	466a      	mov	r2, sp
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d907      	bls.n	8003eaa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003e9a:	f005 f9ef 	bl	800927c <__errno>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	230c      	movs	r3, #12
 8003ea2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea8:	e006      	b.n	8003eb8 <_sbrk+0x48>
	}

	heap_end += incr;
 8003eaa:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <_sbrk+0x50>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	4a03      	ldr	r2, [pc, #12]	; (8003ec0 <_sbrk+0x50>)
 8003eb4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20000384 	.word	0x20000384
 8003ec4:	20000790 	.word	0x20000790

08003ec8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ecc:	4b17      	ldr	r3, [pc, #92]	; (8003f2c <SystemInit+0x64>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed2:	4a16      	ldr	r2, [pc, #88]	; (8003f2c <SystemInit+0x64>)
 8003ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003edc:	4b14      	ldr	r3, [pc, #80]	; (8003f30 <SystemInit+0x68>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a13      	ldr	r2, [pc, #76]	; (8003f30 <SystemInit+0x68>)
 8003ee2:	f043 0301 	orr.w	r3, r3, #1
 8003ee6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003ee8:	4b11      	ldr	r3, [pc, #68]	; (8003f30 <SystemInit+0x68>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003eee:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <SystemInit+0x68>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a0f      	ldr	r2, [pc, #60]	; (8003f30 <SystemInit+0x68>)
 8003ef4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003ef8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003efc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003efe:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <SystemInit+0x68>)
 8003f00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f04:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f06:	4b0a      	ldr	r3, [pc, #40]	; (8003f30 <SystemInit+0x68>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a09      	ldr	r2, [pc, #36]	; (8003f30 <SystemInit+0x68>)
 8003f0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003f12:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <SystemInit+0x68>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f18:	4b04      	ldr	r3, [pc, #16]	; (8003f2c <SystemInit+0x64>)
 8003f1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f1e:	609a      	str	r2, [r3, #8]
#endif
}
 8003f20:	bf00      	nop
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	e000ed00 	.word	0xe000ed00
 8003f30:	40021000 	.word	0x40021000

08003f34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003f34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f6c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003f38:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003f3a:	e003      	b.n	8003f44 <LoopCopyDataInit>

08003f3c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003f3e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003f40:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003f42:	3104      	adds	r1, #4

08003f44 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003f44:	480b      	ldr	r0, [pc, #44]	; (8003f74 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003f46:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003f48:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003f4a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003f4c:	d3f6      	bcc.n	8003f3c <CopyDataInit>
	ldr	r2, =_sbss
 8003f4e:	4a0b      	ldr	r2, [pc, #44]	; (8003f7c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003f50:	e002      	b.n	8003f58 <LoopFillZerobss>

08003f52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003f52:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003f54:	f842 3b04 	str.w	r3, [r2], #4

08003f58 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003f58:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <LoopForever+0x16>)
	cmp	r2, r3
 8003f5a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003f5c:	d3f9      	bcc.n	8003f52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f5e:	f7ff ffb3 	bl	8003ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f62:	f005 f991 	bl	8009288 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f66:	f7ff fa29 	bl	80033bc <main>

08003f6a <LoopForever>:

LoopForever:
    b LoopForever
 8003f6a:	e7fe      	b.n	8003f6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003f6c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003f70:	0800ee78 	.word	0x0800ee78
	ldr	r0, =_sdata
 8003f74:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003f78:	20000218 	.word	0x20000218
	ldr	r2, =_sbss
 8003f7c:	20000218 	.word	0x20000218
	ldr	r3, = _ebss
 8003f80:	20000790 	.word	0x20000790

08003f84 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f84:	e7fe      	b.n	8003f84 <CAN1_RX0_IRQHandler>

08003f86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f90:	2003      	movs	r0, #3
 8003f92:	f001 f9c3 	bl	800531c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f96:	2000      	movs	r0, #0
 8003f98:	f000 f80e 	bl	8003fb8 <HAL_InitTick>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	71fb      	strb	r3, [r7, #7]
 8003fa6:	e001      	b.n	8003fac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003fa8:	f7ff fdae 	bl	8003b08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003fac:	79fb      	ldrb	r3, [r7, #7]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003fc4:	4b16      	ldr	r3, [pc, #88]	; (8004020 <HAL_InitTick+0x68>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d022      	beq.n	8004012 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003fcc:	4b15      	ldr	r3, [pc, #84]	; (8004024 <HAL_InitTick+0x6c>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4b13      	ldr	r3, [pc, #76]	; (8004020 <HAL_InitTick+0x68>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003fd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f001 f9d0 	bl	8005386 <HAL_SYSTICK_Config>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10f      	bne.n	800400c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b0f      	cmp	r3, #15
 8003ff0:	d809      	bhi.n	8004006 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffa:	f001 f99a 	bl	8005332 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ffe:	4a0a      	ldr	r2, [pc, #40]	; (8004028 <HAL_InitTick+0x70>)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	e007      	b.n	8004016 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	73fb      	strb	r3, [r7, #15]
 800400a:	e004      	b.n	8004016 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	73fb      	strb	r3, [r7, #15]
 8004010:	e001      	b.n	8004016 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004016:	7bfb      	ldrb	r3, [r7, #15]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	20000040 	.word	0x20000040
 8004024:	20000038 	.word	0x20000038
 8004028:	2000003c 	.word	0x2000003c

0800402c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <HAL_IncTick+0x1c>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4b05      	ldr	r3, [pc, #20]	; (800404c <HAL_IncTick+0x20>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4413      	add	r3, r2
 800403a:	4a03      	ldr	r2, [pc, #12]	; (8004048 <HAL_IncTick+0x1c>)
 800403c:	6013      	str	r3, [r2, #0]
}
 800403e:	bf00      	nop
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	20000788 	.word	0x20000788
 800404c:	20000040 	.word	0x20000040

08004050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return uwTick;
 8004054:	4b03      	ldr	r3, [pc, #12]	; (8004064 <HAL_GetTick+0x14>)
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	20000788 	.word	0x20000788

08004068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004070:	f7ff ffee 	bl	8004050 <HAL_GetTick>
 8004074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004080:	d004      	beq.n	800408c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004082:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <HAL_Delay+0x40>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4413      	add	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800408c:	bf00      	nop
 800408e:	f7ff ffdf 	bl	8004050 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	429a      	cmp	r2, r3
 800409c:	d8f7      	bhi.n	800408e <HAL_Delay+0x26>
  {
  }
}
 800409e:	bf00      	nop
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	20000040 	.word	0x20000040

080040ac <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80040b0:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <HAL_SuspendTick+0x1c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a04      	ldr	r2, [pc, #16]	; (80040c8 <HAL_SuspendTick+0x1c>)
 80040b6:	f023 0302 	bic.w	r3, r3, #2
 80040ba:	6013      	str	r3, [r2, #0]
}
 80040bc:	bf00      	nop
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	e000e010 	.word	0xe000e010

080040cc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80040d0:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <HAL_ResumeTick+0x1c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a04      	ldr	r2, [pc, #16]	; (80040e8 <HAL_ResumeTick+0x1c>)
 80040d6:	f043 0302 	orr.w	r3, r3, #2
 80040da:	6013      	str	r3, [r2, #0]
}
 80040dc:	bf00      	nop
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	e000e010 	.word	0xe000e010

080040ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	609a      	str	r2, [r3, #8]
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	609a      	str	r2, [r3, #8]
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004148:	4618      	mov	r0, r3
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004154:	b490      	push	{r4, r7}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	3360      	adds	r3, #96	; 0x60
 8004166:	461a      	mov	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8004170:	6822      	ldr	r2, [r4, #0]
 8004172:	4b08      	ldr	r3, [pc, #32]	; (8004194 <LL_ADC_SetOffset+0x40>)
 8004174:	4013      	ands	r3, r2
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	4313      	orrs	r3, r2
 8004182:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004186:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004188:	bf00      	nop
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bc90      	pop	{r4, r7}
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	03fff000 	.word	0x03fff000

08004198 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004198:	b490      	push	{r4, r7}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3360      	adds	r3, #96	; 0x60
 80041a6:	461a      	mov	r2, r3
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041b0:	6823      	ldr	r3, [r4, #0]
 80041b2:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc90      	pop	{r4, r7}
 80041be:	4770      	bx	lr

080041c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80041c0:	b490      	push	{r4, r7}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	3360      	adds	r3, #96	; 0x60
 80041d0:	461a      	mov	r2, r3
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80041e6:	bf00      	nop
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc90      	pop	{r4, r7}
 80041ee:	4770      	bx	lr

080041f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004204:	2301      	movs	r3, #1
 8004206:	e000      	b.n	800420a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004216:	b490      	push	{r4, r7}
 8004218:	b084      	sub	sp, #16
 800421a:	af00      	add	r7, sp, #0
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	3330      	adds	r3, #48	; 0x30
 8004226:	461a      	mov	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	0a1b      	lsrs	r3, r3, #8
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	f003 030c 	and.w	r3, r3, #12
 8004232:	4413      	add	r3, r2
 8004234:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8004236:	6822      	ldr	r2, [r4, #0]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	211f      	movs	r1, #31
 8004240:	fa01 f303 	lsl.w	r3, r1, r3
 8004244:	43db      	mvns	r3, r3
 8004246:	401a      	ands	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	0e9b      	lsrs	r3, r3, #26
 800424c:	f003 011f 	and.w	r1, r3, #31
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	fa01 f303 	lsl.w	r3, r1, r3
 800425a:	4313      	orrs	r3, r2
 800425c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800425e:	bf00      	nop
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bc90      	pop	{r4, r7}
 8004266:	4770      	bx	lr

08004268 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004274:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800428e:	b490      	push	{r4, r7}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	3314      	adds	r3, #20
 800429e:	461a      	mov	r2, r3
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	0e5b      	lsrs	r3, r3, #25
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	4413      	add	r3, r2
 80042ac:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80042ae:	6822      	ldr	r2, [r4, #0]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	0d1b      	lsrs	r3, r3, #20
 80042b4:	f003 031f 	and.w	r3, r3, #31
 80042b8:	2107      	movs	r1, #7
 80042ba:	fa01 f303 	lsl.w	r3, r1, r3
 80042be:	43db      	mvns	r3, r3
 80042c0:	401a      	ands	r2, r3
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	0d1b      	lsrs	r3, r3, #20
 80042c6:	f003 031f 	and.w	r3, r3, #31
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	fa01 f303 	lsl.w	r3, r1, r3
 80042d0:	4313      	orrs	r3, r2
 80042d2:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80042d4:	bf00      	nop
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc90      	pop	{r4, r7}
 80042dc:	4770      	bx	lr
	...

080042e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042f8:	43db      	mvns	r3, r3
 80042fa:	401a      	ands	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f003 0318 	and.w	r3, r3, #24
 8004302:	4908      	ldr	r1, [pc, #32]	; (8004324 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004304:	40d9      	lsrs	r1, r3
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	400b      	ands	r3, r1
 800430a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800430e:	431a      	orrs	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004316:	bf00      	nop
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	0007ffff 	.word	0x0007ffff

08004328 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004338:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6093      	str	r3, [r2, #8]
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800435c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004360:	d101      	bne.n	8004366 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004384:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004388:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043b0:	d101      	bne.n	80043b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <LL_ADC_IsEnabled+0x18>
 80043d8:	2301      	movs	r3, #1
 80043da:	e000      	b.n	80043de <LL_ADC_IsEnabled+0x1a>
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d101      	bne.n	8004402 <LL_ADC_REG_IsConversionOngoing+0x18>
 80043fe:	2301      	movs	r3, #1
 8004400:	e000      	b.n	8004404 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b08      	cmp	r3, #8
 8004422:	d101      	bne.n	8004428 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004424:	2301      	movs	r3, #1
 8004426:	e000      	b.n	800442a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
	...

08004438 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004440:	2300      	movs	r3, #0
 8004442:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004444:	2300      	movs	r3, #0
 8004446:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e12a      	b.n	80046a8 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445c:	2b00      	cmp	r3, #0
 800445e:	d109      	bne.n	8004474 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7ff fb75 	bl	8003b50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff ff67 	bl	800434c <LL_ADC_IsDeepPowerDownEnabled>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d004      	beq.n	800448e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff ff4d 	bl	8004328 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff ff82 	bl	800439c <LL_ADC_IsInternalRegulatorEnabled>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d113      	bne.n	80044c6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff ff66 	bl	8004374 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80044a8:	4b81      	ldr	r3, [pc, #516]	; (80046b0 <HAL_ADC_Init+0x278>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	099b      	lsrs	r3, r3, #6
 80044ae:	4a81      	ldr	r2, [pc, #516]	; (80046b4 <HAL_ADC_Init+0x27c>)
 80044b0:	fba2 2303 	umull	r2, r3, r2, r3
 80044b4:	099b      	lsrs	r3, r3, #6
 80044b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80044b8:	e002      	b.n	80044c0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	3b01      	subs	r3, #1
 80044be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1f9      	bne.n	80044ba <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff ff66 	bl	800439c <LL_ADC_IsInternalRegulatorEnabled>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10d      	bne.n	80044f2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044da:	f043 0210 	orr.w	r2, r3, #16
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e6:	f043 0201 	orr.w	r2, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff ff77 	bl	80043ea <LL_ADC_REG_IsConversionOngoing>
 80044fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	2b00      	cmp	r3, #0
 8004508:	f040 80c5 	bne.w	8004696 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	2b00      	cmp	r3, #0
 8004510:	f040 80c1 	bne.w	8004696 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004518:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800451c:	f043 0202 	orr.w	r2, r3, #2
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff ff4b 	bl	80043c4 <LL_ADC_IsEnabled>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10b      	bne.n	800454c <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004534:	4860      	ldr	r0, [pc, #384]	; (80046b8 <HAL_ADC_Init+0x280>)
 8004536:	f7ff ff45 	bl	80043c4 <LL_ADC_IsEnabled>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d105      	bne.n	800454c <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	4619      	mov	r1, r3
 8004546:	485d      	ldr	r0, [pc, #372]	; (80046bc <HAL_ADC_Init+0x284>)
 8004548:	f7ff fdd0 	bl	80040ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	7e5b      	ldrb	r3, [r3, #25]
 8004550:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004556:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800455c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004562:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 3020 	ldrb.w	r3, [r3, #32]
 800456a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800456c:	4313      	orrs	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d106      	bne.n	8004588 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	3b01      	subs	r3, #1
 8004580:	045b      	lsls	r3, r3, #17
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4313      	orrs	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	2b00      	cmp	r3, #0
 800458e:	d009      	beq.n	80045a4 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004594:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	4b45      	ldr	r3, [pc, #276]	; (80046c0 <HAL_ADC_Init+0x288>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	6812      	ldr	r2, [r2, #0]
 80045b2:	69b9      	ldr	r1, [r7, #24]
 80045b4:	430b      	orrs	r3, r1
 80045b6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff ff14 	bl	80043ea <LL_ADC_REG_IsConversionOngoing>
 80045c2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff ff21 	bl	8004410 <LL_ADC_INJ_IsConversionOngoing>
 80045ce:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d13d      	bne.n	8004652 <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d13a      	bne.n	8004652 <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80045e0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045e8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80045ea:	4313      	orrs	r3, r2
 80045ec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045f8:	f023 0302 	bic.w	r3, r3, #2
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	69b9      	ldr	r1, [r7, #24]
 8004602:	430b      	orrs	r3, r1
 8004604:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800460c:	2b01      	cmp	r3, #1
 800460e:	d118      	bne.n	8004642 <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800461a:	f023 0304 	bic.w	r3, r3, #4
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004626:	4311      	orrs	r1, r2
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800462c:	4311      	orrs	r1, r2
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004632:	430a      	orrs	r2, r1
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	611a      	str	r2, [r3, #16]
 8004640:	e007      	b.n	8004652 <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0201 	bic.w	r2, r2, #1
 8004650:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d10c      	bne.n	8004674 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004660:	f023 010f 	bic.w	r1, r3, #15
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	1e5a      	subs	r2, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	631a      	str	r2, [r3, #48]	; 0x30
 8004672:	e007      	b.n	8004684 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 020f 	bic.w	r2, r2, #15
 8004682:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004688:	f023 0303 	bic.w	r3, r3, #3
 800468c:	f043 0201 	orr.w	r2, r3, #1
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	655a      	str	r2, [r3, #84]	; 0x54
 8004694:	e007      	b.n	80046a6 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469a:	f043 0210 	orr.w	r2, r3, #16
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80046a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3720      	adds	r7, #32
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20000038 	.word	0x20000038
 80046b4:	053e2d63 	.word	0x053e2d63
 80046b8:	50040000 	.word	0x50040000
 80046bc:	50040300 	.word	0x50040300
 80046c0:	fff0c007 	.word	0xfff0c007

080046c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b088      	sub	sp, #32
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80046e6:	2300      	movs	r3, #0
 80046e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d017      	beq.n	8004734 <HAL_ADC_IRQHandler+0x56>
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d012      	beq.n	8004734 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004712:	f003 0310 	and.w	r3, r3, #16
 8004716:	2b00      	cmp	r3, #0
 8004718:	d105      	bne.n	8004726 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fd1e 	bl	8005168 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2202      	movs	r2, #2
 8004732:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	2b00      	cmp	r3, #0
 800473c:	d004      	beq.n	8004748 <HAL_ADC_IRQHandler+0x6a>
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d109      	bne.n	800475c <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800474e:	2b00      	cmp	r3, #0
 8004750:	d05e      	beq.n	8004810 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b00      	cmp	r3, #0
 800475a:	d059      	beq.n	8004810 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b00      	cmp	r3, #0
 8004766:	d105      	bne.n	8004774 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff fd39 	bl	80041f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d03e      	beq.n	8004802 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d135      	bne.n	8004802 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d12e      	bne.n	8004802 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff fe1e 	bl	80043ea <LL_ADC_REG_IsConversionOngoing>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d11a      	bne.n	80047ea <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 020c 	bic.w	r2, r2, #12
 80047c2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d112      	bne.n	8004802 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e0:	f043 0201 	orr.w	r2, r3, #1
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	655a      	str	r2, [r3, #84]	; 0x54
 80047e8:	e00b      	b.n	8004802 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ee:	f043 0210 	orr.w	r2, r3, #16
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fa:	f043 0201 	orr.w	r2, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fe fdc8 	bl	8003398 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	220c      	movs	r2, #12
 800480e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b00      	cmp	r3, #0
 8004818:	d004      	beq.n	8004824 <HAL_ADC_IRQHandler+0x146>
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b00      	cmp	r3, #0
 8004822:	d109      	bne.n	8004838 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800482a:	2b00      	cmp	r3, #0
 800482c:	d072      	beq.n	8004914 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004834:	2b00      	cmp	r3, #0
 8004836:	d06d      	beq.n	8004914 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483c:	f003 0310 	and.w	r3, r3, #16
 8004840:	2b00      	cmp	r3, #0
 8004842:	d105      	bne.n	8004850 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004848:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff fd07 	bl	8004268 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800485a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff fcc5 	bl	80041f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004866:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10c      	bne.n	8004890 <HAL_ADC_IRQHandler+0x1b2>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800487c:	2b00      	cmp	r3, #0
 800487e:	d142      	bne.n	8004906 <HAL_ADC_IRQHandler+0x228>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d03f      	beq.n	8004906 <HAL_ADC_IRQHandler+0x228>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 800488c:	2b00      	cmp	r3, #0
 800488e:	d13a      	bne.n	8004906 <HAL_ADC_IRQHandler+0x228>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489a:	2b40      	cmp	r3, #64	; 0x40
 800489c:	d133      	bne.n	8004906 <HAL_ADC_IRQHandler+0x228>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d12e      	bne.n	8004906 <HAL_ADC_IRQHandler+0x228>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff fdaf 	bl	8004410 <LL_ADC_INJ_IsConversionOngoing>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d11a      	bne.n	80048ee <HAL_ADC_IRQHandler+0x210>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048c6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d112      	bne.n	8004906 <HAL_ADC_IRQHandler+0x228>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e4:	f043 0201 	orr.w	r2, r3, #1
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	655a      	str	r2, [r3, #84]	; 0x54
 80048ec:	e00b      	b.n	8004906 <HAL_ADC_IRQHandler+0x228>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f2:	f043 0210 	orr.w	r2, r3, #16
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fe:	f043 0201 	orr.w	r2, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 fc06 	bl	8005118 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2260      	movs	r2, #96	; 0x60
 8004912:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491a:	2b00      	cmp	r3, #0
 800491c:	d011      	beq.n	8004942 <HAL_ADC_IRQHandler+0x264>
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00c      	beq.n	8004942 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f886 	bl	8004a46 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2280      	movs	r2, #128	; 0x80
 8004940:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004948:	2b00      	cmp	r3, #0
 800494a:	d012      	beq.n	8004972 <HAL_ADC_IRQHandler+0x294>
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00d      	beq.n	8004972 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fbec 	bl	8005140 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004970:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004978:	2b00      	cmp	r3, #0
 800497a:	d012      	beq.n	80049a2 <HAL_ADC_IRQHandler+0x2c4>
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00d      	beq.n	80049a2 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fbde 	bl	8005154 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	f003 0310 	and.w	r3, r3, #16
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d02a      	beq.n	8004a02 <HAL_ADC_IRQHandler+0x324>
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d025      	beq.n	8004a02 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d102      	bne.n	80049c4 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80049be:	2301      	movs	r3, #1
 80049c0:	61fb      	str	r3, [r7, #28]
 80049c2:	e008      	b.n	80049d6 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80049d2:	2301      	movs	r3, #1
 80049d4:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d10e      	bne.n	80049fa <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ec:	f043 0202 	orr.w	r2, r3, #2
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f830 	bl	8004a5a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2210      	movs	r2, #16
 8004a00:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d018      	beq.n	8004a3e <HAL_ADC_IRQHandler+0x360>
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d013      	beq.n	8004a3e <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a26:	f043 0208 	orr.w	r2, r3, #8
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a36:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 fb77 	bl	800512c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004a3e:	bf00      	nop
 8004a40:	3720      	adds	r7, #32
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
	...

08004a70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b0a6      	sub	sp, #152	; 0x98
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d101      	bne.n	8004a92 <HAL_ADC_ConfigChannel+0x22>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e338      	b.n	8005104 <HAL_ADC_ConfigChannel+0x694>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff fca3 	bl	80043ea <LL_ADC_REG_IsConversionOngoing>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f040 831d 	bne.w	80050e6 <HAL_ADC_ConfigChannel+0x676>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b05      	cmp	r3, #5
 8004ab2:	d824      	bhi.n	8004afe <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	3b02      	subs	r3, #2
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d81b      	bhi.n	8004af6 <HAL_ADC_ConfigChannel+0x86>
 8004abe:	a201      	add	r2, pc, #4	; (adr r2, 8004ac4 <HAL_ADC_ConfigChannel+0x54>)
 8004ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac4:	08004ad5 	.word	0x08004ad5
 8004ac8:	08004add 	.word	0x08004add
 8004acc:	08004ae5 	.word	0x08004ae5
 8004ad0:	08004aed 	.word	0x08004aed
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	220c      	movs	r2, #12
 8004ad8:	605a      	str	r2, [r3, #4]
 8004ada:	e011      	b.n	8004b00 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	2212      	movs	r2, #18
 8004ae0:	605a      	str	r2, [r3, #4]
 8004ae2:	e00d      	b.n	8004b00 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2218      	movs	r2, #24
 8004ae8:	605a      	str	r2, [r3, #4]
 8004aea:	e009      	b.n	8004b00 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004af2:	605a      	str	r2, [r3, #4]
 8004af4:	e004      	b.n	8004b00 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2206      	movs	r2, #6
 8004afa:	605a      	str	r2, [r3, #4]
 8004afc:	e000      	b.n	8004b00 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004afe:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6818      	ldr	r0, [r3, #0]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	6859      	ldr	r1, [r3, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	f7ff fb82 	bl	8004216 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff fc67 	bl	80043ea <LL_ADC_REG_IsConversionOngoing>
 8004b1c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff fc73 	bl	8004410 <LL_ADC_INJ_IsConversionOngoing>
 8004b2a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f040 8148 	bne.w	8004dc8 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f040 8143 	bne.w	8004dc8 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6818      	ldr	r0, [r3, #0]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	6819      	ldr	r1, [r3, #0]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	f7ff fb9d 	bl	800428e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	695a      	ldr	r2, [r3, #20]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	08db      	lsrs	r3, r3, #3
 8004b60:	f003 0303 	and.w	r3, r3, #3
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	d00a      	beq.n	8004b8c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6818      	ldr	r0, [r3, #0]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	6919      	ldr	r1, [r3, #16]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b86:	f7ff fae5 	bl	8004154 <LL_ADC_SetOffset>
 8004b8a:	e11d      	b.n	8004dc8 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2100      	movs	r1, #0
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff fb00 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10a      	bne.n	8004bb8 <HAL_ADC_ConfigChannel+0x148>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff faf5 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	0e9b      	lsrs	r3, r3, #26
 8004bb2:	f003 021f 	and.w	r2, r3, #31
 8004bb6:	e012      	b.n	8004bde <HAL_ADC_ConfigChannel+0x16e>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff faea 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004bce:	fa93 f3a3 	rbit	r3, r3
 8004bd2:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004bd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bd6:	fab3 f383 	clz	r3, r3
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	461a      	mov	r2, r3
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d105      	bne.n	8004bf6 <HAL_ADC_ConfigChannel+0x186>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	0e9b      	lsrs	r3, r3, #26
 8004bf0:	f003 031f 	and.w	r3, r3, #31
 8004bf4:	e00a      	b.n	8004c0c <HAL_ADC_ConfigChannel+0x19c>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bfe:	fa93 f3a3 	rbit	r3, r3
 8004c02:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8004c04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c06:	fab3 f383 	clz	r3, r3
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d106      	bne.n	8004c1e <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2200      	movs	r2, #0
 8004c16:	2100      	movs	r1, #0
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff fad1 	bl	80041c0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2101      	movs	r1, #1
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff fab7 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10a      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x1da>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2101      	movs	r1, #1
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff faac 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004c40:	4603      	mov	r3, r0
 8004c42:	0e9b      	lsrs	r3, r3, #26
 8004c44:	f003 021f 	and.w	r2, r3, #31
 8004c48:	e010      	b.n	8004c6c <HAL_ADC_ConfigChannel+0x1fc>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2101      	movs	r1, #1
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff faa1 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004c56:	4603      	mov	r3, r0
 8004c58:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c5c:	fa93 f3a3 	rbit	r3, r3
 8004c60:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c64:	fab3 f383 	clz	r3, r3
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d105      	bne.n	8004c84 <HAL_ADC_ConfigChannel+0x214>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	0e9b      	lsrs	r3, r3, #26
 8004c7e:	f003 031f 	and.w	r3, r3, #31
 8004c82:	e00a      	b.n	8004c9a <HAL_ADC_ConfigChannel+0x22a>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c8c:	fa93 f3a3 	rbit	r3, r3
 8004c90:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004c92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c94:	fab3 f383 	clz	r3, r3
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d106      	bne.n	8004cac <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff fa8a 	bl	80041c0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2102      	movs	r1, #2
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff fa70 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10a      	bne.n	8004cd8 <HAL_ADC_ConfigChannel+0x268>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2102      	movs	r1, #2
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7ff fa65 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	0e9b      	lsrs	r3, r3, #26
 8004cd2:	f003 021f 	and.w	r2, r3, #31
 8004cd6:	e010      	b.n	8004cfa <HAL_ADC_ConfigChannel+0x28a>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2102      	movs	r1, #2
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff fa5a 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cea:	fa93 f3a3 	rbit	r3, r3
 8004cee:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8004cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cf2:	fab3 f383 	clz	r3, r3
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d105      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x2a2>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	0e9b      	lsrs	r3, r3, #26
 8004d0c:	f003 031f 	and.w	r3, r3, #31
 8004d10:	e00a      	b.n	8004d28 <HAL_ADC_ConfigChannel+0x2b8>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d1a:	fa93 f3a3 	rbit	r3, r3
 8004d1e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d22:	fab3 f383 	clz	r3, r3
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d106      	bne.n	8004d3a <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2200      	movs	r2, #0
 8004d32:	2102      	movs	r1, #2
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff fa43 	bl	80041c0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2103      	movs	r1, #3
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff fa29 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004d46:	4603      	mov	r3, r0
 8004d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10a      	bne.n	8004d66 <HAL_ADC_ConfigChannel+0x2f6>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2103      	movs	r1, #3
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff fa1e 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	0e9b      	lsrs	r3, r3, #26
 8004d60:	f003 021f 	and.w	r2, r3, #31
 8004d64:	e010      	b.n	8004d88 <HAL_ADC_ConfigChannel+0x318>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2103      	movs	r1, #3
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7ff fa13 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004d72:	4603      	mov	r3, r0
 8004d74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d78:	fa93 f3a3 	rbit	r3, r3
 8004d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d80:	fab3 f383 	clz	r3, r3
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	461a      	mov	r2, r3
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d105      	bne.n	8004da0 <HAL_ADC_ConfigChannel+0x330>
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	0e9b      	lsrs	r3, r3, #26
 8004d9a:	f003 031f 	and.w	r3, r3, #31
 8004d9e:	e00a      	b.n	8004db6 <HAL_ADC_ConfigChannel+0x346>
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da8:	fa93 f3a3 	rbit	r3, r3
 8004dac:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8004dae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004db0:	fab3 f383 	clz	r3, r3
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d106      	bne.n	8004dc8 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	2103      	movs	r1, #3
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff f9fc 	bl	80041c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff faf9 	bl	80043c4 <LL_ADC_IsEnabled>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f040 810c 	bne.w	8004ff2 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6818      	ldr	r0, [r3, #0]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	6819      	ldr	r1, [r3, #0]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	461a      	mov	r2, r3
 8004de8:	f7ff fa7a 	bl	80042e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	4aa8      	ldr	r2, [pc, #672]	; (8005094 <HAL_ADC_ConfigChannel+0x624>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	f040 80fd 	bne.w	8004ff2 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10b      	bne.n	8004e20 <HAL_ADC_ConfigChannel+0x3b0>
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	0e9b      	lsrs	r3, r3, #26
 8004e0e:	3301      	adds	r3, #1
 8004e10:	f003 031f 	and.w	r3, r3, #31
 8004e14:	2b09      	cmp	r3, #9
 8004e16:	bf94      	ite	ls
 8004e18:	2301      	movls	r3, #1
 8004e1a:	2300      	movhi	r3, #0
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	e012      	b.n	8004e46 <HAL_ADC_ConfigChannel+0x3d6>
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e28:	fa93 f3a3 	rbit	r3, r3
 8004e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e30:	fab3 f383 	clz	r3, r3
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	3301      	adds	r3, #1
 8004e38:	f003 031f 	and.w	r3, r3, #31
 8004e3c:	2b09      	cmp	r3, #9
 8004e3e:	bf94      	ite	ls
 8004e40:	2301      	movls	r3, #1
 8004e42:	2300      	movhi	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d064      	beq.n	8004f14 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d107      	bne.n	8004e66 <HAL_ADC_ConfigChannel+0x3f6>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	0e9b      	lsrs	r3, r3, #26
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	069b      	lsls	r3, r3, #26
 8004e60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e64:	e00e      	b.n	8004e84 <HAL_ADC_ConfigChannel+0x414>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6e:	fa93 f3a3 	rbit	r3, r3
 8004e72:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e76:	fab3 f383 	clz	r3, r3
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	069b      	lsls	r3, r3, #26
 8004e80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d109      	bne.n	8004ea4 <HAL_ADC_ConfigChannel+0x434>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	0e9b      	lsrs	r3, r3, #26
 8004e96:	3301      	adds	r3, #1
 8004e98:	f003 031f 	and.w	r3, r3, #31
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea2:	e010      	b.n	8004ec6 <HAL_ADC_ConfigChannel+0x456>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	fa93 f3a3 	rbit	r3, r3
 8004eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb4:	fab3 f383 	clz	r3, r3
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	3301      	adds	r3, #1
 8004ebc:	f003 031f 	and.w	r3, r3, #31
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec6:	ea42 0103 	orr.w	r1, r2, r3
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10a      	bne.n	8004eec <HAL_ADC_ConfigChannel+0x47c>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	0e9b      	lsrs	r3, r3, #26
 8004edc:	3301      	adds	r3, #1
 8004ede:	f003 021f 	and.w	r2, r3, #31
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	4413      	add	r3, r2
 8004ee8:	051b      	lsls	r3, r3, #20
 8004eea:	e011      	b.n	8004f10 <HAL_ADC_ConfigChannel+0x4a0>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef4:	fa93 f3a3 	rbit	r3, r3
 8004ef8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	fab3 f383 	clz	r3, r3
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	3301      	adds	r3, #1
 8004f04:	f003 021f 	and.w	r2, r3, #31
 8004f08:	4613      	mov	r3, r2
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	4413      	add	r3, r2
 8004f0e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f10:	430b      	orrs	r3, r1
 8004f12:	e069      	b.n	8004fe8 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d107      	bne.n	8004f30 <HAL_ADC_ConfigChannel+0x4c0>
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	0e9b      	lsrs	r3, r3, #26
 8004f26:	3301      	adds	r3, #1
 8004f28:	069b      	lsls	r3, r3, #26
 8004f2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f2e:	e00e      	b.n	8004f4e <HAL_ADC_ConfigChannel+0x4de>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	fa93 f3a3 	rbit	r3, r3
 8004f3c:	61fb      	str	r3, [r7, #28]
  return result;
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	fab3 f383 	clz	r3, r3
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	3301      	adds	r3, #1
 8004f48:	069b      	lsls	r3, r3, #26
 8004f4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d109      	bne.n	8004f6e <HAL_ADC_ConfigChannel+0x4fe>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	0e9b      	lsrs	r3, r3, #26
 8004f60:	3301      	adds	r3, #1
 8004f62:	f003 031f 	and.w	r3, r3, #31
 8004f66:	2101      	movs	r1, #1
 8004f68:	fa01 f303 	lsl.w	r3, r1, r3
 8004f6c:	e010      	b.n	8004f90 <HAL_ADC_ConfigChannel+0x520>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	fa93 f3a3 	rbit	r3, r3
 8004f7a:	617b      	str	r3, [r7, #20]
  return result;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	fab3 f383 	clz	r3, r3
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	3301      	adds	r3, #1
 8004f86:	f003 031f 	and.w	r3, r3, #31
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f90:	ea42 0103 	orr.w	r1, r2, r3
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10d      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0x54c>
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	0e9b      	lsrs	r3, r3, #26
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	f003 021f 	and.w	r2, r3, #31
 8004fac:	4613      	mov	r3, r2
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	4413      	add	r3, r2
 8004fb2:	3b1e      	subs	r3, #30
 8004fb4:	051b      	lsls	r3, r3, #20
 8004fb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004fba:	e014      	b.n	8004fe6 <HAL_ADC_ConfigChannel+0x576>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	fa93 f3a3 	rbit	r3, r3
 8004fc8:	60fb      	str	r3, [r7, #12]
  return result;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	fab3 f383 	clz	r3, r3
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	f003 021f 	and.w	r2, r3, #31
 8004fd8:	4613      	mov	r3, r2
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	4413      	add	r3, r2
 8004fde:	3b1e      	subs	r3, #30
 8004fe0:	051b      	lsls	r3, r3, #20
 8004fe2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fe6:	430b      	orrs	r3, r1
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	6892      	ldr	r2, [r2, #8]
 8004fec:	4619      	mov	r1, r3
 8004fee:	f7ff f94e 	bl	800428e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	4b28      	ldr	r3, [pc, #160]	; (8005098 <HAL_ADC_ConfigChannel+0x628>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d07c      	beq.n	80050f8 <HAL_ADC_ConfigChannel+0x688>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ffe:	4827      	ldr	r0, [pc, #156]	; (800509c <HAL_ADC_ConfigChannel+0x62c>)
 8005000:	f7ff f89a 	bl	8004138 <LL_ADC_GetCommonPathInternalCh>
 8005004:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a24      	ldr	r2, [pc, #144]	; (80050a0 <HAL_ADC_ConfigChannel+0x630>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d126      	bne.n	8005060 <HAL_ADC_ConfigChannel+0x5f0>
 8005012:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005016:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d120      	bne.n	8005060 <HAL_ADC_ConfigChannel+0x5f0>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a20      	ldr	r2, [pc, #128]	; (80050a4 <HAL_ADC_ConfigChannel+0x634>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d167      	bne.n	80050f8 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005028:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800502c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005030:	4619      	mov	r1, r3
 8005032:	481a      	ldr	r0, [pc, #104]	; (800509c <HAL_ADC_ConfigChannel+0x62c>)
 8005034:	f7ff f86d 	bl	8004112 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005038:	4b1b      	ldr	r3, [pc, #108]	; (80050a8 <HAL_ADC_ConfigChannel+0x638>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	099b      	lsrs	r3, r3, #6
 800503e:	4a1b      	ldr	r2, [pc, #108]	; (80050ac <HAL_ADC_ConfigChannel+0x63c>)
 8005040:	fba2 2303 	umull	r2, r3, r2, r3
 8005044:	099a      	lsrs	r2, r3, #6
 8005046:	4613      	mov	r3, r2
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	4413      	add	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005050:	e002      	b.n	8005058 <HAL_ADC_ConfigChannel+0x5e8>
          {
            wait_loop_index--;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	3b01      	subs	r3, #1
 8005056:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1f9      	bne.n	8005052 <HAL_ADC_ConfigChannel+0x5e2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800505e:	e04b      	b.n	80050f8 <HAL_ADC_ConfigChannel+0x688>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a12      	ldr	r2, [pc, #72]	; (80050b0 <HAL_ADC_ConfigChannel+0x640>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d124      	bne.n	80050b4 <HAL_ADC_ConfigChannel+0x644>
 800506a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800506e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d11e      	bne.n	80050b4 <HAL_ADC_ConfigChannel+0x644>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a0a      	ldr	r2, [pc, #40]	; (80050a4 <HAL_ADC_ConfigChannel+0x634>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d13b      	bne.n	80050f8 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005080:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005084:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005088:	4619      	mov	r1, r3
 800508a:	4804      	ldr	r0, [pc, #16]	; (800509c <HAL_ADC_ConfigChannel+0x62c>)
 800508c:	f7ff f841 	bl	8004112 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005090:	e032      	b.n	80050f8 <HAL_ADC_ConfigChannel+0x688>
 8005092:	bf00      	nop
 8005094:	407f0000 	.word	0x407f0000
 8005098:	80080000 	.word	0x80080000
 800509c:	50040300 	.word	0x50040300
 80050a0:	c7520000 	.word	0xc7520000
 80050a4:	50040000 	.word	0x50040000
 80050a8:	20000038 	.word	0x20000038
 80050ac:	053e2d63 	.word	0x053e2d63
 80050b0:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a14      	ldr	r2, [pc, #80]	; (800510c <HAL_ADC_ConfigChannel+0x69c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d11c      	bne.n	80050f8 <HAL_ADC_ConfigChannel+0x688>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80050be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d116      	bne.n	80050f8 <HAL_ADC_ConfigChannel+0x688>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a10      	ldr	r2, [pc, #64]	; (8005110 <HAL_ADC_ConfigChannel+0x6a0>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d111      	bne.n	80050f8 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050dc:	4619      	mov	r1, r3
 80050de:	480d      	ldr	r0, [pc, #52]	; (8005114 <HAL_ADC_ConfigChannel+0x6a4>)
 80050e0:	f7ff f817 	bl	8004112 <LL_ADC_SetCommonPathInternalCh>
 80050e4:	e008      	b.n	80050f8 <HAL_ADC_ConfigChannel+0x688>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ea:	f043 0220 	orr.w	r2, r3, #32
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005100:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8005104:	4618      	mov	r0, r3
 8005106:	3798      	adds	r7, #152	; 0x98
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	80000001 	.word	0x80000001
 8005110:	50040000 	.word	0x50040000
 8005114:	50040300 	.word	0x50040300

08005118 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800518c:	4b0c      	ldr	r3, [pc, #48]	; (80051c0 <__NVIC_SetPriorityGrouping+0x44>)
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005198:	4013      	ands	r3, r2
 800519a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80051a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80051a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051ae:	4a04      	ldr	r2, [pc, #16]	; (80051c0 <__NVIC_SetPriorityGrouping+0x44>)
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	60d3      	str	r3, [r2, #12]
}
 80051b4:	bf00      	nop
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	e000ed00 	.word	0xe000ed00

080051c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051c8:	4b04      	ldr	r3, [pc, #16]	; (80051dc <__NVIC_GetPriorityGrouping+0x18>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	0a1b      	lsrs	r3, r3, #8
 80051ce:	f003 0307 	and.w	r3, r3, #7
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	e000ed00 	.word	0xe000ed00

080051e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	db0b      	blt.n	800520a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	f003 021f 	and.w	r2, r3, #31
 80051f8:	4907      	ldr	r1, [pc, #28]	; (8005218 <__NVIC_EnableIRQ+0x38>)
 80051fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051fe:	095b      	lsrs	r3, r3, #5
 8005200:	2001      	movs	r0, #1
 8005202:	fa00 f202 	lsl.w	r2, r0, r2
 8005206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	e000e100 	.word	0xe000e100

0800521c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	4603      	mov	r3, r0
 8005224:	6039      	str	r1, [r7, #0]
 8005226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800522c:	2b00      	cmp	r3, #0
 800522e:	db0a      	blt.n	8005246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	b2da      	uxtb	r2, r3
 8005234:	490c      	ldr	r1, [pc, #48]	; (8005268 <__NVIC_SetPriority+0x4c>)
 8005236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800523a:	0112      	lsls	r2, r2, #4
 800523c:	b2d2      	uxtb	r2, r2
 800523e:	440b      	add	r3, r1
 8005240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005244:	e00a      	b.n	800525c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	b2da      	uxtb	r2, r3
 800524a:	4908      	ldr	r1, [pc, #32]	; (800526c <__NVIC_SetPriority+0x50>)
 800524c:	79fb      	ldrb	r3, [r7, #7]
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	3b04      	subs	r3, #4
 8005254:	0112      	lsls	r2, r2, #4
 8005256:	b2d2      	uxtb	r2, r2
 8005258:	440b      	add	r3, r1
 800525a:	761a      	strb	r2, [r3, #24]
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	e000e100 	.word	0xe000e100
 800526c:	e000ed00 	.word	0xe000ed00

08005270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005270:	b480      	push	{r7}
 8005272:	b089      	sub	sp, #36	; 0x24
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	f1c3 0307 	rsb	r3, r3, #7
 800528a:	2b04      	cmp	r3, #4
 800528c:	bf28      	it	cs
 800528e:	2304      	movcs	r3, #4
 8005290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	3304      	adds	r3, #4
 8005296:	2b06      	cmp	r3, #6
 8005298:	d902      	bls.n	80052a0 <NVIC_EncodePriority+0x30>
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	3b03      	subs	r3, #3
 800529e:	e000      	b.n	80052a2 <NVIC_EncodePriority+0x32>
 80052a0:	2300      	movs	r3, #0
 80052a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052a4:	f04f 32ff 	mov.w	r2, #4294967295
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	fa02 f303 	lsl.w	r3, r2, r3
 80052ae:	43da      	mvns	r2, r3
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	401a      	ands	r2, r3
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052b8:	f04f 31ff 	mov.w	r1, #4294967295
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	fa01 f303 	lsl.w	r3, r1, r3
 80052c2:	43d9      	mvns	r1, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052c8:	4313      	orrs	r3, r2
         );
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3724      	adds	r7, #36	; 0x24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
	...

080052d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052e8:	d301      	bcc.n	80052ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80052ea:	2301      	movs	r3, #1
 80052ec:	e00f      	b.n	800530e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052ee:	4a0a      	ldr	r2, [pc, #40]	; (8005318 <SysTick_Config+0x40>)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052f6:	210f      	movs	r1, #15
 80052f8:	f04f 30ff 	mov.w	r0, #4294967295
 80052fc:	f7ff ff8e 	bl	800521c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005300:	4b05      	ldr	r3, [pc, #20]	; (8005318 <SysTick_Config+0x40>)
 8005302:	2200      	movs	r2, #0
 8005304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005306:	4b04      	ldr	r3, [pc, #16]	; (8005318 <SysTick_Config+0x40>)
 8005308:	2207      	movs	r2, #7
 800530a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	e000e010 	.word	0xe000e010

0800531c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7ff ff29 	bl	800517c <__NVIC_SetPriorityGrouping>
}
 800532a:	bf00      	nop
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b086      	sub	sp, #24
 8005336:	af00      	add	r7, sp, #0
 8005338:	4603      	mov	r3, r0
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	607a      	str	r2, [r7, #4]
 800533e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005340:	2300      	movs	r3, #0
 8005342:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005344:	f7ff ff3e 	bl	80051c4 <__NVIC_GetPriorityGrouping>
 8005348:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	68b9      	ldr	r1, [r7, #8]
 800534e:	6978      	ldr	r0, [r7, #20]
 8005350:	f7ff ff8e 	bl	8005270 <NVIC_EncodePriority>
 8005354:	4602      	mov	r2, r0
 8005356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800535a:	4611      	mov	r1, r2
 800535c:	4618      	mov	r0, r3
 800535e:	f7ff ff5d 	bl	800521c <__NVIC_SetPriority>
}
 8005362:	bf00      	nop
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b082      	sub	sp, #8
 800536e:	af00      	add	r7, sp, #0
 8005370:	4603      	mov	r3, r0
 8005372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff ff31 	bl	80051e0 <__NVIC_EnableIRQ>
}
 800537e:	bf00      	nop
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b082      	sub	sp, #8
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7ff ffa2 	bl	80052d8 <SysTick_Config>
 8005394:	4603      	mov	r3, r0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b084      	sub	sp, #16
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d005      	beq.n	80053c2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2204      	movs	r2, #4
 80053ba:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	73fb      	strb	r3, [r7, #15]
 80053c0:	e029      	b.n	8005416 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 020e 	bic.w	r2, r2, #14
 80053d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 0201 	bic.w	r2, r2, #1
 80053e0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e6:	f003 021c 	and.w	r2, r3, #28
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	2101      	movs	r1, #1
 80053f0:	fa01 f202 	lsl.w	r2, r1, r2
 80053f4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	4798      	blx	r3
    }
  }
  return status;
 8005416:	7bfb      	ldrb	r3, [r7, #15]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005420:	b480      	push	{r7}
 8005422:	b087      	sub	sp, #28
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800542a:	2300      	movs	r3, #0
 800542c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800542e:	e148      	b.n	80056c2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	2101      	movs	r1, #1
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	fa01 f303 	lsl.w	r3, r1, r3
 800543c:	4013      	ands	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 813a 	beq.w	80056bc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d00b      	beq.n	8005468 <HAL_GPIO_Init+0x48>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	2b02      	cmp	r3, #2
 8005456:	d007      	beq.n	8005468 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800545c:	2b11      	cmp	r3, #17
 800545e:	d003      	beq.n	8005468 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2b12      	cmp	r3, #18
 8005466:	d130      	bne.n	80054ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	2203      	movs	r2, #3
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	43db      	mvns	r3, r3
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	4013      	ands	r3, r2
 800547e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	fa02 f303 	lsl.w	r3, r2, r3
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	4313      	orrs	r3, r2
 8005490:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800549e:	2201      	movs	r2, #1
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	fa02 f303 	lsl.w	r3, r2, r3
 80054a6:	43db      	mvns	r3, r3
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4013      	ands	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	091b      	lsrs	r3, r3, #4
 80054b4:	f003 0201 	and.w	r2, r3, #1
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	2203      	movs	r2, #3
 80054d6:	fa02 f303 	lsl.w	r3, r2, r3
 80054da:	43db      	mvns	r3, r3
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4013      	ands	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	689a      	ldr	r2, [r3, #8]
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d003      	beq.n	800550a <HAL_GPIO_Init+0xea>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b12      	cmp	r3, #18
 8005508:	d123      	bne.n	8005552 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	08da      	lsrs	r2, r3, #3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	3208      	adds	r2, #8
 8005512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005516:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	220f      	movs	r2, #15
 8005522:	fa02 f303 	lsl.w	r3, r2, r3
 8005526:	43db      	mvns	r3, r3
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	4013      	ands	r3, r2
 800552c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	691a      	ldr	r2, [r3, #16]
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	fa02 f303 	lsl.w	r3, r2, r3
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	08da      	lsrs	r2, r3, #3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3208      	adds	r2, #8
 800554c:	6939      	ldr	r1, [r7, #16]
 800554e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	2203      	movs	r2, #3
 800555e:	fa02 f303 	lsl.w	r3, r2, r3
 8005562:	43db      	mvns	r3, r3
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	4013      	ands	r3, r2
 8005568:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f003 0203 	and.w	r2, r3, #3
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	fa02 f303 	lsl.w	r3, r2, r3
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	4313      	orrs	r3, r2
 800557e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 8094 	beq.w	80056bc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005594:	4b52      	ldr	r3, [pc, #328]	; (80056e0 <HAL_GPIO_Init+0x2c0>)
 8005596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005598:	4a51      	ldr	r2, [pc, #324]	; (80056e0 <HAL_GPIO_Init+0x2c0>)
 800559a:	f043 0301 	orr.w	r3, r3, #1
 800559e:	6613      	str	r3, [r2, #96]	; 0x60
 80055a0:	4b4f      	ldr	r3, [pc, #316]	; (80056e0 <HAL_GPIO_Init+0x2c0>)
 80055a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	60bb      	str	r3, [r7, #8]
 80055aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80055ac:	4a4d      	ldr	r2, [pc, #308]	; (80056e4 <HAL_GPIO_Init+0x2c4>)
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	089b      	lsrs	r3, r3, #2
 80055b2:	3302      	adds	r3, #2
 80055b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f003 0303 	and.w	r3, r3, #3
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	220f      	movs	r2, #15
 80055c4:	fa02 f303 	lsl.w	r3, r2, r3
 80055c8:	43db      	mvns	r3, r3
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	4013      	ands	r3, r2
 80055ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80055d6:	d00d      	beq.n	80055f4 <HAL_GPIO_Init+0x1d4>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a43      	ldr	r2, [pc, #268]	; (80056e8 <HAL_GPIO_Init+0x2c8>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d007      	beq.n	80055f0 <HAL_GPIO_Init+0x1d0>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a42      	ldr	r2, [pc, #264]	; (80056ec <HAL_GPIO_Init+0x2cc>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d101      	bne.n	80055ec <HAL_GPIO_Init+0x1cc>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e004      	b.n	80055f6 <HAL_GPIO_Init+0x1d6>
 80055ec:	2307      	movs	r3, #7
 80055ee:	e002      	b.n	80055f6 <HAL_GPIO_Init+0x1d6>
 80055f0:	2301      	movs	r3, #1
 80055f2:	e000      	b.n	80055f6 <HAL_GPIO_Init+0x1d6>
 80055f4:	2300      	movs	r3, #0
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	f002 0203 	and.w	r2, r2, #3
 80055fc:	0092      	lsls	r2, r2, #2
 80055fe:	4093      	lsls	r3, r2
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	4313      	orrs	r3, r2
 8005604:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005606:	4937      	ldr	r1, [pc, #220]	; (80056e4 <HAL_GPIO_Init+0x2c4>)
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	089b      	lsrs	r3, r3, #2
 800560c:	3302      	adds	r3, #2
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005614:	4b36      	ldr	r3, [pc, #216]	; (80056f0 <HAL_GPIO_Init+0x2d0>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	43db      	mvns	r3, r3
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	4013      	ands	r3, r2
 8005622:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	4313      	orrs	r3, r2
 8005636:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005638:	4a2d      	ldr	r2, [pc, #180]	; (80056f0 <HAL_GPIO_Init+0x2d0>)
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800563e:	4b2c      	ldr	r3, [pc, #176]	; (80056f0 <HAL_GPIO_Init+0x2d0>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	43db      	mvns	r3, r3
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	4013      	ands	r3, r2
 800564c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4313      	orrs	r3, r2
 8005660:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005662:	4a23      	ldr	r2, [pc, #140]	; (80056f0 <HAL_GPIO_Init+0x2d0>)
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005668:	4b21      	ldr	r3, [pc, #132]	; (80056f0 <HAL_GPIO_Init+0x2d0>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	43db      	mvns	r3, r3
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4013      	ands	r3, r2
 8005676:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4313      	orrs	r3, r2
 800568a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800568c:	4a18      	ldr	r2, [pc, #96]	; (80056f0 <HAL_GPIO_Init+0x2d0>)
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005692:	4b17      	ldr	r3, [pc, #92]	; (80056f0 <HAL_GPIO_Init+0x2d0>)
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	43db      	mvns	r3, r3
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	4013      	ands	r3, r2
 80056a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80056b6:	4a0e      	ldr	r2, [pc, #56]	; (80056f0 <HAL_GPIO_Init+0x2d0>)
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	3301      	adds	r3, #1
 80056c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	fa22 f303 	lsr.w	r3, r2, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f47f aeaf 	bne.w	8005430 <HAL_GPIO_Init+0x10>
  }
}
 80056d2:	bf00      	nop
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	40021000 	.word	0x40021000
 80056e4:	40010000 	.word	0x40010000
 80056e8:	48000400 	.word	0x48000400
 80056ec:	48000800 	.word	0x48000800
 80056f0:	40010400 	.word	0x40010400

080056f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	460b      	mov	r3, r1
 80056fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691a      	ldr	r2, [r3, #16]
 8005704:	887b      	ldrh	r3, [r7, #2]
 8005706:	4013      	ands	r3, r2
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800570c:	2301      	movs	r3, #1
 800570e:	73fb      	strb	r3, [r7, #15]
 8005710:	e001      	b.n	8005716 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005712:	2300      	movs	r3, #0
 8005714:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005716:	7bfb      	ldrb	r3, [r7, #15]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	460b      	mov	r3, r1
 800572e:	807b      	strh	r3, [r7, #2]
 8005730:	4613      	mov	r3, r2
 8005732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005734:	787b      	ldrb	r3, [r7, #1]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800573a:	887a      	ldrh	r2, [r7, #2]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005740:	e002      	b.n	8005748 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005742:	887a      	ldrh	r2, [r7, #2]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	4603      	mov	r3, r0
 800575c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800575e:	4b08      	ldr	r3, [pc, #32]	; (8005780 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005760:	695a      	ldr	r2, [r3, #20]
 8005762:	88fb      	ldrh	r3, [r7, #6]
 8005764:	4013      	ands	r3, r2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d006      	beq.n	8005778 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800576a:	4a05      	ldr	r2, [pc, #20]	; (8005780 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800576c:	88fb      	ldrh	r3, [r7, #6]
 800576e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005770:	88fb      	ldrh	r3, [r7, #6]
 8005772:	4618      	mov	r0, r3
 8005774:	f7fc f93e 	bl	80019f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005778:	bf00      	nop
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	40010400 	.word	0x40010400

08005784 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	460b      	mov	r3, r1
 800578e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10c      	bne.n	80057b0 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8005796:	4b13      	ldr	r3, [pc, #76]	; (80057e4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800579e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057a2:	d10e      	bne.n	80057c2 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80057a4:	f000 f896 	bl	80058d4 <HAL_PWREx_DisableLowPowerRunMode>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d009      	beq.n	80057c2 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 80057ae:	e016      	b.n	80057de <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 80057b0:	4b0c      	ldr	r3, [pc, #48]	; (80057e4 <HAL_PWR_EnterSLEEPMode+0x60>)
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057bc:	d001      	beq.n	80057c2 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80057be:	f000 f879 	bl	80058b4 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80057c2:	4b09      	ldr	r3, [pc, #36]	; (80057e8 <HAL_PWR_EnterSLEEPMode+0x64>)
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	4a08      	ldr	r2, [pc, #32]	; (80057e8 <HAL_PWR_EnterSLEEPMode+0x64>)
 80057c8:	f023 0304 	bic.w	r3, r3, #4
 80057cc:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80057ce:	78fb      	ldrb	r3, [r7, #3]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d101      	bne.n	80057d8 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80057d4:	bf30      	wfi
 80057d6:	e002      	b.n	80057de <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80057d8:	bf40      	sev
    __WFE();
 80057da:	bf20      	wfe
    __WFE();
 80057dc:	bf20      	wfe
  }

}
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	40007000 	.word	0x40007000
 80057e8:	e000ed00 	.word	0xe000ed00

080057ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80057f0:	4b04      	ldr	r3, [pc, #16]	; (8005804 <HAL_PWREx_GetVoltageRange+0x18>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	40007000 	.word	0x40007000

08005808 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005816:	d130      	bne.n	800587a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005818:	4b23      	ldr	r3, [pc, #140]	; (80058a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005824:	d038      	beq.n	8005898 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005826:	4b20      	ldr	r3, [pc, #128]	; (80058a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800582e:	4a1e      	ldr	r2, [pc, #120]	; (80058a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005830:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005834:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005836:	4b1d      	ldr	r3, [pc, #116]	; (80058ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2232      	movs	r2, #50	; 0x32
 800583c:	fb02 f303 	mul.w	r3, r2, r3
 8005840:	4a1b      	ldr	r2, [pc, #108]	; (80058b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005842:	fba2 2303 	umull	r2, r3, r2, r3
 8005846:	0c9b      	lsrs	r3, r3, #18
 8005848:	3301      	adds	r3, #1
 800584a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800584c:	e002      	b.n	8005854 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	3b01      	subs	r3, #1
 8005852:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005854:	4b14      	ldr	r3, [pc, #80]	; (80058a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800585c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005860:	d102      	bne.n	8005868 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1f2      	bne.n	800584e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005868:	4b0f      	ldr	r3, [pc, #60]	; (80058a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005874:	d110      	bne.n	8005898 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e00f      	b.n	800589a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800587a:	4b0b      	ldr	r3, [pc, #44]	; (80058a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005886:	d007      	beq.n	8005898 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005888:	4b07      	ldr	r3, [pc, #28]	; (80058a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005890:	4a05      	ldr	r2, [pc, #20]	; (80058a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005892:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005896:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	40007000 	.word	0x40007000
 80058ac:	20000038 	.word	0x20000038
 80058b0:	431bde83 	.word	0x431bde83

080058b4 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80058b8:	4b05      	ldr	r3, [pc, #20]	; (80058d0 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a04      	ldr	r2, [pc, #16]	; (80058d0 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80058be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058c2:	6013      	str	r3, [r2, #0]
}
 80058c4:	bf00      	nop
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	40007000 	.word	0x40007000

080058d4 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80058da:	4b17      	ldr	r3, [pc, #92]	; (8005938 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a16      	ldr	r2, [pc, #88]	; (8005938 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80058e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058e4:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80058e6:	4b15      	ldr	r3, [pc, #84]	; (800593c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2232      	movs	r2, #50	; 0x32
 80058ec:	fb02 f303 	mul.w	r3, r2, r3
 80058f0:	4a13      	ldr	r2, [pc, #76]	; (8005940 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 80058f2:	fba2 2303 	umull	r2, r3, r2, r3
 80058f6:	0c9b      	lsrs	r3, r3, #18
 80058f8:	3301      	adds	r3, #1
 80058fa:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80058fc:	e002      	b.n	8005904 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3b01      	subs	r3, #1
 8005902:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005904:	4b0c      	ldr	r3, [pc, #48]	; (8005938 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800590c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005910:	d102      	bne.n	8005918 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1f2      	bne.n	80058fe <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8005918:	4b07      	ldr	r3, [pc, #28]	; (8005938 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005924:	d101      	bne.n	800592a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e000      	b.n	800592c <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	40007000 	.word	0x40007000
 800593c:	20000038 	.word	0x20000038
 8005940:	431bde83 	.word	0x431bde83

08005944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d102      	bne.n	8005958 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	f000 bc11 	b.w	800617a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005958:	4ba0      	ldr	r3, [pc, #640]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f003 030c 	and.w	r3, r3, #12
 8005960:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005962:	4b9e      	ldr	r3, [pc, #632]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f003 0303 	and.w	r3, r3, #3
 800596a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0310 	and.w	r3, r3, #16
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 80e4 	beq.w	8005b42 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d007      	beq.n	8005990 <HAL_RCC_OscConfig+0x4c>
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	2b0c      	cmp	r3, #12
 8005984:	f040 808b 	bne.w	8005a9e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	2b01      	cmp	r3, #1
 800598c:	f040 8087 	bne.w	8005a9e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005990:	4b92      	ldr	r3, [pc, #584]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d005      	beq.n	80059a8 <HAL_RCC_OscConfig+0x64>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e3e8      	b.n	800617a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a1a      	ldr	r2, [r3, #32]
 80059ac:	4b8b      	ldr	r3, [pc, #556]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d004      	beq.n	80059c2 <HAL_RCC_OscConfig+0x7e>
 80059b8:	4b88      	ldr	r3, [pc, #544]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059c0:	e005      	b.n	80059ce <HAL_RCC_OscConfig+0x8a>
 80059c2:	4b86      	ldr	r3, [pc, #536]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 80059c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059c8:	091b      	lsrs	r3, r3, #4
 80059ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d223      	bcs.n	8005a1a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 fd78 	bl	80064cc <RCC_SetFlashLatencyFromMSIRange>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e3c9      	b.n	800617a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059e6:	4b7d      	ldr	r3, [pc, #500]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a7c      	ldr	r2, [pc, #496]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 80059ec:	f043 0308 	orr.w	r3, r3, #8
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	4b7a      	ldr	r3, [pc, #488]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	4977      	ldr	r1, [pc, #476]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a04:	4b75      	ldr	r3, [pc, #468]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	021b      	lsls	r3, r3, #8
 8005a12:	4972      	ldr	r1, [pc, #456]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	604b      	str	r3, [r1, #4]
 8005a18:	e025      	b.n	8005a66 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a1a:	4b70      	ldr	r3, [pc, #448]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a6f      	ldr	r2, [pc, #444]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005a20:	f043 0308 	orr.w	r3, r3, #8
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	4b6d      	ldr	r3, [pc, #436]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	496a      	ldr	r1, [pc, #424]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a38:	4b68      	ldr	r3, [pc, #416]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	021b      	lsls	r3, r3, #8
 8005a46:	4965      	ldr	r1, [pc, #404]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d109      	bne.n	8005a66 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 fd38 	bl	80064cc <RCC_SetFlashLatencyFromMSIRange>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e389      	b.n	800617a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a66:	f000 fc6f 	bl	8006348 <HAL_RCC_GetSysClockFreq>
 8005a6a:	4601      	mov	r1, r0
 8005a6c:	4b5b      	ldr	r3, [pc, #364]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	091b      	lsrs	r3, r3, #4
 8005a72:	f003 030f 	and.w	r3, r3, #15
 8005a76:	4a5a      	ldr	r2, [pc, #360]	; (8005be0 <HAL_RCC_OscConfig+0x29c>)
 8005a78:	5cd3      	ldrb	r3, [r2, r3]
 8005a7a:	f003 031f 	and.w	r3, r3, #31
 8005a7e:	fa21 f303 	lsr.w	r3, r1, r3
 8005a82:	4a58      	ldr	r2, [pc, #352]	; (8005be4 <HAL_RCC_OscConfig+0x2a0>)
 8005a84:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005a86:	4b58      	ldr	r3, [pc, #352]	; (8005be8 <HAL_RCC_OscConfig+0x2a4>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fe fa94 	bl	8003fb8 <HAL_InitTick>
 8005a90:	4603      	mov	r3, r0
 8005a92:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d052      	beq.n	8005b40 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
 8005a9c:	e36d      	b.n	800617a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d032      	beq.n	8005b0c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005aa6:	4b4d      	ldr	r3, [pc, #308]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a4c      	ldr	r2, [pc, #304]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005aac:	f043 0301 	orr.w	r3, r3, #1
 8005ab0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ab2:	f7fe facd 	bl	8004050 <HAL_GetTick>
 8005ab6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ab8:	e008      	b.n	8005acc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005aba:	f7fe fac9 	bl	8004050 <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d901      	bls.n	8005acc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e356      	b.n	800617a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005acc:	4b43      	ldr	r3, [pc, #268]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0f0      	beq.n	8005aba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ad8:	4b40      	ldr	r3, [pc, #256]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a3f      	ldr	r2, [pc, #252]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005ade:	f043 0308 	orr.w	r3, r3, #8
 8005ae2:	6013      	str	r3, [r2, #0]
 8005ae4:	4b3d      	ldr	r3, [pc, #244]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	493a      	ldr	r1, [pc, #232]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005af6:	4b39      	ldr	r3, [pc, #228]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	021b      	lsls	r3, r3, #8
 8005b04:	4935      	ldr	r1, [pc, #212]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	604b      	str	r3, [r1, #4]
 8005b0a:	e01a      	b.n	8005b42 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005b0c:	4b33      	ldr	r3, [pc, #204]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a32      	ldr	r2, [pc, #200]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005b12:	f023 0301 	bic.w	r3, r3, #1
 8005b16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b18:	f7fe fa9a 	bl	8004050 <HAL_GetTick>
 8005b1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005b1e:	e008      	b.n	8005b32 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b20:	f7fe fa96 	bl	8004050 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e323      	b.n	800617a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005b32:	4b2a      	ldr	r3, [pc, #168]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1f0      	bne.n	8005b20 <HAL_RCC_OscConfig+0x1dc>
 8005b3e:	e000      	b.n	8005b42 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d073      	beq.n	8005c36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d005      	beq.n	8005b60 <HAL_RCC_OscConfig+0x21c>
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	2b0c      	cmp	r3, #12
 8005b58:	d10e      	bne.n	8005b78 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	d10b      	bne.n	8005b78 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b60:	4b1e      	ldr	r3, [pc, #120]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d063      	beq.n	8005c34 <HAL_RCC_OscConfig+0x2f0>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d15f      	bne.n	8005c34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e300      	b.n	800617a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b80:	d106      	bne.n	8005b90 <HAL_RCC_OscConfig+0x24c>
 8005b82:	4b16      	ldr	r3, [pc, #88]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a15      	ldr	r2, [pc, #84]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	e01d      	b.n	8005bcc <HAL_RCC_OscConfig+0x288>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b98:	d10c      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x270>
 8005b9a:	4b10      	ldr	r3, [pc, #64]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a0f      	ldr	r2, [pc, #60]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	4b0d      	ldr	r3, [pc, #52]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a0c      	ldr	r2, [pc, #48]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bb0:	6013      	str	r3, [r2, #0]
 8005bb2:	e00b      	b.n	8005bcc <HAL_RCC_OscConfig+0x288>
 8005bb4:	4b09      	ldr	r3, [pc, #36]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a08      	ldr	r2, [pc, #32]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a05      	ldr	r2, [pc, #20]	; (8005bdc <HAL_RCC_OscConfig+0x298>)
 8005bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d01b      	beq.n	8005c0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd4:	f7fe fa3c 	bl	8004050 <HAL_GetTick>
 8005bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bda:	e010      	b.n	8005bfe <HAL_RCC_OscConfig+0x2ba>
 8005bdc:	40021000 	.word	0x40021000
 8005be0:	0800e980 	.word	0x0800e980
 8005be4:	20000038 	.word	0x20000038
 8005be8:	2000003c 	.word	0x2000003c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bec:	f7fe fa30 	bl	8004050 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b64      	cmp	r3, #100	; 0x64
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e2bd      	b.n	800617a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bfe:	4baf      	ldr	r3, [pc, #700]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0f0      	beq.n	8005bec <HAL_RCC_OscConfig+0x2a8>
 8005c0a:	e014      	b.n	8005c36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0c:	f7fe fa20 	bl	8004050 <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c14:	f7fe fa1c 	bl	8004050 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b64      	cmp	r3, #100	; 0x64
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e2a9      	b.n	800617a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c26:	4ba5      	ldr	r3, [pc, #660]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1f0      	bne.n	8005c14 <HAL_RCC_OscConfig+0x2d0>
 8005c32:	e000      	b.n	8005c36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d060      	beq.n	8005d04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d005      	beq.n	8005c54 <HAL_RCC_OscConfig+0x310>
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	2b0c      	cmp	r3, #12
 8005c4c:	d119      	bne.n	8005c82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d116      	bne.n	8005c82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c54:	4b99      	ldr	r3, [pc, #612]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d005      	beq.n	8005c6c <HAL_RCC_OscConfig+0x328>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e286      	b.n	800617a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c6c:	4b93      	ldr	r3, [pc, #588]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	061b      	lsls	r3, r3, #24
 8005c7a:	4990      	ldr	r1, [pc, #576]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c80:	e040      	b.n	8005d04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d023      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c8a:	4b8c      	ldr	r3, [pc, #560]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a8b      	ldr	r2, [pc, #556]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c96:	f7fe f9db 	bl	8004050 <HAL_GetTick>
 8005c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c9c:	e008      	b.n	8005cb0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c9e:	f7fe f9d7 	bl	8004050 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d901      	bls.n	8005cb0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e264      	b.n	800617a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cb0:	4b82      	ldr	r3, [pc, #520]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d0f0      	beq.n	8005c9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cbc:	4b7f      	ldr	r3, [pc, #508]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	061b      	lsls	r3, r3, #24
 8005cca:	497c      	ldr	r1, [pc, #496]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	604b      	str	r3, [r1, #4]
 8005cd0:	e018      	b.n	8005d04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cd2:	4b7a      	ldr	r3, [pc, #488]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a79      	ldr	r2, [pc, #484]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cde:	f7fe f9b7 	bl	8004050 <HAL_GetTick>
 8005ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ce4:	e008      	b.n	8005cf8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ce6:	f7fe f9b3 	bl	8004050 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e240      	b.n	800617a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cf8:	4b70      	ldr	r3, [pc, #448]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1f0      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0308 	and.w	r3, r3, #8
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d03c      	beq.n	8005d8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d01c      	beq.n	8005d52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d18:	4b68      	ldr	r3, [pc, #416]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d1e:	4a67      	ldr	r2, [pc, #412]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005d20:	f043 0301 	orr.w	r3, r3, #1
 8005d24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d28:	f7fe f992 	bl	8004050 <HAL_GetTick>
 8005d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d2e:	e008      	b.n	8005d42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d30:	f7fe f98e 	bl	8004050 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e21b      	b.n	800617a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d42:	4b5e      	ldr	r3, [pc, #376]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0ef      	beq.n	8005d30 <HAL_RCC_OscConfig+0x3ec>
 8005d50:	e01b      	b.n	8005d8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d52:	4b5a      	ldr	r3, [pc, #360]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d58:	4a58      	ldr	r2, [pc, #352]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005d5a:	f023 0301 	bic.w	r3, r3, #1
 8005d5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d62:	f7fe f975 	bl	8004050 <HAL_GetTick>
 8005d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d68:	e008      	b.n	8005d7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d6a:	f7fe f971 	bl	8004050 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d901      	bls.n	8005d7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e1fe      	b.n	800617a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d7c:	4b4f      	ldr	r3, [pc, #316]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1ef      	bne.n	8005d6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0304 	and.w	r3, r3, #4
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f000 80a6 	beq.w	8005ee4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005d9c:	4b47      	ldr	r3, [pc, #284]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10d      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005da8:	4b44      	ldr	r3, [pc, #272]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dac:	4a43      	ldr	r2, [pc, #268]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005db2:	6593      	str	r3, [r2, #88]	; 0x58
 8005db4:	4b41      	ldr	r3, [pc, #260]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dbc:	60bb      	str	r3, [r7, #8]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dc4:	4b3e      	ldr	r3, [pc, #248]	; (8005ec0 <HAL_RCC_OscConfig+0x57c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d118      	bne.n	8005e02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dd0:	4b3b      	ldr	r3, [pc, #236]	; (8005ec0 <HAL_RCC_OscConfig+0x57c>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a3a      	ldr	r2, [pc, #232]	; (8005ec0 <HAL_RCC_OscConfig+0x57c>)
 8005dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ddc:	f7fe f938 	bl	8004050 <HAL_GetTick>
 8005de0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005de2:	e008      	b.n	8005df6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005de4:	f7fe f934 	bl	8004050 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e1c1      	b.n	800617a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005df6:	4b32      	ldr	r3, [pc, #200]	; (8005ec0 <HAL_RCC_OscConfig+0x57c>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d0f0      	beq.n	8005de4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d108      	bne.n	8005e1c <HAL_RCC_OscConfig+0x4d8>
 8005e0a:	4b2c      	ldr	r3, [pc, #176]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e10:	4a2a      	ldr	r2, [pc, #168]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005e12:	f043 0301 	orr.w	r3, r3, #1
 8005e16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e1a:	e024      	b.n	8005e66 <HAL_RCC_OscConfig+0x522>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	2b05      	cmp	r3, #5
 8005e22:	d110      	bne.n	8005e46 <HAL_RCC_OscConfig+0x502>
 8005e24:	4b25      	ldr	r3, [pc, #148]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e2a:	4a24      	ldr	r2, [pc, #144]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005e2c:	f043 0304 	orr.w	r3, r3, #4
 8005e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e34:	4b21      	ldr	r3, [pc, #132]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3a:	4a20      	ldr	r2, [pc, #128]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005e3c:	f043 0301 	orr.w	r3, r3, #1
 8005e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e44:	e00f      	b.n	8005e66 <HAL_RCC_OscConfig+0x522>
 8005e46:	4b1d      	ldr	r3, [pc, #116]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4c:	4a1b      	ldr	r2, [pc, #108]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005e4e:	f023 0301 	bic.w	r3, r3, #1
 8005e52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e56:	4b19      	ldr	r3, [pc, #100]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5c:	4a17      	ldr	r2, [pc, #92]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005e5e:	f023 0304 	bic.w	r3, r3, #4
 8005e62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d016      	beq.n	8005e9c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e6e:	f7fe f8ef 	bl	8004050 <HAL_GetTick>
 8005e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e74:	e00a      	b.n	8005e8c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e76:	f7fe f8eb 	bl	8004050 <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d901      	bls.n	8005e8c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e176      	b.n	800617a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e8c:	4b0b      	ldr	r3, [pc, #44]	; (8005ebc <HAL_RCC_OscConfig+0x578>)
 8005e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d0ed      	beq.n	8005e76 <HAL_RCC_OscConfig+0x532>
 8005e9a:	e01a      	b.n	8005ed2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e9c:	f7fe f8d8 	bl	8004050 <HAL_GetTick>
 8005ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ea2:	e00f      	b.n	8005ec4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ea4:	f7fe f8d4 	bl	8004050 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d906      	bls.n	8005ec4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e15f      	b.n	800617a <HAL_RCC_OscConfig+0x836>
 8005eba:	bf00      	nop
 8005ebc:	40021000 	.word	0x40021000
 8005ec0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ec4:	4baa      	ldr	r3, [pc, #680]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 8005ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1e8      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ed2:	7ffb      	ldrb	r3, [r7, #31]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d105      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ed8:	4ba5      	ldr	r3, [pc, #660]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 8005eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005edc:	4aa4      	ldr	r2, [pc, #656]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 8005ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ee2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0320 	and.w	r3, r3, #32
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d03c      	beq.n	8005f6a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d01c      	beq.n	8005f32 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ef8:	4b9d      	ldr	r3, [pc, #628]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 8005efa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005efe:	4a9c      	ldr	r2, [pc, #624]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 8005f00:	f043 0301 	orr.w	r3, r3, #1
 8005f04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f08:	f7fe f8a2 	bl	8004050 <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f10:	f7fe f89e 	bl	8004050 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e12b      	b.n	800617a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f22:	4b93      	ldr	r3, [pc, #588]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 8005f24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d0ef      	beq.n	8005f10 <HAL_RCC_OscConfig+0x5cc>
 8005f30:	e01b      	b.n	8005f6a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f32:	4b8f      	ldr	r3, [pc, #572]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 8005f34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f38:	4a8d      	ldr	r2, [pc, #564]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 8005f3a:	f023 0301 	bic.w	r3, r3, #1
 8005f3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f42:	f7fe f885 	bl	8004050 <HAL_GetTick>
 8005f46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f48:	e008      	b.n	8005f5c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f4a:	f7fe f881 	bl	8004050 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d901      	bls.n	8005f5c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e10e      	b.n	800617a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f5c:	4b84      	ldr	r3, [pc, #528]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 8005f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1ef      	bne.n	8005f4a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 8102 	beq.w	8006178 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	f040 80c5 	bne.w	8006108 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005f7e:	4b7c      	ldr	r3, [pc, #496]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f003 0203 	and.w	r2, r3, #3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d12c      	bne.n	8005fec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d123      	bne.n	8005fec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d11b      	bne.n	8005fec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d113      	bne.n	8005fec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fce:	085b      	lsrs	r3, r3, #1
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d109      	bne.n	8005fec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe2:	085b      	lsrs	r3, r3, #1
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d067      	beq.n	80060bc <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	2b0c      	cmp	r3, #12
 8005ff0:	d062      	beq.n	80060b8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005ff2:	4b5f      	ldr	r3, [pc, #380]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e0bb      	b.n	800617a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006002:	4b5b      	ldr	r3, [pc, #364]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a5a      	ldr	r2, [pc, #360]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 8006008:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800600c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800600e:	f7fe f81f 	bl	8004050 <HAL_GetTick>
 8006012:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006014:	e008      	b.n	8006028 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006016:	f7fe f81b 	bl	8004050 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d901      	bls.n	8006028 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e0a8      	b.n	800617a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006028:	4b51      	ldr	r3, [pc, #324]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1f0      	bne.n	8006016 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006034:	4b4e      	ldr	r3, [pc, #312]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 8006036:	68da      	ldr	r2, [r3, #12]
 8006038:	4b4e      	ldr	r3, [pc, #312]	; (8006174 <HAL_RCC_OscConfig+0x830>)
 800603a:	4013      	ands	r3, r2
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006044:	3a01      	subs	r2, #1
 8006046:	0112      	lsls	r2, r2, #4
 8006048:	4311      	orrs	r1, r2
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800604e:	0212      	lsls	r2, r2, #8
 8006050:	4311      	orrs	r1, r2
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006056:	0852      	lsrs	r2, r2, #1
 8006058:	3a01      	subs	r2, #1
 800605a:	0552      	lsls	r2, r2, #21
 800605c:	4311      	orrs	r1, r2
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006062:	0852      	lsrs	r2, r2, #1
 8006064:	3a01      	subs	r2, #1
 8006066:	0652      	lsls	r2, r2, #25
 8006068:	4311      	orrs	r1, r2
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800606e:	06d2      	lsls	r2, r2, #27
 8006070:	430a      	orrs	r2, r1
 8006072:	493f      	ldr	r1, [pc, #252]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 8006074:	4313      	orrs	r3, r2
 8006076:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006078:	4b3d      	ldr	r3, [pc, #244]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a3c      	ldr	r2, [pc, #240]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 800607e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006082:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006084:	4b3a      	ldr	r3, [pc, #232]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	4a39      	ldr	r2, [pc, #228]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 800608a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800608e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006090:	f7fd ffde 	bl	8004050 <HAL_GetTick>
 8006094:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006096:	e008      	b.n	80060aa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006098:	f7fd ffda 	bl	8004050 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e067      	b.n	800617a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060aa:	4b31      	ldr	r3, [pc, #196]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d0f0      	beq.n	8006098 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80060b6:	e05f      	b.n	8006178 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e05e      	b.n	800617a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060bc:	4b2c      	ldr	r3, [pc, #176]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d157      	bne.n	8006178 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80060c8:	4b29      	ldr	r3, [pc, #164]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a28      	ldr	r2, [pc, #160]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 80060ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060d4:	4b26      	ldr	r3, [pc, #152]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	4a25      	ldr	r2, [pc, #148]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 80060da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060e0:	f7fd ffb6 	bl	8004050 <HAL_GetTick>
 80060e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060e6:	e008      	b.n	80060fa <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060e8:	f7fd ffb2 	bl	8004050 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e03f      	b.n	800617a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060fa:	4b1d      	ldr	r3, [pc, #116]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0f0      	beq.n	80060e8 <HAL_RCC_OscConfig+0x7a4>
 8006106:	e037      	b.n	8006178 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	2b0c      	cmp	r3, #12
 800610c:	d02d      	beq.n	800616a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800610e:	4b18      	ldr	r3, [pc, #96]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a17      	ldr	r2, [pc, #92]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 8006114:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006118:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800611a:	4b15      	ldr	r3, [pc, #84]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d105      	bne.n	8006132 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006126:	4b12      	ldr	r3, [pc, #72]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	4a11      	ldr	r2, [pc, #68]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 800612c:	f023 0303 	bic.w	r3, r3, #3
 8006130:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006132:	4b0f      	ldr	r3, [pc, #60]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	4a0e      	ldr	r2, [pc, #56]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 8006138:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800613c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006140:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006142:	f7fd ff85 	bl	8004050 <HAL_GetTick>
 8006146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006148:	e008      	b.n	800615c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800614a:	f7fd ff81 	bl	8004050 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	2b02      	cmp	r3, #2
 8006156:	d901      	bls.n	800615c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e00e      	b.n	800617a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800615c:	4b04      	ldr	r3, [pc, #16]	; (8006170 <HAL_RCC_OscConfig+0x82c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1f0      	bne.n	800614a <HAL_RCC_OscConfig+0x806>
 8006168:	e006      	b.n	8006178 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e005      	b.n	800617a <HAL_RCC_OscConfig+0x836>
 800616e:	bf00      	nop
 8006170:	40021000 	.word	0x40021000
 8006174:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3720      	adds	r7, #32
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop

08006184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e0c8      	b.n	800632a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006198:	4b66      	ldr	r3, [pc, #408]	; (8006334 <HAL_RCC_ClockConfig+0x1b0>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0307 	and.w	r3, r3, #7
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d910      	bls.n	80061c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061a6:	4b63      	ldr	r3, [pc, #396]	; (8006334 <HAL_RCC_ClockConfig+0x1b0>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f023 0207 	bic.w	r2, r3, #7
 80061ae:	4961      	ldr	r1, [pc, #388]	; (8006334 <HAL_RCC_ClockConfig+0x1b0>)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061b6:	4b5f      	ldr	r3, [pc, #380]	; (8006334 <HAL_RCC_ClockConfig+0x1b0>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0307 	and.w	r3, r3, #7
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d001      	beq.n	80061c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e0b0      	b.n	800632a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d04c      	beq.n	800626e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	2b03      	cmp	r3, #3
 80061da:	d107      	bne.n	80061ec <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061dc:	4b56      	ldr	r3, [pc, #344]	; (8006338 <HAL_RCC_ClockConfig+0x1b4>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d121      	bne.n	800622c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e09e      	b.n	800632a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d107      	bne.n	8006204 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061f4:	4b50      	ldr	r3, [pc, #320]	; (8006338 <HAL_RCC_ClockConfig+0x1b4>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d115      	bne.n	800622c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e092      	b.n	800632a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d107      	bne.n	800621c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800620c:	4b4a      	ldr	r3, [pc, #296]	; (8006338 <HAL_RCC_ClockConfig+0x1b4>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d109      	bne.n	800622c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e086      	b.n	800632a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800621c:	4b46      	ldr	r3, [pc, #280]	; (8006338 <HAL_RCC_ClockConfig+0x1b4>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e07e      	b.n	800632a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800622c:	4b42      	ldr	r3, [pc, #264]	; (8006338 <HAL_RCC_ClockConfig+0x1b4>)
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f023 0203 	bic.w	r2, r3, #3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	493f      	ldr	r1, [pc, #252]	; (8006338 <HAL_RCC_ClockConfig+0x1b4>)
 800623a:	4313      	orrs	r3, r2
 800623c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800623e:	f7fd ff07 	bl	8004050 <HAL_GetTick>
 8006242:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006244:	e00a      	b.n	800625c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006246:	f7fd ff03 	bl	8004050 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	f241 3288 	movw	r2, #5000	; 0x1388
 8006254:	4293      	cmp	r3, r2
 8006256:	d901      	bls.n	800625c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e066      	b.n	800632a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800625c:	4b36      	ldr	r3, [pc, #216]	; (8006338 <HAL_RCC_ClockConfig+0x1b4>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f003 020c 	and.w	r2, r3, #12
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	429a      	cmp	r2, r3
 800626c:	d1eb      	bne.n	8006246 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d008      	beq.n	800628c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800627a:	4b2f      	ldr	r3, [pc, #188]	; (8006338 <HAL_RCC_ClockConfig+0x1b4>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	492c      	ldr	r1, [pc, #176]	; (8006338 <HAL_RCC_ClockConfig+0x1b4>)
 8006288:	4313      	orrs	r3, r2
 800628a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800628c:	4b29      	ldr	r3, [pc, #164]	; (8006334 <HAL_RCC_ClockConfig+0x1b0>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0307 	and.w	r3, r3, #7
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	429a      	cmp	r2, r3
 8006298:	d210      	bcs.n	80062bc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800629a:	4b26      	ldr	r3, [pc, #152]	; (8006334 <HAL_RCC_ClockConfig+0x1b0>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f023 0207 	bic.w	r2, r3, #7
 80062a2:	4924      	ldr	r1, [pc, #144]	; (8006334 <HAL_RCC_ClockConfig+0x1b0>)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062aa:	4b22      	ldr	r3, [pc, #136]	; (8006334 <HAL_RCC_ClockConfig+0x1b0>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0307 	and.w	r3, r3, #7
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d001      	beq.n	80062bc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e036      	b.n	800632a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d008      	beq.n	80062da <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062c8:	4b1b      	ldr	r3, [pc, #108]	; (8006338 <HAL_RCC_ClockConfig+0x1b4>)
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	4918      	ldr	r1, [pc, #96]	; (8006338 <HAL_RCC_ClockConfig+0x1b4>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0308 	and.w	r3, r3, #8
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d009      	beq.n	80062fa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062e6:	4b14      	ldr	r3, [pc, #80]	; (8006338 <HAL_RCC_ClockConfig+0x1b4>)
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	00db      	lsls	r3, r3, #3
 80062f4:	4910      	ldr	r1, [pc, #64]	; (8006338 <HAL_RCC_ClockConfig+0x1b4>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80062fa:	f000 f825 	bl	8006348 <HAL_RCC_GetSysClockFreq>
 80062fe:	4601      	mov	r1, r0
 8006300:	4b0d      	ldr	r3, [pc, #52]	; (8006338 <HAL_RCC_ClockConfig+0x1b4>)
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	091b      	lsrs	r3, r3, #4
 8006306:	f003 030f 	and.w	r3, r3, #15
 800630a:	4a0c      	ldr	r2, [pc, #48]	; (800633c <HAL_RCC_ClockConfig+0x1b8>)
 800630c:	5cd3      	ldrb	r3, [r2, r3]
 800630e:	f003 031f 	and.w	r3, r3, #31
 8006312:	fa21 f303 	lsr.w	r3, r1, r3
 8006316:	4a0a      	ldr	r2, [pc, #40]	; (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 8006318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800631a:	4b0a      	ldr	r3, [pc, #40]	; (8006344 <HAL_RCC_ClockConfig+0x1c0>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f7fd fe4a 	bl	8003fb8 <HAL_InitTick>
 8006324:	4603      	mov	r3, r0
 8006326:	72fb      	strb	r3, [r7, #11]

  return status;
 8006328:	7afb      	ldrb	r3, [r7, #11]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	40022000 	.word	0x40022000
 8006338:	40021000 	.word	0x40021000
 800633c:	0800e980 	.word	0x0800e980
 8006340:	20000038 	.word	0x20000038
 8006344:	2000003c 	.word	0x2000003c

08006348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006348:	b480      	push	{r7}
 800634a:	b089      	sub	sp, #36	; 0x24
 800634c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800634e:	2300      	movs	r3, #0
 8006350:	61fb      	str	r3, [r7, #28]
 8006352:	2300      	movs	r3, #0
 8006354:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006356:	4b3d      	ldr	r3, [pc, #244]	; (800644c <HAL_RCC_GetSysClockFreq+0x104>)
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f003 030c 	and.w	r3, r3, #12
 800635e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006360:	4b3a      	ldr	r3, [pc, #232]	; (800644c <HAL_RCC_GetSysClockFreq+0x104>)
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f003 0303 	and.w	r3, r3, #3
 8006368:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d005      	beq.n	800637c <HAL_RCC_GetSysClockFreq+0x34>
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	2b0c      	cmp	r3, #12
 8006374:	d121      	bne.n	80063ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d11e      	bne.n	80063ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800637c:	4b33      	ldr	r3, [pc, #204]	; (800644c <HAL_RCC_GetSysClockFreq+0x104>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0308 	and.w	r3, r3, #8
 8006384:	2b00      	cmp	r3, #0
 8006386:	d107      	bne.n	8006398 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006388:	4b30      	ldr	r3, [pc, #192]	; (800644c <HAL_RCC_GetSysClockFreq+0x104>)
 800638a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800638e:	0a1b      	lsrs	r3, r3, #8
 8006390:	f003 030f 	and.w	r3, r3, #15
 8006394:	61fb      	str	r3, [r7, #28]
 8006396:	e005      	b.n	80063a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006398:	4b2c      	ldr	r3, [pc, #176]	; (800644c <HAL_RCC_GetSysClockFreq+0x104>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	091b      	lsrs	r3, r3, #4
 800639e:	f003 030f 	and.w	r3, r3, #15
 80063a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80063a4:	4a2a      	ldr	r2, [pc, #168]	; (8006450 <HAL_RCC_GetSysClockFreq+0x108>)
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10d      	bne.n	80063d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80063b8:	e00a      	b.n	80063d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	2b04      	cmp	r3, #4
 80063be:	d102      	bne.n	80063c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80063c0:	4b24      	ldr	r3, [pc, #144]	; (8006454 <HAL_RCC_GetSysClockFreq+0x10c>)
 80063c2:	61bb      	str	r3, [r7, #24]
 80063c4:	e004      	b.n	80063d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	2b08      	cmp	r3, #8
 80063ca:	d101      	bne.n	80063d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80063cc:	4b22      	ldr	r3, [pc, #136]	; (8006458 <HAL_RCC_GetSysClockFreq+0x110>)
 80063ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	2b0c      	cmp	r3, #12
 80063d4:	d133      	bne.n	800643e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80063d6:	4b1d      	ldr	r3, [pc, #116]	; (800644c <HAL_RCC_GetSysClockFreq+0x104>)
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f003 0303 	and.w	r3, r3, #3
 80063de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d002      	beq.n	80063ec <HAL_RCC_GetSysClockFreq+0xa4>
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	d003      	beq.n	80063f2 <HAL_RCC_GetSysClockFreq+0xaa>
 80063ea:	e005      	b.n	80063f8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80063ec:	4b19      	ldr	r3, [pc, #100]	; (8006454 <HAL_RCC_GetSysClockFreq+0x10c>)
 80063ee:	617b      	str	r3, [r7, #20]
      break;
 80063f0:	e005      	b.n	80063fe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80063f2:	4b19      	ldr	r3, [pc, #100]	; (8006458 <HAL_RCC_GetSysClockFreq+0x110>)
 80063f4:	617b      	str	r3, [r7, #20]
      break;
 80063f6:	e002      	b.n	80063fe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	617b      	str	r3, [r7, #20]
      break;
 80063fc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063fe:	4b13      	ldr	r3, [pc, #76]	; (800644c <HAL_RCC_GetSysClockFreq+0x104>)
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	091b      	lsrs	r3, r3, #4
 8006404:	f003 0307 	and.w	r3, r3, #7
 8006408:	3301      	adds	r3, #1
 800640a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800640c:	4b0f      	ldr	r3, [pc, #60]	; (800644c <HAL_RCC_GetSysClockFreq+0x104>)
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	0a1b      	lsrs	r3, r3, #8
 8006412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	fb02 f203 	mul.w	r2, r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006422:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006424:	4b09      	ldr	r3, [pc, #36]	; (800644c <HAL_RCC_GetSysClockFreq+0x104>)
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	0e5b      	lsrs	r3, r3, #25
 800642a:	f003 0303 	and.w	r3, r3, #3
 800642e:	3301      	adds	r3, #1
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	fbb2 f3f3 	udiv	r3, r2, r3
 800643c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800643e:	69bb      	ldr	r3, [r7, #24]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3724      	adds	r7, #36	; 0x24
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	40021000 	.word	0x40021000
 8006450:	0800e998 	.word	0x0800e998
 8006454:	00f42400 	.word	0x00f42400
 8006458:	007a1200 	.word	0x007a1200

0800645c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800645c:	b480      	push	{r7}
 800645e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006460:	4b03      	ldr	r3, [pc, #12]	; (8006470 <HAL_RCC_GetHCLKFreq+0x14>)
 8006462:	681b      	ldr	r3, [r3, #0]
}
 8006464:	4618      	mov	r0, r3
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	20000038 	.word	0x20000038

08006474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006478:	f7ff fff0 	bl	800645c <HAL_RCC_GetHCLKFreq>
 800647c:	4601      	mov	r1, r0
 800647e:	4b06      	ldr	r3, [pc, #24]	; (8006498 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	0a1b      	lsrs	r3, r3, #8
 8006484:	f003 0307 	and.w	r3, r3, #7
 8006488:	4a04      	ldr	r2, [pc, #16]	; (800649c <HAL_RCC_GetPCLK1Freq+0x28>)
 800648a:	5cd3      	ldrb	r3, [r2, r3]
 800648c:	f003 031f 	and.w	r3, r3, #31
 8006490:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006494:	4618      	mov	r0, r3
 8006496:	bd80      	pop	{r7, pc}
 8006498:	40021000 	.word	0x40021000
 800649c:	0800e990 	.word	0x0800e990

080064a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80064a4:	f7ff ffda 	bl	800645c <HAL_RCC_GetHCLKFreq>
 80064a8:	4601      	mov	r1, r0
 80064aa:	4b06      	ldr	r3, [pc, #24]	; (80064c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	0adb      	lsrs	r3, r3, #11
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	4a04      	ldr	r2, [pc, #16]	; (80064c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80064b6:	5cd3      	ldrb	r3, [r2, r3]
 80064b8:	f003 031f 	and.w	r3, r3, #31
 80064bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	40021000 	.word	0x40021000
 80064c8:	0800e990 	.word	0x0800e990

080064cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80064d4:	2300      	movs	r3, #0
 80064d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80064d8:	4b2a      	ldr	r3, [pc, #168]	; (8006584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d003      	beq.n	80064ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80064e4:	f7ff f982 	bl	80057ec <HAL_PWREx_GetVoltageRange>
 80064e8:	6178      	str	r0, [r7, #20]
 80064ea:	e014      	b.n	8006516 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80064ec:	4b25      	ldr	r3, [pc, #148]	; (8006584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f0:	4a24      	ldr	r2, [pc, #144]	; (8006584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064f6:	6593      	str	r3, [r2, #88]	; 0x58
 80064f8:	4b22      	ldr	r3, [pc, #136]	; (8006584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006504:	f7ff f972 	bl	80057ec <HAL_PWREx_GetVoltageRange>
 8006508:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800650a:	4b1e      	ldr	r3, [pc, #120]	; (8006584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800650c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800650e:	4a1d      	ldr	r2, [pc, #116]	; (8006584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006514:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800651c:	d10b      	bne.n	8006536 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b80      	cmp	r3, #128	; 0x80
 8006522:	d919      	bls.n	8006558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2ba0      	cmp	r3, #160	; 0xa0
 8006528:	d902      	bls.n	8006530 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800652a:	2302      	movs	r3, #2
 800652c:	613b      	str	r3, [r7, #16]
 800652e:	e013      	b.n	8006558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006530:	2301      	movs	r3, #1
 8006532:	613b      	str	r3, [r7, #16]
 8006534:	e010      	b.n	8006558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b80      	cmp	r3, #128	; 0x80
 800653a:	d902      	bls.n	8006542 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800653c:	2303      	movs	r3, #3
 800653e:	613b      	str	r3, [r7, #16]
 8006540:	e00a      	b.n	8006558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b80      	cmp	r3, #128	; 0x80
 8006546:	d102      	bne.n	800654e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006548:	2302      	movs	r3, #2
 800654a:	613b      	str	r3, [r7, #16]
 800654c:	e004      	b.n	8006558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b70      	cmp	r3, #112	; 0x70
 8006552:	d101      	bne.n	8006558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006554:	2301      	movs	r3, #1
 8006556:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006558:	4b0b      	ldr	r3, [pc, #44]	; (8006588 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f023 0207 	bic.w	r2, r3, #7
 8006560:	4909      	ldr	r1, [pc, #36]	; (8006588 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	4313      	orrs	r3, r2
 8006566:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006568:	4b07      	ldr	r3, [pc, #28]	; (8006588 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0307 	and.w	r3, r3, #7
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	429a      	cmp	r2, r3
 8006574:	d001      	beq.n	800657a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e000      	b.n	800657c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	40021000 	.word	0x40021000
 8006588:	40022000 	.word	0x40022000

0800658c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006594:	2300      	movs	r3, #0
 8006596:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006598:	2300      	movs	r3, #0
 800659a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d02f      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065b0:	d005      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x32>
 80065b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80065b6:	d015      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d007      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80065bc:	e00f      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80065be:	4bac      	ldr	r3, [pc, #688]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	4aab      	ldr	r2, [pc, #684]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80065c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065c8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065ca:	e00c      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	3304      	adds	r3, #4
 80065d0:	2100      	movs	r1, #0
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 f9cc 	bl	8006970 <RCCEx_PLLSAI1_Config>
 80065d8:	4603      	mov	r3, r0
 80065da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065dc:	e003      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	74fb      	strb	r3, [r7, #19]
      break;
 80065e2:	e000      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80065e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065e6:	7cfb      	ldrb	r3, [r7, #19]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10b      	bne.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065ec:	4ba0      	ldr	r3, [pc, #640]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80065ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fa:	499d      	ldr	r1, [pc, #628]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006602:	e001      	b.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006604:	7cfb      	ldrb	r3, [r7, #19]
 8006606:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 8099 	beq.w	8006748 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006616:	2300      	movs	r3, #0
 8006618:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800661a:	4b95      	ldr	r3, [pc, #596]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800661c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8006626:	2301      	movs	r3, #1
 8006628:	e000      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800662a:	2300      	movs	r3, #0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00d      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006630:	4b8f      	ldr	r3, [pc, #572]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006634:	4a8e      	ldr	r2, [pc, #568]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800663a:	6593      	str	r3, [r2, #88]	; 0x58
 800663c:	4b8c      	ldr	r3, [pc, #560]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800663e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006644:	60bb      	str	r3, [r7, #8]
 8006646:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006648:	2301      	movs	r3, #1
 800664a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800664c:	4b89      	ldr	r3, [pc, #548]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a88      	ldr	r2, [pc, #544]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006656:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006658:	f7fd fcfa 	bl	8004050 <HAL_GetTick>
 800665c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800665e:	e009      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006660:	f7fd fcf6 	bl	8004050 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b02      	cmp	r3, #2
 800666c:	d902      	bls.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	74fb      	strb	r3, [r7, #19]
        break;
 8006672:	e005      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006674:	4b7f      	ldr	r3, [pc, #508]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800667c:	2b00      	cmp	r3, #0
 800667e:	d0ef      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8006680:	7cfb      	ldrb	r3, [r7, #19]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d155      	bne.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006686:	4b7a      	ldr	r3, [pc, #488]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800668c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006690:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d01e      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d019      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80066a2:	4b73      	ldr	r3, [pc, #460]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80066a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066ae:	4b70      	ldr	r3, [pc, #448]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80066b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b4:	4a6e      	ldr	r2, [pc, #440]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80066b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066be:	4b6c      	ldr	r3, [pc, #432]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80066c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c4:	4a6a      	ldr	r2, [pc, #424]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80066c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80066ce:	4a68      	ldr	r2, [pc, #416]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d016      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e0:	f7fd fcb6 	bl	8004050 <HAL_GetTick>
 80066e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066e6:	e00b      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066e8:	f7fd fcb2 	bl	8004050 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d902      	bls.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	74fb      	strb	r3, [r7, #19]
            break;
 80066fe:	e006      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006700:	4b5b      	ldr	r3, [pc, #364]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d0ec      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800670e:	7cfb      	ldrb	r3, [r7, #19]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10b      	bne.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006714:	4b56      	ldr	r3, [pc, #344]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800671a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006722:	4953      	ldr	r1, [pc, #332]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006724:	4313      	orrs	r3, r2
 8006726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800672a:	e004      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800672c:	7cfb      	ldrb	r3, [r7, #19]
 800672e:	74bb      	strb	r3, [r7, #18]
 8006730:	e001      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006732:	7cfb      	ldrb	r3, [r7, #19]
 8006734:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006736:	7c7b      	ldrb	r3, [r7, #17]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d105      	bne.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800673c:	4b4c      	ldr	r3, [pc, #304]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800673e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006740:	4a4b      	ldr	r2, [pc, #300]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006746:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00a      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006754:	4b46      	ldr	r3, [pc, #280]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675a:	f023 0203 	bic.w	r2, r3, #3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	4943      	ldr	r1, [pc, #268]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006764:	4313      	orrs	r3, r2
 8006766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00a      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006776:	4b3e      	ldr	r3, [pc, #248]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677c:	f023 020c 	bic.w	r2, r3, #12
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006784:	493a      	ldr	r1, [pc, #232]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006786:	4313      	orrs	r3, r2
 8006788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0320 	and.w	r3, r3, #32
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00a      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006798:	4b35      	ldr	r3, [pc, #212]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800679a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a6:	4932      	ldr	r1, [pc, #200]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067ba:	4b2d      	ldr	r3, [pc, #180]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80067bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c8:	4929      	ldr	r1, [pc, #164]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00a      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067dc:	4b24      	ldr	r3, [pc, #144]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80067de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ea:	4921      	ldr	r1, [pc, #132]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80067ec:	4313      	orrs	r3, r2
 80067ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00a      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067fe:	4b1c      	ldr	r3, [pc, #112]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006804:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680c:	4918      	ldr	r1, [pc, #96]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800680e:	4313      	orrs	r3, r2
 8006810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00a      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006820:	4b13      	ldr	r3, [pc, #76]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006826:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682e:	4910      	ldr	r1, [pc, #64]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006830:	4313      	orrs	r3, r2
 8006832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d02c      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006842:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006848:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006850:	4907      	ldr	r1, [pc, #28]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006852:	4313      	orrs	r3, r2
 8006854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006860:	d10a      	bne.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006862:	4b03      	ldr	r3, [pc, #12]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	4a02      	ldr	r2, [pc, #8]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006868:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800686c:	60d3      	str	r3, [r2, #12]
 800686e:	e015      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006870:	40021000 	.word	0x40021000
 8006874:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006880:	d10c      	bne.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	3304      	adds	r3, #4
 8006886:	2101      	movs	r1, #1
 8006888:	4618      	mov	r0, r3
 800688a:	f000 f871 	bl	8006970 <RCCEx_PLLSAI1_Config>
 800688e:	4603      	mov	r3, r0
 8006890:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006892:	7cfb      	ldrb	r3, [r7, #19]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8006898:	7cfb      	ldrb	r3, [r7, #19]
 800689a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d028      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068a8:	4b30      	ldr	r3, [pc, #192]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b6:	492d      	ldr	r1, [pc, #180]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068c6:	d106      	bne.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068c8:	4b28      	ldr	r3, [pc, #160]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	4a27      	ldr	r2, [pc, #156]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068d2:	60d3      	str	r3, [r2, #12]
 80068d4:	e011      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068de:	d10c      	bne.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	3304      	adds	r3, #4
 80068e4:	2101      	movs	r1, #1
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 f842 	bl	8006970 <RCCEx_PLLSAI1_Config>
 80068ec:	4603      	mov	r3, r0
 80068ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80068f0:	7cfb      	ldrb	r3, [r7, #19]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 80068f6:	7cfb      	ldrb	r3, [r7, #19]
 80068f8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d01c      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006906:	4b19      	ldr	r3, [pc, #100]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800690c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006914:	4915      	ldr	r1, [pc, #84]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006916:	4313      	orrs	r3, r2
 8006918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006920:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006924:	d10c      	bne.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	3304      	adds	r3, #4
 800692a:	2102      	movs	r1, #2
 800692c:	4618      	mov	r0, r3
 800692e:	f000 f81f 	bl	8006970 <RCCEx_PLLSAI1_Config>
 8006932:	4603      	mov	r3, r0
 8006934:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006936:	7cfb      	ldrb	r3, [r7, #19]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d001      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 800693c:	7cfb      	ldrb	r3, [r7, #19]
 800693e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00a      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800694c:	4b07      	ldr	r3, [pc, #28]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800694e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006952:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800695a:	4904      	ldr	r1, [pc, #16]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800695c:	4313      	orrs	r3, r2
 800695e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006962:	7cbb      	ldrb	r3, [r7, #18]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3718      	adds	r7, #24
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	40021000 	.word	0x40021000

08006970 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800697a:	2300      	movs	r3, #0
 800697c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800697e:	4b73      	ldr	r3, [pc, #460]	; (8006b4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	f003 0303 	and.w	r3, r3, #3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d018      	beq.n	80069bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800698a:	4b70      	ldr	r3, [pc, #448]	; (8006b4c <RCCEx_PLLSAI1_Config+0x1dc>)
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f003 0203 	and.w	r2, r3, #3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d10d      	bne.n	80069b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
       ||
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d009      	beq.n	80069b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80069a2:	4b6a      	ldr	r3, [pc, #424]	; (8006b4c <RCCEx_PLLSAI1_Config+0x1dc>)
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	091b      	lsrs	r3, r3, #4
 80069a8:	f003 0307 	and.w	r3, r3, #7
 80069ac:	1c5a      	adds	r2, r3, #1
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
       ||
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d044      	beq.n	8006a40 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	73fb      	strb	r3, [r7, #15]
 80069ba:	e041      	b.n	8006a40 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d00c      	beq.n	80069de <RCCEx_PLLSAI1_Config+0x6e>
 80069c4:	2b03      	cmp	r3, #3
 80069c6:	d013      	beq.n	80069f0 <RCCEx_PLLSAI1_Config+0x80>
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d120      	bne.n	8006a0e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80069cc:	4b5f      	ldr	r3, [pc, #380]	; (8006b4c <RCCEx_PLLSAI1_Config+0x1dc>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0302 	and.w	r3, r3, #2
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d11d      	bne.n	8006a14 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069dc:	e01a      	b.n	8006a14 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80069de:	4b5b      	ldr	r3, [pc, #364]	; (8006b4c <RCCEx_PLLSAI1_Config+0x1dc>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d116      	bne.n	8006a18 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069ee:	e013      	b.n	8006a18 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80069f0:	4b56      	ldr	r3, [pc, #344]	; (8006b4c <RCCEx_PLLSAI1_Config+0x1dc>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10f      	bne.n	8006a1c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80069fc:	4b53      	ldr	r3, [pc, #332]	; (8006b4c <RCCEx_PLLSAI1_Config+0x1dc>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d109      	bne.n	8006a1c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a0c:	e006      	b.n	8006a1c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	73fb      	strb	r3, [r7, #15]
      break;
 8006a12:	e004      	b.n	8006a1e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006a14:	bf00      	nop
 8006a16:	e002      	b.n	8006a1e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006a18:	bf00      	nop
 8006a1a:	e000      	b.n	8006a1e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006a1c:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10d      	bne.n	8006a40 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006a24:	4b49      	ldr	r3, [pc, #292]	; (8006b4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6819      	ldr	r1, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	3b01      	subs	r3, #1
 8006a36:	011b      	lsls	r3, r3, #4
 8006a38:	430b      	orrs	r3, r1
 8006a3a:	4944      	ldr	r1, [pc, #272]	; (8006b4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d17c      	bne.n	8006b40 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006a46:	4b41      	ldr	r3, [pc, #260]	; (8006b4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a40      	ldr	r2, [pc, #256]	; (8006b4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a52:	f7fd fafd 	bl	8004050 <HAL_GetTick>
 8006a56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a58:	e009      	b.n	8006a6e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a5a:	f7fd faf9 	bl	8004050 <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d902      	bls.n	8006a6e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	73fb      	strb	r3, [r7, #15]
        break;
 8006a6c:	e005      	b.n	8006a7a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a6e:	4b37      	ldr	r3, [pc, #220]	; (8006b4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1ef      	bne.n	8006a5a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d15f      	bne.n	8006b40 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d110      	bne.n	8006aa8 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a86:	4b31      	ldr	r3, [pc, #196]	; (8006b4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006a8e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	6892      	ldr	r2, [r2, #8]
 8006a96:	0211      	lsls	r1, r2, #8
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	68d2      	ldr	r2, [r2, #12]
 8006a9c:	06d2      	lsls	r2, r2, #27
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	492a      	ldr	r1, [pc, #168]	; (8006b4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	610b      	str	r3, [r1, #16]
 8006aa6:	e027      	b.n	8006af8 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d112      	bne.n	8006ad4 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006aae:	4b27      	ldr	r3, [pc, #156]	; (8006b4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006ab6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	6892      	ldr	r2, [r2, #8]
 8006abe:	0211      	lsls	r1, r2, #8
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	6912      	ldr	r2, [r2, #16]
 8006ac4:	0852      	lsrs	r2, r2, #1
 8006ac6:	3a01      	subs	r2, #1
 8006ac8:	0552      	lsls	r2, r2, #21
 8006aca:	430a      	orrs	r2, r1
 8006acc:	491f      	ldr	r1, [pc, #124]	; (8006b4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	610b      	str	r3, [r1, #16]
 8006ad2:	e011      	b.n	8006af8 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ad4:	4b1d      	ldr	r3, [pc, #116]	; (8006b4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006adc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	6892      	ldr	r2, [r2, #8]
 8006ae4:	0211      	lsls	r1, r2, #8
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	6952      	ldr	r2, [r2, #20]
 8006aea:	0852      	lsrs	r2, r2, #1
 8006aec:	3a01      	subs	r2, #1
 8006aee:	0652      	lsls	r2, r2, #25
 8006af0:	430a      	orrs	r2, r1
 8006af2:	4916      	ldr	r1, [pc, #88]	; (8006b4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006af8:	4b14      	ldr	r3, [pc, #80]	; (8006b4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a13      	ldr	r2, [pc, #76]	; (8006b4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006afe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b04:	f7fd faa4 	bl	8004050 <HAL_GetTick>
 8006b08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b0a:	e009      	b.n	8006b20 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b0c:	f7fd faa0 	bl	8004050 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d902      	bls.n	8006b20 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	73fb      	strb	r3, [r7, #15]
          break;
 8006b1e:	e005      	b.n	8006b2c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b20:	4b0a      	ldr	r3, [pc, #40]	; (8006b4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d0ef      	beq.n	8006b0c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d106      	bne.n	8006b40 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006b32:	4b06      	ldr	r3, [pc, #24]	; (8006b4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b34:	691a      	ldr	r2, [r3, #16]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	4904      	ldr	r1, [pc, #16]	; (8006b4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	40021000 	.word	0x40021000

08006b50 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d06c      	beq.n	8006c3c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d106      	bne.n	8006b7c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7fd f894 	bl	8003ca4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	22ca      	movs	r2, #202	; 0xca
 8006b8a:	625a      	str	r2, [r3, #36]	; 0x24
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2253      	movs	r2, #83	; 0x53
 8006b92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fbcb 	bl	8007330 <RTC_EnterInitMode>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d14b      	bne.n	8006c3c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	6812      	ldr	r2, [r2, #0]
 8006bae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6899      	ldr	r1, [r3, #8]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685a      	ldr	r2, [r3, #4]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	68d2      	ldr	r2, [r2, #12]
 8006bde:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6919      	ldr	r1, [r3, #16]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	041a      	lsls	r2, r3, #16
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fbcf 	bl	8007398 <RTC_ExitInitMode>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006bfe:	7bfb      	ldrb	r3, [r7, #15]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d11b      	bne.n	8006c3c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f022 0203 	bic.w	r2, r2, #3
 8006c12:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	69da      	ldr	r2, [r3, #28]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	431a      	orrs	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	22ff      	movs	r2, #255	; 0xff
 8006c32:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c46:	b590      	push	{r4, r7, lr}
 8006c48:	b087      	sub	sp, #28
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	60f8      	str	r0, [r7, #12]
 8006c4e:	60b9      	str	r1, [r7, #8]
 8006c50:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d101      	bne.n	8006c60 <HAL_RTC_SetTime+0x1a>
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	e08b      	b.n	8006d78 <HAL_RTC_SetTime+0x132>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	22ca      	movs	r2, #202	; 0xca
 8006c76:	625a      	str	r2, [r3, #36]	; 0x24
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2253      	movs	r2, #83	; 0x53
 8006c7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f000 fb55 	bl	8007330 <RTC_EnterInitMode>
 8006c86:	4603      	mov	r3, r0
 8006c88:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006c8a:	7cfb      	ldrb	r3, [r7, #19]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d163      	bne.n	8006d58 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d126      	bne.n	8006ce4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d102      	bne.n	8006caa <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 fbb0 	bl	8007414 <RTC_ByteToBcd2>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	785b      	ldrb	r3, [r3, #1]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 fba9 	bl	8007414 <RTC_ByteToBcd2>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006cc6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	789b      	ldrb	r3, [r3, #2]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 fba1 	bl	8007414 <RTC_ByteToBcd2>
 8006cd2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006cd4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	78db      	ldrb	r3, [r3, #3]
 8006cdc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	617b      	str	r3, [r7, #20]
 8006ce2:	e018      	b.n	8006d16 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d102      	bne.n	8006cf8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	785b      	ldrb	r3, [r3, #1]
 8006d02:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006d04:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006d0a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	78db      	ldrb	r3, [r3, #3]
 8006d10:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006d12:	4313      	orrs	r3, r2
 8006d14:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006d20:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006d24:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689a      	ldr	r2, [r3, #8]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d34:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	6899      	ldr	r1, [r3, #8]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	431a      	orrs	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 fb22 	bl	8007398 <RTC_ExitInitMode>
 8006d54:	4603      	mov	r3, r0
 8006d56:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	22ff      	movs	r2, #255	; 0xff
 8006d5e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006d60:	7cfb      	ldrb	r3, [r7, #19]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d103      	bne.n	8006d6e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006d76:	7cfb      	ldrb	r3, [r7, #19]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	371c      	adds	r7, #28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd90      	pop	{r4, r7, pc}

08006d80 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006dae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006db2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	0c1b      	lsrs	r3, r3, #16
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	0a1b      	lsrs	r3, r3, #8
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	0d9b      	lsrs	r3, r3, #22
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	b2da      	uxtb	r2, r3
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d11a      	bne.n	8006e2e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 fb29 	bl	8007454 <RTC_Bcd2ToByte>
 8006e02:	4603      	mov	r3, r0
 8006e04:	461a      	mov	r2, r3
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	785b      	ldrb	r3, [r3, #1]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fb20 	bl	8007454 <RTC_Bcd2ToByte>
 8006e14:	4603      	mov	r3, r0
 8006e16:	461a      	mov	r2, r3
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	789b      	ldrb	r3, [r3, #2]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 fb17 	bl	8007454 <RTC_Bcd2ToByte>
 8006e26:	4603      	mov	r3, r0
 8006e28:	461a      	mov	r2, r3
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006e38:	b590      	push	{r4, r7, lr}
 8006e3a:	b087      	sub	sp, #28
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d101      	bne.n	8006e52 <HAL_RTC_SetDate+0x1a>
 8006e4e:	2302      	movs	r3, #2
 8006e50:	e075      	b.n	8006f3e <HAL_RTC_SetDate+0x106>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10e      	bne.n	8006e86 <HAL_RTC_SetDate+0x4e>
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	785b      	ldrb	r3, [r3, #1]
 8006e6c:	f003 0310 	and.w	r3, r3, #16
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d008      	beq.n	8006e86 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	785b      	ldrb	r3, [r3, #1]
 8006e78:	f023 0310 	bic.w	r3, r3, #16
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	330a      	adds	r3, #10
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d11c      	bne.n	8006ec6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	78db      	ldrb	r3, [r3, #3]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 fabf 	bl	8007414 <RTC_ByteToBcd2>
 8006e96:	4603      	mov	r3, r0
 8006e98:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	785b      	ldrb	r3, [r3, #1]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 fab8 	bl	8007414 <RTC_ByteToBcd2>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006ea8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	789b      	ldrb	r3, [r3, #2]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 fab0 	bl	8007414 <RTC_ByteToBcd2>
 8006eb4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006eb6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	617b      	str	r3, [r7, #20]
 8006ec4:	e00e      	b.n	8006ee4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	78db      	ldrb	r3, [r3, #3]
 8006eca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	785b      	ldrb	r3, [r3, #1]
 8006ed0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006ed2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006ed8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	22ca      	movs	r2, #202	; 0xca
 8006eea:	625a      	str	r2, [r3, #36]	; 0x24
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2253      	movs	r2, #83	; 0x53
 8006ef2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f000 fa1b 	bl	8007330 <RTC_EnterInitMode>
 8006efa:	4603      	mov	r3, r0
 8006efc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006efe:	7cfb      	ldrb	r3, [r7, #19]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10c      	bne.n	8006f1e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f0e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006f12:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 fa3f 	bl	8007398 <RTC_ExitInitMode>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	22ff      	movs	r2, #255	; 0xff
 8006f24:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006f26:	7cfb      	ldrb	r3, [r7, #19]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d103      	bne.n	8006f34 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006f3c:	7cfb      	ldrb	r3, [r7, #19]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	371c      	adds	r7, #28
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd90      	pop	{r4, r7, pc}

08006f46 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b086      	sub	sp, #24
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	60f8      	str	r0, [r7, #12]
 8006f4e:	60b9      	str	r1, [r7, #8]
 8006f50:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f5c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006f60:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	0c1b      	lsrs	r3, r3, #16
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	0a1b      	lsrs	r3, r3, #8
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	f003 031f 	and.w	r3, r3, #31
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f84:	b2da      	uxtb	r2, r3
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	0b5b      	lsrs	r3, r3, #13
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	f003 0307 	and.w	r3, r3, #7
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d11a      	bne.n	8006fd6 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	78db      	ldrb	r3, [r3, #3]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f000 fa55 	bl	8007454 <RTC_Bcd2ToByte>
 8006faa:	4603      	mov	r3, r0
 8006fac:	461a      	mov	r2, r3
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	785b      	ldrb	r3, [r3, #1]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fa4c 	bl	8007454 <RTC_Bcd2ToByte>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	789b      	ldrb	r3, [r3, #2]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 fa43 	bl	8007454 <RTC_Bcd2ToByte>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3718      	adds	r7, #24
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006fe0:	b590      	push	{r4, r7, lr}
 8006fe2:	b089      	sub	sp, #36	; 0x24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d101      	bne.n	8006ffa <HAL_RTC_SetAlarm_IT+0x1a>
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	e127      	b.n	800724a <HAL_RTC_SetAlarm_IT+0x26a>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2202      	movs	r2, #2
 8007006:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d137      	bne.n	8007080 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701a:	2b00      	cmp	r3, #0
 800701c:	d102      	bne.n	8007024 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	2200      	movs	r2, #0
 8007022:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	4618      	mov	r0, r3
 800702a:	f000 f9f3 	bl	8007414 <RTC_ByteToBcd2>
 800702e:	4603      	mov	r3, r0
 8007030:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	785b      	ldrb	r3, [r3, #1]
 8007036:	4618      	mov	r0, r3
 8007038:	f000 f9ec 	bl	8007414 <RTC_ByteToBcd2>
 800703c:	4603      	mov	r3, r0
 800703e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007040:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	789b      	ldrb	r3, [r3, #2]
 8007046:	4618      	mov	r0, r3
 8007048:	f000 f9e4 	bl	8007414 <RTC_ByteToBcd2>
 800704c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800704e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	78db      	ldrb	r3, [r3, #3]
 8007056:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007058:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007062:	4618      	mov	r0, r3
 8007064:	f000 f9d6 	bl	8007414 <RTC_ByteToBcd2>
 8007068:	4603      	mov	r3, r0
 800706a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800706c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007074:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800707a:	4313      	orrs	r3, r2
 800707c:	61fb      	str	r3, [r7, #28]
 800707e:	e023      	b.n	80070c8 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708a:	2b00      	cmp	r3, #0
 800708c:	d102      	bne.n	8007094 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2200      	movs	r2, #0
 8007092:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	785b      	ldrb	r3, [r3, #1]
 800709e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80070a0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80070a6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	78db      	ldrb	r3, [r3, #3]
 80070ac:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80070ae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80070b6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80070b8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80070be:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80070c4:	4313      	orrs	r3, r2
 80070c6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	22ca      	movs	r2, #202	; 0xca
 80070da:	625a      	str	r2, [r3, #36]	; 0x24
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2253      	movs	r2, #83	; 0x53
 80070e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ec:	d14a      	bne.n	8007184 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	689a      	ldr	r2, [r3, #8]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070fc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	b2da      	uxtb	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800710e:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8007110:	f7fc ff9e 	bl	8004050 <HAL_GetTick>
 8007114:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007116:	e015      	b.n	8007144 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007118:	f7fc ff9a 	bl	8004050 <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007126:	d90d      	bls.n	8007144 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	22ff      	movs	r2, #255	; 0xff
 800712e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2203      	movs	r2, #3
 8007134:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e082      	b.n	800724a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	f003 0301 	and.w	r3, r3, #1
 800714e:	2b00      	cmp	r3, #0
 8007150:	d0e2      	beq.n	8007118 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	69fa      	ldr	r2, [r7, #28]
 8007158:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	69ba      	ldr	r2, [r7, #24]
 8007160:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007170:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007180:	609a      	str	r2, [r3, #8]
 8007182:	e049      	b.n	8007218 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689a      	ldr	r2, [r3, #8]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007192:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	b2da      	uxtb	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f462 7220 	orn	r2, r2, #640	; 0x280
 80071a4:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80071a6:	f7fc ff53 	bl	8004050 <HAL_GetTick>
 80071aa:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80071ac:	e015      	b.n	80071da <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80071ae:	f7fc ff4f 	bl	8004050 <HAL_GetTick>
 80071b2:	4602      	mov	r2, r0
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071bc:	d90d      	bls.n	80071da <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	22ff      	movs	r2, #255	; 0xff
 80071c4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2203      	movs	r2, #3
 80071ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e037      	b.n	800724a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d0e2      	beq.n	80071ae <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	69fa      	ldr	r2, [r7, #28]
 80071ee:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	689a      	ldr	r2, [r3, #8]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007206:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	689a      	ldr	r2, [r3, #8]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007216:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007218:	4b0e      	ldr	r3, [pc, #56]	; (8007254 <HAL_RTC_SetAlarm_IT+0x274>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a0d      	ldr	r2, [pc, #52]	; (8007254 <HAL_RTC_SetAlarm_IT+0x274>)
 800721e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007222:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007224:	4b0b      	ldr	r3, [pc, #44]	; (8007254 <HAL_RTC_SetAlarm_IT+0x274>)
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	4a0a      	ldr	r2, [pc, #40]	; (8007254 <HAL_RTC_SetAlarm_IT+0x274>)
 800722a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800722e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	22ff      	movs	r2, #255	; 0xff
 8007236:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3724      	adds	r7, #36	; 0x24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd90      	pop	{r4, r7, pc}
 8007252:	bf00      	nop
 8007254:	40010400 	.word	0x40010400

08007258 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007260:	4b1f      	ldr	r3, [pc, #124]	; (80072e0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8007262:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007266:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d012      	beq.n	800729c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00b      	beq.n	800729c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	b2da      	uxtb	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007294:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7f9 fe44 	bl	8000f24 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d012      	beq.n	80072d0 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00b      	beq.n	80072d0 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f462 7220 	orn	r2, r2, #640	; 0x280
 80072c8:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f8dc 	bl	8007488 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80072d8:	bf00      	nop
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	40010400 	.word	0x40010400

080072e4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68da      	ldr	r2, [r3, #12]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80072fa:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80072fc:	f7fc fea8 	bl	8004050 <HAL_GetTick>
 8007300:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007302:	e009      	b.n	8007318 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007304:	f7fc fea4 	bl	8004050 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007312:	d901      	bls.n	8007318 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e007      	b.n	8007328 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	f003 0320 	and.w	r3, r3, #32
 8007322:	2b00      	cmp	r3, #0
 8007324:	d0ee      	beq.n	8007304 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007346:	2b00      	cmp	r3, #0
 8007348:	d120      	bne.n	800738c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f04f 32ff 	mov.w	r2, #4294967295
 8007352:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007354:	f7fc fe7c 	bl	8004050 <HAL_GetTick>
 8007358:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800735a:	e00d      	b.n	8007378 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800735c:	f7fc fe78 	bl	8004050 <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800736a:	d905      	bls.n	8007378 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2203      	movs	r2, #3
 8007374:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007382:	2b00      	cmp	r3, #0
 8007384:	d102      	bne.n	800738c <RTC_EnterInitMode+0x5c>
 8007386:	7bfb      	ldrb	r3, [r7, #15]
 8007388:	2b03      	cmp	r3, #3
 800738a:	d1e7      	bne.n	800735c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800738c:	7bfb      	ldrb	r3, [r7, #15]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
	...

08007398 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80073a4:	4b1a      	ldr	r3, [pc, #104]	; (8007410 <RTC_ExitInitMode+0x78>)
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	4a19      	ldr	r2, [pc, #100]	; (8007410 <RTC_ExitInitMode+0x78>)
 80073aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073ae:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80073b0:	4b17      	ldr	r3, [pc, #92]	; (8007410 <RTC_ExitInitMode+0x78>)
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f003 0320 	and.w	r3, r3, #32
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10c      	bne.n	80073d6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f7ff ff91 	bl	80072e4 <HAL_RTC_WaitForSynchro>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d01e      	beq.n	8007406 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2203      	movs	r2, #3
 80073cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	73fb      	strb	r3, [r7, #15]
 80073d4:	e017      	b.n	8007406 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80073d6:	4b0e      	ldr	r3, [pc, #56]	; (8007410 <RTC_ExitInitMode+0x78>)
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	4a0d      	ldr	r2, [pc, #52]	; (8007410 <RTC_ExitInitMode+0x78>)
 80073dc:	f023 0320 	bic.w	r3, r3, #32
 80073e0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7ff ff7e 	bl	80072e4 <HAL_RTC_WaitForSynchro>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d005      	beq.n	80073fa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2203      	movs	r2, #3
 80073f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80073fa:	4b05      	ldr	r3, [pc, #20]	; (8007410 <RTC_ExitInitMode+0x78>)
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	4a04      	ldr	r2, [pc, #16]	; (8007410 <RTC_ExitInitMode+0x78>)
 8007400:	f043 0320 	orr.w	r3, r3, #32
 8007404:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007406:	7bfb      	ldrb	r3, [r7, #15]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	40002800 	.word	0x40002800

08007414 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	4603      	mov	r3, r0
 800741c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800741e:	2300      	movs	r3, #0
 8007420:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8007422:	79fb      	ldrb	r3, [r7, #7]
 8007424:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8007426:	e005      	b.n	8007434 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	3301      	adds	r3, #1
 800742c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800742e:	7afb      	ldrb	r3, [r7, #11]
 8007430:	3b0a      	subs	r3, #10
 8007432:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007434:	7afb      	ldrb	r3, [r7, #11]
 8007436:	2b09      	cmp	r3, #9
 8007438:	d8f6      	bhi.n	8007428 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	b2db      	uxtb	r3, r3
 800743e:	011b      	lsls	r3, r3, #4
 8007440:	b2da      	uxtb	r2, r3
 8007442:	7afb      	ldrb	r3, [r7, #11]
 8007444:	4313      	orrs	r3, r2
 8007446:	b2db      	uxtb	r3, r3
}
 8007448:	4618      	mov	r0, r3
 800744a:	3714      	adds	r7, #20
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	4603      	mov	r3, r0
 800745c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800745e:	79fb      	ldrb	r3, [r7, #7]
 8007460:	091b      	lsrs	r3, r3, #4
 8007462:	b2db      	uxtb	r3, r3
 8007464:	461a      	mov	r2, r3
 8007466:	0092      	lsls	r2, r2, #2
 8007468:	4413      	add	r3, r2
 800746a:	005b      	lsls	r3, r3, #1
 800746c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800746e:	79fb      	ldrb	r3, [r7, #7]
 8007470:	f003 030f 	and.w	r3, r3, #15
 8007474:	b2da      	uxtb	r2, r3
 8007476:	7bfb      	ldrb	r3, [r7, #15]
 8007478:	4413      	add	r3, r2
 800747a:	b2db      	uxtb	r3, r3
}
 800747c:	4618      	mov	r0, r3
 800747e:	3714      	adds	r7, #20
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e01d      	b.n	80074ea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d106      	bne.n	80074c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7fc fc10 	bl	8003ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3304      	adds	r3, #4
 80074d8:	4619      	mov	r1, r3
 80074da:	4610      	mov	r0, r2
 80074dc:	f000 f956 	bl	800778c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b082      	sub	sp, #8
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e01d      	b.n	8007540 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	d106      	bne.n	800751e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f815 	bl	8007548 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2202      	movs	r2, #2
 8007522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	3304      	adds	r3, #4
 800752e:	4619      	mov	r1, r3
 8007530:	4610      	mov	r0, r2
 8007532:	f000 f92b 	bl	800778c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800756e:	2b01      	cmp	r3, #1
 8007570:	d101      	bne.n	8007576 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007572:	2302      	movs	r3, #2
 8007574:	e105      	b.n	8007782 <HAL_TIM_PWM_ConfigChannel+0x226>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2202      	movs	r2, #2
 8007582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2b14      	cmp	r3, #20
 800758a:	f200 80f0 	bhi.w	800776e <HAL_TIM_PWM_ConfigChannel+0x212>
 800758e:	a201      	add	r2, pc, #4	; (adr r2, 8007594 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007594:	080075e9 	.word	0x080075e9
 8007598:	0800776f 	.word	0x0800776f
 800759c:	0800776f 	.word	0x0800776f
 80075a0:	0800776f 	.word	0x0800776f
 80075a4:	08007629 	.word	0x08007629
 80075a8:	0800776f 	.word	0x0800776f
 80075ac:	0800776f 	.word	0x0800776f
 80075b0:	0800776f 	.word	0x0800776f
 80075b4:	0800766b 	.word	0x0800766b
 80075b8:	0800776f 	.word	0x0800776f
 80075bc:	0800776f 	.word	0x0800776f
 80075c0:	0800776f 	.word	0x0800776f
 80075c4:	080076ab 	.word	0x080076ab
 80075c8:	0800776f 	.word	0x0800776f
 80075cc:	0800776f 	.word	0x0800776f
 80075d0:	0800776f 	.word	0x0800776f
 80075d4:	080076ed 	.word	0x080076ed
 80075d8:	0800776f 	.word	0x0800776f
 80075dc:	0800776f 	.word	0x0800776f
 80075e0:	0800776f 	.word	0x0800776f
 80075e4:	0800772d 	.word	0x0800772d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68b9      	ldr	r1, [r7, #8]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 f930 	bl	8007854 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	699a      	ldr	r2, [r3, #24]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f042 0208 	orr.w	r2, r2, #8
 8007602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	699a      	ldr	r2, [r3, #24]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 0204 	bic.w	r2, r2, #4
 8007612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6999      	ldr	r1, [r3, #24]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	691a      	ldr	r2, [r3, #16]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	430a      	orrs	r2, r1
 8007624:	619a      	str	r2, [r3, #24]
      break;
 8007626:	e0a3      	b.n	8007770 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68b9      	ldr	r1, [r7, #8]
 800762e:	4618      	mov	r0, r3
 8007630:	f000 f98c 	bl	800794c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	699a      	ldr	r2, [r3, #24]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	699a      	ldr	r2, [r3, #24]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6999      	ldr	r1, [r3, #24]
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	021a      	lsls	r2, r3, #8
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	430a      	orrs	r2, r1
 8007666:	619a      	str	r2, [r3, #24]
      break;
 8007668:	e082      	b.n	8007770 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68b9      	ldr	r1, [r7, #8]
 8007670:	4618      	mov	r0, r3
 8007672:	f000 f9e5 	bl	8007a40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	69da      	ldr	r2, [r3, #28]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f042 0208 	orr.w	r2, r2, #8
 8007684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	69da      	ldr	r2, [r3, #28]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f022 0204 	bic.w	r2, r2, #4
 8007694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	69d9      	ldr	r1, [r3, #28]
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	691a      	ldr	r2, [r3, #16]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	430a      	orrs	r2, r1
 80076a6:	61da      	str	r2, [r3, #28]
      break;
 80076a8:	e062      	b.n	8007770 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68b9      	ldr	r1, [r7, #8]
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 fa3d 	bl	8007b30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	69da      	ldr	r2, [r3, #28]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	69da      	ldr	r2, [r3, #28]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69d9      	ldr	r1, [r3, #28]
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	021a      	lsls	r2, r3, #8
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	61da      	str	r2, [r3, #28]
      break;
 80076ea:	e041      	b.n	8007770 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68b9      	ldr	r1, [r7, #8]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 fa7a 	bl	8007bec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f042 0208 	orr.w	r2, r2, #8
 8007706:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f022 0204 	bic.w	r2, r2, #4
 8007716:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	691a      	ldr	r2, [r3, #16]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	430a      	orrs	r2, r1
 8007728:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800772a:	e021      	b.n	8007770 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68b9      	ldr	r1, [r7, #8]
 8007732:	4618      	mov	r0, r3
 8007734:	f000 fab2 	bl	8007c9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007746:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007756:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	021a      	lsls	r2, r3, #8
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	430a      	orrs	r2, r1
 800776a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800776c:	e000      	b.n	8007770 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800776e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop

0800778c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a2a      	ldr	r2, [pc, #168]	; (8007848 <TIM_Base_SetConfig+0xbc>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d003      	beq.n	80077ac <TIM_Base_SetConfig+0x20>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077aa:	d108      	bne.n	80077be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a21      	ldr	r2, [pc, #132]	; (8007848 <TIM_Base_SetConfig+0xbc>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d00b      	beq.n	80077de <TIM_Base_SetConfig+0x52>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077cc:	d007      	beq.n	80077de <TIM_Base_SetConfig+0x52>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a1e      	ldr	r2, [pc, #120]	; (800784c <TIM_Base_SetConfig+0xc0>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d003      	beq.n	80077de <TIM_Base_SetConfig+0x52>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a1d      	ldr	r2, [pc, #116]	; (8007850 <TIM_Base_SetConfig+0xc4>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d108      	bne.n	80077f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	689a      	ldr	r2, [r3, #8]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a0c      	ldr	r2, [pc, #48]	; (8007848 <TIM_Base_SetConfig+0xbc>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d007      	beq.n	800782c <TIM_Base_SetConfig+0xa0>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a0b      	ldr	r2, [pc, #44]	; (800784c <TIM_Base_SetConfig+0xc0>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d003      	beq.n	800782c <TIM_Base_SetConfig+0xa0>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a0a      	ldr	r2, [pc, #40]	; (8007850 <TIM_Base_SetConfig+0xc4>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d103      	bne.n	8007834 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	691a      	ldr	r2, [r3, #16]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	615a      	str	r2, [r3, #20]
}
 800783a:	bf00      	nop
 800783c:	3714      	adds	r7, #20
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	40012c00 	.word	0x40012c00
 800784c:	40014000 	.word	0x40014000
 8007850:	40014400 	.word	0x40014400

08007854 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007854:	b480      	push	{r7}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	f023 0201 	bic.w	r2, r3, #1
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f023 0303 	bic.w	r3, r3, #3
 800788e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	4313      	orrs	r3, r2
 8007898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	f023 0302 	bic.w	r3, r3, #2
 80078a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a24      	ldr	r2, [pc, #144]	; (8007940 <TIM_OC1_SetConfig+0xec>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d007      	beq.n	80078c4 <TIM_OC1_SetConfig+0x70>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a23      	ldr	r2, [pc, #140]	; (8007944 <TIM_OC1_SetConfig+0xf0>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d003      	beq.n	80078c4 <TIM_OC1_SetConfig+0x70>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a22      	ldr	r2, [pc, #136]	; (8007948 <TIM_OC1_SetConfig+0xf4>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d10c      	bne.n	80078de <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	f023 0308 	bic.w	r3, r3, #8
 80078ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	697a      	ldr	r2, [r7, #20]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	f023 0304 	bic.w	r3, r3, #4
 80078dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a17      	ldr	r2, [pc, #92]	; (8007940 <TIM_OC1_SetConfig+0xec>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d007      	beq.n	80078f6 <TIM_OC1_SetConfig+0xa2>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a16      	ldr	r2, [pc, #88]	; (8007944 <TIM_OC1_SetConfig+0xf0>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d003      	beq.n	80078f6 <TIM_OC1_SetConfig+0xa2>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a15      	ldr	r2, [pc, #84]	; (8007948 <TIM_OC1_SetConfig+0xf4>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d111      	bne.n	800791a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	4313      	orrs	r3, r2
 800790e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	4313      	orrs	r3, r2
 8007918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	685a      	ldr	r2, [r3, #4]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	621a      	str	r2, [r3, #32]
}
 8007934:	bf00      	nop
 8007936:	371c      	adds	r7, #28
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	40012c00 	.word	0x40012c00
 8007944:	40014000 	.word	0x40014000
 8007948:	40014400 	.word	0x40014400

0800794c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	f023 0210 	bic.w	r2, r3, #16
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800797a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800797e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	021b      	lsls	r3, r3, #8
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	4313      	orrs	r3, r2
 8007992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f023 0320 	bic.w	r3, r3, #32
 800799a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	011b      	lsls	r3, r3, #4
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a22      	ldr	r2, [pc, #136]	; (8007a34 <TIM_OC2_SetConfig+0xe8>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d10d      	bne.n	80079cc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	011b      	lsls	r3, r3, #4
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a19      	ldr	r2, [pc, #100]	; (8007a34 <TIM_OC2_SetConfig+0xe8>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d007      	beq.n	80079e4 <TIM_OC2_SetConfig+0x98>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a18      	ldr	r2, [pc, #96]	; (8007a38 <TIM_OC2_SetConfig+0xec>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d003      	beq.n	80079e4 <TIM_OC2_SetConfig+0x98>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a17      	ldr	r2, [pc, #92]	; (8007a3c <TIM_OC2_SetConfig+0xf0>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d113      	bne.n	8007a0c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	697a      	ldr	r2, [r7, #20]
 8007a24:	621a      	str	r2, [r3, #32]
}
 8007a26:	bf00      	nop
 8007a28:	371c      	adds	r7, #28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	40012c00 	.word	0x40012c00
 8007a38:	40014000 	.word	0x40014000
 8007a3c:	40014400 	.word	0x40014400

08007a40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a1b      	ldr	r3, [r3, #32]
 8007a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	69db      	ldr	r3, [r3, #28]
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f023 0303 	bic.w	r3, r3, #3
 8007a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	021b      	lsls	r3, r3, #8
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a21      	ldr	r2, [pc, #132]	; (8007b24 <TIM_OC3_SetConfig+0xe4>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d10d      	bne.n	8007abe <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007aa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	021b      	lsls	r3, r3, #8
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a18      	ldr	r2, [pc, #96]	; (8007b24 <TIM_OC3_SetConfig+0xe4>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d007      	beq.n	8007ad6 <TIM_OC3_SetConfig+0x96>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a17      	ldr	r2, [pc, #92]	; (8007b28 <TIM_OC3_SetConfig+0xe8>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d003      	beq.n	8007ad6 <TIM_OC3_SetConfig+0x96>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a16      	ldr	r2, [pc, #88]	; (8007b2c <TIM_OC3_SetConfig+0xec>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d113      	bne.n	8007afe <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	011b      	lsls	r3, r3, #4
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	011b      	lsls	r3, r3, #4
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	621a      	str	r2, [r3, #32]
}
 8007b18:	bf00      	nop
 8007b1a:	371c      	adds	r7, #28
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	40012c00 	.word	0x40012c00
 8007b28:	40014000 	.word	0x40014000
 8007b2c:	40014400 	.word	0x40014400

08007b30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b087      	sub	sp, #28
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a1b      	ldr	r3, [r3, #32]
 8007b3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	69db      	ldr	r3, [r3, #28]
 8007b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	021b      	lsls	r3, r3, #8
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	031b      	lsls	r3, r3, #12
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a14      	ldr	r2, [pc, #80]	; (8007be0 <TIM_OC4_SetConfig+0xb0>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d007      	beq.n	8007ba4 <TIM_OC4_SetConfig+0x74>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a13      	ldr	r2, [pc, #76]	; (8007be4 <TIM_OC4_SetConfig+0xb4>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d003      	beq.n	8007ba4 <TIM_OC4_SetConfig+0x74>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a12      	ldr	r2, [pc, #72]	; (8007be8 <TIM_OC4_SetConfig+0xb8>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d109      	bne.n	8007bb8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007baa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	019b      	lsls	r3, r3, #6
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	621a      	str	r2, [r3, #32]
}
 8007bd2:	bf00      	nop
 8007bd4:	371c      	adds	r7, #28
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	40012c00 	.word	0x40012c00
 8007be4:	40014000 	.word	0x40014000
 8007be8:	40014400 	.word	0x40014400

08007bec <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b087      	sub	sp, #28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	041b      	lsls	r3, r3, #16
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a13      	ldr	r2, [pc, #76]	; (8007c90 <TIM_OC5_SetConfig+0xa4>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d007      	beq.n	8007c56 <TIM_OC5_SetConfig+0x6a>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a12      	ldr	r2, [pc, #72]	; (8007c94 <TIM_OC5_SetConfig+0xa8>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d003      	beq.n	8007c56 <TIM_OC5_SetConfig+0x6a>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a11      	ldr	r2, [pc, #68]	; (8007c98 <TIM_OC5_SetConfig+0xac>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d109      	bne.n	8007c6a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	021b      	lsls	r3, r3, #8
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	685a      	ldr	r2, [r3, #4]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	621a      	str	r2, [r3, #32]
}
 8007c84:	bf00      	nop
 8007c86:	371c      	adds	r7, #28
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr
 8007c90:	40012c00 	.word	0x40012c00
 8007c94:	40014000 	.word	0x40014000
 8007c98:	40014400 	.word	0x40014400

08007c9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	021b      	lsls	r3, r3, #8
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ce2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	051b      	lsls	r3, r3, #20
 8007cea:	693a      	ldr	r2, [r7, #16]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a14      	ldr	r2, [pc, #80]	; (8007d44 <TIM_OC6_SetConfig+0xa8>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d007      	beq.n	8007d08 <TIM_OC6_SetConfig+0x6c>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a13      	ldr	r2, [pc, #76]	; (8007d48 <TIM_OC6_SetConfig+0xac>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d003      	beq.n	8007d08 <TIM_OC6_SetConfig+0x6c>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a12      	ldr	r2, [pc, #72]	; (8007d4c <TIM_OC6_SetConfig+0xb0>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d109      	bne.n	8007d1c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	695b      	ldr	r3, [r3, #20]
 8007d14:	029b      	lsls	r3, r3, #10
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	621a      	str	r2, [r3, #32]
}
 8007d36:	bf00      	nop
 8007d38:	371c      	adds	r7, #28
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	40012c00 	.word	0x40012c00
 8007d48:	40014000 	.word	0x40014000
 8007d4c:	40014400 	.word	0x40014400

08007d50 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2204      	movs	r2, #4
 8007d60:	6839      	ldr	r1, [r7, #0]
 8007d62:	4618      	mov	r0, r3
 8007d64:	f000 f8de 	bl	8007f24 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d76:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689a      	ldr	r2, [r3, #8]
 8007d7e:	4b0b      	ldr	r3, [pc, #44]	; (8007dac <HAL_TIMEx_PWMN_Start+0x5c>)
 8007d80:	4013      	ands	r3, r2
 8007d82:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2b06      	cmp	r3, #6
 8007d88:	d00b      	beq.n	8007da2 <HAL_TIMEx_PWMN_Start+0x52>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d90:	d007      	beq.n	8007da2 <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f042 0201 	orr.w	r2, r2, #1
 8007da0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	00010007 	.word	0x00010007

08007db0 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 f8ae 	bl	8007f24 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6a1a      	ldr	r2, [r3, #32]
 8007dce:	f241 1311 	movw	r3, #4369	; 0x1111
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10f      	bne.n	8007df8 <HAL_TIMEx_PWMN_Stop+0x48>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6a1a      	ldr	r2, [r3, #32]
 8007dde:	f240 4344 	movw	r3, #1092	; 0x444
 8007de2:	4013      	ands	r3, r2
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d107      	bne.n	8007df8 <HAL_TIMEx_PWMN_Stop+0x48>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007df6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6a1a      	ldr	r2, [r3, #32]
 8007dfe:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e02:	4013      	ands	r3, r2
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10f      	bne.n	8007e28 <HAL_TIMEx_PWMN_Stop+0x78>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6a1a      	ldr	r2, [r3, #32]
 8007e0e:	f240 4344 	movw	r3, #1092	; 0x444
 8007e12:	4013      	ands	r3, r2
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d107      	bne.n	8007e28 <HAL_TIMEx_PWMN_Stop+0x78>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f022 0201 	bic.w	r2, r2, #1
 8007e26:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
	...

08007e34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d101      	bne.n	8007e50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	e060      	b.n	8007f12 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	695b      	ldr	r3, [r3, #20]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	699b      	ldr	r3, [r3, #24]
 8007ec4:	041b      	lsls	r3, r3, #16
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a14      	ldr	r2, [pc, #80]	; (8007f20 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d115      	bne.n	8007f00 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ede:	051b      	lsls	r3, r3, #20
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	6a1b      	ldr	r3, [r3, #32]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	40012c00 	.word	0x40012c00

08007f24 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b087      	sub	sp, #28
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	f003 031f 	and.w	r3, r3, #31
 8007f36:	2204      	movs	r2, #4
 8007f38:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6a1a      	ldr	r2, [r3, #32]
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	43db      	mvns	r3, r3
 8007f46:	401a      	ands	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6a1a      	ldr	r2, [r3, #32]
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	f003 031f 	and.w	r3, r3, #31
 8007f56:	6879      	ldr	r1, [r7, #4]
 8007f58:	fa01 f303 	lsl.w	r3, r1, r3
 8007f5c:	431a      	orrs	r2, r3
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	621a      	str	r2, [r3, #32]
}
 8007f62:	bf00      	nop
 8007f64:	371c      	adds	r7, #28
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b082      	sub	sp, #8
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e040      	b.n	8008002 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d106      	bne.n	8007f96 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f7fb fe03 	bl	8003b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2224      	movs	r2, #36	; 0x24
 8007f9a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f022 0201 	bic.w	r2, r2, #1
 8007faa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fb7d 	bl	80086ac <UART_SetConfig>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d101      	bne.n	8007fbc <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e022      	b.n	8008002 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d002      	beq.n	8007fca <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fe57 	bl	8008c78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fd8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	689a      	ldr	r2, [r3, #8]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fe8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f042 0201 	orr.w	r2, r2, #1
 8007ff8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fede 	bl	8008dbc <UART_CheckIdleState>
 8008000:	4603      	mov	r3, r0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b08a      	sub	sp, #40	; 0x28
 800800e:	af02      	add	r7, sp, #8
 8008010:	60f8      	str	r0, [r7, #12]
 8008012:	60b9      	str	r1, [r7, #8]
 8008014:	603b      	str	r3, [r7, #0]
 8008016:	4613      	mov	r3, r2
 8008018:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800801e:	2b20      	cmp	r3, #32
 8008020:	f040 8081 	bne.w	8008126 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d002      	beq.n	8008030 <HAL_UART_Transmit+0x26>
 800802a:	88fb      	ldrh	r3, [r7, #6]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d101      	bne.n	8008034 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	e079      	b.n	8008128 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800803a:	2b01      	cmp	r3, #1
 800803c:	d101      	bne.n	8008042 <HAL_UART_Transmit+0x38>
 800803e:	2302      	movs	r3, #2
 8008040:	e072      	b.n	8008128 <HAL_UART_Transmit+0x11e>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2221      	movs	r2, #33	; 0x21
 8008054:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008056:	f7fb fffb 	bl	8004050 <HAL_GetTick>
 800805a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	88fa      	ldrh	r2, [r7, #6]
 8008060:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	88fa      	ldrh	r2, [r7, #6]
 8008068:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008074:	d108      	bne.n	8008088 <HAL_UART_Transmit+0x7e>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d104      	bne.n	8008088 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800807e:	2300      	movs	r3, #0
 8008080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	61bb      	str	r3, [r7, #24]
 8008086:	e003      	b.n	8008090 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800808c:	2300      	movs	r3, #0
 800808e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8008098:	e02d      	b.n	80080f6 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	2200      	movs	r2, #0
 80080a2:	2180      	movs	r1, #128	; 0x80
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 fece 	bl	8008e46 <UART_WaitOnFlagUntilTimeout>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d001      	beq.n	80080b4 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e039      	b.n	8008128 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10b      	bne.n	80080d2 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	881a      	ldrh	r2, [r3, #0]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080c6:	b292      	uxth	r2, r2
 80080c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	3302      	adds	r3, #2
 80080ce:	61bb      	str	r3, [r7, #24]
 80080d0:	e008      	b.n	80080e4 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	781a      	ldrb	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	b292      	uxth	r2, r2
 80080dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	3301      	adds	r3, #1
 80080e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	3b01      	subs	r3, #1
 80080ee:	b29a      	uxth	r2, r3
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1cb      	bne.n	800809a <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	2200      	movs	r2, #0
 800810a:	2140      	movs	r1, #64	; 0x40
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f000 fe9a 	bl	8008e46 <UART_WaitOnFlagUntilTimeout>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e005      	b.n	8008128 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2220      	movs	r2, #32
 8008120:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8008122:	2300      	movs	r3, #0
 8008124:	e000      	b.n	8008128 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008126:	2302      	movs	r3, #2
  }
}
 8008128:	4618      	mov	r0, r3
 800812a:	3720      	adds	r7, #32
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	4613      	mov	r3, r2
 800813c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008142:	2b20      	cmp	r3, #32
 8008144:	f040 808a 	bne.w	800825c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d002      	beq.n	8008154 <HAL_UART_Receive_IT+0x24>
 800814e:	88fb      	ldrh	r3, [r7, #6]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e082      	b.n	800825e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800815e:	2b01      	cmp	r3, #1
 8008160:	d101      	bne.n	8008166 <HAL_UART_Receive_IT+0x36>
 8008162:	2302      	movs	r3, #2
 8008164:	e07b      	b.n	800825e <HAL_UART_Receive_IT+0x12e>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	88fa      	ldrh	r2, [r7, #6]
 8008178:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	88fa      	ldrh	r2, [r7, #6]
 8008180:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2200      	movs	r2, #0
 8008188:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008192:	d10e      	bne.n	80081b2 <HAL_UART_Receive_IT+0x82>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d105      	bne.n	80081a8 <HAL_UART_Receive_IT+0x78>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80081a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081a6:	e02d      	b.n	8008204 <HAL_UART_Receive_IT+0xd4>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	22ff      	movs	r2, #255	; 0xff
 80081ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081b0:	e028      	b.n	8008204 <HAL_UART_Receive_IT+0xd4>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10d      	bne.n	80081d6 <HAL_UART_Receive_IT+0xa6>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d104      	bne.n	80081cc <HAL_UART_Receive_IT+0x9c>
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	22ff      	movs	r2, #255	; 0xff
 80081c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081ca:	e01b      	b.n	8008204 <HAL_UART_Receive_IT+0xd4>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	227f      	movs	r2, #127	; 0x7f
 80081d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081d4:	e016      	b.n	8008204 <HAL_UART_Receive_IT+0xd4>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081de:	d10d      	bne.n	80081fc <HAL_UART_Receive_IT+0xcc>
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d104      	bne.n	80081f2 <HAL_UART_Receive_IT+0xc2>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	227f      	movs	r2, #127	; 0x7f
 80081ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081f0:	e008      	b.n	8008204 <HAL_UART_Receive_IT+0xd4>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	223f      	movs	r2, #63	; 0x3f
 80081f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081fa:	e003      	b.n	8008204 <HAL_UART_Receive_IT+0xd4>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2222      	movs	r2, #34	; 0x22
 800820e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	689a      	ldr	r2, [r3, #8]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f042 0201 	orr.w	r2, r2, #1
 800821e:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008228:	d107      	bne.n	800823a <HAL_UART_Receive_IT+0x10a>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d103      	bne.n	800823a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	4a0d      	ldr	r2, [pc, #52]	; (800826c <HAL_UART_Receive_IT+0x13c>)
 8008236:	661a      	str	r2, [r3, #96]	; 0x60
 8008238:	e002      	b.n	8008240 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	4a0c      	ldr	r2, [pc, #48]	; (8008270 <HAL_UART_Receive_IT+0x140>)
 800823e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008256:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8008258:	2300      	movs	r3, #0
 800825a:	e000      	b.n	800825e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800825c:	2302      	movs	r3, #2
  }
}
 800825e:	4618      	mov	r0, r3
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	0800915d 	.word	0x0800915d
 8008270:	080090b3 	.word	0x080090b3

08008274 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800827c:	2301      	movs	r3, #1
 800827e:	60fb      	str	r3, [r7, #12]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800828e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	689a      	ldr	r2, [r3, #8]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f022 0201 	bic.w	r2, r2, #1
 800829e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00f      	beq.n	80082c8 <HAL_UART_Abort_IT+0x54>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082b2:	2b80      	cmp	r3, #128	; 0x80
 80082b4:	d104      	bne.n	80082c0 <HAL_UART_Abort_IT+0x4c>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082ba:	4a48      	ldr	r2, [pc, #288]	; (80083dc <HAL_UART_Abort_IT+0x168>)
 80082bc:	639a      	str	r2, [r3, #56]	; 0x38
 80082be:	e003      	b.n	80082c8 <HAL_UART_Abort_IT+0x54>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082c4:	2200      	movs	r2, #0
 80082c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00f      	beq.n	80082f0 <HAL_UART_Abort_IT+0x7c>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082da:	2b40      	cmp	r3, #64	; 0x40
 80082dc:	d104      	bne.n	80082e8 <HAL_UART_Abort_IT+0x74>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082e2:	4a3f      	ldr	r2, [pc, #252]	; (80083e0 <HAL_UART_Abort_IT+0x16c>)
 80082e4:	639a      	str	r2, [r3, #56]	; 0x38
 80082e6:	e003      	b.n	80082f0 <HAL_UART_Abort_IT+0x7c>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ec:	2200      	movs	r2, #0
 80082ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082fa:	2b80      	cmp	r3, #128	; 0x80
 80082fc:	d11a      	bne.n	8008334 <HAL_UART_Abort_IT+0xc0>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	689a      	ldr	r2, [r3, #8]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800830c:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00e      	beq.n	8008334 <HAL_UART_Abort_IT+0xc0>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800831a:	4618      	mov	r0, r3
 800831c:	f7fd f83f 	bl	800539e <HAL_DMA_Abort_IT>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d004      	beq.n	8008330 <HAL_UART_Abort_IT+0xbc>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800832a:	2200      	movs	r2, #0
 800832c:	639a      	str	r2, [r3, #56]	; 0x38
 800832e:	e001      	b.n	8008334 <HAL_UART_Abort_IT+0xc0>
      }
      else
      {
        abortcplt = 0U;
 8008330:	2300      	movs	r3, #0
 8008332:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833e:	2b40      	cmp	r3, #64	; 0x40
 8008340:	d11c      	bne.n	800837c <HAL_UART_Abort_IT+0x108>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	689a      	ldr	r2, [r3, #8]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008350:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008356:	2b00      	cmp	r3, #0
 8008358:	d010      	beq.n	800837c <HAL_UART_Abort_IT+0x108>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800835e:	4618      	mov	r0, r3
 8008360:	f7fd f81d 	bl	800539e <HAL_DMA_Abort_IT>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d006      	beq.n	8008378 <HAL_UART_Abort_IT+0x104>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800836e:	2200      	movs	r2, #0
 8008370:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 8008372:	2301      	movs	r3, #1
 8008374:	60fb      	str	r3, [r7, #12]
 8008376:	e001      	b.n	800837c <HAL_UART_Abort_IT+0x108>
      }
      else
      {
        abortcplt = 0U;
 8008378:	2300      	movs	r3, #0
 800837a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d127      	bne.n	80083d2 <HAL_UART_Abort_IT+0x15e>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->RxXferCount = 0U;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	661a      	str	r2, [r3, #96]	; 0x60
    huart->TxISR = NULL;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	665a      	str	r2, [r3, #100]	; 0x64

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	220f      	movs	r2, #15
 80083aa:	621a      	str	r2, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	8b1b      	ldrh	r3, [r3, #24]
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f042 0208 	orr.w	r2, r2, #8
 80083bc:	b292      	uxth	r2, r2
 80083be:	831a      	strh	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2220      	movs	r2, #32
 80083c4:	675a      	str	r2, [r3, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_READY;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2220      	movs	r2, #32
 80083ca:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f963 	bl	8008698 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	08008fa9 	.word	0x08008fa9
 80083e0:	0800900b 	.word	0x0800900b

080083e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b088      	sub	sp, #32
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008404:	69fa      	ldr	r2, [r7, #28]
 8008406:	f640 030f 	movw	r3, #2063	; 0x80f
 800840a:	4013      	ands	r3, r2
 800840c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d113      	bne.n	800843c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	f003 0320 	and.w	r3, r3, #32
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00e      	beq.n	800843c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	f003 0320 	and.w	r3, r3, #32
 8008424:	2b00      	cmp	r3, #0
 8008426:	d009      	beq.n	800843c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800842c:	2b00      	cmp	r3, #0
 800842e:	f000 8114 	beq.w	800865a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	4798      	blx	r3
      }
      return;
 800843a:	e10e      	b.n	800865a <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	2b00      	cmp	r3, #0
 8008440:	f000 80d6 	beq.w	80085f0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	2b00      	cmp	r3, #0
 800844c:	d105      	bne.n	800845a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008454:	2b00      	cmp	r3, #0
 8008456:	f000 80cb 	beq.w	80085f0 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	f003 0301 	and.w	r3, r3, #1
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00e      	beq.n	8008482 <HAL_UART_IRQHandler+0x9e>
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800846a:	2b00      	cmp	r3, #0
 800846c:	d009      	beq.n	8008482 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2201      	movs	r2, #1
 8008474:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800847a:	f043 0201 	orr.w	r2, r3, #1
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	f003 0302 	and.w	r3, r3, #2
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00e      	beq.n	80084aa <HAL_UART_IRQHandler+0xc6>
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	d009      	beq.n	80084aa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2202      	movs	r2, #2
 800849c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084a2:	f043 0204 	orr.w	r2, r3, #4
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	f003 0304 	and.w	r3, r3, #4
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00e      	beq.n	80084d2 <HAL_UART_IRQHandler+0xee>
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	f003 0301 	and.w	r3, r3, #1
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d009      	beq.n	80084d2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2204      	movs	r2, #4
 80084c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ca:	f043 0202 	orr.w	r2, r3, #2
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	f003 0308 	and.w	r3, r3, #8
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d013      	beq.n	8008504 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	f003 0320 	and.w	r3, r3, #32
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d104      	bne.n	80084f0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d009      	beq.n	8008504 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2208      	movs	r2, #8
 80084f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084fc:	f043 0208 	orr.w	r2, r3, #8
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00f      	beq.n	800852e <HAL_UART_IRQHandler+0x14a>
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00a      	beq.n	800852e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008520:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008526:	f043 0220 	orr.w	r2, r3, #32
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008532:	2b00      	cmp	r3, #0
 8008534:	f000 8093 	beq.w	800865e <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	f003 0320 	and.w	r3, r3, #32
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00c      	beq.n	800855c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	f003 0320 	and.w	r3, r3, #32
 8008548:	2b00      	cmp	r3, #0
 800854a:	d007      	beq.n	800855c <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008550:	2b00      	cmp	r3, #0
 8008552:	d003      	beq.n	800855c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008560:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800856c:	2b40      	cmp	r3, #64	; 0x40
 800856e:	d004      	beq.n	800857a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008576:	2b00      	cmp	r3, #0
 8008578:	d031      	beq.n	80085de <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fcde 	bl	8008f3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800858a:	2b40      	cmp	r3, #64	; 0x40
 800858c:	d123      	bne.n	80085d6 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	689a      	ldr	r2, [r3, #8]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800859c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d013      	beq.n	80085ce <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085aa:	4a30      	ldr	r2, [pc, #192]	; (800866c <HAL_UART_IRQHandler+0x288>)
 80085ac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7fc fef3 	bl	800539e <HAL_DMA_Abort_IT>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d016      	beq.n	80085ec <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80085c8:	4610      	mov	r0, r2
 80085ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085cc:	e00e      	b.n	80085ec <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f858 	bl	8008684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085d4:	e00a      	b.n	80085ec <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f854 	bl	8008684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085dc:	e006      	b.n	80085ec <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f850 	bl	8008684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80085ea:	e038      	b.n	800865e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085ec:	bf00      	nop
    return;
 80085ee:	e036      	b.n	800865e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00d      	beq.n	8008616 <HAL_UART_IRQHandler+0x232>
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008600:	2b00      	cmp	r3, #0
 8008602:	d008      	beq.n	8008616 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800860c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fdf9 	bl	8009206 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008614:	e026      	b.n	8008664 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00d      	beq.n	800863c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008626:	2b00      	cmp	r3, #0
 8008628:	d008      	beq.n	800863c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800862e:	2b00      	cmp	r3, #0
 8008630:	d017      	beq.n	8008662 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	4798      	blx	r3
    }
    return;
 800863a:	e012      	b.n	8008662 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00e      	beq.n	8008664 <HAL_UART_IRQHandler+0x280>
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800864c:	2b00      	cmp	r3, #0
 800864e:	d009      	beq.n	8008664 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fd15 	bl	8009080 <UART_EndTransmit_IT>
    return;
 8008656:	bf00      	nop
 8008658:	e004      	b.n	8008664 <HAL_UART_IRQHandler+0x280>
      return;
 800865a:	bf00      	nop
 800865c:	e002      	b.n	8008664 <HAL_UART_IRQHandler+0x280>
    return;
 800865e:	bf00      	nop
 8008660:	e000      	b.n	8008664 <HAL_UART_IRQHandler+0x280>
    return;
 8008662:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008664:	3720      	adds	r7, #32
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	08008f7d 	.word	0x08008f7d

08008670 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800868c:	bf00      	nop
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80086a0:	bf00      	nop
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086ac:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80086b0:	b08a      	sub	sp, #40	; 0x28
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80086b6:	2300      	movs	r3, #0
 80086b8:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80086be:	2300      	movs	r3, #0
 80086c0:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	689a      	ldr	r2, [r3, #8]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	431a      	orrs	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	431a      	orrs	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	69db      	ldr	r3, [r3, #28]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	4bb3      	ldr	r3, [pc, #716]	; (80089b0 <UART_SetConfig+0x304>)
 80086e2:	4013      	ands	r3, r2
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	6812      	ldr	r2, [r2, #0]
 80086e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086ea:	430b      	orrs	r3, r1
 80086ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	68da      	ldr	r2, [r3, #12]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	430a      	orrs	r2, r1
 8008702:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4aa9      	ldr	r2, [pc, #676]	; (80089b4 <UART_SetConfig+0x308>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d004      	beq.n	800871e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a1b      	ldr	r3, [r3, #32]
 8008718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800871a:	4313      	orrs	r3, r2
 800871c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800872e:	430a      	orrs	r2, r1
 8008730:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4aa0      	ldr	r2, [pc, #640]	; (80089b8 <UART_SetConfig+0x30c>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d126      	bne.n	800878a <UART_SetConfig+0xde>
 800873c:	4b9f      	ldr	r3, [pc, #636]	; (80089bc <UART_SetConfig+0x310>)
 800873e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008742:	f003 0303 	and.w	r3, r3, #3
 8008746:	2b03      	cmp	r3, #3
 8008748:	d81a      	bhi.n	8008780 <UART_SetConfig+0xd4>
 800874a:	a201      	add	r2, pc, #4	; (adr r2, 8008750 <UART_SetConfig+0xa4>)
 800874c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008750:	08008761 	.word	0x08008761
 8008754:	08008771 	.word	0x08008771
 8008758:	08008769 	.word	0x08008769
 800875c:	08008779 	.word	0x08008779
 8008760:	2301      	movs	r3, #1
 8008762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008766:	e080      	b.n	800886a <UART_SetConfig+0x1be>
 8008768:	2302      	movs	r3, #2
 800876a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800876e:	e07c      	b.n	800886a <UART_SetConfig+0x1be>
 8008770:	2304      	movs	r3, #4
 8008772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008776:	e078      	b.n	800886a <UART_SetConfig+0x1be>
 8008778:	2308      	movs	r3, #8
 800877a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800877e:	e074      	b.n	800886a <UART_SetConfig+0x1be>
 8008780:	2310      	movs	r3, #16
 8008782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008786:	bf00      	nop
 8008788:	e06f      	b.n	800886a <UART_SetConfig+0x1be>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a8c      	ldr	r2, [pc, #560]	; (80089c0 <UART_SetConfig+0x314>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d138      	bne.n	8008806 <UART_SetConfig+0x15a>
 8008794:	4b89      	ldr	r3, [pc, #548]	; (80089bc <UART_SetConfig+0x310>)
 8008796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800879a:	f003 030c 	and.w	r3, r3, #12
 800879e:	2b0c      	cmp	r3, #12
 80087a0:	d82c      	bhi.n	80087fc <UART_SetConfig+0x150>
 80087a2:	a201      	add	r2, pc, #4	; (adr r2, 80087a8 <UART_SetConfig+0xfc>)
 80087a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a8:	080087dd 	.word	0x080087dd
 80087ac:	080087fd 	.word	0x080087fd
 80087b0:	080087fd 	.word	0x080087fd
 80087b4:	080087fd 	.word	0x080087fd
 80087b8:	080087ed 	.word	0x080087ed
 80087bc:	080087fd 	.word	0x080087fd
 80087c0:	080087fd 	.word	0x080087fd
 80087c4:	080087fd 	.word	0x080087fd
 80087c8:	080087e5 	.word	0x080087e5
 80087cc:	080087fd 	.word	0x080087fd
 80087d0:	080087fd 	.word	0x080087fd
 80087d4:	080087fd 	.word	0x080087fd
 80087d8:	080087f5 	.word	0x080087f5
 80087dc:	2300      	movs	r3, #0
 80087de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087e2:	e042      	b.n	800886a <UART_SetConfig+0x1be>
 80087e4:	2302      	movs	r3, #2
 80087e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087ea:	e03e      	b.n	800886a <UART_SetConfig+0x1be>
 80087ec:	2304      	movs	r3, #4
 80087ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087f2:	e03a      	b.n	800886a <UART_SetConfig+0x1be>
 80087f4:	2308      	movs	r3, #8
 80087f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087fa:	e036      	b.n	800886a <UART_SetConfig+0x1be>
 80087fc:	2310      	movs	r3, #16
 80087fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008802:	bf00      	nop
 8008804:	e031      	b.n	800886a <UART_SetConfig+0x1be>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a6a      	ldr	r2, [pc, #424]	; (80089b4 <UART_SetConfig+0x308>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d129      	bne.n	8008864 <UART_SetConfig+0x1b8>
 8008810:	4b6a      	ldr	r3, [pc, #424]	; (80089bc <UART_SetConfig+0x310>)
 8008812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008816:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800881a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800881e:	d014      	beq.n	800884a <UART_SetConfig+0x19e>
 8008820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008824:	d802      	bhi.n	800882c <UART_SetConfig+0x180>
 8008826:	2b00      	cmp	r3, #0
 8008828:	d007      	beq.n	800883a <UART_SetConfig+0x18e>
 800882a:	e016      	b.n	800885a <UART_SetConfig+0x1ae>
 800882c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008830:	d007      	beq.n	8008842 <UART_SetConfig+0x196>
 8008832:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008836:	d00c      	beq.n	8008852 <UART_SetConfig+0x1a6>
 8008838:	e00f      	b.n	800885a <UART_SetConfig+0x1ae>
 800883a:	2300      	movs	r3, #0
 800883c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008840:	e013      	b.n	800886a <UART_SetConfig+0x1be>
 8008842:	2302      	movs	r3, #2
 8008844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008848:	e00f      	b.n	800886a <UART_SetConfig+0x1be>
 800884a:	2304      	movs	r3, #4
 800884c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008850:	e00b      	b.n	800886a <UART_SetConfig+0x1be>
 8008852:	2308      	movs	r3, #8
 8008854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008858:	e007      	b.n	800886a <UART_SetConfig+0x1be>
 800885a:	2310      	movs	r3, #16
 800885c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008860:	bf00      	nop
 8008862:	e002      	b.n	800886a <UART_SetConfig+0x1be>
 8008864:	2310      	movs	r3, #16
 8008866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a51      	ldr	r2, [pc, #324]	; (80089b4 <UART_SetConfig+0x308>)
 8008870:	4293      	cmp	r3, r2
 8008872:	f040 80fa 	bne.w	8008a6a <UART_SetConfig+0x3be>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008876:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800887a:	2b08      	cmp	r3, #8
 800887c:	d823      	bhi.n	80088c6 <UART_SetConfig+0x21a>
 800887e:	a201      	add	r2, pc, #4	; (adr r2, 8008884 <UART_SetConfig+0x1d8>)
 8008880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008884:	080088a9 	.word	0x080088a9
 8008888:	080088c7 	.word	0x080088c7
 800888c:	080088b1 	.word	0x080088b1
 8008890:	080088c7 	.word	0x080088c7
 8008894:	080088b7 	.word	0x080088b7
 8008898:	080088c7 	.word	0x080088c7
 800889c:	080088c7 	.word	0x080088c7
 80088a0:	080088c7 	.word	0x080088c7
 80088a4:	080088bf 	.word	0x080088bf
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80088a8:	f7fd fde4 	bl	8006474 <HAL_RCC_GetPCLK1Freq>
 80088ac:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80088ae:	e00d      	b.n	80088cc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80088b0:	4b44      	ldr	r3, [pc, #272]	; (80089c4 <UART_SetConfig+0x318>)
 80088b2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80088b4:	e00a      	b.n	80088cc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80088b6:	f7fd fd47 	bl	8006348 <HAL_RCC_GetSysClockFreq>
 80088ba:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80088bc:	e006      	b.n	80088cc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80088be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088c2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80088c4:	e002      	b.n	80088cc <UART_SetConfig+0x220>
      default:
        ret = HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	76fb      	strb	r3, [r7, #27]
        break;
 80088ca:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	f000 81c6 	beq.w	8008c60 <UART_SetConfig+0x5b4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685a      	ldr	r2, [r3, #4]
 80088d8:	4613      	mov	r3, r2
 80088da:	005b      	lsls	r3, r3, #1
 80088dc:	4413      	add	r3, r2
 80088de:	697a      	ldr	r2, [r7, #20]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d305      	bcc.n	80088f0 <UART_SetConfig+0x244>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d902      	bls.n	80088f6 <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	76fb      	strb	r3, [r7, #27]
 80088f4:	e1b4      	b.n	8008c60 <UART_SetConfig+0x5b4>
      }
      else
      {
        switch (clocksource)
 80088f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088fa:	2b08      	cmp	r3, #8
 80088fc:	f200 80a2 	bhi.w	8008a44 <UART_SetConfig+0x398>
 8008900:	a201      	add	r2, pc, #4	; (adr r2, 8008908 <UART_SetConfig+0x25c>)
 8008902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008906:	bf00      	nop
 8008908:	0800892d 	.word	0x0800892d
 800890c:	08008a45 	.word	0x08008a45
 8008910:	0800897b 	.word	0x0800897b
 8008914:	08008a45 	.word	0x08008a45
 8008918:	080089cd 	.word	0x080089cd
 800891c:	08008a45 	.word	0x08008a45
 8008920:	08008a45 	.word	0x08008a45
 8008924:	08008a45 	.word	0x08008a45
 8008928:	08008a1b 	.word	0x08008a1b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800892c:	f7fd fda2 	bl	8006474 <HAL_RCC_GetPCLK1Freq>
 8008930:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	4619      	mov	r1, r3
 8008936:	f04f 0200 	mov.w	r2, #0
 800893a:	f04f 0300 	mov.w	r3, #0
 800893e:	f04f 0400 	mov.w	r4, #0
 8008942:	0214      	lsls	r4, r2, #8
 8008944:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008948:	020b      	lsls	r3, r1, #8
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	6852      	ldr	r2, [r2, #4]
 800894e:	0852      	lsrs	r2, r2, #1
 8008950:	4611      	mov	r1, r2
 8008952:	f04f 0200 	mov.w	r2, #0
 8008956:	eb13 0b01 	adds.w	fp, r3, r1
 800895a:	eb44 0c02 	adc.w	ip, r4, r2
 800895e:	4658      	mov	r0, fp
 8008960:	4661      	mov	r1, ip
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	f04f 0400 	mov.w	r4, #0
 800896a:	461a      	mov	r2, r3
 800896c:	4623      	mov	r3, r4
 800896e:	f7f8 f93b 	bl	8000be8 <__aeabi_uldivmod>
 8008972:	4603      	mov	r3, r0
 8008974:	460c      	mov	r4, r1
 8008976:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8008978:	e067      	b.n	8008a4a <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	085b      	lsrs	r3, r3, #1
 8008980:	f04f 0400 	mov.w	r4, #0
 8008984:	4910      	ldr	r1, [pc, #64]	; (80089c8 <UART_SetConfig+0x31c>)
 8008986:	f04f 0200 	mov.w	r2, #0
 800898a:	eb13 0b01 	adds.w	fp, r3, r1
 800898e:	eb44 0c02 	adc.w	ip, r4, r2
 8008992:	4658      	mov	r0, fp
 8008994:	4661      	mov	r1, ip
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	f04f 0400 	mov.w	r4, #0
 800899e:	461a      	mov	r2, r3
 80089a0:	4623      	mov	r3, r4
 80089a2:	f7f8 f921 	bl	8000be8 <__aeabi_uldivmod>
 80089a6:	4603      	mov	r3, r0
 80089a8:	460c      	mov	r4, r1
 80089aa:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80089ac:	e04d      	b.n	8008a4a <UART_SetConfig+0x39e>
 80089ae:	bf00      	nop
 80089b0:	efff69f3 	.word	0xefff69f3
 80089b4:	40008000 	.word	0x40008000
 80089b8:	40013800 	.word	0x40013800
 80089bc:	40021000 	.word	0x40021000
 80089c0:	40004400 	.word	0x40004400
 80089c4:	00f42400 	.word	0x00f42400
 80089c8:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80089cc:	f7fd fcbc 	bl	8006348 <HAL_RCC_GetSysClockFreq>
 80089d0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	4619      	mov	r1, r3
 80089d6:	f04f 0200 	mov.w	r2, #0
 80089da:	f04f 0300 	mov.w	r3, #0
 80089de:	f04f 0400 	mov.w	r4, #0
 80089e2:	0214      	lsls	r4, r2, #8
 80089e4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80089e8:	020b      	lsls	r3, r1, #8
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	6852      	ldr	r2, [r2, #4]
 80089ee:	0852      	lsrs	r2, r2, #1
 80089f0:	4611      	mov	r1, r2
 80089f2:	f04f 0200 	mov.w	r2, #0
 80089f6:	eb13 0b01 	adds.w	fp, r3, r1
 80089fa:	eb44 0c02 	adc.w	ip, r4, r2
 80089fe:	4658      	mov	r0, fp
 8008a00:	4661      	mov	r1, ip
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	f04f 0400 	mov.w	r4, #0
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	4623      	mov	r3, r4
 8008a0e:	f7f8 f8eb 	bl	8000be8 <__aeabi_uldivmod>
 8008a12:	4603      	mov	r3, r0
 8008a14:	460c      	mov	r4, r1
 8008a16:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8008a18:	e017      	b.n	8008a4a <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	085b      	lsrs	r3, r3, #1
 8008a20:	f04f 0400 	mov.w	r4, #0
 8008a24:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8008a28:	f144 0100 	adc.w	r1, r4, #0
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	f04f 0400 	mov.w	r4, #0
 8008a34:	461a      	mov	r2, r3
 8008a36:	4623      	mov	r3, r4
 8008a38:	f7f8 f8d6 	bl	8000be8 <__aeabi_uldivmod>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	460c      	mov	r4, r1
 8008a40:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8008a42:	e002      	b.n	8008a4a <UART_SetConfig+0x39e>
          default:
            ret = HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	76fb      	strb	r3, [r7, #27]
            break;
 8008a48:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a50:	d308      	bcc.n	8008a64 <UART_SetConfig+0x3b8>
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a58:	d204      	bcs.n	8008a64 <UART_SetConfig+0x3b8>
        {
          huart->Instance->BRR = usartdiv;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	69fa      	ldr	r2, [r7, #28]
 8008a60:	60da      	str	r2, [r3, #12]
 8008a62:	e0fd      	b.n	8008c60 <UART_SetConfig+0x5b4>
        }
        else
        {
          ret = HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	76fb      	strb	r3, [r7, #27]
 8008a68:	e0fa      	b.n	8008c60 <UART_SetConfig+0x5b4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	69db      	ldr	r3, [r3, #28]
 8008a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a72:	f040 8083 	bne.w	8008b7c <UART_SetConfig+0x4d0>
  {
    switch (clocksource)
 8008a76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a7a:	2b08      	cmp	r3, #8
 8008a7c:	d85e      	bhi.n	8008b3c <UART_SetConfig+0x490>
 8008a7e:	a201      	add	r2, pc, #4	; (adr r2, 8008a84 <UART_SetConfig+0x3d8>)
 8008a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a84:	08008aa9 	.word	0x08008aa9
 8008a88:	08008ac9 	.word	0x08008ac9
 8008a8c:	08008ae9 	.word	0x08008ae9
 8008a90:	08008b3d 	.word	0x08008b3d
 8008a94:	08008b05 	.word	0x08008b05
 8008a98:	08008b3d 	.word	0x08008b3d
 8008a9c:	08008b3d 	.word	0x08008b3d
 8008aa0:	08008b3d 	.word	0x08008b3d
 8008aa4:	08008b25 	.word	0x08008b25
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008aa8:	f7fd fce4 	bl	8006474 <HAL_RCC_GetPCLK1Freq>
 8008aac:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	005a      	lsls	r2, r3, #1
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	085b      	lsrs	r3, r3, #1
 8008ab8:	441a      	add	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008ac6:	e03c      	b.n	8008b42 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ac8:	f7fd fcea 	bl	80064a0 <HAL_RCC_GetPCLK2Freq>
 8008acc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	005a      	lsls	r2, r3, #1
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	085b      	lsrs	r3, r3, #1
 8008ad8:	441a      	add	r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008ae6:	e02c      	b.n	8008b42 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	085b      	lsrs	r3, r3, #1
 8008aee:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8008af2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	6852      	ldr	r2, [r2, #4]
 8008afa:	fbb3 f3f2 	udiv	r3, r3, r2
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008b02:	e01e      	b.n	8008b42 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b04:	f7fd fc20 	bl	8006348 <HAL_RCC_GetSysClockFreq>
 8008b08:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	005a      	lsls	r2, r3, #1
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	085b      	lsrs	r3, r3, #1
 8008b14:	441a      	add	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008b22:	e00e      	b.n	8008b42 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	085b      	lsrs	r3, r3, #1
 8008b2a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008b3a:	e002      	b.n	8008b42 <UART_SetConfig+0x496>
      default:
        ret = HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	76fb      	strb	r3, [r7, #27]
        break;
 8008b40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	2b0f      	cmp	r3, #15
 8008b46:	d916      	bls.n	8008b76 <UART_SetConfig+0x4ca>
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b4e:	d212      	bcs.n	8008b76 <UART_SetConfig+0x4ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	f023 030f 	bic.w	r3, r3, #15
 8008b58:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	085b      	lsrs	r3, r3, #1
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	f003 0307 	and.w	r3, r3, #7
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	89fb      	ldrh	r3, [r7, #14]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	89fa      	ldrh	r2, [r7, #14]
 8008b72:	60da      	str	r2, [r3, #12]
 8008b74:	e074      	b.n	8008c60 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	76fb      	strb	r3, [r7, #27]
 8008b7a:	e071      	b.n	8008c60 <UART_SetConfig+0x5b4>
    }
  }
  else
  {
    switch (clocksource)
 8008b7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b80:	2b08      	cmp	r3, #8
 8008b82:	d85c      	bhi.n	8008c3e <UART_SetConfig+0x592>
 8008b84:	a201      	add	r2, pc, #4	; (adr r2, 8008b8c <UART_SetConfig+0x4e0>)
 8008b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b8a:	bf00      	nop
 8008b8c:	08008bb1 	.word	0x08008bb1
 8008b90:	08008bcf 	.word	0x08008bcf
 8008b94:	08008bed 	.word	0x08008bed
 8008b98:	08008c3f 	.word	0x08008c3f
 8008b9c:	08008c09 	.word	0x08008c09
 8008ba0:	08008c3f 	.word	0x08008c3f
 8008ba4:	08008c3f 	.word	0x08008c3f
 8008ba8:	08008c3f 	.word	0x08008c3f
 8008bac:	08008c27 	.word	0x08008c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bb0:	f7fd fc60 	bl	8006474 <HAL_RCC_GetPCLK1Freq>
 8008bb4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	085a      	lsrs	r2, r3, #1
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	441a      	add	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008bcc:	e03a      	b.n	8008c44 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bce:	f7fd fc67 	bl	80064a0 <HAL_RCC_GetPCLK2Freq>
 8008bd2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	085a      	lsrs	r2, r3, #1
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	441a      	add	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008bea:	e02b      	b.n	8008c44 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	085b      	lsrs	r3, r3, #1
 8008bf2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8008bf6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	6852      	ldr	r2, [r2, #4]
 8008bfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008c06:	e01d      	b.n	8008c44 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c08:	f7fd fb9e 	bl	8006348 <HAL_RCC_GetSysClockFreq>
 8008c0c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	085a      	lsrs	r2, r3, #1
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	441a      	add	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008c24:	e00e      	b.n	8008c44 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	085b      	lsrs	r3, r3, #1
 8008c2c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008c3c:	e002      	b.n	8008c44 <UART_SetConfig+0x598>
      default:
        ret = HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	76fb      	strb	r3, [r7, #27]
        break;
 8008c42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	2b0f      	cmp	r3, #15
 8008c48:	d908      	bls.n	8008c5c <UART_SetConfig+0x5b0>
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c50:	d204      	bcs.n	8008c5c <UART_SetConfig+0x5b0>
    {
      huart->Instance->BRR = usartdiv;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	69fa      	ldr	r2, [r7, #28]
 8008c58:	60da      	str	r2, [r3, #12]
 8008c5a:	e001      	b.n	8008c60 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008c6c:	7efb      	ldrb	r3, [r7, #27]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3728      	adds	r7, #40	; 0x28
 8008c72:	46bd      	mov	sp, r7
 8008c74:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08008c78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c84:	f003 0301 	and.w	r3, r3, #1
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d00a      	beq.n	8008ca2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	430a      	orrs	r2, r1
 8008ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca6:	f003 0302 	and.w	r3, r3, #2
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00a      	beq.n	8008cc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	430a      	orrs	r2, r1
 8008cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc8:	f003 0304 	and.w	r3, r3, #4
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d00a      	beq.n	8008ce6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	430a      	orrs	r2, r1
 8008ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cea:	f003 0308 	and.w	r3, r3, #8
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00a      	beq.n	8008d08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	430a      	orrs	r2, r1
 8008d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0c:	f003 0310 	and.w	r3, r3, #16
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00a      	beq.n	8008d2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	430a      	orrs	r2, r1
 8008d28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2e:	f003 0320 	and.w	r3, r3, #32
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00a      	beq.n	8008d4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	430a      	orrs	r2, r1
 8008d4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d01a      	beq.n	8008d8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	430a      	orrs	r2, r1
 8008d6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d76:	d10a      	bne.n	8008d8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	430a      	orrs	r2, r1
 8008d8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00a      	beq.n	8008db0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	430a      	orrs	r2, r1
 8008dae:	605a      	str	r2, [r3, #4]
  }
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af02      	add	r7, sp, #8
 8008dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008dca:	f7fb f941 	bl	8004050 <HAL_GetTick>
 8008dce:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 0308 	and.w	r3, r3, #8
 8008dda:	2b08      	cmp	r3, #8
 8008ddc:	d10e      	bne.n	8008dfc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dde:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f82a 	bl	8008e46 <UART_WaitOnFlagUntilTimeout>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d001      	beq.n	8008dfc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	e020      	b.n	8008e3e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 0304 	and.w	r3, r3, #4
 8008e06:	2b04      	cmp	r3, #4
 8008e08:	d10e      	bne.n	8008e28 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e0e:	9300      	str	r3, [sp, #0]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 f814 	bl	8008e46 <UART_WaitOnFlagUntilTimeout>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d001      	beq.n	8008e28 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e00a      	b.n	8008e3e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2220      	movs	r2, #32
 8008e2c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2220      	movs	r2, #32
 8008e32:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b084      	sub	sp, #16
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	60f8      	str	r0, [r7, #12]
 8008e4e:	60b9      	str	r1, [r7, #8]
 8008e50:	603b      	str	r3, [r7, #0]
 8008e52:	4613      	mov	r3, r2
 8008e54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e56:	e05d      	b.n	8008f14 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e5e:	d059      	beq.n	8008f14 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e60:	f7fb f8f6 	bl	8004050 <HAL_GetTick>
 8008e64:	4602      	mov	r2, r0
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	1ad3      	subs	r3, r2, r3
 8008e6a:	69ba      	ldr	r2, [r7, #24]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d302      	bcc.n	8008e76 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d11b      	bne.n	8008eae <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008e84:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	689a      	ldr	r2, [r3, #8]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f022 0201 	bic.w	r2, r2, #1
 8008e94:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2220      	movs	r2, #32
 8008e9a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2220      	movs	r2, #32
 8008ea0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e042      	b.n	8008f34 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 0304 	and.w	r3, r3, #4
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d02b      	beq.n	8008f14 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	69db      	ldr	r3, [r3, #28]
 8008ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008eca:	d123      	bne.n	8008f14 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ed4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ee4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	689a      	ldr	r2, [r3, #8]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f022 0201 	bic.w	r2, r2, #1
 8008ef4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2220      	movs	r2, #32
 8008efa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2220      	movs	r2, #32
 8008f00:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2220      	movs	r2, #32
 8008f06:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008f10:	2303      	movs	r3, #3
 8008f12:	e00f      	b.n	8008f34 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	69da      	ldr	r2, [r3, #28]
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	bf0c      	ite	eq
 8008f24:	2301      	moveq	r3, #1
 8008f26:	2300      	movne	r3, #0
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	79fb      	ldrb	r3, [r7, #7]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d092      	beq.n	8008e58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008f52:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	689a      	ldr	r2, [r3, #8]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f022 0201 	bic.w	r2, r2, #1
 8008f62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2220      	movs	r2, #32
 8008f68:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f7ff fb72 	bl	8008684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fa0:	bf00      	nop
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb4:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fba:	2200      	movs	r2, #0
 8008fbc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d004      	beq.n	8008fd0 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d118      	bne.n	8009002 <UART_DMATxAbortCallback+0x5a>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	220f      	movs	r2, #15
 8008fec:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2220      	movs	r2, #32
 8008ff2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2220      	movs	r2, #32
 8008ff8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8008ffa:	68f8      	ldr	r0, [r7, #12]
 8008ffc:	f7ff fb4c 	bl	8008698 <HAL_UART_AbortCpltCallback>
 8009000:	e000      	b.n	8009004 <UART_DMATxAbortCallback+0x5c>
      return;
 8009002:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b084      	sub	sp, #16
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009016:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800901c:	2200      	movs	r2, #0
 800901e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009024:	2b00      	cmp	r3, #0
 8009026:	d004      	beq.n	8009032 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800902c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902e:	2b00      	cmp	r3, #0
 8009030:	d122      	bne.n	8009078 <UART_DMARxAbortCallback+0x6e>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2200      	movs	r2, #0
 8009046:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	220f      	movs	r2, #15
 800904e:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	8b1b      	ldrh	r3, [r3, #24]
 8009056:	b29a      	uxth	r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f042 0208 	orr.w	r2, r2, #8
 8009060:	b292      	uxth	r2, r2
 8009062:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2220      	movs	r2, #32
 8009068:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2220      	movs	r2, #32
 800906e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f7ff fb11 	bl	8008698 <HAL_UART_AbortCpltCallback>
 8009076:	e000      	b.n	800907a <UART_DMARxAbortCallback+0x70>
      return;
 8009078:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009096:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2220      	movs	r2, #32
 800909c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f7ff fae3 	bl	8008670 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090aa:	bf00      	nop
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b084      	sub	sp, #16
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80090c0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090c6:	2b22      	cmp	r3, #34	; 0x22
 80090c8:	d13a      	bne.n	8009140 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80090d0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80090d2:	89bb      	ldrh	r3, [r7, #12]
 80090d4:	b2d9      	uxtb	r1, r3
 80090d6:	89fb      	ldrh	r3, [r7, #14]
 80090d8:	b2da      	uxtb	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090de:	400a      	ands	r2, r1
 80090e0:	b2d2      	uxtb	r2, r2
 80090e2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090e8:	1c5a      	adds	r2, r3, #1
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	3b01      	subs	r3, #1
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009106:	b29b      	uxth	r3, r3
 8009108:	2b00      	cmp	r3, #0
 800910a:	d123      	bne.n	8009154 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800911a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	689a      	ldr	r2, [r3, #8]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f022 0201 	bic.w	r2, r2, #1
 800912a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2220      	movs	r2, #32
 8009130:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7f8 f847 	bl	80011cc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800913e:	e009      	b.n	8009154 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	8b1b      	ldrh	r3, [r3, #24]
 8009146:	b29a      	uxth	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f042 0208 	orr.w	r2, r2, #8
 8009150:	b292      	uxth	r2, r2
 8009152:	831a      	strh	r2, [r3, #24]
}
 8009154:	bf00      	nop
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800916a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009170:	2b22      	cmp	r3, #34	; 0x22
 8009172:	d13a      	bne.n	80091ea <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800917a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009180:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8009182:	89ba      	ldrh	r2, [r7, #12]
 8009184:	89fb      	ldrh	r3, [r7, #14]
 8009186:	4013      	ands	r3, r2
 8009188:	b29a      	uxth	r2, r3
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009192:	1c9a      	adds	r2, r3, #2
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800919e:	b29b      	uxth	r3, r3
 80091a0:	3b01      	subs	r3, #1
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d123      	bne.n	80091fe <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80091c4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	689a      	ldr	r2, [r3, #8]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f022 0201 	bic.w	r2, r2, #1
 80091d4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2220      	movs	r2, #32
 80091da:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f7f7 fff2 	bl	80011cc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80091e8:	e009      	b.n	80091fe <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	8b1b      	ldrh	r3, [r3, #24]
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f042 0208 	orr.w	r2, r2, #8
 80091fa:	b292      	uxth	r2, r2
 80091fc:	831a      	strh	r2, [r3, #24]
}
 80091fe:	bf00      	nop
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009206:	b480      	push	{r7}
 8009208:	b083      	sub	sp, #12
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800920e:	bf00      	nop
 8009210:	370c      	adds	r7, #12
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr

0800921a <atoi>:
 800921a:	220a      	movs	r2, #10
 800921c:	2100      	movs	r1, #0
 800921e:	f000 bf8b 	b.w	800a138 <strtol>
	...

08009224 <gcvt>:
 8009224:	b530      	push	{r4, r5, lr}
 8009226:	ed2d 8b02 	vpush	{d8}
 800922a:	eeb0 8a40 	vmov.f32	s16, s0
 800922e:	eef0 8a60 	vmov.f32	s17, s1
 8009232:	460c      	mov	r4, r1
 8009234:	2200      	movs	r2, #0
 8009236:	b083      	sub	sp, #12
 8009238:	4605      	mov	r5, r0
 800923a:	2300      	movs	r3, #0
 800923c:	ec51 0b10 	vmov	r0, r1, d0
 8009240:	f7f7 fbfc 	bl	8000a3c <__aeabi_dcmplt>
 8009244:	4622      	mov	r2, r4
 8009246:	b118      	cbz	r0, 8009250 <gcvt+0x2c>
 8009248:	232d      	movs	r3, #45	; 0x2d
 800924a:	f802 3b01 	strb.w	r3, [r2], #1
 800924e:	3d01      	subs	r5, #1
 8009250:	2300      	movs	r3, #0
 8009252:	4809      	ldr	r0, [pc, #36]	; (8009278 <gcvt+0x54>)
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	4629      	mov	r1, r5
 8009258:	2367      	movs	r3, #103	; 0x67
 800925a:	eeb0 0a48 	vmov.f32	s0, s16
 800925e:	eef0 0a68 	vmov.f32	s1, s17
 8009262:	6800      	ldr	r0, [r0, #0]
 8009264:	f000 fff4 	bl	800a250 <_gcvt>
 8009268:	2800      	cmp	r0, #0
 800926a:	bf14      	ite	ne
 800926c:	4620      	movne	r0, r4
 800926e:	2000      	moveq	r0, #0
 8009270:	b003      	add	sp, #12
 8009272:	ecbd 8b02 	vpop	{d8}
 8009276:	bd30      	pop	{r4, r5, pc}
 8009278:	20000044 	.word	0x20000044

0800927c <__errno>:
 800927c:	4b01      	ldr	r3, [pc, #4]	; (8009284 <__errno+0x8>)
 800927e:	6818      	ldr	r0, [r3, #0]
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	20000044 	.word	0x20000044

08009288 <__libc_init_array>:
 8009288:	b570      	push	{r4, r5, r6, lr}
 800928a:	4e0d      	ldr	r6, [pc, #52]	; (80092c0 <__libc_init_array+0x38>)
 800928c:	4c0d      	ldr	r4, [pc, #52]	; (80092c4 <__libc_init_array+0x3c>)
 800928e:	1ba4      	subs	r4, r4, r6
 8009290:	10a4      	asrs	r4, r4, #2
 8009292:	2500      	movs	r5, #0
 8009294:	42a5      	cmp	r5, r4
 8009296:	d109      	bne.n	80092ac <__libc_init_array+0x24>
 8009298:	4e0b      	ldr	r6, [pc, #44]	; (80092c8 <__libc_init_array+0x40>)
 800929a:	4c0c      	ldr	r4, [pc, #48]	; (80092cc <__libc_init_array+0x44>)
 800929c:	f005 f9e2 	bl	800e664 <_init>
 80092a0:	1ba4      	subs	r4, r4, r6
 80092a2:	10a4      	asrs	r4, r4, #2
 80092a4:	2500      	movs	r5, #0
 80092a6:	42a5      	cmp	r5, r4
 80092a8:	d105      	bne.n	80092b6 <__libc_init_array+0x2e>
 80092aa:	bd70      	pop	{r4, r5, r6, pc}
 80092ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80092b0:	4798      	blx	r3
 80092b2:	3501      	adds	r5, #1
 80092b4:	e7ee      	b.n	8009294 <__libc_init_array+0xc>
 80092b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80092ba:	4798      	blx	r3
 80092bc:	3501      	adds	r5, #1
 80092be:	e7f2      	b.n	80092a6 <__libc_init_array+0x1e>
 80092c0:	0800ee70 	.word	0x0800ee70
 80092c4:	0800ee70 	.word	0x0800ee70
 80092c8:	0800ee70 	.word	0x0800ee70
 80092cc:	0800ee74 	.word	0x0800ee74

080092d0 <memset>:
 80092d0:	4402      	add	r2, r0
 80092d2:	4603      	mov	r3, r0
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d100      	bne.n	80092da <memset+0xa>
 80092d8:	4770      	bx	lr
 80092da:	f803 1b01 	strb.w	r1, [r3], #1
 80092de:	e7f9      	b.n	80092d4 <memset+0x4>

080092e0 <strcat>:
 80092e0:	b510      	push	{r4, lr}
 80092e2:	4603      	mov	r3, r0
 80092e4:	781a      	ldrb	r2, [r3, #0]
 80092e6:	1c5c      	adds	r4, r3, #1
 80092e8:	b93a      	cbnz	r2, 80092fa <strcat+0x1a>
 80092ea:	3b01      	subs	r3, #1
 80092ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092f4:	2a00      	cmp	r2, #0
 80092f6:	d1f9      	bne.n	80092ec <strcat+0xc>
 80092f8:	bd10      	pop	{r4, pc}
 80092fa:	4623      	mov	r3, r4
 80092fc:	e7f2      	b.n	80092e4 <strcat+0x4>

080092fe <strchr>:
 80092fe:	b2c9      	uxtb	r1, r1
 8009300:	4603      	mov	r3, r0
 8009302:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009306:	b11a      	cbz	r2, 8009310 <strchr+0x12>
 8009308:	428a      	cmp	r2, r1
 800930a:	d1f9      	bne.n	8009300 <strchr+0x2>
 800930c:	4618      	mov	r0, r3
 800930e:	4770      	bx	lr
 8009310:	2900      	cmp	r1, #0
 8009312:	bf18      	it	ne
 8009314:	2300      	movne	r3, #0
 8009316:	e7f9      	b.n	800930c <strchr+0xe>

08009318 <strncpy>:
 8009318:	b570      	push	{r4, r5, r6, lr}
 800931a:	3901      	subs	r1, #1
 800931c:	4604      	mov	r4, r0
 800931e:	b902      	cbnz	r2, 8009322 <strncpy+0xa>
 8009320:	bd70      	pop	{r4, r5, r6, pc}
 8009322:	4623      	mov	r3, r4
 8009324:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8009328:	f803 5b01 	strb.w	r5, [r3], #1
 800932c:	1e56      	subs	r6, r2, #1
 800932e:	b92d      	cbnz	r5, 800933c <strncpy+0x24>
 8009330:	4414      	add	r4, r2
 8009332:	42a3      	cmp	r3, r4
 8009334:	d0f4      	beq.n	8009320 <strncpy+0x8>
 8009336:	f803 5b01 	strb.w	r5, [r3], #1
 800933a:	e7fa      	b.n	8009332 <strncpy+0x1a>
 800933c:	461c      	mov	r4, r3
 800933e:	4632      	mov	r2, r6
 8009340:	e7ed      	b.n	800931e <strncpy+0x6>

08009342 <strstr>:
 8009342:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009344:	7803      	ldrb	r3, [r0, #0]
 8009346:	b17b      	cbz	r3, 8009368 <strstr+0x26>
 8009348:	4604      	mov	r4, r0
 800934a:	7823      	ldrb	r3, [r4, #0]
 800934c:	4620      	mov	r0, r4
 800934e:	1c66      	adds	r6, r4, #1
 8009350:	b17b      	cbz	r3, 8009372 <strstr+0x30>
 8009352:	1e4a      	subs	r2, r1, #1
 8009354:	1e63      	subs	r3, r4, #1
 8009356:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800935a:	b14d      	cbz	r5, 8009370 <strstr+0x2e>
 800935c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8009360:	42af      	cmp	r7, r5
 8009362:	4634      	mov	r4, r6
 8009364:	d0f7      	beq.n	8009356 <strstr+0x14>
 8009366:	e7f0      	b.n	800934a <strstr+0x8>
 8009368:	780b      	ldrb	r3, [r1, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	bf18      	it	ne
 800936e:	2000      	movne	r0, #0
 8009370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009372:	4618      	mov	r0, r3
 8009374:	e7fc      	b.n	8009370 <strstr+0x2e>

08009376 <sulp>:
 8009376:	b570      	push	{r4, r5, r6, lr}
 8009378:	4604      	mov	r4, r0
 800937a:	460d      	mov	r5, r1
 800937c:	ec45 4b10 	vmov	d0, r4, r5
 8009380:	4616      	mov	r6, r2
 8009382:	f001 fe43 	bl	800b00c <__ulp>
 8009386:	ec51 0b10 	vmov	r0, r1, d0
 800938a:	b17e      	cbz	r6, 80093ac <sulp+0x36>
 800938c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009390:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009394:	2b00      	cmp	r3, #0
 8009396:	dd09      	ble.n	80093ac <sulp+0x36>
 8009398:	051b      	lsls	r3, r3, #20
 800939a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800939e:	2400      	movs	r4, #0
 80093a0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80093a4:	4622      	mov	r2, r4
 80093a6:	462b      	mov	r3, r5
 80093a8:	f7f7 f8d6 	bl	8000558 <__aeabi_dmul>
 80093ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080093b0 <_strtod_l>:
 80093b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b4:	461f      	mov	r7, r3
 80093b6:	b0a1      	sub	sp, #132	; 0x84
 80093b8:	2300      	movs	r3, #0
 80093ba:	4681      	mov	r9, r0
 80093bc:	4638      	mov	r0, r7
 80093be:	460e      	mov	r6, r1
 80093c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80093c2:	931c      	str	r3, [sp, #112]	; 0x70
 80093c4:	f001 fb37 	bl	800aa36 <__localeconv_l>
 80093c8:	4680      	mov	r8, r0
 80093ca:	6800      	ldr	r0, [r0, #0]
 80093cc:	f7f6 ff00 	bl	80001d0 <strlen>
 80093d0:	f04f 0a00 	mov.w	sl, #0
 80093d4:	4604      	mov	r4, r0
 80093d6:	f04f 0b00 	mov.w	fp, #0
 80093da:	961b      	str	r6, [sp, #108]	; 0x6c
 80093dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80093de:	781a      	ldrb	r2, [r3, #0]
 80093e0:	2a0d      	cmp	r2, #13
 80093e2:	d832      	bhi.n	800944a <_strtod_l+0x9a>
 80093e4:	2a09      	cmp	r2, #9
 80093e6:	d236      	bcs.n	8009456 <_strtod_l+0xa6>
 80093e8:	2a00      	cmp	r2, #0
 80093ea:	d03e      	beq.n	800946a <_strtod_l+0xba>
 80093ec:	2300      	movs	r3, #0
 80093ee:	930d      	str	r3, [sp, #52]	; 0x34
 80093f0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80093f2:	782b      	ldrb	r3, [r5, #0]
 80093f4:	2b30      	cmp	r3, #48	; 0x30
 80093f6:	f040 80ac 	bne.w	8009552 <_strtod_l+0x1a2>
 80093fa:	786b      	ldrb	r3, [r5, #1]
 80093fc:	2b58      	cmp	r3, #88	; 0x58
 80093fe:	d001      	beq.n	8009404 <_strtod_l+0x54>
 8009400:	2b78      	cmp	r3, #120	; 0x78
 8009402:	d167      	bne.n	80094d4 <_strtod_l+0x124>
 8009404:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009406:	9301      	str	r3, [sp, #4]
 8009408:	ab1c      	add	r3, sp, #112	; 0x70
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	9702      	str	r7, [sp, #8]
 800940e:	ab1d      	add	r3, sp, #116	; 0x74
 8009410:	4a88      	ldr	r2, [pc, #544]	; (8009634 <_strtod_l+0x284>)
 8009412:	a91b      	add	r1, sp, #108	; 0x6c
 8009414:	4648      	mov	r0, r9
 8009416:	f001 f834 	bl	800a482 <__gethex>
 800941a:	f010 0407 	ands.w	r4, r0, #7
 800941e:	4606      	mov	r6, r0
 8009420:	d005      	beq.n	800942e <_strtod_l+0x7e>
 8009422:	2c06      	cmp	r4, #6
 8009424:	d12b      	bne.n	800947e <_strtod_l+0xce>
 8009426:	3501      	adds	r5, #1
 8009428:	2300      	movs	r3, #0
 800942a:	951b      	str	r5, [sp, #108]	; 0x6c
 800942c:	930d      	str	r3, [sp, #52]	; 0x34
 800942e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009430:	2b00      	cmp	r3, #0
 8009432:	f040 859a 	bne.w	8009f6a <_strtod_l+0xbba>
 8009436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009438:	b1e3      	cbz	r3, 8009474 <_strtod_l+0xc4>
 800943a:	4652      	mov	r2, sl
 800943c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009440:	ec43 2b10 	vmov	d0, r2, r3
 8009444:	b021      	add	sp, #132	; 0x84
 8009446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800944a:	2a2b      	cmp	r2, #43	; 0x2b
 800944c:	d015      	beq.n	800947a <_strtod_l+0xca>
 800944e:	2a2d      	cmp	r2, #45	; 0x2d
 8009450:	d004      	beq.n	800945c <_strtod_l+0xac>
 8009452:	2a20      	cmp	r2, #32
 8009454:	d1ca      	bne.n	80093ec <_strtod_l+0x3c>
 8009456:	3301      	adds	r3, #1
 8009458:	931b      	str	r3, [sp, #108]	; 0x6c
 800945a:	e7bf      	b.n	80093dc <_strtod_l+0x2c>
 800945c:	2201      	movs	r2, #1
 800945e:	920d      	str	r2, [sp, #52]	; 0x34
 8009460:	1c5a      	adds	r2, r3, #1
 8009462:	921b      	str	r2, [sp, #108]	; 0x6c
 8009464:	785b      	ldrb	r3, [r3, #1]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1c2      	bne.n	80093f0 <_strtod_l+0x40>
 800946a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800946c:	961b      	str	r6, [sp, #108]	; 0x6c
 800946e:	2b00      	cmp	r3, #0
 8009470:	f040 8579 	bne.w	8009f66 <_strtod_l+0xbb6>
 8009474:	4652      	mov	r2, sl
 8009476:	465b      	mov	r3, fp
 8009478:	e7e2      	b.n	8009440 <_strtod_l+0x90>
 800947a:	2200      	movs	r2, #0
 800947c:	e7ef      	b.n	800945e <_strtod_l+0xae>
 800947e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009480:	b13a      	cbz	r2, 8009492 <_strtod_l+0xe2>
 8009482:	2135      	movs	r1, #53	; 0x35
 8009484:	a81e      	add	r0, sp, #120	; 0x78
 8009486:	f001 fed7 	bl	800b238 <__copybits>
 800948a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800948c:	4648      	mov	r0, r9
 800948e:	f001 fb25 	bl	800aadc <_Bfree>
 8009492:	3c01      	subs	r4, #1
 8009494:	2c04      	cmp	r4, #4
 8009496:	d806      	bhi.n	80094a6 <_strtod_l+0xf6>
 8009498:	e8df f004 	tbb	[pc, r4]
 800949c:	1714030a 	.word	0x1714030a
 80094a0:	0a          	.byte	0x0a
 80094a1:	00          	.byte	0x00
 80094a2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80094a6:	0730      	lsls	r0, r6, #28
 80094a8:	d5c1      	bpl.n	800942e <_strtod_l+0x7e>
 80094aa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80094ae:	e7be      	b.n	800942e <_strtod_l+0x7e>
 80094b0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80094b4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80094b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80094ba:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80094be:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80094c2:	e7f0      	b.n	80094a6 <_strtod_l+0xf6>
 80094c4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8009638 <_strtod_l+0x288>
 80094c8:	e7ed      	b.n	80094a6 <_strtod_l+0xf6>
 80094ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80094ce:	f04f 3aff 	mov.w	sl, #4294967295
 80094d2:	e7e8      	b.n	80094a6 <_strtod_l+0xf6>
 80094d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094d6:	1c5a      	adds	r2, r3, #1
 80094d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80094da:	785b      	ldrb	r3, [r3, #1]
 80094dc:	2b30      	cmp	r3, #48	; 0x30
 80094de:	d0f9      	beq.n	80094d4 <_strtod_l+0x124>
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d0a4      	beq.n	800942e <_strtod_l+0x7e>
 80094e4:	2301      	movs	r3, #1
 80094e6:	2500      	movs	r5, #0
 80094e8:	9306      	str	r3, [sp, #24]
 80094ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094ec:	9308      	str	r3, [sp, #32]
 80094ee:	9507      	str	r5, [sp, #28]
 80094f0:	9505      	str	r5, [sp, #20]
 80094f2:	220a      	movs	r2, #10
 80094f4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80094f6:	7807      	ldrb	r7, [r0, #0]
 80094f8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80094fc:	b2d9      	uxtb	r1, r3
 80094fe:	2909      	cmp	r1, #9
 8009500:	d929      	bls.n	8009556 <_strtod_l+0x1a6>
 8009502:	4622      	mov	r2, r4
 8009504:	f8d8 1000 	ldr.w	r1, [r8]
 8009508:	f001 ff58 	bl	800b3bc <strncmp>
 800950c:	2800      	cmp	r0, #0
 800950e:	d031      	beq.n	8009574 <_strtod_l+0x1c4>
 8009510:	2000      	movs	r0, #0
 8009512:	9c05      	ldr	r4, [sp, #20]
 8009514:	9004      	str	r0, [sp, #16]
 8009516:	463b      	mov	r3, r7
 8009518:	4602      	mov	r2, r0
 800951a:	2b65      	cmp	r3, #101	; 0x65
 800951c:	d001      	beq.n	8009522 <_strtod_l+0x172>
 800951e:	2b45      	cmp	r3, #69	; 0x45
 8009520:	d114      	bne.n	800954c <_strtod_l+0x19c>
 8009522:	b924      	cbnz	r4, 800952e <_strtod_l+0x17e>
 8009524:	b910      	cbnz	r0, 800952c <_strtod_l+0x17c>
 8009526:	9b06      	ldr	r3, [sp, #24]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d09e      	beq.n	800946a <_strtod_l+0xba>
 800952c:	2400      	movs	r4, #0
 800952e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009530:	1c73      	adds	r3, r6, #1
 8009532:	931b      	str	r3, [sp, #108]	; 0x6c
 8009534:	7873      	ldrb	r3, [r6, #1]
 8009536:	2b2b      	cmp	r3, #43	; 0x2b
 8009538:	d078      	beq.n	800962c <_strtod_l+0x27c>
 800953a:	2b2d      	cmp	r3, #45	; 0x2d
 800953c:	d070      	beq.n	8009620 <_strtod_l+0x270>
 800953e:	f04f 0c00 	mov.w	ip, #0
 8009542:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8009546:	2f09      	cmp	r7, #9
 8009548:	d97c      	bls.n	8009644 <_strtod_l+0x294>
 800954a:	961b      	str	r6, [sp, #108]	; 0x6c
 800954c:	f04f 0e00 	mov.w	lr, #0
 8009550:	e09a      	b.n	8009688 <_strtod_l+0x2d8>
 8009552:	2300      	movs	r3, #0
 8009554:	e7c7      	b.n	80094e6 <_strtod_l+0x136>
 8009556:	9905      	ldr	r1, [sp, #20]
 8009558:	2908      	cmp	r1, #8
 800955a:	bfdd      	ittte	le
 800955c:	9907      	ldrle	r1, [sp, #28]
 800955e:	fb02 3301 	mlale	r3, r2, r1, r3
 8009562:	9307      	strle	r3, [sp, #28]
 8009564:	fb02 3505 	mlagt	r5, r2, r5, r3
 8009568:	9b05      	ldr	r3, [sp, #20]
 800956a:	3001      	adds	r0, #1
 800956c:	3301      	adds	r3, #1
 800956e:	9305      	str	r3, [sp, #20]
 8009570:	901b      	str	r0, [sp, #108]	; 0x6c
 8009572:	e7bf      	b.n	80094f4 <_strtod_l+0x144>
 8009574:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009576:	191a      	adds	r2, r3, r4
 8009578:	921b      	str	r2, [sp, #108]	; 0x6c
 800957a:	9a05      	ldr	r2, [sp, #20]
 800957c:	5d1b      	ldrb	r3, [r3, r4]
 800957e:	2a00      	cmp	r2, #0
 8009580:	d037      	beq.n	80095f2 <_strtod_l+0x242>
 8009582:	9c05      	ldr	r4, [sp, #20]
 8009584:	4602      	mov	r2, r0
 8009586:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800958a:	2909      	cmp	r1, #9
 800958c:	d913      	bls.n	80095b6 <_strtod_l+0x206>
 800958e:	2101      	movs	r1, #1
 8009590:	9104      	str	r1, [sp, #16]
 8009592:	e7c2      	b.n	800951a <_strtod_l+0x16a>
 8009594:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009596:	1c5a      	adds	r2, r3, #1
 8009598:	921b      	str	r2, [sp, #108]	; 0x6c
 800959a:	785b      	ldrb	r3, [r3, #1]
 800959c:	3001      	adds	r0, #1
 800959e:	2b30      	cmp	r3, #48	; 0x30
 80095a0:	d0f8      	beq.n	8009594 <_strtod_l+0x1e4>
 80095a2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80095a6:	2a08      	cmp	r2, #8
 80095a8:	f200 84e4 	bhi.w	8009f74 <_strtod_l+0xbc4>
 80095ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80095ae:	9208      	str	r2, [sp, #32]
 80095b0:	4602      	mov	r2, r0
 80095b2:	2000      	movs	r0, #0
 80095b4:	4604      	mov	r4, r0
 80095b6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80095ba:	f100 0101 	add.w	r1, r0, #1
 80095be:	d012      	beq.n	80095e6 <_strtod_l+0x236>
 80095c0:	440a      	add	r2, r1
 80095c2:	eb00 0c04 	add.w	ip, r0, r4
 80095c6:	4621      	mov	r1, r4
 80095c8:	270a      	movs	r7, #10
 80095ca:	458c      	cmp	ip, r1
 80095cc:	d113      	bne.n	80095f6 <_strtod_l+0x246>
 80095ce:	1821      	adds	r1, r4, r0
 80095d0:	2908      	cmp	r1, #8
 80095d2:	f104 0401 	add.w	r4, r4, #1
 80095d6:	4404      	add	r4, r0
 80095d8:	dc19      	bgt.n	800960e <_strtod_l+0x25e>
 80095da:	9b07      	ldr	r3, [sp, #28]
 80095dc:	210a      	movs	r1, #10
 80095de:	fb01 e303 	mla	r3, r1, r3, lr
 80095e2:	9307      	str	r3, [sp, #28]
 80095e4:	2100      	movs	r1, #0
 80095e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095e8:	1c58      	adds	r0, r3, #1
 80095ea:	901b      	str	r0, [sp, #108]	; 0x6c
 80095ec:	785b      	ldrb	r3, [r3, #1]
 80095ee:	4608      	mov	r0, r1
 80095f0:	e7c9      	b.n	8009586 <_strtod_l+0x1d6>
 80095f2:	9805      	ldr	r0, [sp, #20]
 80095f4:	e7d3      	b.n	800959e <_strtod_l+0x1ee>
 80095f6:	2908      	cmp	r1, #8
 80095f8:	f101 0101 	add.w	r1, r1, #1
 80095fc:	dc03      	bgt.n	8009606 <_strtod_l+0x256>
 80095fe:	9b07      	ldr	r3, [sp, #28]
 8009600:	437b      	muls	r3, r7
 8009602:	9307      	str	r3, [sp, #28]
 8009604:	e7e1      	b.n	80095ca <_strtod_l+0x21a>
 8009606:	2910      	cmp	r1, #16
 8009608:	bfd8      	it	le
 800960a:	437d      	mulle	r5, r7
 800960c:	e7dd      	b.n	80095ca <_strtod_l+0x21a>
 800960e:	2c10      	cmp	r4, #16
 8009610:	bfdc      	itt	le
 8009612:	210a      	movle	r1, #10
 8009614:	fb01 e505 	mlale	r5, r1, r5, lr
 8009618:	e7e4      	b.n	80095e4 <_strtod_l+0x234>
 800961a:	2301      	movs	r3, #1
 800961c:	9304      	str	r3, [sp, #16]
 800961e:	e781      	b.n	8009524 <_strtod_l+0x174>
 8009620:	f04f 0c01 	mov.w	ip, #1
 8009624:	1cb3      	adds	r3, r6, #2
 8009626:	931b      	str	r3, [sp, #108]	; 0x6c
 8009628:	78b3      	ldrb	r3, [r6, #2]
 800962a:	e78a      	b.n	8009542 <_strtod_l+0x192>
 800962c:	f04f 0c00 	mov.w	ip, #0
 8009630:	e7f8      	b.n	8009624 <_strtod_l+0x274>
 8009632:	bf00      	nop
 8009634:	0800e9d0 	.word	0x0800e9d0
 8009638:	7ff00000 	.word	0x7ff00000
 800963c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800963e:	1c5f      	adds	r7, r3, #1
 8009640:	971b      	str	r7, [sp, #108]	; 0x6c
 8009642:	785b      	ldrb	r3, [r3, #1]
 8009644:	2b30      	cmp	r3, #48	; 0x30
 8009646:	d0f9      	beq.n	800963c <_strtod_l+0x28c>
 8009648:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800964c:	2f08      	cmp	r7, #8
 800964e:	f63f af7d 	bhi.w	800954c <_strtod_l+0x19c>
 8009652:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009656:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009658:	930a      	str	r3, [sp, #40]	; 0x28
 800965a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800965c:	1c5f      	adds	r7, r3, #1
 800965e:	971b      	str	r7, [sp, #108]	; 0x6c
 8009660:	785b      	ldrb	r3, [r3, #1]
 8009662:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8009666:	f1b8 0f09 	cmp.w	r8, #9
 800966a:	d937      	bls.n	80096dc <_strtod_l+0x32c>
 800966c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800966e:	1a7f      	subs	r7, r7, r1
 8009670:	2f08      	cmp	r7, #8
 8009672:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009676:	dc37      	bgt.n	80096e8 <_strtod_l+0x338>
 8009678:	45be      	cmp	lr, r7
 800967a:	bfa8      	it	ge
 800967c:	46be      	movge	lr, r7
 800967e:	f1bc 0f00 	cmp.w	ip, #0
 8009682:	d001      	beq.n	8009688 <_strtod_l+0x2d8>
 8009684:	f1ce 0e00 	rsb	lr, lr, #0
 8009688:	2c00      	cmp	r4, #0
 800968a:	d151      	bne.n	8009730 <_strtod_l+0x380>
 800968c:	2800      	cmp	r0, #0
 800968e:	f47f aece 	bne.w	800942e <_strtod_l+0x7e>
 8009692:	9a06      	ldr	r2, [sp, #24]
 8009694:	2a00      	cmp	r2, #0
 8009696:	f47f aeca 	bne.w	800942e <_strtod_l+0x7e>
 800969a:	9a04      	ldr	r2, [sp, #16]
 800969c:	2a00      	cmp	r2, #0
 800969e:	f47f aee4 	bne.w	800946a <_strtod_l+0xba>
 80096a2:	2b4e      	cmp	r3, #78	; 0x4e
 80096a4:	d027      	beq.n	80096f6 <_strtod_l+0x346>
 80096a6:	dc21      	bgt.n	80096ec <_strtod_l+0x33c>
 80096a8:	2b49      	cmp	r3, #73	; 0x49
 80096aa:	f47f aede 	bne.w	800946a <_strtod_l+0xba>
 80096ae:	49a0      	ldr	r1, [pc, #640]	; (8009930 <_strtod_l+0x580>)
 80096b0:	a81b      	add	r0, sp, #108	; 0x6c
 80096b2:	f001 f919 	bl	800a8e8 <__match>
 80096b6:	2800      	cmp	r0, #0
 80096b8:	f43f aed7 	beq.w	800946a <_strtod_l+0xba>
 80096bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80096be:	499d      	ldr	r1, [pc, #628]	; (8009934 <_strtod_l+0x584>)
 80096c0:	3b01      	subs	r3, #1
 80096c2:	a81b      	add	r0, sp, #108	; 0x6c
 80096c4:	931b      	str	r3, [sp, #108]	; 0x6c
 80096c6:	f001 f90f 	bl	800a8e8 <__match>
 80096ca:	b910      	cbnz	r0, 80096d2 <_strtod_l+0x322>
 80096cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80096ce:	3301      	adds	r3, #1
 80096d0:	931b      	str	r3, [sp, #108]	; 0x6c
 80096d2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8009948 <_strtod_l+0x598>
 80096d6:	f04f 0a00 	mov.w	sl, #0
 80096da:	e6a8      	b.n	800942e <_strtod_l+0x7e>
 80096dc:	210a      	movs	r1, #10
 80096de:	fb01 3e0e 	mla	lr, r1, lr, r3
 80096e2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80096e6:	e7b8      	b.n	800965a <_strtod_l+0x2aa>
 80096e8:	46be      	mov	lr, r7
 80096ea:	e7c8      	b.n	800967e <_strtod_l+0x2ce>
 80096ec:	2b69      	cmp	r3, #105	; 0x69
 80096ee:	d0de      	beq.n	80096ae <_strtod_l+0x2fe>
 80096f0:	2b6e      	cmp	r3, #110	; 0x6e
 80096f2:	f47f aeba 	bne.w	800946a <_strtod_l+0xba>
 80096f6:	4990      	ldr	r1, [pc, #576]	; (8009938 <_strtod_l+0x588>)
 80096f8:	a81b      	add	r0, sp, #108	; 0x6c
 80096fa:	f001 f8f5 	bl	800a8e8 <__match>
 80096fe:	2800      	cmp	r0, #0
 8009700:	f43f aeb3 	beq.w	800946a <_strtod_l+0xba>
 8009704:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	2b28      	cmp	r3, #40	; 0x28
 800970a:	d10e      	bne.n	800972a <_strtod_l+0x37a>
 800970c:	aa1e      	add	r2, sp, #120	; 0x78
 800970e:	498b      	ldr	r1, [pc, #556]	; (800993c <_strtod_l+0x58c>)
 8009710:	a81b      	add	r0, sp, #108	; 0x6c
 8009712:	f001 f8fd 	bl	800a910 <__hexnan>
 8009716:	2805      	cmp	r0, #5
 8009718:	d107      	bne.n	800972a <_strtod_l+0x37a>
 800971a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800971c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8009720:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009724:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009728:	e681      	b.n	800942e <_strtod_l+0x7e>
 800972a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8009950 <_strtod_l+0x5a0>
 800972e:	e7d2      	b.n	80096d6 <_strtod_l+0x326>
 8009730:	ebae 0302 	sub.w	r3, lr, r2
 8009734:	9306      	str	r3, [sp, #24]
 8009736:	9b05      	ldr	r3, [sp, #20]
 8009738:	9807      	ldr	r0, [sp, #28]
 800973a:	2b00      	cmp	r3, #0
 800973c:	bf08      	it	eq
 800973e:	4623      	moveq	r3, r4
 8009740:	2c10      	cmp	r4, #16
 8009742:	9305      	str	r3, [sp, #20]
 8009744:	46a0      	mov	r8, r4
 8009746:	bfa8      	it	ge
 8009748:	f04f 0810 	movge.w	r8, #16
 800974c:	f7f6 fe8a 	bl	8000464 <__aeabi_ui2d>
 8009750:	2c09      	cmp	r4, #9
 8009752:	4682      	mov	sl, r0
 8009754:	468b      	mov	fp, r1
 8009756:	dc13      	bgt.n	8009780 <_strtod_l+0x3d0>
 8009758:	9b06      	ldr	r3, [sp, #24]
 800975a:	2b00      	cmp	r3, #0
 800975c:	f43f ae67 	beq.w	800942e <_strtod_l+0x7e>
 8009760:	9b06      	ldr	r3, [sp, #24]
 8009762:	dd7a      	ble.n	800985a <_strtod_l+0x4aa>
 8009764:	2b16      	cmp	r3, #22
 8009766:	dc61      	bgt.n	800982c <_strtod_l+0x47c>
 8009768:	4a75      	ldr	r2, [pc, #468]	; (8009940 <_strtod_l+0x590>)
 800976a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800976e:	e9de 0100 	ldrd	r0, r1, [lr]
 8009772:	4652      	mov	r2, sl
 8009774:	465b      	mov	r3, fp
 8009776:	f7f6 feef 	bl	8000558 <__aeabi_dmul>
 800977a:	4682      	mov	sl, r0
 800977c:	468b      	mov	fp, r1
 800977e:	e656      	b.n	800942e <_strtod_l+0x7e>
 8009780:	4b6f      	ldr	r3, [pc, #444]	; (8009940 <_strtod_l+0x590>)
 8009782:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009786:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800978a:	f7f6 fee5 	bl	8000558 <__aeabi_dmul>
 800978e:	4606      	mov	r6, r0
 8009790:	4628      	mov	r0, r5
 8009792:	460f      	mov	r7, r1
 8009794:	f7f6 fe66 	bl	8000464 <__aeabi_ui2d>
 8009798:	4602      	mov	r2, r0
 800979a:	460b      	mov	r3, r1
 800979c:	4630      	mov	r0, r6
 800979e:	4639      	mov	r1, r7
 80097a0:	f7f6 fd24 	bl	80001ec <__adddf3>
 80097a4:	2c0f      	cmp	r4, #15
 80097a6:	4682      	mov	sl, r0
 80097a8:	468b      	mov	fp, r1
 80097aa:	ddd5      	ble.n	8009758 <_strtod_l+0x3a8>
 80097ac:	9b06      	ldr	r3, [sp, #24]
 80097ae:	eba4 0808 	sub.w	r8, r4, r8
 80097b2:	4498      	add	r8, r3
 80097b4:	f1b8 0f00 	cmp.w	r8, #0
 80097b8:	f340 8096 	ble.w	80098e8 <_strtod_l+0x538>
 80097bc:	f018 030f 	ands.w	r3, r8, #15
 80097c0:	d00a      	beq.n	80097d8 <_strtod_l+0x428>
 80097c2:	495f      	ldr	r1, [pc, #380]	; (8009940 <_strtod_l+0x590>)
 80097c4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80097c8:	4652      	mov	r2, sl
 80097ca:	465b      	mov	r3, fp
 80097cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097d0:	f7f6 fec2 	bl	8000558 <__aeabi_dmul>
 80097d4:	4682      	mov	sl, r0
 80097d6:	468b      	mov	fp, r1
 80097d8:	f038 080f 	bics.w	r8, r8, #15
 80097dc:	d073      	beq.n	80098c6 <_strtod_l+0x516>
 80097de:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80097e2:	dd47      	ble.n	8009874 <_strtod_l+0x4c4>
 80097e4:	2400      	movs	r4, #0
 80097e6:	46a0      	mov	r8, r4
 80097e8:	9407      	str	r4, [sp, #28]
 80097ea:	9405      	str	r4, [sp, #20]
 80097ec:	2322      	movs	r3, #34	; 0x22
 80097ee:	f8df b158 	ldr.w	fp, [pc, #344]	; 8009948 <_strtod_l+0x598>
 80097f2:	f8c9 3000 	str.w	r3, [r9]
 80097f6:	f04f 0a00 	mov.w	sl, #0
 80097fa:	9b07      	ldr	r3, [sp, #28]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f43f ae16 	beq.w	800942e <_strtod_l+0x7e>
 8009802:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009804:	4648      	mov	r0, r9
 8009806:	f001 f969 	bl	800aadc <_Bfree>
 800980a:	9905      	ldr	r1, [sp, #20]
 800980c:	4648      	mov	r0, r9
 800980e:	f001 f965 	bl	800aadc <_Bfree>
 8009812:	4641      	mov	r1, r8
 8009814:	4648      	mov	r0, r9
 8009816:	f001 f961 	bl	800aadc <_Bfree>
 800981a:	9907      	ldr	r1, [sp, #28]
 800981c:	4648      	mov	r0, r9
 800981e:	f001 f95d 	bl	800aadc <_Bfree>
 8009822:	4621      	mov	r1, r4
 8009824:	4648      	mov	r0, r9
 8009826:	f001 f959 	bl	800aadc <_Bfree>
 800982a:	e600      	b.n	800942e <_strtod_l+0x7e>
 800982c:	9a06      	ldr	r2, [sp, #24]
 800982e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009832:	4293      	cmp	r3, r2
 8009834:	dbba      	blt.n	80097ac <_strtod_l+0x3fc>
 8009836:	4d42      	ldr	r5, [pc, #264]	; (8009940 <_strtod_l+0x590>)
 8009838:	f1c4 040f 	rsb	r4, r4, #15
 800983c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009840:	4652      	mov	r2, sl
 8009842:	465b      	mov	r3, fp
 8009844:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009848:	f7f6 fe86 	bl	8000558 <__aeabi_dmul>
 800984c:	9b06      	ldr	r3, [sp, #24]
 800984e:	1b1c      	subs	r4, r3, r4
 8009850:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009854:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009858:	e78d      	b.n	8009776 <_strtod_l+0x3c6>
 800985a:	f113 0f16 	cmn.w	r3, #22
 800985e:	dba5      	blt.n	80097ac <_strtod_l+0x3fc>
 8009860:	4a37      	ldr	r2, [pc, #220]	; (8009940 <_strtod_l+0x590>)
 8009862:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8009866:	e9d2 2300 	ldrd	r2, r3, [r2]
 800986a:	4650      	mov	r0, sl
 800986c:	4659      	mov	r1, fp
 800986e:	f7f6 ff9d 	bl	80007ac <__aeabi_ddiv>
 8009872:	e782      	b.n	800977a <_strtod_l+0x3ca>
 8009874:	2300      	movs	r3, #0
 8009876:	4e33      	ldr	r6, [pc, #204]	; (8009944 <_strtod_l+0x594>)
 8009878:	ea4f 1828 	mov.w	r8, r8, asr #4
 800987c:	4650      	mov	r0, sl
 800987e:	4659      	mov	r1, fp
 8009880:	461d      	mov	r5, r3
 8009882:	f1b8 0f01 	cmp.w	r8, #1
 8009886:	dc21      	bgt.n	80098cc <_strtod_l+0x51c>
 8009888:	b10b      	cbz	r3, 800988e <_strtod_l+0x4de>
 800988a:	4682      	mov	sl, r0
 800988c:	468b      	mov	fp, r1
 800988e:	4b2d      	ldr	r3, [pc, #180]	; (8009944 <_strtod_l+0x594>)
 8009890:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009894:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009898:	4652      	mov	r2, sl
 800989a:	465b      	mov	r3, fp
 800989c:	e9d5 0100 	ldrd	r0, r1, [r5]
 80098a0:	f7f6 fe5a 	bl	8000558 <__aeabi_dmul>
 80098a4:	4b28      	ldr	r3, [pc, #160]	; (8009948 <_strtod_l+0x598>)
 80098a6:	460a      	mov	r2, r1
 80098a8:	400b      	ands	r3, r1
 80098aa:	4928      	ldr	r1, [pc, #160]	; (800994c <_strtod_l+0x59c>)
 80098ac:	428b      	cmp	r3, r1
 80098ae:	4682      	mov	sl, r0
 80098b0:	d898      	bhi.n	80097e4 <_strtod_l+0x434>
 80098b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80098b6:	428b      	cmp	r3, r1
 80098b8:	bf86      	itte	hi
 80098ba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009954 <_strtod_l+0x5a4>
 80098be:	f04f 3aff 	movhi.w	sl, #4294967295
 80098c2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80098c6:	2300      	movs	r3, #0
 80098c8:	9304      	str	r3, [sp, #16]
 80098ca:	e077      	b.n	80099bc <_strtod_l+0x60c>
 80098cc:	f018 0f01 	tst.w	r8, #1
 80098d0:	d006      	beq.n	80098e0 <_strtod_l+0x530>
 80098d2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80098d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098da:	f7f6 fe3d 	bl	8000558 <__aeabi_dmul>
 80098de:	2301      	movs	r3, #1
 80098e0:	3501      	adds	r5, #1
 80098e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80098e6:	e7cc      	b.n	8009882 <_strtod_l+0x4d2>
 80098e8:	d0ed      	beq.n	80098c6 <_strtod_l+0x516>
 80098ea:	f1c8 0800 	rsb	r8, r8, #0
 80098ee:	f018 020f 	ands.w	r2, r8, #15
 80098f2:	d00a      	beq.n	800990a <_strtod_l+0x55a>
 80098f4:	4b12      	ldr	r3, [pc, #72]	; (8009940 <_strtod_l+0x590>)
 80098f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098fa:	4650      	mov	r0, sl
 80098fc:	4659      	mov	r1, fp
 80098fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009902:	f7f6 ff53 	bl	80007ac <__aeabi_ddiv>
 8009906:	4682      	mov	sl, r0
 8009908:	468b      	mov	fp, r1
 800990a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800990e:	d0da      	beq.n	80098c6 <_strtod_l+0x516>
 8009910:	f1b8 0f1f 	cmp.w	r8, #31
 8009914:	dd20      	ble.n	8009958 <_strtod_l+0x5a8>
 8009916:	2400      	movs	r4, #0
 8009918:	46a0      	mov	r8, r4
 800991a:	9407      	str	r4, [sp, #28]
 800991c:	9405      	str	r4, [sp, #20]
 800991e:	2322      	movs	r3, #34	; 0x22
 8009920:	f04f 0a00 	mov.w	sl, #0
 8009924:	f04f 0b00 	mov.w	fp, #0
 8009928:	f8c9 3000 	str.w	r3, [r9]
 800992c:	e765      	b.n	80097fa <_strtod_l+0x44a>
 800992e:	bf00      	nop
 8009930:	0800e9c8 	.word	0x0800e9c8
 8009934:	0800ec30 	.word	0x0800ec30
 8009938:	0800e9cb 	.word	0x0800e9cb
 800993c:	0800e9e4 	.word	0x0800e9e4
 8009940:	0800ea58 	.word	0x0800ea58
 8009944:	0800ea30 	.word	0x0800ea30
 8009948:	7ff00000 	.word	0x7ff00000
 800994c:	7ca00000 	.word	0x7ca00000
 8009950:	fff80000 	.word	0xfff80000
 8009954:	7fefffff 	.word	0x7fefffff
 8009958:	f018 0310 	ands.w	r3, r8, #16
 800995c:	bf18      	it	ne
 800995e:	236a      	movne	r3, #106	; 0x6a
 8009960:	4da0      	ldr	r5, [pc, #640]	; (8009be4 <_strtod_l+0x834>)
 8009962:	9304      	str	r3, [sp, #16]
 8009964:	4650      	mov	r0, sl
 8009966:	4659      	mov	r1, fp
 8009968:	2300      	movs	r3, #0
 800996a:	f1b8 0f00 	cmp.w	r8, #0
 800996e:	f300 810a 	bgt.w	8009b86 <_strtod_l+0x7d6>
 8009972:	b10b      	cbz	r3, 8009978 <_strtod_l+0x5c8>
 8009974:	4682      	mov	sl, r0
 8009976:	468b      	mov	fp, r1
 8009978:	9b04      	ldr	r3, [sp, #16]
 800997a:	b1bb      	cbz	r3, 80099ac <_strtod_l+0x5fc>
 800997c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009980:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009984:	2b00      	cmp	r3, #0
 8009986:	4659      	mov	r1, fp
 8009988:	dd10      	ble.n	80099ac <_strtod_l+0x5fc>
 800998a:	2b1f      	cmp	r3, #31
 800998c:	f340 8107 	ble.w	8009b9e <_strtod_l+0x7ee>
 8009990:	2b34      	cmp	r3, #52	; 0x34
 8009992:	bfde      	ittt	le
 8009994:	3b20      	suble	r3, #32
 8009996:	f04f 32ff 	movle.w	r2, #4294967295
 800999a:	fa02 f303 	lslle.w	r3, r2, r3
 800999e:	f04f 0a00 	mov.w	sl, #0
 80099a2:	bfcc      	ite	gt
 80099a4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80099a8:	ea03 0b01 	andle.w	fp, r3, r1
 80099ac:	2200      	movs	r2, #0
 80099ae:	2300      	movs	r3, #0
 80099b0:	4650      	mov	r0, sl
 80099b2:	4659      	mov	r1, fp
 80099b4:	f7f7 f838 	bl	8000a28 <__aeabi_dcmpeq>
 80099b8:	2800      	cmp	r0, #0
 80099ba:	d1ac      	bne.n	8009916 <_strtod_l+0x566>
 80099bc:	9b07      	ldr	r3, [sp, #28]
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	9a05      	ldr	r2, [sp, #20]
 80099c2:	9908      	ldr	r1, [sp, #32]
 80099c4:	4623      	mov	r3, r4
 80099c6:	4648      	mov	r0, r9
 80099c8:	f001 f8da 	bl	800ab80 <__s2b>
 80099cc:	9007      	str	r0, [sp, #28]
 80099ce:	2800      	cmp	r0, #0
 80099d0:	f43f af08 	beq.w	80097e4 <_strtod_l+0x434>
 80099d4:	9a06      	ldr	r2, [sp, #24]
 80099d6:	9b06      	ldr	r3, [sp, #24]
 80099d8:	2a00      	cmp	r2, #0
 80099da:	f1c3 0300 	rsb	r3, r3, #0
 80099de:	bfa8      	it	ge
 80099e0:	2300      	movge	r3, #0
 80099e2:	930e      	str	r3, [sp, #56]	; 0x38
 80099e4:	2400      	movs	r4, #0
 80099e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80099ea:	9316      	str	r3, [sp, #88]	; 0x58
 80099ec:	46a0      	mov	r8, r4
 80099ee:	9b07      	ldr	r3, [sp, #28]
 80099f0:	4648      	mov	r0, r9
 80099f2:	6859      	ldr	r1, [r3, #4]
 80099f4:	f001 f83e 	bl	800aa74 <_Balloc>
 80099f8:	9005      	str	r0, [sp, #20]
 80099fa:	2800      	cmp	r0, #0
 80099fc:	f43f aef6 	beq.w	80097ec <_strtod_l+0x43c>
 8009a00:	9b07      	ldr	r3, [sp, #28]
 8009a02:	691a      	ldr	r2, [r3, #16]
 8009a04:	3202      	adds	r2, #2
 8009a06:	f103 010c 	add.w	r1, r3, #12
 8009a0a:	0092      	lsls	r2, r2, #2
 8009a0c:	300c      	adds	r0, #12
 8009a0e:	f001 f826 	bl	800aa5e <memcpy>
 8009a12:	aa1e      	add	r2, sp, #120	; 0x78
 8009a14:	a91d      	add	r1, sp, #116	; 0x74
 8009a16:	ec4b ab10 	vmov	d0, sl, fp
 8009a1a:	4648      	mov	r0, r9
 8009a1c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009a20:	f001 fb6a 	bl	800b0f8 <__d2b>
 8009a24:	901c      	str	r0, [sp, #112]	; 0x70
 8009a26:	2800      	cmp	r0, #0
 8009a28:	f43f aee0 	beq.w	80097ec <_strtod_l+0x43c>
 8009a2c:	2101      	movs	r1, #1
 8009a2e:	4648      	mov	r0, r9
 8009a30:	f001 f932 	bl	800ac98 <__i2b>
 8009a34:	4680      	mov	r8, r0
 8009a36:	2800      	cmp	r0, #0
 8009a38:	f43f aed8 	beq.w	80097ec <_strtod_l+0x43c>
 8009a3c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009a3e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009a40:	2e00      	cmp	r6, #0
 8009a42:	bfab      	itete	ge
 8009a44:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009a46:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009a48:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009a4a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8009a4c:	bfac      	ite	ge
 8009a4e:	18f7      	addge	r7, r6, r3
 8009a50:	1b9d      	sublt	r5, r3, r6
 8009a52:	9b04      	ldr	r3, [sp, #16]
 8009a54:	1af6      	subs	r6, r6, r3
 8009a56:	4416      	add	r6, r2
 8009a58:	4b63      	ldr	r3, [pc, #396]	; (8009be8 <_strtod_l+0x838>)
 8009a5a:	3e01      	subs	r6, #1
 8009a5c:	429e      	cmp	r6, r3
 8009a5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009a62:	f280 80af 	bge.w	8009bc4 <_strtod_l+0x814>
 8009a66:	1b9b      	subs	r3, r3, r6
 8009a68:	2b1f      	cmp	r3, #31
 8009a6a:	eba2 0203 	sub.w	r2, r2, r3
 8009a6e:	f04f 0101 	mov.w	r1, #1
 8009a72:	f300 809b 	bgt.w	8009bac <_strtod_l+0x7fc>
 8009a76:	fa01 f303 	lsl.w	r3, r1, r3
 8009a7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	930a      	str	r3, [sp, #40]	; 0x28
 8009a80:	18be      	adds	r6, r7, r2
 8009a82:	9b04      	ldr	r3, [sp, #16]
 8009a84:	42b7      	cmp	r7, r6
 8009a86:	4415      	add	r5, r2
 8009a88:	441d      	add	r5, r3
 8009a8a:	463b      	mov	r3, r7
 8009a8c:	bfa8      	it	ge
 8009a8e:	4633      	movge	r3, r6
 8009a90:	42ab      	cmp	r3, r5
 8009a92:	bfa8      	it	ge
 8009a94:	462b      	movge	r3, r5
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	bfc2      	ittt	gt
 8009a9a:	1af6      	subgt	r6, r6, r3
 8009a9c:	1aed      	subgt	r5, r5, r3
 8009a9e:	1aff      	subgt	r7, r7, r3
 8009aa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009aa2:	b1bb      	cbz	r3, 8009ad4 <_strtod_l+0x724>
 8009aa4:	4641      	mov	r1, r8
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	4648      	mov	r0, r9
 8009aaa:	f001 f995 	bl	800add8 <__pow5mult>
 8009aae:	4680      	mov	r8, r0
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	f43f ae9b 	beq.w	80097ec <_strtod_l+0x43c>
 8009ab6:	4601      	mov	r1, r0
 8009ab8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009aba:	4648      	mov	r0, r9
 8009abc:	f001 f8f5 	bl	800acaa <__multiply>
 8009ac0:	900c      	str	r0, [sp, #48]	; 0x30
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	f43f ae92 	beq.w	80097ec <_strtod_l+0x43c>
 8009ac8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009aca:	4648      	mov	r0, r9
 8009acc:	f001 f806 	bl	800aadc <_Bfree>
 8009ad0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ad2:	931c      	str	r3, [sp, #112]	; 0x70
 8009ad4:	2e00      	cmp	r6, #0
 8009ad6:	dc7a      	bgt.n	8009bce <_strtod_l+0x81e>
 8009ad8:	9b06      	ldr	r3, [sp, #24]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	dd08      	ble.n	8009af0 <_strtod_l+0x740>
 8009ade:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009ae0:	9905      	ldr	r1, [sp, #20]
 8009ae2:	4648      	mov	r0, r9
 8009ae4:	f001 f978 	bl	800add8 <__pow5mult>
 8009ae8:	9005      	str	r0, [sp, #20]
 8009aea:	2800      	cmp	r0, #0
 8009aec:	f43f ae7e 	beq.w	80097ec <_strtod_l+0x43c>
 8009af0:	2d00      	cmp	r5, #0
 8009af2:	dd08      	ble.n	8009b06 <_strtod_l+0x756>
 8009af4:	462a      	mov	r2, r5
 8009af6:	9905      	ldr	r1, [sp, #20]
 8009af8:	4648      	mov	r0, r9
 8009afa:	f001 f9bb 	bl	800ae74 <__lshift>
 8009afe:	9005      	str	r0, [sp, #20]
 8009b00:	2800      	cmp	r0, #0
 8009b02:	f43f ae73 	beq.w	80097ec <_strtod_l+0x43c>
 8009b06:	2f00      	cmp	r7, #0
 8009b08:	dd08      	ble.n	8009b1c <_strtod_l+0x76c>
 8009b0a:	4641      	mov	r1, r8
 8009b0c:	463a      	mov	r2, r7
 8009b0e:	4648      	mov	r0, r9
 8009b10:	f001 f9b0 	bl	800ae74 <__lshift>
 8009b14:	4680      	mov	r8, r0
 8009b16:	2800      	cmp	r0, #0
 8009b18:	f43f ae68 	beq.w	80097ec <_strtod_l+0x43c>
 8009b1c:	9a05      	ldr	r2, [sp, #20]
 8009b1e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009b20:	4648      	mov	r0, r9
 8009b22:	f001 fa15 	bl	800af50 <__mdiff>
 8009b26:	4604      	mov	r4, r0
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	f43f ae5f 	beq.w	80097ec <_strtod_l+0x43c>
 8009b2e:	68c3      	ldr	r3, [r0, #12]
 8009b30:	930c      	str	r3, [sp, #48]	; 0x30
 8009b32:	2300      	movs	r3, #0
 8009b34:	60c3      	str	r3, [r0, #12]
 8009b36:	4641      	mov	r1, r8
 8009b38:	f001 f9f0 	bl	800af1c <__mcmp>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	da55      	bge.n	8009bec <_strtod_l+0x83c>
 8009b40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b42:	b9e3      	cbnz	r3, 8009b7e <_strtod_l+0x7ce>
 8009b44:	f1ba 0f00 	cmp.w	sl, #0
 8009b48:	d119      	bne.n	8009b7e <_strtod_l+0x7ce>
 8009b4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b4e:	b9b3      	cbnz	r3, 8009b7e <_strtod_l+0x7ce>
 8009b50:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009b54:	0d1b      	lsrs	r3, r3, #20
 8009b56:	051b      	lsls	r3, r3, #20
 8009b58:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009b5c:	d90f      	bls.n	8009b7e <_strtod_l+0x7ce>
 8009b5e:	6963      	ldr	r3, [r4, #20]
 8009b60:	b913      	cbnz	r3, 8009b68 <_strtod_l+0x7b8>
 8009b62:	6923      	ldr	r3, [r4, #16]
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	dd0a      	ble.n	8009b7e <_strtod_l+0x7ce>
 8009b68:	4621      	mov	r1, r4
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	4648      	mov	r0, r9
 8009b6e:	f001 f981 	bl	800ae74 <__lshift>
 8009b72:	4641      	mov	r1, r8
 8009b74:	4604      	mov	r4, r0
 8009b76:	f001 f9d1 	bl	800af1c <__mcmp>
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	dc67      	bgt.n	8009c4e <_strtod_l+0x89e>
 8009b7e:	9b04      	ldr	r3, [sp, #16]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d171      	bne.n	8009c68 <_strtod_l+0x8b8>
 8009b84:	e63d      	b.n	8009802 <_strtod_l+0x452>
 8009b86:	f018 0f01 	tst.w	r8, #1
 8009b8a:	d004      	beq.n	8009b96 <_strtod_l+0x7e6>
 8009b8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b90:	f7f6 fce2 	bl	8000558 <__aeabi_dmul>
 8009b94:	2301      	movs	r3, #1
 8009b96:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009b9a:	3508      	adds	r5, #8
 8009b9c:	e6e5      	b.n	800996a <_strtod_l+0x5ba>
 8009b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ba6:	ea03 0a0a 	and.w	sl, r3, sl
 8009baa:	e6ff      	b.n	80099ac <_strtod_l+0x5fc>
 8009bac:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009bb0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009bb4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009bb8:	36e2      	adds	r6, #226	; 0xe2
 8009bba:	fa01 f306 	lsl.w	r3, r1, r6
 8009bbe:	930a      	str	r3, [sp, #40]	; 0x28
 8009bc0:	910f      	str	r1, [sp, #60]	; 0x3c
 8009bc2:	e75d      	b.n	8009a80 <_strtod_l+0x6d0>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	930a      	str	r3, [sp, #40]	; 0x28
 8009bc8:	2301      	movs	r3, #1
 8009bca:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bcc:	e758      	b.n	8009a80 <_strtod_l+0x6d0>
 8009bce:	4632      	mov	r2, r6
 8009bd0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009bd2:	4648      	mov	r0, r9
 8009bd4:	f001 f94e 	bl	800ae74 <__lshift>
 8009bd8:	901c      	str	r0, [sp, #112]	; 0x70
 8009bda:	2800      	cmp	r0, #0
 8009bdc:	f47f af7c 	bne.w	8009ad8 <_strtod_l+0x728>
 8009be0:	e604      	b.n	80097ec <_strtod_l+0x43c>
 8009be2:	bf00      	nop
 8009be4:	0800e9f8 	.word	0x0800e9f8
 8009be8:	fffffc02 	.word	0xfffffc02
 8009bec:	465d      	mov	r5, fp
 8009bee:	f040 8086 	bne.w	8009cfe <_strtod_l+0x94e>
 8009bf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bf4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bf8:	b32a      	cbz	r2, 8009c46 <_strtod_l+0x896>
 8009bfa:	4aaf      	ldr	r2, [pc, #700]	; (8009eb8 <_strtod_l+0xb08>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d153      	bne.n	8009ca8 <_strtod_l+0x8f8>
 8009c00:	9b04      	ldr	r3, [sp, #16]
 8009c02:	4650      	mov	r0, sl
 8009c04:	b1d3      	cbz	r3, 8009c3c <_strtod_l+0x88c>
 8009c06:	4aad      	ldr	r2, [pc, #692]	; (8009ebc <_strtod_l+0xb0c>)
 8009c08:	402a      	ands	r2, r5
 8009c0a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009c0e:	f04f 31ff 	mov.w	r1, #4294967295
 8009c12:	d816      	bhi.n	8009c42 <_strtod_l+0x892>
 8009c14:	0d12      	lsrs	r2, r2, #20
 8009c16:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8009c1e:	4298      	cmp	r0, r3
 8009c20:	d142      	bne.n	8009ca8 <_strtod_l+0x8f8>
 8009c22:	4ba7      	ldr	r3, [pc, #668]	; (8009ec0 <_strtod_l+0xb10>)
 8009c24:	429d      	cmp	r5, r3
 8009c26:	d102      	bne.n	8009c2e <_strtod_l+0x87e>
 8009c28:	3001      	adds	r0, #1
 8009c2a:	f43f addf 	beq.w	80097ec <_strtod_l+0x43c>
 8009c2e:	4ba3      	ldr	r3, [pc, #652]	; (8009ebc <_strtod_l+0xb0c>)
 8009c30:	402b      	ands	r3, r5
 8009c32:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009c36:	f04f 0a00 	mov.w	sl, #0
 8009c3a:	e7a0      	b.n	8009b7e <_strtod_l+0x7ce>
 8009c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c40:	e7ed      	b.n	8009c1e <_strtod_l+0x86e>
 8009c42:	460b      	mov	r3, r1
 8009c44:	e7eb      	b.n	8009c1e <_strtod_l+0x86e>
 8009c46:	bb7b      	cbnz	r3, 8009ca8 <_strtod_l+0x8f8>
 8009c48:	f1ba 0f00 	cmp.w	sl, #0
 8009c4c:	d12c      	bne.n	8009ca8 <_strtod_l+0x8f8>
 8009c4e:	9904      	ldr	r1, [sp, #16]
 8009c50:	4a9a      	ldr	r2, [pc, #616]	; (8009ebc <_strtod_l+0xb0c>)
 8009c52:	465b      	mov	r3, fp
 8009c54:	b1f1      	cbz	r1, 8009c94 <_strtod_l+0x8e4>
 8009c56:	ea02 010b 	and.w	r1, r2, fp
 8009c5a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009c5e:	dc19      	bgt.n	8009c94 <_strtod_l+0x8e4>
 8009c60:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009c64:	f77f ae5b 	ble.w	800991e <_strtod_l+0x56e>
 8009c68:	4a96      	ldr	r2, [pc, #600]	; (8009ec4 <_strtod_l+0xb14>)
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009c70:	4650      	mov	r0, sl
 8009c72:	4659      	mov	r1, fp
 8009c74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009c78:	f7f6 fc6e 	bl	8000558 <__aeabi_dmul>
 8009c7c:	4682      	mov	sl, r0
 8009c7e:	468b      	mov	fp, r1
 8009c80:	2900      	cmp	r1, #0
 8009c82:	f47f adbe 	bne.w	8009802 <_strtod_l+0x452>
 8009c86:	2800      	cmp	r0, #0
 8009c88:	f47f adbb 	bne.w	8009802 <_strtod_l+0x452>
 8009c8c:	2322      	movs	r3, #34	; 0x22
 8009c8e:	f8c9 3000 	str.w	r3, [r9]
 8009c92:	e5b6      	b.n	8009802 <_strtod_l+0x452>
 8009c94:	4013      	ands	r3, r2
 8009c96:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009c9a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009c9e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009ca2:	f04f 3aff 	mov.w	sl, #4294967295
 8009ca6:	e76a      	b.n	8009b7e <_strtod_l+0x7ce>
 8009ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009caa:	b193      	cbz	r3, 8009cd2 <_strtod_l+0x922>
 8009cac:	422b      	tst	r3, r5
 8009cae:	f43f af66 	beq.w	8009b7e <_strtod_l+0x7ce>
 8009cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cb4:	9a04      	ldr	r2, [sp, #16]
 8009cb6:	4650      	mov	r0, sl
 8009cb8:	4659      	mov	r1, fp
 8009cba:	b173      	cbz	r3, 8009cda <_strtod_l+0x92a>
 8009cbc:	f7ff fb5b 	bl	8009376 <sulp>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009cc8:	f7f6 fa90 	bl	80001ec <__adddf3>
 8009ccc:	4682      	mov	sl, r0
 8009cce:	468b      	mov	fp, r1
 8009cd0:	e755      	b.n	8009b7e <_strtod_l+0x7ce>
 8009cd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cd4:	ea13 0f0a 	tst.w	r3, sl
 8009cd8:	e7e9      	b.n	8009cae <_strtod_l+0x8fe>
 8009cda:	f7ff fb4c 	bl	8009376 <sulp>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ce6:	f7f6 fa7f 	bl	80001e8 <__aeabi_dsub>
 8009cea:	2200      	movs	r2, #0
 8009cec:	2300      	movs	r3, #0
 8009cee:	4682      	mov	sl, r0
 8009cf0:	468b      	mov	fp, r1
 8009cf2:	f7f6 fe99 	bl	8000a28 <__aeabi_dcmpeq>
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	f47f ae11 	bne.w	800991e <_strtod_l+0x56e>
 8009cfc:	e73f      	b.n	8009b7e <_strtod_l+0x7ce>
 8009cfe:	4641      	mov	r1, r8
 8009d00:	4620      	mov	r0, r4
 8009d02:	f001 fa48 	bl	800b196 <__ratio>
 8009d06:	ec57 6b10 	vmov	r6, r7, d0
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009d10:	ee10 0a10 	vmov	r0, s0
 8009d14:	4639      	mov	r1, r7
 8009d16:	f7f6 fe9b 	bl	8000a50 <__aeabi_dcmple>
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	d077      	beq.n	8009e0e <_strtod_l+0xa5e>
 8009d1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d04a      	beq.n	8009dba <_strtod_l+0xa0a>
 8009d24:	4b68      	ldr	r3, [pc, #416]	; (8009ec8 <_strtod_l+0xb18>)
 8009d26:	2200      	movs	r2, #0
 8009d28:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009d2c:	4f66      	ldr	r7, [pc, #408]	; (8009ec8 <_strtod_l+0xb18>)
 8009d2e:	2600      	movs	r6, #0
 8009d30:	4b62      	ldr	r3, [pc, #392]	; (8009ebc <_strtod_l+0xb0c>)
 8009d32:	402b      	ands	r3, r5
 8009d34:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d38:	4b64      	ldr	r3, [pc, #400]	; (8009ecc <_strtod_l+0xb1c>)
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	f040 80ce 	bne.w	8009edc <_strtod_l+0xb2c>
 8009d40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009d44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d48:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8009d4c:	ec4b ab10 	vmov	d0, sl, fp
 8009d50:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009d54:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009d58:	f001 f958 	bl	800b00c <__ulp>
 8009d5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d60:	ec53 2b10 	vmov	r2, r3, d0
 8009d64:	f7f6 fbf8 	bl	8000558 <__aeabi_dmul>
 8009d68:	4652      	mov	r2, sl
 8009d6a:	465b      	mov	r3, fp
 8009d6c:	f7f6 fa3e 	bl	80001ec <__adddf3>
 8009d70:	460b      	mov	r3, r1
 8009d72:	4952      	ldr	r1, [pc, #328]	; (8009ebc <_strtod_l+0xb0c>)
 8009d74:	4a56      	ldr	r2, [pc, #344]	; (8009ed0 <_strtod_l+0xb20>)
 8009d76:	4019      	ands	r1, r3
 8009d78:	4291      	cmp	r1, r2
 8009d7a:	4682      	mov	sl, r0
 8009d7c:	d95b      	bls.n	8009e36 <_strtod_l+0xa86>
 8009d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d80:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d103      	bne.n	8009d90 <_strtod_l+0x9e0>
 8009d88:	9b08      	ldr	r3, [sp, #32]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	f43f ad2e 	beq.w	80097ec <_strtod_l+0x43c>
 8009d90:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009ec0 <_strtod_l+0xb10>
 8009d94:	f04f 3aff 	mov.w	sl, #4294967295
 8009d98:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009d9a:	4648      	mov	r0, r9
 8009d9c:	f000 fe9e 	bl	800aadc <_Bfree>
 8009da0:	9905      	ldr	r1, [sp, #20]
 8009da2:	4648      	mov	r0, r9
 8009da4:	f000 fe9a 	bl	800aadc <_Bfree>
 8009da8:	4641      	mov	r1, r8
 8009daa:	4648      	mov	r0, r9
 8009dac:	f000 fe96 	bl	800aadc <_Bfree>
 8009db0:	4621      	mov	r1, r4
 8009db2:	4648      	mov	r0, r9
 8009db4:	f000 fe92 	bl	800aadc <_Bfree>
 8009db8:	e619      	b.n	80099ee <_strtod_l+0x63e>
 8009dba:	f1ba 0f00 	cmp.w	sl, #0
 8009dbe:	d11a      	bne.n	8009df6 <_strtod_l+0xa46>
 8009dc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009dc4:	b9eb      	cbnz	r3, 8009e02 <_strtod_l+0xa52>
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	4b3f      	ldr	r3, [pc, #252]	; (8009ec8 <_strtod_l+0xb18>)
 8009dca:	4630      	mov	r0, r6
 8009dcc:	4639      	mov	r1, r7
 8009dce:	f7f6 fe35 	bl	8000a3c <__aeabi_dcmplt>
 8009dd2:	b9c8      	cbnz	r0, 8009e08 <_strtod_l+0xa58>
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	4639      	mov	r1, r7
 8009dd8:	2200      	movs	r2, #0
 8009dda:	4b3e      	ldr	r3, [pc, #248]	; (8009ed4 <_strtod_l+0xb24>)
 8009ddc:	f7f6 fbbc 	bl	8000558 <__aeabi_dmul>
 8009de0:	4606      	mov	r6, r0
 8009de2:	460f      	mov	r7, r1
 8009de4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009de8:	9618      	str	r6, [sp, #96]	; 0x60
 8009dea:	9319      	str	r3, [sp, #100]	; 0x64
 8009dec:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009df0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009df4:	e79c      	b.n	8009d30 <_strtod_l+0x980>
 8009df6:	f1ba 0f01 	cmp.w	sl, #1
 8009dfa:	d102      	bne.n	8009e02 <_strtod_l+0xa52>
 8009dfc:	2d00      	cmp	r5, #0
 8009dfe:	f43f ad8e 	beq.w	800991e <_strtod_l+0x56e>
 8009e02:	2200      	movs	r2, #0
 8009e04:	4b34      	ldr	r3, [pc, #208]	; (8009ed8 <_strtod_l+0xb28>)
 8009e06:	e78f      	b.n	8009d28 <_strtod_l+0x978>
 8009e08:	2600      	movs	r6, #0
 8009e0a:	4f32      	ldr	r7, [pc, #200]	; (8009ed4 <_strtod_l+0xb24>)
 8009e0c:	e7ea      	b.n	8009de4 <_strtod_l+0xa34>
 8009e0e:	4b31      	ldr	r3, [pc, #196]	; (8009ed4 <_strtod_l+0xb24>)
 8009e10:	4630      	mov	r0, r6
 8009e12:	4639      	mov	r1, r7
 8009e14:	2200      	movs	r2, #0
 8009e16:	f7f6 fb9f 	bl	8000558 <__aeabi_dmul>
 8009e1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e1c:	4606      	mov	r6, r0
 8009e1e:	460f      	mov	r7, r1
 8009e20:	b933      	cbnz	r3, 8009e30 <_strtod_l+0xa80>
 8009e22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e26:	9010      	str	r0, [sp, #64]	; 0x40
 8009e28:	9311      	str	r3, [sp, #68]	; 0x44
 8009e2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009e2e:	e7df      	b.n	8009df0 <_strtod_l+0xa40>
 8009e30:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009e34:	e7f9      	b.n	8009e2a <_strtod_l+0xa7a>
 8009e36:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009e3a:	9b04      	ldr	r3, [sp, #16]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d1ab      	bne.n	8009d98 <_strtod_l+0x9e8>
 8009e40:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e44:	0d1b      	lsrs	r3, r3, #20
 8009e46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e48:	051b      	lsls	r3, r3, #20
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	465d      	mov	r5, fp
 8009e4e:	d1a3      	bne.n	8009d98 <_strtod_l+0x9e8>
 8009e50:	4639      	mov	r1, r7
 8009e52:	4630      	mov	r0, r6
 8009e54:	f7f6 fe30 	bl	8000ab8 <__aeabi_d2iz>
 8009e58:	f7f6 fb14 	bl	8000484 <__aeabi_i2d>
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	4602      	mov	r2, r0
 8009e60:	4639      	mov	r1, r7
 8009e62:	4630      	mov	r0, r6
 8009e64:	f7f6 f9c0 	bl	80001e8 <__aeabi_dsub>
 8009e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e6a:	4606      	mov	r6, r0
 8009e6c:	460f      	mov	r7, r1
 8009e6e:	b933      	cbnz	r3, 8009e7e <_strtod_l+0xace>
 8009e70:	f1ba 0f00 	cmp.w	sl, #0
 8009e74:	d103      	bne.n	8009e7e <_strtod_l+0xace>
 8009e76:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8009e7a:	2d00      	cmp	r5, #0
 8009e7c:	d06d      	beq.n	8009f5a <_strtod_l+0xbaa>
 8009e7e:	a30a      	add	r3, pc, #40	; (adr r3, 8009ea8 <_strtod_l+0xaf8>)
 8009e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e84:	4630      	mov	r0, r6
 8009e86:	4639      	mov	r1, r7
 8009e88:	f7f6 fdd8 	bl	8000a3c <__aeabi_dcmplt>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	f47f acb8 	bne.w	8009802 <_strtod_l+0x452>
 8009e92:	a307      	add	r3, pc, #28	; (adr r3, 8009eb0 <_strtod_l+0xb00>)
 8009e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e98:	4630      	mov	r0, r6
 8009e9a:	4639      	mov	r1, r7
 8009e9c:	f7f6 fdec 	bl	8000a78 <__aeabi_dcmpgt>
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	f43f af79 	beq.w	8009d98 <_strtod_l+0x9e8>
 8009ea6:	e4ac      	b.n	8009802 <_strtod_l+0x452>
 8009ea8:	94a03595 	.word	0x94a03595
 8009eac:	3fdfffff 	.word	0x3fdfffff
 8009eb0:	35afe535 	.word	0x35afe535
 8009eb4:	3fe00000 	.word	0x3fe00000
 8009eb8:	000fffff 	.word	0x000fffff
 8009ebc:	7ff00000 	.word	0x7ff00000
 8009ec0:	7fefffff 	.word	0x7fefffff
 8009ec4:	39500000 	.word	0x39500000
 8009ec8:	3ff00000 	.word	0x3ff00000
 8009ecc:	7fe00000 	.word	0x7fe00000
 8009ed0:	7c9fffff 	.word	0x7c9fffff
 8009ed4:	3fe00000 	.word	0x3fe00000
 8009ed8:	bff00000 	.word	0xbff00000
 8009edc:	9b04      	ldr	r3, [sp, #16]
 8009ede:	b333      	cbz	r3, 8009f2e <_strtod_l+0xb7e>
 8009ee0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ee2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009ee6:	d822      	bhi.n	8009f2e <_strtod_l+0xb7e>
 8009ee8:	a327      	add	r3, pc, #156	; (adr r3, 8009f88 <_strtod_l+0xbd8>)
 8009eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eee:	4630      	mov	r0, r6
 8009ef0:	4639      	mov	r1, r7
 8009ef2:	f7f6 fdad 	bl	8000a50 <__aeabi_dcmple>
 8009ef6:	b1a0      	cbz	r0, 8009f22 <_strtod_l+0xb72>
 8009ef8:	4639      	mov	r1, r7
 8009efa:	4630      	mov	r0, r6
 8009efc:	f7f6 fe04 	bl	8000b08 <__aeabi_d2uiz>
 8009f00:	2800      	cmp	r0, #0
 8009f02:	bf08      	it	eq
 8009f04:	2001      	moveq	r0, #1
 8009f06:	f7f6 faad 	bl	8000464 <__aeabi_ui2d>
 8009f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f0c:	4606      	mov	r6, r0
 8009f0e:	460f      	mov	r7, r1
 8009f10:	bb03      	cbnz	r3, 8009f54 <_strtod_l+0xba4>
 8009f12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f16:	9012      	str	r0, [sp, #72]	; 0x48
 8009f18:	9313      	str	r3, [sp, #76]	; 0x4c
 8009f1a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009f1e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f26:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009f2a:	1a9b      	subs	r3, r3, r2
 8009f2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f2e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8009f32:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8009f36:	f001 f869 	bl	800b00c <__ulp>
 8009f3a:	4650      	mov	r0, sl
 8009f3c:	ec53 2b10 	vmov	r2, r3, d0
 8009f40:	4659      	mov	r1, fp
 8009f42:	f7f6 fb09 	bl	8000558 <__aeabi_dmul>
 8009f46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009f4a:	f7f6 f94f 	bl	80001ec <__adddf3>
 8009f4e:	4682      	mov	sl, r0
 8009f50:	468b      	mov	fp, r1
 8009f52:	e772      	b.n	8009e3a <_strtod_l+0xa8a>
 8009f54:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8009f58:	e7df      	b.n	8009f1a <_strtod_l+0xb6a>
 8009f5a:	a30d      	add	r3, pc, #52	; (adr r3, 8009f90 <_strtod_l+0xbe0>)
 8009f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f60:	f7f6 fd6c 	bl	8000a3c <__aeabi_dcmplt>
 8009f64:	e79c      	b.n	8009ea0 <_strtod_l+0xaf0>
 8009f66:	2300      	movs	r3, #0
 8009f68:	930d      	str	r3, [sp, #52]	; 0x34
 8009f6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009f6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f6e:	6013      	str	r3, [r2, #0]
 8009f70:	f7ff ba61 	b.w	8009436 <_strtod_l+0x86>
 8009f74:	2b65      	cmp	r3, #101	; 0x65
 8009f76:	f04f 0200 	mov.w	r2, #0
 8009f7a:	f43f ab4e 	beq.w	800961a <_strtod_l+0x26a>
 8009f7e:	2101      	movs	r1, #1
 8009f80:	4614      	mov	r4, r2
 8009f82:	9104      	str	r1, [sp, #16]
 8009f84:	f7ff bacb 	b.w	800951e <_strtod_l+0x16e>
 8009f88:	ffc00000 	.word	0xffc00000
 8009f8c:	41dfffff 	.word	0x41dfffff
 8009f90:	94a03595 	.word	0x94a03595
 8009f94:	3fcfffff 	.word	0x3fcfffff

08009f98 <strtof>:
 8009f98:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8009f9c:	4e24      	ldr	r6, [pc, #144]	; (800a030 <strtof+0x98>)
 8009f9e:	4a25      	ldr	r2, [pc, #148]	; (800a034 <strtof+0x9c>)
 8009fa0:	6834      	ldr	r4, [r6, #0]
 8009fa2:	6a23      	ldr	r3, [r4, #32]
 8009fa4:	ed2d 8b02 	vpush	{d8}
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	bf08      	it	eq
 8009fac:	4613      	moveq	r3, r2
 8009fae:	460a      	mov	r2, r1
 8009fb0:	4601      	mov	r1, r0
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	f7ff f9fc 	bl	80093b0 <_strtod_l>
 8009fb8:	ec55 4b10 	vmov	r4, r5, d0
 8009fbc:	ee10 2a10 	vmov	r2, s0
 8009fc0:	462b      	mov	r3, r5
 8009fc2:	ee10 0a10 	vmov	r0, s0
 8009fc6:	4629      	mov	r1, r5
 8009fc8:	f7f6 fd60 	bl	8000a8c <__aeabi_dcmpun>
 8009fcc:	b130      	cbz	r0, 8009fdc <strtof+0x44>
 8009fce:	ecbd 8b02 	vpop	{d8}
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 8009fd8:	f001 b9e2 	b.w	800b3a0 <nanf>
 8009fdc:	4620      	mov	r0, r4
 8009fde:	4629      	mov	r1, r5
 8009fe0:	f7f6 fdb2 	bl	8000b48 <__aeabi_d2f>
 8009fe4:	ee08 0a10 	vmov	s16, r0
 8009fe8:	eddf 7a13 	vldr	s15, [pc, #76]	; 800a038 <strtof+0xa0>
 8009fec:	eeb0 7ac8 	vabs.f32	s14, s16
 8009ff0:	eeb4 7a67 	vcmp.f32	s14, s15
 8009ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ff8:	dd14      	ble.n	800a024 <strtof+0x8c>
 8009ffa:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 8009ffe:	f04f 32ff 	mov.w	r2, #4294967295
 800a002:	4b0e      	ldr	r3, [pc, #56]	; (800a03c <strtof+0xa4>)
 800a004:	4620      	mov	r0, r4
 800a006:	4649      	mov	r1, r9
 800a008:	f7f6 fd40 	bl	8000a8c <__aeabi_dcmpun>
 800a00c:	b938      	cbnz	r0, 800a01e <strtof+0x86>
 800a00e:	f04f 32ff 	mov.w	r2, #4294967295
 800a012:	4b0a      	ldr	r3, [pc, #40]	; (800a03c <strtof+0xa4>)
 800a014:	4620      	mov	r0, r4
 800a016:	4649      	mov	r1, r9
 800a018:	f7f6 fd1a 	bl	8000a50 <__aeabi_dcmple>
 800a01c:	b110      	cbz	r0, 800a024 <strtof+0x8c>
 800a01e:	6833      	ldr	r3, [r6, #0]
 800a020:	2222      	movs	r2, #34	; 0x22
 800a022:	601a      	str	r2, [r3, #0]
 800a024:	eeb0 0a48 	vmov.f32	s0, s16
 800a028:	ecbd 8b02 	vpop	{d8}
 800a02c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a030:	20000044 	.word	0x20000044
 800a034:	200000a8 	.word	0x200000a8
 800a038:	7f7fffff 	.word	0x7f7fffff
 800a03c:	7fefffff 	.word	0x7fefffff

0800a040 <_strtol_l.isra.0>:
 800a040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a044:	4680      	mov	r8, r0
 800a046:	4689      	mov	r9, r1
 800a048:	4692      	mov	sl, r2
 800a04a:	461e      	mov	r6, r3
 800a04c:	460f      	mov	r7, r1
 800a04e:	463d      	mov	r5, r7
 800a050:	9808      	ldr	r0, [sp, #32]
 800a052:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a056:	f000 fceb 	bl	800aa30 <__locale_ctype_ptr_l>
 800a05a:	4420      	add	r0, r4
 800a05c:	7843      	ldrb	r3, [r0, #1]
 800a05e:	f013 0308 	ands.w	r3, r3, #8
 800a062:	d132      	bne.n	800a0ca <_strtol_l.isra.0+0x8a>
 800a064:	2c2d      	cmp	r4, #45	; 0x2d
 800a066:	d132      	bne.n	800a0ce <_strtol_l.isra.0+0x8e>
 800a068:	787c      	ldrb	r4, [r7, #1]
 800a06a:	1cbd      	adds	r5, r7, #2
 800a06c:	2201      	movs	r2, #1
 800a06e:	2e00      	cmp	r6, #0
 800a070:	d05d      	beq.n	800a12e <_strtol_l.isra.0+0xee>
 800a072:	2e10      	cmp	r6, #16
 800a074:	d109      	bne.n	800a08a <_strtol_l.isra.0+0x4a>
 800a076:	2c30      	cmp	r4, #48	; 0x30
 800a078:	d107      	bne.n	800a08a <_strtol_l.isra.0+0x4a>
 800a07a:	782b      	ldrb	r3, [r5, #0]
 800a07c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a080:	2b58      	cmp	r3, #88	; 0x58
 800a082:	d14f      	bne.n	800a124 <_strtol_l.isra.0+0xe4>
 800a084:	786c      	ldrb	r4, [r5, #1]
 800a086:	2610      	movs	r6, #16
 800a088:	3502      	adds	r5, #2
 800a08a:	2a00      	cmp	r2, #0
 800a08c:	bf14      	ite	ne
 800a08e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a092:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a096:	2700      	movs	r7, #0
 800a098:	fbb1 fcf6 	udiv	ip, r1, r6
 800a09c:	4638      	mov	r0, r7
 800a09e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a0a2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a0a6:	2b09      	cmp	r3, #9
 800a0a8:	d817      	bhi.n	800a0da <_strtol_l.isra.0+0x9a>
 800a0aa:	461c      	mov	r4, r3
 800a0ac:	42a6      	cmp	r6, r4
 800a0ae:	dd23      	ble.n	800a0f8 <_strtol_l.isra.0+0xb8>
 800a0b0:	1c7b      	adds	r3, r7, #1
 800a0b2:	d007      	beq.n	800a0c4 <_strtol_l.isra.0+0x84>
 800a0b4:	4584      	cmp	ip, r0
 800a0b6:	d31c      	bcc.n	800a0f2 <_strtol_l.isra.0+0xb2>
 800a0b8:	d101      	bne.n	800a0be <_strtol_l.isra.0+0x7e>
 800a0ba:	45a6      	cmp	lr, r4
 800a0bc:	db19      	blt.n	800a0f2 <_strtol_l.isra.0+0xb2>
 800a0be:	fb00 4006 	mla	r0, r0, r6, r4
 800a0c2:	2701      	movs	r7, #1
 800a0c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0c8:	e7eb      	b.n	800a0a2 <_strtol_l.isra.0+0x62>
 800a0ca:	462f      	mov	r7, r5
 800a0cc:	e7bf      	b.n	800a04e <_strtol_l.isra.0+0xe>
 800a0ce:	2c2b      	cmp	r4, #43	; 0x2b
 800a0d0:	bf04      	itt	eq
 800a0d2:	1cbd      	addeq	r5, r7, #2
 800a0d4:	787c      	ldrbeq	r4, [r7, #1]
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	e7c9      	b.n	800a06e <_strtol_l.isra.0+0x2e>
 800a0da:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a0de:	2b19      	cmp	r3, #25
 800a0e0:	d801      	bhi.n	800a0e6 <_strtol_l.isra.0+0xa6>
 800a0e2:	3c37      	subs	r4, #55	; 0x37
 800a0e4:	e7e2      	b.n	800a0ac <_strtol_l.isra.0+0x6c>
 800a0e6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a0ea:	2b19      	cmp	r3, #25
 800a0ec:	d804      	bhi.n	800a0f8 <_strtol_l.isra.0+0xb8>
 800a0ee:	3c57      	subs	r4, #87	; 0x57
 800a0f0:	e7dc      	b.n	800a0ac <_strtol_l.isra.0+0x6c>
 800a0f2:	f04f 37ff 	mov.w	r7, #4294967295
 800a0f6:	e7e5      	b.n	800a0c4 <_strtol_l.isra.0+0x84>
 800a0f8:	1c7b      	adds	r3, r7, #1
 800a0fa:	d108      	bne.n	800a10e <_strtol_l.isra.0+0xce>
 800a0fc:	2322      	movs	r3, #34	; 0x22
 800a0fe:	f8c8 3000 	str.w	r3, [r8]
 800a102:	4608      	mov	r0, r1
 800a104:	f1ba 0f00 	cmp.w	sl, #0
 800a108:	d107      	bne.n	800a11a <_strtol_l.isra.0+0xda>
 800a10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a10e:	b102      	cbz	r2, 800a112 <_strtol_l.isra.0+0xd2>
 800a110:	4240      	negs	r0, r0
 800a112:	f1ba 0f00 	cmp.w	sl, #0
 800a116:	d0f8      	beq.n	800a10a <_strtol_l.isra.0+0xca>
 800a118:	b10f      	cbz	r7, 800a11e <_strtol_l.isra.0+0xde>
 800a11a:	f105 39ff 	add.w	r9, r5, #4294967295
 800a11e:	f8ca 9000 	str.w	r9, [sl]
 800a122:	e7f2      	b.n	800a10a <_strtol_l.isra.0+0xca>
 800a124:	2430      	movs	r4, #48	; 0x30
 800a126:	2e00      	cmp	r6, #0
 800a128:	d1af      	bne.n	800a08a <_strtol_l.isra.0+0x4a>
 800a12a:	2608      	movs	r6, #8
 800a12c:	e7ad      	b.n	800a08a <_strtol_l.isra.0+0x4a>
 800a12e:	2c30      	cmp	r4, #48	; 0x30
 800a130:	d0a3      	beq.n	800a07a <_strtol_l.isra.0+0x3a>
 800a132:	260a      	movs	r6, #10
 800a134:	e7a9      	b.n	800a08a <_strtol_l.isra.0+0x4a>
	...

0800a138 <strtol>:
 800a138:	4b08      	ldr	r3, [pc, #32]	; (800a15c <strtol+0x24>)
 800a13a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a13c:	681c      	ldr	r4, [r3, #0]
 800a13e:	4d08      	ldr	r5, [pc, #32]	; (800a160 <strtol+0x28>)
 800a140:	6a23      	ldr	r3, [r4, #32]
 800a142:	2b00      	cmp	r3, #0
 800a144:	bf08      	it	eq
 800a146:	462b      	moveq	r3, r5
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	4613      	mov	r3, r2
 800a14c:	460a      	mov	r2, r1
 800a14e:	4601      	mov	r1, r0
 800a150:	4620      	mov	r0, r4
 800a152:	f7ff ff75 	bl	800a040 <_strtol_l.isra.0>
 800a156:	b003      	add	sp, #12
 800a158:	bd30      	pop	{r4, r5, pc}
 800a15a:	bf00      	nop
 800a15c:	20000044 	.word	0x20000044
 800a160:	200000a8 	.word	0x200000a8

0800a164 <print_e>:
 800a164:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a166:	b087      	sub	sp, #28
 800a168:	ec43 2b10 	vmov	d0, r2, r3
 800a16c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a16e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800a172:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a174:	ab04      	add	r3, sp, #16
 800a176:	9301      	str	r3, [sp, #4]
 800a178:	ab03      	add	r3, sp, #12
 800a17a:	9300      	str	r3, [sp, #0]
 800a17c:	460f      	mov	r7, r1
 800a17e:	ab05      	add	r3, sp, #20
 800a180:	2102      	movs	r1, #2
 800a182:	1c62      	adds	r2, r4, #1
 800a184:	f001 f9c8 	bl	800b518 <_dtoa_r>
 800a188:	4601      	mov	r1, r0
 800a18a:	9805      	ldr	r0, [sp, #20]
 800a18c:	f242 730f 	movw	r3, #9999	; 0x270f
 800a190:	4298      	cmp	r0, r3
 800a192:	d104      	bne.n	800a19e <print_e+0x3a>
 800a194:	4638      	mov	r0, r7
 800a196:	f001 f909 	bl	800b3ac <strcpy>
 800a19a:	b007      	add	sp, #28
 800a19c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a19e:	780b      	ldrb	r3, [r1, #0]
 800a1a0:	703b      	strb	r3, [r7, #0]
 800a1a2:	2d00      	cmp	r5, #0
 800a1a4:	d143      	bne.n	800a22e <print_e+0xca>
 800a1a6:	2c00      	cmp	r4, #0
 800a1a8:	d141      	bne.n	800a22e <print_e+0xca>
 800a1aa:	1c7b      	adds	r3, r7, #1
 800a1ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a1b0:	b10a      	cbz	r2, 800a1b6 <print_e+0x52>
 800a1b2:	2c00      	cmp	r4, #0
 800a1b4:	dc3f      	bgt.n	800a236 <print_e+0xd2>
 800a1b6:	2e67      	cmp	r6, #103	; 0x67
 800a1b8:	d044      	beq.n	800a244 <print_e+0xe0>
 800a1ba:	2e47      	cmp	r6, #71	; 0x47
 800a1bc:	d044      	beq.n	800a248 <print_e+0xe4>
 800a1be:	461a      	mov	r2, r3
 800a1c0:	191d      	adds	r5, r3, r4
 800a1c2:	2730      	movs	r7, #48	; 0x30
 800a1c4:	1aa9      	subs	r1, r5, r2
 800a1c6:	2900      	cmp	r1, #0
 800a1c8:	dc39      	bgt.n	800a23e <print_e+0xda>
 800a1ca:	2c00      	cmp	r4, #0
 800a1cc:	bfa8      	it	ge
 800a1ce:	191b      	addge	r3, r3, r4
 800a1d0:	1e41      	subs	r1, r0, #1
 800a1d2:	2900      	cmp	r1, #0
 800a1d4:	bfb8      	it	lt
 800a1d6:	f1c0 0001 	rsblt	r0, r0, #1
 800a1da:	9105      	str	r1, [sp, #20]
 800a1dc:	bfb8      	it	lt
 800a1de:	9005      	strlt	r0, [sp, #20]
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	9805      	ldr	r0, [sp, #20]
 800a1e4:	f802 6b02 	strb.w	r6, [r2], #2
 800a1e8:	bfb5      	itete	lt
 800a1ea:	212d      	movlt	r1, #45	; 0x2d
 800a1ec:	212b      	movge	r1, #43	; 0x2b
 800a1ee:	7059      	strblt	r1, [r3, #1]
 800a1f0:	7059      	strbge	r1, [r3, #1]
 800a1f2:	2863      	cmp	r0, #99	; 0x63
 800a1f4:	dd0b      	ble.n	800a20e <print_e+0xaa>
 800a1f6:	2164      	movs	r1, #100	; 0x64
 800a1f8:	fb90 f1f1 	sdiv	r1, r0, r1
 800a1fc:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800a200:	1cda      	adds	r2, r3, #3
 800a202:	709c      	strb	r4, [r3, #2]
 800a204:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800a208:	fb03 0101 	mla	r1, r3, r1, r0
 800a20c:	9105      	str	r1, [sp, #20]
 800a20e:	9905      	ldr	r1, [sp, #20]
 800a210:	230a      	movs	r3, #10
 800a212:	fb91 f3f3 	sdiv	r3, r1, r3
 800a216:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a21a:	7010      	strb	r0, [r2, #0]
 800a21c:	f06f 0009 	mvn.w	r0, #9
 800a220:	fb00 1303 	mla	r3, r0, r3, r1
 800a224:	3330      	adds	r3, #48	; 0x30
 800a226:	7053      	strb	r3, [r2, #1]
 800a228:	2300      	movs	r3, #0
 800a22a:	7093      	strb	r3, [r2, #2]
 800a22c:	e7b5      	b.n	800a19a <print_e+0x36>
 800a22e:	222e      	movs	r2, #46	; 0x2e
 800a230:	1cbb      	adds	r3, r7, #2
 800a232:	707a      	strb	r2, [r7, #1]
 800a234:	e7ba      	b.n	800a1ac <print_e+0x48>
 800a236:	f803 2b01 	strb.w	r2, [r3], #1
 800a23a:	3c01      	subs	r4, #1
 800a23c:	e7b6      	b.n	800a1ac <print_e+0x48>
 800a23e:	f802 7b01 	strb.w	r7, [r2], #1
 800a242:	e7bf      	b.n	800a1c4 <print_e+0x60>
 800a244:	2665      	movs	r6, #101	; 0x65
 800a246:	e7c3      	b.n	800a1d0 <print_e+0x6c>
 800a248:	2645      	movs	r6, #69	; 0x45
 800a24a:	e7c1      	b.n	800a1d0 <print_e+0x6c>
 800a24c:	0000      	movs	r0, r0
	...

0800a250 <_gcvt>:
 800a250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a254:	ec55 4b10 	vmov	r4, r5, d0
 800a258:	b088      	sub	sp, #32
 800a25a:	4681      	mov	r9, r0
 800a25c:	460f      	mov	r7, r1
 800a25e:	4616      	mov	r6, r2
 800a260:	469a      	mov	sl, r3
 800a262:	2200      	movs	r2, #0
 800a264:	2300      	movs	r3, #0
 800a266:	ee10 0a10 	vmov	r0, s0
 800a26a:	4629      	mov	r1, r5
 800a26c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800a270:	f7f6 fbe4 	bl	8000a3c <__aeabi_dcmplt>
 800a274:	b110      	cbz	r0, 800a27c <_gcvt+0x2c>
 800a276:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a27a:	461d      	mov	r5, r3
 800a27c:	2200      	movs	r2, #0
 800a27e:	2300      	movs	r3, #0
 800a280:	4620      	mov	r0, r4
 800a282:	4629      	mov	r1, r5
 800a284:	f7f6 fbd0 	bl	8000a28 <__aeabi_dcmpeq>
 800a288:	b138      	cbz	r0, 800a29a <_gcvt+0x4a>
 800a28a:	2330      	movs	r3, #48	; 0x30
 800a28c:	7033      	strb	r3, [r6, #0]
 800a28e:	2300      	movs	r3, #0
 800a290:	7073      	strb	r3, [r6, #1]
 800a292:	4630      	mov	r0, r6
 800a294:	b008      	add	sp, #32
 800a296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a29a:	a350      	add	r3, pc, #320	; (adr r3, 800a3dc <_gcvt+0x18c>)
 800a29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	4629      	mov	r1, r5
 800a2a4:	f7f6 fbd4 	bl	8000a50 <__aeabi_dcmple>
 800a2a8:	b150      	cbz	r0, 800a2c0 <_gcvt+0x70>
 800a2aa:	3f01      	subs	r7, #1
 800a2ac:	e9cd a801 	strd	sl, r8, [sp, #4]
 800a2b0:	9700      	str	r7, [sp, #0]
 800a2b2:	4622      	mov	r2, r4
 800a2b4:	462b      	mov	r3, r5
 800a2b6:	4631      	mov	r1, r6
 800a2b8:	4648      	mov	r0, r9
 800a2ba:	f7ff ff53 	bl	800a164 <print_e>
 800a2be:	e7e8      	b.n	800a292 <_gcvt+0x42>
 800a2c0:	4638      	mov	r0, r7
 800a2c2:	f000 ff9b 	bl	800b1fc <_mprec_log10>
 800a2c6:	4622      	mov	r2, r4
 800a2c8:	462b      	mov	r3, r5
 800a2ca:	ec51 0b10 	vmov	r0, r1, d0
 800a2ce:	f7f6 fbbf 	bl	8000a50 <__aeabi_dcmple>
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	d1e9      	bne.n	800a2aa <_gcvt+0x5a>
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	4b3f      	ldr	r3, [pc, #252]	; (800a3d8 <_gcvt+0x188>)
 800a2da:	4620      	mov	r0, r4
 800a2dc:	4629      	mov	r1, r5
 800a2de:	f7f6 fbad 	bl	8000a3c <__aeabi_dcmplt>
 800a2e2:	aa07      	add	r2, sp, #28
 800a2e4:	ab06      	add	r3, sp, #24
 800a2e6:	e9cd 3200 	strd	r3, r2, [sp]
 800a2ea:	ab05      	add	r3, sp, #20
 800a2ec:	463a      	mov	r2, r7
 800a2ee:	b360      	cbz	r0, 800a34a <_gcvt+0xfa>
 800a2f0:	2103      	movs	r1, #3
 800a2f2:	ec45 4b10 	vmov	d0, r4, r5
 800a2f6:	4648      	mov	r0, r9
 800a2f8:	f001 f90e 	bl	800b518 <_dtoa_r>
 800a2fc:	9a05      	ldr	r2, [sp, #20]
 800a2fe:	f242 730f 	movw	r3, #9999	; 0x270f
 800a302:	429a      	cmp	r2, r3
 800a304:	d023      	beq.n	800a34e <_gcvt+0xfe>
 800a306:	4633      	mov	r3, r6
 800a308:	4437      	add	r7, r6
 800a30a:	4601      	mov	r1, r0
 800a30c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a310:	9d05      	ldr	r5, [sp, #20]
 800a312:	1afc      	subs	r4, r7, r3
 800a314:	b32a      	cbz	r2, 800a362 <_gcvt+0x112>
 800a316:	2d00      	cmp	r5, #0
 800a318:	dc1e      	bgt.n	800a358 <_gcvt+0x108>
 800a31a:	f1b8 0f00 	cmp.w	r8, #0
 800a31e:	d102      	bne.n	800a326 <_gcvt+0xd6>
 800a320:	780a      	ldrb	r2, [r1, #0]
 800a322:	2a00      	cmp	r2, #0
 800a324:	d045      	beq.n	800a3b2 <_gcvt+0x162>
 800a326:	429e      	cmp	r6, r3
 800a328:	bf02      	ittt	eq
 800a32a:	1c73      	addeq	r3, r6, #1
 800a32c:	2230      	moveq	r2, #48	; 0x30
 800a32e:	7032      	strbeq	r2, [r6, #0]
 800a330:	222e      	movs	r2, #46	; 0x2e
 800a332:	701a      	strb	r2, [r3, #0]
 800a334:	9a05      	ldr	r2, [sp, #20]
 800a336:	3301      	adds	r3, #1
 800a338:	2000      	movs	r0, #0
 800a33a:	2730      	movs	r7, #48	; 0x30
 800a33c:	2a00      	cmp	r2, #0
 800a33e:	4615      	mov	r5, r2
 800a340:	db24      	blt.n	800a38c <_gcvt+0x13c>
 800a342:	b100      	cbz	r0, 800a346 <_gcvt+0xf6>
 800a344:	9205      	str	r2, [sp, #20]
 800a346:	1e4a      	subs	r2, r1, #1
 800a348:	e02b      	b.n	800a3a2 <_gcvt+0x152>
 800a34a:	2102      	movs	r1, #2
 800a34c:	e7d1      	b.n	800a2f2 <_gcvt+0xa2>
 800a34e:	4601      	mov	r1, r0
 800a350:	4630      	mov	r0, r6
 800a352:	f001 f82b 	bl	800b3ac <strcpy>
 800a356:	e79c      	b.n	800a292 <_gcvt+0x42>
 800a358:	3d01      	subs	r5, #1
 800a35a:	f803 2b01 	strb.w	r2, [r3], #1
 800a35e:	9505      	str	r5, [sp, #20]
 800a360:	e7d3      	b.n	800a30a <_gcvt+0xba>
 800a362:	1b2d      	subs	r5, r5, r4
 800a364:	2730      	movs	r7, #48	; 0x30
 800a366:	e005      	b.n	800a374 <_gcvt+0x124>
 800a368:	2c00      	cmp	r4, #0
 800a36a:	dd06      	ble.n	800a37a <_gcvt+0x12a>
 800a36c:	f803 7b01 	strb.w	r7, [r3], #1
 800a370:	3c01      	subs	r4, #1
 800a372:	2201      	movs	r2, #1
 800a374:	1928      	adds	r0, r5, r4
 800a376:	2800      	cmp	r0, #0
 800a378:	dcf6      	bgt.n	800a368 <_gcvt+0x118>
 800a37a:	2a00      	cmp	r2, #0
 800a37c:	d0cd      	beq.n	800a31a <_gcvt+0xca>
 800a37e:	9005      	str	r0, [sp, #20]
 800a380:	e7cb      	b.n	800a31a <_gcvt+0xca>
 800a382:	f803 7b01 	strb.w	r7, [r3], #1
 800a386:	3c01      	subs	r4, #1
 800a388:	2001      	movs	r0, #1
 800a38a:	e7d7      	b.n	800a33c <_gcvt+0xec>
 800a38c:	2c00      	cmp	r4, #0
 800a38e:	f102 0201 	add.w	r2, r2, #1
 800a392:	dcf6      	bgt.n	800a382 <_gcvt+0x132>
 800a394:	2800      	cmp	r0, #0
 800a396:	d0d6      	beq.n	800a346 <_gcvt+0xf6>
 800a398:	9505      	str	r5, [sp, #20]
 800a39a:	e7d4      	b.n	800a346 <_gcvt+0xf6>
 800a39c:	f803 1b01 	strb.w	r1, [r3], #1
 800a3a0:	3c01      	subs	r4, #1
 800a3a2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800a3a6:	b109      	cbz	r1, 800a3ac <_gcvt+0x15c>
 800a3a8:	2c00      	cmp	r4, #0
 800a3aa:	dcf7      	bgt.n	800a39c <_gcvt+0x14c>
 800a3ac:	f1b8 0f00 	cmp.w	r8, #0
 800a3b0:	d10b      	bne.n	800a3ca <_gcvt+0x17a>
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	701a      	strb	r2, [r3, #0]
 800a3b6:	e76c      	b.n	800a292 <_gcvt+0x42>
 800a3b8:	f802 5b01 	strb.w	r5, [r2], #1
 800a3bc:	1a81      	subs	r1, r0, r2
 800a3be:	2900      	cmp	r1, #0
 800a3c0:	dcfa      	bgt.n	800a3b8 <_gcvt+0x168>
 800a3c2:	2c00      	cmp	r4, #0
 800a3c4:	bfa8      	it	ge
 800a3c6:	191b      	addge	r3, r3, r4
 800a3c8:	e7f3      	b.n	800a3b2 <_gcvt+0x162>
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	1918      	adds	r0, r3, r4
 800a3ce:	2530      	movs	r5, #48	; 0x30
 800a3d0:	e7f4      	b.n	800a3bc <_gcvt+0x16c>
 800a3d2:	bf00      	nop
 800a3d4:	f3af 8000 	nop.w
 800a3d8:	3ff00000 	.word	0x3ff00000
 800a3dc:	eb1c432d 	.word	0xeb1c432d
 800a3e0:	3f1a36e2 	.word	0x3f1a36e2

0800a3e4 <rshift>:
 800a3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3e6:	6906      	ldr	r6, [r0, #16]
 800a3e8:	114b      	asrs	r3, r1, #5
 800a3ea:	429e      	cmp	r6, r3
 800a3ec:	f100 0414 	add.w	r4, r0, #20
 800a3f0:	dd30      	ble.n	800a454 <rshift+0x70>
 800a3f2:	f011 011f 	ands.w	r1, r1, #31
 800a3f6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a3fa:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a3fe:	d108      	bne.n	800a412 <rshift+0x2e>
 800a400:	4621      	mov	r1, r4
 800a402:	42b2      	cmp	r2, r6
 800a404:	460b      	mov	r3, r1
 800a406:	d211      	bcs.n	800a42c <rshift+0x48>
 800a408:	f852 3b04 	ldr.w	r3, [r2], #4
 800a40c:	f841 3b04 	str.w	r3, [r1], #4
 800a410:	e7f7      	b.n	800a402 <rshift+0x1e>
 800a412:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a416:	f1c1 0c20 	rsb	ip, r1, #32
 800a41a:	40cd      	lsrs	r5, r1
 800a41c:	3204      	adds	r2, #4
 800a41e:	4623      	mov	r3, r4
 800a420:	42b2      	cmp	r2, r6
 800a422:	4617      	mov	r7, r2
 800a424:	d30c      	bcc.n	800a440 <rshift+0x5c>
 800a426:	601d      	str	r5, [r3, #0]
 800a428:	b105      	cbz	r5, 800a42c <rshift+0x48>
 800a42a:	3304      	adds	r3, #4
 800a42c:	1b1a      	subs	r2, r3, r4
 800a42e:	42a3      	cmp	r3, r4
 800a430:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a434:	bf08      	it	eq
 800a436:	2300      	moveq	r3, #0
 800a438:	6102      	str	r2, [r0, #16]
 800a43a:	bf08      	it	eq
 800a43c:	6143      	streq	r3, [r0, #20]
 800a43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a440:	683f      	ldr	r7, [r7, #0]
 800a442:	fa07 f70c 	lsl.w	r7, r7, ip
 800a446:	433d      	orrs	r5, r7
 800a448:	f843 5b04 	str.w	r5, [r3], #4
 800a44c:	f852 5b04 	ldr.w	r5, [r2], #4
 800a450:	40cd      	lsrs	r5, r1
 800a452:	e7e5      	b.n	800a420 <rshift+0x3c>
 800a454:	4623      	mov	r3, r4
 800a456:	e7e9      	b.n	800a42c <rshift+0x48>

0800a458 <__hexdig_fun>:
 800a458:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a45c:	2b09      	cmp	r3, #9
 800a45e:	d802      	bhi.n	800a466 <__hexdig_fun+0xe>
 800a460:	3820      	subs	r0, #32
 800a462:	b2c0      	uxtb	r0, r0
 800a464:	4770      	bx	lr
 800a466:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a46a:	2b05      	cmp	r3, #5
 800a46c:	d801      	bhi.n	800a472 <__hexdig_fun+0x1a>
 800a46e:	3847      	subs	r0, #71	; 0x47
 800a470:	e7f7      	b.n	800a462 <__hexdig_fun+0xa>
 800a472:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a476:	2b05      	cmp	r3, #5
 800a478:	d801      	bhi.n	800a47e <__hexdig_fun+0x26>
 800a47a:	3827      	subs	r0, #39	; 0x27
 800a47c:	e7f1      	b.n	800a462 <__hexdig_fun+0xa>
 800a47e:	2000      	movs	r0, #0
 800a480:	4770      	bx	lr

0800a482 <__gethex>:
 800a482:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a486:	b08b      	sub	sp, #44	; 0x2c
 800a488:	468a      	mov	sl, r1
 800a48a:	9002      	str	r0, [sp, #8]
 800a48c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a48e:	9306      	str	r3, [sp, #24]
 800a490:	4690      	mov	r8, r2
 800a492:	f000 fad0 	bl	800aa36 <__localeconv_l>
 800a496:	6803      	ldr	r3, [r0, #0]
 800a498:	9303      	str	r3, [sp, #12]
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7f5 fe98 	bl	80001d0 <strlen>
 800a4a0:	9b03      	ldr	r3, [sp, #12]
 800a4a2:	9001      	str	r0, [sp, #4]
 800a4a4:	4403      	add	r3, r0
 800a4a6:	f04f 0b00 	mov.w	fp, #0
 800a4aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a4ae:	9307      	str	r3, [sp, #28]
 800a4b0:	f8da 3000 	ldr.w	r3, [sl]
 800a4b4:	3302      	adds	r3, #2
 800a4b6:	461f      	mov	r7, r3
 800a4b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a4bc:	2830      	cmp	r0, #48	; 0x30
 800a4be:	d06c      	beq.n	800a59a <__gethex+0x118>
 800a4c0:	f7ff ffca 	bl	800a458 <__hexdig_fun>
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	d16a      	bne.n	800a5a0 <__gethex+0x11e>
 800a4ca:	9a01      	ldr	r2, [sp, #4]
 800a4cc:	9903      	ldr	r1, [sp, #12]
 800a4ce:	4638      	mov	r0, r7
 800a4d0:	f000 ff74 	bl	800b3bc <strncmp>
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	d166      	bne.n	800a5a6 <__gethex+0x124>
 800a4d8:	9b01      	ldr	r3, [sp, #4]
 800a4da:	5cf8      	ldrb	r0, [r7, r3]
 800a4dc:	18fe      	adds	r6, r7, r3
 800a4de:	f7ff ffbb 	bl	800a458 <__hexdig_fun>
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	d062      	beq.n	800a5ac <__gethex+0x12a>
 800a4e6:	4633      	mov	r3, r6
 800a4e8:	7818      	ldrb	r0, [r3, #0]
 800a4ea:	2830      	cmp	r0, #48	; 0x30
 800a4ec:	461f      	mov	r7, r3
 800a4ee:	f103 0301 	add.w	r3, r3, #1
 800a4f2:	d0f9      	beq.n	800a4e8 <__gethex+0x66>
 800a4f4:	f7ff ffb0 	bl	800a458 <__hexdig_fun>
 800a4f8:	fab0 f580 	clz	r5, r0
 800a4fc:	096d      	lsrs	r5, r5, #5
 800a4fe:	4634      	mov	r4, r6
 800a500:	f04f 0b01 	mov.w	fp, #1
 800a504:	463a      	mov	r2, r7
 800a506:	4616      	mov	r6, r2
 800a508:	3201      	adds	r2, #1
 800a50a:	7830      	ldrb	r0, [r6, #0]
 800a50c:	f7ff ffa4 	bl	800a458 <__hexdig_fun>
 800a510:	2800      	cmp	r0, #0
 800a512:	d1f8      	bne.n	800a506 <__gethex+0x84>
 800a514:	9a01      	ldr	r2, [sp, #4]
 800a516:	9903      	ldr	r1, [sp, #12]
 800a518:	4630      	mov	r0, r6
 800a51a:	f000 ff4f 	bl	800b3bc <strncmp>
 800a51e:	b950      	cbnz	r0, 800a536 <__gethex+0xb4>
 800a520:	b954      	cbnz	r4, 800a538 <__gethex+0xb6>
 800a522:	9b01      	ldr	r3, [sp, #4]
 800a524:	18f4      	adds	r4, r6, r3
 800a526:	4622      	mov	r2, r4
 800a528:	4616      	mov	r6, r2
 800a52a:	3201      	adds	r2, #1
 800a52c:	7830      	ldrb	r0, [r6, #0]
 800a52e:	f7ff ff93 	bl	800a458 <__hexdig_fun>
 800a532:	2800      	cmp	r0, #0
 800a534:	d1f8      	bne.n	800a528 <__gethex+0xa6>
 800a536:	b10c      	cbz	r4, 800a53c <__gethex+0xba>
 800a538:	1ba4      	subs	r4, r4, r6
 800a53a:	00a4      	lsls	r4, r4, #2
 800a53c:	7833      	ldrb	r3, [r6, #0]
 800a53e:	2b50      	cmp	r3, #80	; 0x50
 800a540:	d001      	beq.n	800a546 <__gethex+0xc4>
 800a542:	2b70      	cmp	r3, #112	; 0x70
 800a544:	d140      	bne.n	800a5c8 <__gethex+0x146>
 800a546:	7873      	ldrb	r3, [r6, #1]
 800a548:	2b2b      	cmp	r3, #43	; 0x2b
 800a54a:	d031      	beq.n	800a5b0 <__gethex+0x12e>
 800a54c:	2b2d      	cmp	r3, #45	; 0x2d
 800a54e:	d033      	beq.n	800a5b8 <__gethex+0x136>
 800a550:	1c71      	adds	r1, r6, #1
 800a552:	f04f 0900 	mov.w	r9, #0
 800a556:	7808      	ldrb	r0, [r1, #0]
 800a558:	f7ff ff7e 	bl	800a458 <__hexdig_fun>
 800a55c:	1e43      	subs	r3, r0, #1
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	2b18      	cmp	r3, #24
 800a562:	d831      	bhi.n	800a5c8 <__gethex+0x146>
 800a564:	f1a0 0210 	sub.w	r2, r0, #16
 800a568:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a56c:	f7ff ff74 	bl	800a458 <__hexdig_fun>
 800a570:	1e43      	subs	r3, r0, #1
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b18      	cmp	r3, #24
 800a576:	d922      	bls.n	800a5be <__gethex+0x13c>
 800a578:	f1b9 0f00 	cmp.w	r9, #0
 800a57c:	d000      	beq.n	800a580 <__gethex+0xfe>
 800a57e:	4252      	negs	r2, r2
 800a580:	4414      	add	r4, r2
 800a582:	f8ca 1000 	str.w	r1, [sl]
 800a586:	b30d      	cbz	r5, 800a5cc <__gethex+0x14a>
 800a588:	f1bb 0f00 	cmp.w	fp, #0
 800a58c:	bf0c      	ite	eq
 800a58e:	2706      	moveq	r7, #6
 800a590:	2700      	movne	r7, #0
 800a592:	4638      	mov	r0, r7
 800a594:	b00b      	add	sp, #44	; 0x2c
 800a596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a59a:	f10b 0b01 	add.w	fp, fp, #1
 800a59e:	e78a      	b.n	800a4b6 <__gethex+0x34>
 800a5a0:	2500      	movs	r5, #0
 800a5a2:	462c      	mov	r4, r5
 800a5a4:	e7ae      	b.n	800a504 <__gethex+0x82>
 800a5a6:	463e      	mov	r6, r7
 800a5a8:	2501      	movs	r5, #1
 800a5aa:	e7c7      	b.n	800a53c <__gethex+0xba>
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	e7fb      	b.n	800a5a8 <__gethex+0x126>
 800a5b0:	f04f 0900 	mov.w	r9, #0
 800a5b4:	1cb1      	adds	r1, r6, #2
 800a5b6:	e7ce      	b.n	800a556 <__gethex+0xd4>
 800a5b8:	f04f 0901 	mov.w	r9, #1
 800a5bc:	e7fa      	b.n	800a5b4 <__gethex+0x132>
 800a5be:	230a      	movs	r3, #10
 800a5c0:	fb03 0202 	mla	r2, r3, r2, r0
 800a5c4:	3a10      	subs	r2, #16
 800a5c6:	e7cf      	b.n	800a568 <__gethex+0xe6>
 800a5c8:	4631      	mov	r1, r6
 800a5ca:	e7da      	b.n	800a582 <__gethex+0x100>
 800a5cc:	1bf3      	subs	r3, r6, r7
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	2b07      	cmp	r3, #7
 800a5d4:	dc49      	bgt.n	800a66a <__gethex+0x1e8>
 800a5d6:	9802      	ldr	r0, [sp, #8]
 800a5d8:	f000 fa4c 	bl	800aa74 <_Balloc>
 800a5dc:	9b01      	ldr	r3, [sp, #4]
 800a5de:	f100 0914 	add.w	r9, r0, #20
 800a5e2:	f04f 0b00 	mov.w	fp, #0
 800a5e6:	f1c3 0301 	rsb	r3, r3, #1
 800a5ea:	4605      	mov	r5, r0
 800a5ec:	f8cd 9010 	str.w	r9, [sp, #16]
 800a5f0:	46da      	mov	sl, fp
 800a5f2:	9308      	str	r3, [sp, #32]
 800a5f4:	42b7      	cmp	r7, r6
 800a5f6:	d33b      	bcc.n	800a670 <__gethex+0x1ee>
 800a5f8:	9804      	ldr	r0, [sp, #16]
 800a5fa:	f840 ab04 	str.w	sl, [r0], #4
 800a5fe:	eba0 0009 	sub.w	r0, r0, r9
 800a602:	1080      	asrs	r0, r0, #2
 800a604:	6128      	str	r0, [r5, #16]
 800a606:	0147      	lsls	r7, r0, #5
 800a608:	4650      	mov	r0, sl
 800a60a:	f000 faf7 	bl	800abfc <__hi0bits>
 800a60e:	f8d8 6000 	ldr.w	r6, [r8]
 800a612:	1a3f      	subs	r7, r7, r0
 800a614:	42b7      	cmp	r7, r6
 800a616:	dd64      	ble.n	800a6e2 <__gethex+0x260>
 800a618:	1bbf      	subs	r7, r7, r6
 800a61a:	4639      	mov	r1, r7
 800a61c:	4628      	mov	r0, r5
 800a61e:	f000 fe25 	bl	800b26c <__any_on>
 800a622:	4682      	mov	sl, r0
 800a624:	b178      	cbz	r0, 800a646 <__gethex+0x1c4>
 800a626:	1e7b      	subs	r3, r7, #1
 800a628:	1159      	asrs	r1, r3, #5
 800a62a:	f003 021f 	and.w	r2, r3, #31
 800a62e:	f04f 0a01 	mov.w	sl, #1
 800a632:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a636:	fa0a f202 	lsl.w	r2, sl, r2
 800a63a:	420a      	tst	r2, r1
 800a63c:	d003      	beq.n	800a646 <__gethex+0x1c4>
 800a63e:	4553      	cmp	r3, sl
 800a640:	dc46      	bgt.n	800a6d0 <__gethex+0x24e>
 800a642:	f04f 0a02 	mov.w	sl, #2
 800a646:	4639      	mov	r1, r7
 800a648:	4628      	mov	r0, r5
 800a64a:	f7ff fecb 	bl	800a3e4 <rshift>
 800a64e:	443c      	add	r4, r7
 800a650:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a654:	42a3      	cmp	r3, r4
 800a656:	da52      	bge.n	800a6fe <__gethex+0x27c>
 800a658:	4629      	mov	r1, r5
 800a65a:	9802      	ldr	r0, [sp, #8]
 800a65c:	f000 fa3e 	bl	800aadc <_Bfree>
 800a660:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a662:	2300      	movs	r3, #0
 800a664:	6013      	str	r3, [r2, #0]
 800a666:	27a3      	movs	r7, #163	; 0xa3
 800a668:	e793      	b.n	800a592 <__gethex+0x110>
 800a66a:	3101      	adds	r1, #1
 800a66c:	105b      	asrs	r3, r3, #1
 800a66e:	e7b0      	b.n	800a5d2 <__gethex+0x150>
 800a670:	1e73      	subs	r3, r6, #1
 800a672:	9305      	str	r3, [sp, #20]
 800a674:	9a07      	ldr	r2, [sp, #28]
 800a676:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d018      	beq.n	800a6b0 <__gethex+0x22e>
 800a67e:	f1bb 0f20 	cmp.w	fp, #32
 800a682:	d107      	bne.n	800a694 <__gethex+0x212>
 800a684:	9b04      	ldr	r3, [sp, #16]
 800a686:	f8c3 a000 	str.w	sl, [r3]
 800a68a:	3304      	adds	r3, #4
 800a68c:	f04f 0a00 	mov.w	sl, #0
 800a690:	9304      	str	r3, [sp, #16]
 800a692:	46d3      	mov	fp, sl
 800a694:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a698:	f7ff fede 	bl	800a458 <__hexdig_fun>
 800a69c:	f000 000f 	and.w	r0, r0, #15
 800a6a0:	fa00 f00b 	lsl.w	r0, r0, fp
 800a6a4:	ea4a 0a00 	orr.w	sl, sl, r0
 800a6a8:	f10b 0b04 	add.w	fp, fp, #4
 800a6ac:	9b05      	ldr	r3, [sp, #20]
 800a6ae:	e00d      	b.n	800a6cc <__gethex+0x24a>
 800a6b0:	9b05      	ldr	r3, [sp, #20]
 800a6b2:	9a08      	ldr	r2, [sp, #32]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	42bb      	cmp	r3, r7
 800a6b8:	d3e1      	bcc.n	800a67e <__gethex+0x1fc>
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	9a01      	ldr	r2, [sp, #4]
 800a6be:	9903      	ldr	r1, [sp, #12]
 800a6c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a6c2:	f000 fe7b 	bl	800b3bc <strncmp>
 800a6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	d1d8      	bne.n	800a67e <__gethex+0x1fc>
 800a6cc:	461e      	mov	r6, r3
 800a6ce:	e791      	b.n	800a5f4 <__gethex+0x172>
 800a6d0:	1eb9      	subs	r1, r7, #2
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	f000 fdca 	bl	800b26c <__any_on>
 800a6d8:	2800      	cmp	r0, #0
 800a6da:	d0b2      	beq.n	800a642 <__gethex+0x1c0>
 800a6dc:	f04f 0a03 	mov.w	sl, #3
 800a6e0:	e7b1      	b.n	800a646 <__gethex+0x1c4>
 800a6e2:	da09      	bge.n	800a6f8 <__gethex+0x276>
 800a6e4:	1bf7      	subs	r7, r6, r7
 800a6e6:	4629      	mov	r1, r5
 800a6e8:	463a      	mov	r2, r7
 800a6ea:	9802      	ldr	r0, [sp, #8]
 800a6ec:	f000 fbc2 	bl	800ae74 <__lshift>
 800a6f0:	1be4      	subs	r4, r4, r7
 800a6f2:	4605      	mov	r5, r0
 800a6f4:	f100 0914 	add.w	r9, r0, #20
 800a6f8:	f04f 0a00 	mov.w	sl, #0
 800a6fc:	e7a8      	b.n	800a650 <__gethex+0x1ce>
 800a6fe:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a702:	42a0      	cmp	r0, r4
 800a704:	dd6a      	ble.n	800a7dc <__gethex+0x35a>
 800a706:	1b04      	subs	r4, r0, r4
 800a708:	42a6      	cmp	r6, r4
 800a70a:	dc2e      	bgt.n	800a76a <__gethex+0x2e8>
 800a70c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a710:	2b02      	cmp	r3, #2
 800a712:	d022      	beq.n	800a75a <__gethex+0x2d8>
 800a714:	2b03      	cmp	r3, #3
 800a716:	d024      	beq.n	800a762 <__gethex+0x2e0>
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d115      	bne.n	800a748 <__gethex+0x2c6>
 800a71c:	42a6      	cmp	r6, r4
 800a71e:	d113      	bne.n	800a748 <__gethex+0x2c6>
 800a720:	2e01      	cmp	r6, #1
 800a722:	dc0b      	bgt.n	800a73c <__gethex+0x2ba>
 800a724:	9a06      	ldr	r2, [sp, #24]
 800a726:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a72a:	6013      	str	r3, [r2, #0]
 800a72c:	2301      	movs	r3, #1
 800a72e:	612b      	str	r3, [r5, #16]
 800a730:	f8c9 3000 	str.w	r3, [r9]
 800a734:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a736:	2762      	movs	r7, #98	; 0x62
 800a738:	601d      	str	r5, [r3, #0]
 800a73a:	e72a      	b.n	800a592 <__gethex+0x110>
 800a73c:	1e71      	subs	r1, r6, #1
 800a73e:	4628      	mov	r0, r5
 800a740:	f000 fd94 	bl	800b26c <__any_on>
 800a744:	2800      	cmp	r0, #0
 800a746:	d1ed      	bne.n	800a724 <__gethex+0x2a2>
 800a748:	4629      	mov	r1, r5
 800a74a:	9802      	ldr	r0, [sp, #8]
 800a74c:	f000 f9c6 	bl	800aadc <_Bfree>
 800a750:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a752:	2300      	movs	r3, #0
 800a754:	6013      	str	r3, [r2, #0]
 800a756:	2750      	movs	r7, #80	; 0x50
 800a758:	e71b      	b.n	800a592 <__gethex+0x110>
 800a75a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d0e1      	beq.n	800a724 <__gethex+0x2a2>
 800a760:	e7f2      	b.n	800a748 <__gethex+0x2c6>
 800a762:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a764:	2b00      	cmp	r3, #0
 800a766:	d1dd      	bne.n	800a724 <__gethex+0x2a2>
 800a768:	e7ee      	b.n	800a748 <__gethex+0x2c6>
 800a76a:	1e67      	subs	r7, r4, #1
 800a76c:	f1ba 0f00 	cmp.w	sl, #0
 800a770:	d131      	bne.n	800a7d6 <__gethex+0x354>
 800a772:	b127      	cbz	r7, 800a77e <__gethex+0x2fc>
 800a774:	4639      	mov	r1, r7
 800a776:	4628      	mov	r0, r5
 800a778:	f000 fd78 	bl	800b26c <__any_on>
 800a77c:	4682      	mov	sl, r0
 800a77e:	117a      	asrs	r2, r7, #5
 800a780:	2301      	movs	r3, #1
 800a782:	f007 071f 	and.w	r7, r7, #31
 800a786:	fa03 f707 	lsl.w	r7, r3, r7
 800a78a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800a78e:	4621      	mov	r1, r4
 800a790:	421f      	tst	r7, r3
 800a792:	4628      	mov	r0, r5
 800a794:	bf18      	it	ne
 800a796:	f04a 0a02 	orrne.w	sl, sl, #2
 800a79a:	1b36      	subs	r6, r6, r4
 800a79c:	f7ff fe22 	bl	800a3e4 <rshift>
 800a7a0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a7a4:	2702      	movs	r7, #2
 800a7a6:	f1ba 0f00 	cmp.w	sl, #0
 800a7aa:	d048      	beq.n	800a83e <__gethex+0x3bc>
 800a7ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7b0:	2b02      	cmp	r3, #2
 800a7b2:	d015      	beq.n	800a7e0 <__gethex+0x35e>
 800a7b4:	2b03      	cmp	r3, #3
 800a7b6:	d017      	beq.n	800a7e8 <__gethex+0x366>
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d109      	bne.n	800a7d0 <__gethex+0x34e>
 800a7bc:	f01a 0f02 	tst.w	sl, #2
 800a7c0:	d006      	beq.n	800a7d0 <__gethex+0x34e>
 800a7c2:	f8d9 3000 	ldr.w	r3, [r9]
 800a7c6:	ea4a 0a03 	orr.w	sl, sl, r3
 800a7ca:	f01a 0f01 	tst.w	sl, #1
 800a7ce:	d10e      	bne.n	800a7ee <__gethex+0x36c>
 800a7d0:	f047 0710 	orr.w	r7, r7, #16
 800a7d4:	e033      	b.n	800a83e <__gethex+0x3bc>
 800a7d6:	f04f 0a01 	mov.w	sl, #1
 800a7da:	e7d0      	b.n	800a77e <__gethex+0x2fc>
 800a7dc:	2701      	movs	r7, #1
 800a7de:	e7e2      	b.n	800a7a6 <__gethex+0x324>
 800a7e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7e2:	f1c3 0301 	rsb	r3, r3, #1
 800a7e6:	9315      	str	r3, [sp, #84]	; 0x54
 800a7e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d0f0      	beq.n	800a7d0 <__gethex+0x34e>
 800a7ee:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800a7f2:	f105 0314 	add.w	r3, r5, #20
 800a7f6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800a7fa:	eb03 010a 	add.w	r1, r3, sl
 800a7fe:	f04f 0c00 	mov.w	ip, #0
 800a802:	4618      	mov	r0, r3
 800a804:	f853 2b04 	ldr.w	r2, [r3], #4
 800a808:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a80c:	d01c      	beq.n	800a848 <__gethex+0x3c6>
 800a80e:	3201      	adds	r2, #1
 800a810:	6002      	str	r2, [r0, #0]
 800a812:	2f02      	cmp	r7, #2
 800a814:	f105 0314 	add.w	r3, r5, #20
 800a818:	d138      	bne.n	800a88c <__gethex+0x40a>
 800a81a:	f8d8 2000 	ldr.w	r2, [r8]
 800a81e:	3a01      	subs	r2, #1
 800a820:	42b2      	cmp	r2, r6
 800a822:	d10a      	bne.n	800a83a <__gethex+0x3b8>
 800a824:	1171      	asrs	r1, r6, #5
 800a826:	2201      	movs	r2, #1
 800a828:	f006 061f 	and.w	r6, r6, #31
 800a82c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a830:	fa02 f606 	lsl.w	r6, r2, r6
 800a834:	421e      	tst	r6, r3
 800a836:	bf18      	it	ne
 800a838:	4617      	movne	r7, r2
 800a83a:	f047 0720 	orr.w	r7, r7, #32
 800a83e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a840:	601d      	str	r5, [r3, #0]
 800a842:	9b06      	ldr	r3, [sp, #24]
 800a844:	601c      	str	r4, [r3, #0]
 800a846:	e6a4      	b.n	800a592 <__gethex+0x110>
 800a848:	4299      	cmp	r1, r3
 800a84a:	f843 cc04 	str.w	ip, [r3, #-4]
 800a84e:	d8d8      	bhi.n	800a802 <__gethex+0x380>
 800a850:	68ab      	ldr	r3, [r5, #8]
 800a852:	4599      	cmp	r9, r3
 800a854:	db12      	blt.n	800a87c <__gethex+0x3fa>
 800a856:	6869      	ldr	r1, [r5, #4]
 800a858:	9802      	ldr	r0, [sp, #8]
 800a85a:	3101      	adds	r1, #1
 800a85c:	f000 f90a 	bl	800aa74 <_Balloc>
 800a860:	692a      	ldr	r2, [r5, #16]
 800a862:	3202      	adds	r2, #2
 800a864:	f105 010c 	add.w	r1, r5, #12
 800a868:	4683      	mov	fp, r0
 800a86a:	0092      	lsls	r2, r2, #2
 800a86c:	300c      	adds	r0, #12
 800a86e:	f000 f8f6 	bl	800aa5e <memcpy>
 800a872:	4629      	mov	r1, r5
 800a874:	9802      	ldr	r0, [sp, #8]
 800a876:	f000 f931 	bl	800aadc <_Bfree>
 800a87a:	465d      	mov	r5, fp
 800a87c:	692b      	ldr	r3, [r5, #16]
 800a87e:	1c5a      	adds	r2, r3, #1
 800a880:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a884:	612a      	str	r2, [r5, #16]
 800a886:	2201      	movs	r2, #1
 800a888:	615a      	str	r2, [r3, #20]
 800a88a:	e7c2      	b.n	800a812 <__gethex+0x390>
 800a88c:	692a      	ldr	r2, [r5, #16]
 800a88e:	454a      	cmp	r2, r9
 800a890:	dd0b      	ble.n	800a8aa <__gethex+0x428>
 800a892:	2101      	movs	r1, #1
 800a894:	4628      	mov	r0, r5
 800a896:	f7ff fda5 	bl	800a3e4 <rshift>
 800a89a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a89e:	3401      	adds	r4, #1
 800a8a0:	42a3      	cmp	r3, r4
 800a8a2:	f6ff aed9 	blt.w	800a658 <__gethex+0x1d6>
 800a8a6:	2701      	movs	r7, #1
 800a8a8:	e7c7      	b.n	800a83a <__gethex+0x3b8>
 800a8aa:	f016 061f 	ands.w	r6, r6, #31
 800a8ae:	d0fa      	beq.n	800a8a6 <__gethex+0x424>
 800a8b0:	449a      	add	sl, r3
 800a8b2:	f1c6 0620 	rsb	r6, r6, #32
 800a8b6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a8ba:	f000 f99f 	bl	800abfc <__hi0bits>
 800a8be:	42b0      	cmp	r0, r6
 800a8c0:	dbe7      	blt.n	800a892 <__gethex+0x410>
 800a8c2:	e7f0      	b.n	800a8a6 <__gethex+0x424>

0800a8c4 <L_shift>:
 800a8c4:	f1c2 0208 	rsb	r2, r2, #8
 800a8c8:	0092      	lsls	r2, r2, #2
 800a8ca:	b570      	push	{r4, r5, r6, lr}
 800a8cc:	f1c2 0620 	rsb	r6, r2, #32
 800a8d0:	6843      	ldr	r3, [r0, #4]
 800a8d2:	6804      	ldr	r4, [r0, #0]
 800a8d4:	fa03 f506 	lsl.w	r5, r3, r6
 800a8d8:	432c      	orrs	r4, r5
 800a8da:	40d3      	lsrs	r3, r2
 800a8dc:	6004      	str	r4, [r0, #0]
 800a8de:	f840 3f04 	str.w	r3, [r0, #4]!
 800a8e2:	4288      	cmp	r0, r1
 800a8e4:	d3f4      	bcc.n	800a8d0 <L_shift+0xc>
 800a8e6:	bd70      	pop	{r4, r5, r6, pc}

0800a8e8 <__match>:
 800a8e8:	b530      	push	{r4, r5, lr}
 800a8ea:	6803      	ldr	r3, [r0, #0]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8f2:	b914      	cbnz	r4, 800a8fa <__match+0x12>
 800a8f4:	6003      	str	r3, [r0, #0]
 800a8f6:	2001      	movs	r0, #1
 800a8f8:	bd30      	pop	{r4, r5, pc}
 800a8fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a902:	2d19      	cmp	r5, #25
 800a904:	bf98      	it	ls
 800a906:	3220      	addls	r2, #32
 800a908:	42a2      	cmp	r2, r4
 800a90a:	d0f0      	beq.n	800a8ee <__match+0x6>
 800a90c:	2000      	movs	r0, #0
 800a90e:	e7f3      	b.n	800a8f8 <__match+0x10>

0800a910 <__hexnan>:
 800a910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a914:	680b      	ldr	r3, [r1, #0]
 800a916:	6801      	ldr	r1, [r0, #0]
 800a918:	115f      	asrs	r7, r3, #5
 800a91a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a91e:	f013 031f 	ands.w	r3, r3, #31
 800a922:	b087      	sub	sp, #28
 800a924:	bf18      	it	ne
 800a926:	3704      	addne	r7, #4
 800a928:	2500      	movs	r5, #0
 800a92a:	1f3e      	subs	r6, r7, #4
 800a92c:	4682      	mov	sl, r0
 800a92e:	4690      	mov	r8, r2
 800a930:	9301      	str	r3, [sp, #4]
 800a932:	f847 5c04 	str.w	r5, [r7, #-4]
 800a936:	46b1      	mov	r9, r6
 800a938:	4634      	mov	r4, r6
 800a93a:	9502      	str	r5, [sp, #8]
 800a93c:	46ab      	mov	fp, r5
 800a93e:	784a      	ldrb	r2, [r1, #1]
 800a940:	1c4b      	adds	r3, r1, #1
 800a942:	9303      	str	r3, [sp, #12]
 800a944:	b342      	cbz	r2, 800a998 <__hexnan+0x88>
 800a946:	4610      	mov	r0, r2
 800a948:	9105      	str	r1, [sp, #20]
 800a94a:	9204      	str	r2, [sp, #16]
 800a94c:	f7ff fd84 	bl	800a458 <__hexdig_fun>
 800a950:	2800      	cmp	r0, #0
 800a952:	d143      	bne.n	800a9dc <__hexnan+0xcc>
 800a954:	9a04      	ldr	r2, [sp, #16]
 800a956:	9905      	ldr	r1, [sp, #20]
 800a958:	2a20      	cmp	r2, #32
 800a95a:	d818      	bhi.n	800a98e <__hexnan+0x7e>
 800a95c:	9b02      	ldr	r3, [sp, #8]
 800a95e:	459b      	cmp	fp, r3
 800a960:	dd13      	ble.n	800a98a <__hexnan+0x7a>
 800a962:	454c      	cmp	r4, r9
 800a964:	d206      	bcs.n	800a974 <__hexnan+0x64>
 800a966:	2d07      	cmp	r5, #7
 800a968:	dc04      	bgt.n	800a974 <__hexnan+0x64>
 800a96a:	462a      	mov	r2, r5
 800a96c:	4649      	mov	r1, r9
 800a96e:	4620      	mov	r0, r4
 800a970:	f7ff ffa8 	bl	800a8c4 <L_shift>
 800a974:	4544      	cmp	r4, r8
 800a976:	d944      	bls.n	800aa02 <__hexnan+0xf2>
 800a978:	2300      	movs	r3, #0
 800a97a:	f1a4 0904 	sub.w	r9, r4, #4
 800a97e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a982:	f8cd b008 	str.w	fp, [sp, #8]
 800a986:	464c      	mov	r4, r9
 800a988:	461d      	mov	r5, r3
 800a98a:	9903      	ldr	r1, [sp, #12]
 800a98c:	e7d7      	b.n	800a93e <__hexnan+0x2e>
 800a98e:	2a29      	cmp	r2, #41	; 0x29
 800a990:	d14a      	bne.n	800aa28 <__hexnan+0x118>
 800a992:	3102      	adds	r1, #2
 800a994:	f8ca 1000 	str.w	r1, [sl]
 800a998:	f1bb 0f00 	cmp.w	fp, #0
 800a99c:	d044      	beq.n	800aa28 <__hexnan+0x118>
 800a99e:	454c      	cmp	r4, r9
 800a9a0:	d206      	bcs.n	800a9b0 <__hexnan+0xa0>
 800a9a2:	2d07      	cmp	r5, #7
 800a9a4:	dc04      	bgt.n	800a9b0 <__hexnan+0xa0>
 800a9a6:	462a      	mov	r2, r5
 800a9a8:	4649      	mov	r1, r9
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f7ff ff8a 	bl	800a8c4 <L_shift>
 800a9b0:	4544      	cmp	r4, r8
 800a9b2:	d928      	bls.n	800aa06 <__hexnan+0xf6>
 800a9b4:	4643      	mov	r3, r8
 800a9b6:	f854 2b04 	ldr.w	r2, [r4], #4
 800a9ba:	f843 2b04 	str.w	r2, [r3], #4
 800a9be:	42a6      	cmp	r6, r4
 800a9c0:	d2f9      	bcs.n	800a9b6 <__hexnan+0xa6>
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f843 2b04 	str.w	r2, [r3], #4
 800a9c8:	429e      	cmp	r6, r3
 800a9ca:	d2fb      	bcs.n	800a9c4 <__hexnan+0xb4>
 800a9cc:	6833      	ldr	r3, [r6, #0]
 800a9ce:	b91b      	cbnz	r3, 800a9d8 <__hexnan+0xc8>
 800a9d0:	4546      	cmp	r6, r8
 800a9d2:	d127      	bne.n	800aa24 <__hexnan+0x114>
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	6033      	str	r3, [r6, #0]
 800a9d8:	2005      	movs	r0, #5
 800a9da:	e026      	b.n	800aa2a <__hexnan+0x11a>
 800a9dc:	3501      	adds	r5, #1
 800a9de:	2d08      	cmp	r5, #8
 800a9e0:	f10b 0b01 	add.w	fp, fp, #1
 800a9e4:	dd06      	ble.n	800a9f4 <__hexnan+0xe4>
 800a9e6:	4544      	cmp	r4, r8
 800a9e8:	d9cf      	bls.n	800a98a <__hexnan+0x7a>
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9f0:	2501      	movs	r5, #1
 800a9f2:	3c04      	subs	r4, #4
 800a9f4:	6822      	ldr	r2, [r4, #0]
 800a9f6:	f000 000f 	and.w	r0, r0, #15
 800a9fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a9fe:	6020      	str	r0, [r4, #0]
 800aa00:	e7c3      	b.n	800a98a <__hexnan+0x7a>
 800aa02:	2508      	movs	r5, #8
 800aa04:	e7c1      	b.n	800a98a <__hexnan+0x7a>
 800aa06:	9b01      	ldr	r3, [sp, #4]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d0df      	beq.n	800a9cc <__hexnan+0xbc>
 800aa0c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa10:	f1c3 0320 	rsb	r3, r3, #32
 800aa14:	fa22 f303 	lsr.w	r3, r2, r3
 800aa18:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800aa1c:	401a      	ands	r2, r3
 800aa1e:	f847 2c04 	str.w	r2, [r7, #-4]
 800aa22:	e7d3      	b.n	800a9cc <__hexnan+0xbc>
 800aa24:	3e04      	subs	r6, #4
 800aa26:	e7d1      	b.n	800a9cc <__hexnan+0xbc>
 800aa28:	2004      	movs	r0, #4
 800aa2a:	b007      	add	sp, #28
 800aa2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa30 <__locale_ctype_ptr_l>:
 800aa30:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800aa34:	4770      	bx	lr

0800aa36 <__localeconv_l>:
 800aa36:	30f0      	adds	r0, #240	; 0xf0
 800aa38:	4770      	bx	lr

0800aa3a <__ascii_mbtowc>:
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	b901      	cbnz	r1, 800aa40 <__ascii_mbtowc+0x6>
 800aa3e:	a901      	add	r1, sp, #4
 800aa40:	b142      	cbz	r2, 800aa54 <__ascii_mbtowc+0x1a>
 800aa42:	b14b      	cbz	r3, 800aa58 <__ascii_mbtowc+0x1e>
 800aa44:	7813      	ldrb	r3, [r2, #0]
 800aa46:	600b      	str	r3, [r1, #0]
 800aa48:	7812      	ldrb	r2, [r2, #0]
 800aa4a:	1c10      	adds	r0, r2, #0
 800aa4c:	bf18      	it	ne
 800aa4e:	2001      	movne	r0, #1
 800aa50:	b002      	add	sp, #8
 800aa52:	4770      	bx	lr
 800aa54:	4610      	mov	r0, r2
 800aa56:	e7fb      	b.n	800aa50 <__ascii_mbtowc+0x16>
 800aa58:	f06f 0001 	mvn.w	r0, #1
 800aa5c:	e7f8      	b.n	800aa50 <__ascii_mbtowc+0x16>

0800aa5e <memcpy>:
 800aa5e:	b510      	push	{r4, lr}
 800aa60:	1e43      	subs	r3, r0, #1
 800aa62:	440a      	add	r2, r1
 800aa64:	4291      	cmp	r1, r2
 800aa66:	d100      	bne.n	800aa6a <memcpy+0xc>
 800aa68:	bd10      	pop	{r4, pc}
 800aa6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa72:	e7f7      	b.n	800aa64 <memcpy+0x6>

0800aa74 <_Balloc>:
 800aa74:	b570      	push	{r4, r5, r6, lr}
 800aa76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aa78:	4604      	mov	r4, r0
 800aa7a:	460e      	mov	r6, r1
 800aa7c:	b93d      	cbnz	r5, 800aa8e <_Balloc+0x1a>
 800aa7e:	2010      	movs	r0, #16
 800aa80:	f001 fb02 	bl	800c088 <malloc>
 800aa84:	6260      	str	r0, [r4, #36]	; 0x24
 800aa86:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aa8a:	6005      	str	r5, [r0, #0]
 800aa8c:	60c5      	str	r5, [r0, #12]
 800aa8e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800aa90:	68eb      	ldr	r3, [r5, #12]
 800aa92:	b183      	cbz	r3, 800aab6 <_Balloc+0x42>
 800aa94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800aa9c:	b9b8      	cbnz	r0, 800aace <_Balloc+0x5a>
 800aa9e:	2101      	movs	r1, #1
 800aaa0:	fa01 f506 	lsl.w	r5, r1, r6
 800aaa4:	1d6a      	adds	r2, r5, #5
 800aaa6:	0092      	lsls	r2, r2, #2
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f000 fc00 	bl	800b2ae <_calloc_r>
 800aaae:	b160      	cbz	r0, 800aaca <_Balloc+0x56>
 800aab0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800aab4:	e00e      	b.n	800aad4 <_Balloc+0x60>
 800aab6:	2221      	movs	r2, #33	; 0x21
 800aab8:	2104      	movs	r1, #4
 800aaba:	4620      	mov	r0, r4
 800aabc:	f000 fbf7 	bl	800b2ae <_calloc_r>
 800aac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aac2:	60e8      	str	r0, [r5, #12]
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1e4      	bne.n	800aa94 <_Balloc+0x20>
 800aaca:	2000      	movs	r0, #0
 800aacc:	bd70      	pop	{r4, r5, r6, pc}
 800aace:	6802      	ldr	r2, [r0, #0]
 800aad0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800aad4:	2300      	movs	r3, #0
 800aad6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aada:	e7f7      	b.n	800aacc <_Balloc+0x58>

0800aadc <_Bfree>:
 800aadc:	b570      	push	{r4, r5, r6, lr}
 800aade:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800aae0:	4606      	mov	r6, r0
 800aae2:	460d      	mov	r5, r1
 800aae4:	b93c      	cbnz	r4, 800aaf6 <_Bfree+0x1a>
 800aae6:	2010      	movs	r0, #16
 800aae8:	f001 face 	bl	800c088 <malloc>
 800aaec:	6270      	str	r0, [r6, #36]	; 0x24
 800aaee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aaf2:	6004      	str	r4, [r0, #0]
 800aaf4:	60c4      	str	r4, [r0, #12]
 800aaf6:	b13d      	cbz	r5, 800ab08 <_Bfree+0x2c>
 800aaf8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800aafa:	686a      	ldr	r2, [r5, #4]
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab02:	6029      	str	r1, [r5, #0]
 800ab04:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ab08:	bd70      	pop	{r4, r5, r6, pc}

0800ab0a <__multadd>:
 800ab0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab0e:	690d      	ldr	r5, [r1, #16]
 800ab10:	461f      	mov	r7, r3
 800ab12:	4606      	mov	r6, r0
 800ab14:	460c      	mov	r4, r1
 800ab16:	f101 0c14 	add.w	ip, r1, #20
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	f8dc 0000 	ldr.w	r0, [ip]
 800ab20:	b281      	uxth	r1, r0
 800ab22:	fb02 7101 	mla	r1, r2, r1, r7
 800ab26:	0c0f      	lsrs	r7, r1, #16
 800ab28:	0c00      	lsrs	r0, r0, #16
 800ab2a:	fb02 7000 	mla	r0, r2, r0, r7
 800ab2e:	b289      	uxth	r1, r1
 800ab30:	3301      	adds	r3, #1
 800ab32:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ab36:	429d      	cmp	r5, r3
 800ab38:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ab3c:	f84c 1b04 	str.w	r1, [ip], #4
 800ab40:	dcec      	bgt.n	800ab1c <__multadd+0x12>
 800ab42:	b1d7      	cbz	r7, 800ab7a <__multadd+0x70>
 800ab44:	68a3      	ldr	r3, [r4, #8]
 800ab46:	42ab      	cmp	r3, r5
 800ab48:	dc12      	bgt.n	800ab70 <__multadd+0x66>
 800ab4a:	6861      	ldr	r1, [r4, #4]
 800ab4c:	4630      	mov	r0, r6
 800ab4e:	3101      	adds	r1, #1
 800ab50:	f7ff ff90 	bl	800aa74 <_Balloc>
 800ab54:	6922      	ldr	r2, [r4, #16]
 800ab56:	3202      	adds	r2, #2
 800ab58:	f104 010c 	add.w	r1, r4, #12
 800ab5c:	4680      	mov	r8, r0
 800ab5e:	0092      	lsls	r2, r2, #2
 800ab60:	300c      	adds	r0, #12
 800ab62:	f7ff ff7c 	bl	800aa5e <memcpy>
 800ab66:	4621      	mov	r1, r4
 800ab68:	4630      	mov	r0, r6
 800ab6a:	f7ff ffb7 	bl	800aadc <_Bfree>
 800ab6e:	4644      	mov	r4, r8
 800ab70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab74:	3501      	adds	r5, #1
 800ab76:	615f      	str	r7, [r3, #20]
 800ab78:	6125      	str	r5, [r4, #16]
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ab80 <__s2b>:
 800ab80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab84:	460c      	mov	r4, r1
 800ab86:	4615      	mov	r5, r2
 800ab88:	461f      	mov	r7, r3
 800ab8a:	2209      	movs	r2, #9
 800ab8c:	3308      	adds	r3, #8
 800ab8e:	4606      	mov	r6, r0
 800ab90:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab94:	2100      	movs	r1, #0
 800ab96:	2201      	movs	r2, #1
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	db20      	blt.n	800abde <__s2b+0x5e>
 800ab9c:	4630      	mov	r0, r6
 800ab9e:	f7ff ff69 	bl	800aa74 <_Balloc>
 800aba2:	9b08      	ldr	r3, [sp, #32]
 800aba4:	6143      	str	r3, [r0, #20]
 800aba6:	2d09      	cmp	r5, #9
 800aba8:	f04f 0301 	mov.w	r3, #1
 800abac:	6103      	str	r3, [r0, #16]
 800abae:	dd19      	ble.n	800abe4 <__s2b+0x64>
 800abb0:	f104 0809 	add.w	r8, r4, #9
 800abb4:	46c1      	mov	r9, r8
 800abb6:	442c      	add	r4, r5
 800abb8:	f819 3b01 	ldrb.w	r3, [r9], #1
 800abbc:	4601      	mov	r1, r0
 800abbe:	3b30      	subs	r3, #48	; 0x30
 800abc0:	220a      	movs	r2, #10
 800abc2:	4630      	mov	r0, r6
 800abc4:	f7ff ffa1 	bl	800ab0a <__multadd>
 800abc8:	45a1      	cmp	r9, r4
 800abca:	d1f5      	bne.n	800abb8 <__s2b+0x38>
 800abcc:	eb08 0405 	add.w	r4, r8, r5
 800abd0:	3c08      	subs	r4, #8
 800abd2:	1b2d      	subs	r5, r5, r4
 800abd4:	1963      	adds	r3, r4, r5
 800abd6:	42bb      	cmp	r3, r7
 800abd8:	db07      	blt.n	800abea <__s2b+0x6a>
 800abda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abde:	0052      	lsls	r2, r2, #1
 800abe0:	3101      	adds	r1, #1
 800abe2:	e7d9      	b.n	800ab98 <__s2b+0x18>
 800abe4:	340a      	adds	r4, #10
 800abe6:	2509      	movs	r5, #9
 800abe8:	e7f3      	b.n	800abd2 <__s2b+0x52>
 800abea:	f814 3b01 	ldrb.w	r3, [r4], #1
 800abee:	4601      	mov	r1, r0
 800abf0:	3b30      	subs	r3, #48	; 0x30
 800abf2:	220a      	movs	r2, #10
 800abf4:	4630      	mov	r0, r6
 800abf6:	f7ff ff88 	bl	800ab0a <__multadd>
 800abfa:	e7eb      	b.n	800abd4 <__s2b+0x54>

0800abfc <__hi0bits>:
 800abfc:	0c02      	lsrs	r2, r0, #16
 800abfe:	0412      	lsls	r2, r2, #16
 800ac00:	4603      	mov	r3, r0
 800ac02:	b9b2      	cbnz	r2, 800ac32 <__hi0bits+0x36>
 800ac04:	0403      	lsls	r3, r0, #16
 800ac06:	2010      	movs	r0, #16
 800ac08:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ac0c:	bf04      	itt	eq
 800ac0e:	021b      	lsleq	r3, r3, #8
 800ac10:	3008      	addeq	r0, #8
 800ac12:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ac16:	bf04      	itt	eq
 800ac18:	011b      	lsleq	r3, r3, #4
 800ac1a:	3004      	addeq	r0, #4
 800ac1c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ac20:	bf04      	itt	eq
 800ac22:	009b      	lsleq	r3, r3, #2
 800ac24:	3002      	addeq	r0, #2
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	db06      	blt.n	800ac38 <__hi0bits+0x3c>
 800ac2a:	005b      	lsls	r3, r3, #1
 800ac2c:	d503      	bpl.n	800ac36 <__hi0bits+0x3a>
 800ac2e:	3001      	adds	r0, #1
 800ac30:	4770      	bx	lr
 800ac32:	2000      	movs	r0, #0
 800ac34:	e7e8      	b.n	800ac08 <__hi0bits+0xc>
 800ac36:	2020      	movs	r0, #32
 800ac38:	4770      	bx	lr

0800ac3a <__lo0bits>:
 800ac3a:	6803      	ldr	r3, [r0, #0]
 800ac3c:	f013 0207 	ands.w	r2, r3, #7
 800ac40:	4601      	mov	r1, r0
 800ac42:	d00b      	beq.n	800ac5c <__lo0bits+0x22>
 800ac44:	07da      	lsls	r2, r3, #31
 800ac46:	d423      	bmi.n	800ac90 <__lo0bits+0x56>
 800ac48:	0798      	lsls	r0, r3, #30
 800ac4a:	bf49      	itett	mi
 800ac4c:	085b      	lsrmi	r3, r3, #1
 800ac4e:	089b      	lsrpl	r3, r3, #2
 800ac50:	2001      	movmi	r0, #1
 800ac52:	600b      	strmi	r3, [r1, #0]
 800ac54:	bf5c      	itt	pl
 800ac56:	600b      	strpl	r3, [r1, #0]
 800ac58:	2002      	movpl	r0, #2
 800ac5a:	4770      	bx	lr
 800ac5c:	b298      	uxth	r0, r3
 800ac5e:	b9a8      	cbnz	r0, 800ac8c <__lo0bits+0x52>
 800ac60:	0c1b      	lsrs	r3, r3, #16
 800ac62:	2010      	movs	r0, #16
 800ac64:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ac68:	bf04      	itt	eq
 800ac6a:	0a1b      	lsreq	r3, r3, #8
 800ac6c:	3008      	addeq	r0, #8
 800ac6e:	071a      	lsls	r2, r3, #28
 800ac70:	bf04      	itt	eq
 800ac72:	091b      	lsreq	r3, r3, #4
 800ac74:	3004      	addeq	r0, #4
 800ac76:	079a      	lsls	r2, r3, #30
 800ac78:	bf04      	itt	eq
 800ac7a:	089b      	lsreq	r3, r3, #2
 800ac7c:	3002      	addeq	r0, #2
 800ac7e:	07da      	lsls	r2, r3, #31
 800ac80:	d402      	bmi.n	800ac88 <__lo0bits+0x4e>
 800ac82:	085b      	lsrs	r3, r3, #1
 800ac84:	d006      	beq.n	800ac94 <__lo0bits+0x5a>
 800ac86:	3001      	adds	r0, #1
 800ac88:	600b      	str	r3, [r1, #0]
 800ac8a:	4770      	bx	lr
 800ac8c:	4610      	mov	r0, r2
 800ac8e:	e7e9      	b.n	800ac64 <__lo0bits+0x2a>
 800ac90:	2000      	movs	r0, #0
 800ac92:	4770      	bx	lr
 800ac94:	2020      	movs	r0, #32
 800ac96:	4770      	bx	lr

0800ac98 <__i2b>:
 800ac98:	b510      	push	{r4, lr}
 800ac9a:	460c      	mov	r4, r1
 800ac9c:	2101      	movs	r1, #1
 800ac9e:	f7ff fee9 	bl	800aa74 <_Balloc>
 800aca2:	2201      	movs	r2, #1
 800aca4:	6144      	str	r4, [r0, #20]
 800aca6:	6102      	str	r2, [r0, #16]
 800aca8:	bd10      	pop	{r4, pc}

0800acaa <__multiply>:
 800acaa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acae:	4614      	mov	r4, r2
 800acb0:	690a      	ldr	r2, [r1, #16]
 800acb2:	6923      	ldr	r3, [r4, #16]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	bfb8      	it	lt
 800acb8:	460b      	movlt	r3, r1
 800acba:	4688      	mov	r8, r1
 800acbc:	bfbc      	itt	lt
 800acbe:	46a0      	movlt	r8, r4
 800acc0:	461c      	movlt	r4, r3
 800acc2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800acc6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800acca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800acce:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800acd2:	eb07 0609 	add.w	r6, r7, r9
 800acd6:	42b3      	cmp	r3, r6
 800acd8:	bfb8      	it	lt
 800acda:	3101      	addlt	r1, #1
 800acdc:	f7ff feca 	bl	800aa74 <_Balloc>
 800ace0:	f100 0514 	add.w	r5, r0, #20
 800ace4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ace8:	462b      	mov	r3, r5
 800acea:	2200      	movs	r2, #0
 800acec:	4573      	cmp	r3, lr
 800acee:	d316      	bcc.n	800ad1e <__multiply+0x74>
 800acf0:	f104 0214 	add.w	r2, r4, #20
 800acf4:	f108 0114 	add.w	r1, r8, #20
 800acf8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800acfc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	9b00      	ldr	r3, [sp, #0]
 800ad04:	9201      	str	r2, [sp, #4]
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d80c      	bhi.n	800ad24 <__multiply+0x7a>
 800ad0a:	2e00      	cmp	r6, #0
 800ad0c:	dd03      	ble.n	800ad16 <__multiply+0x6c>
 800ad0e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d05d      	beq.n	800add2 <__multiply+0x128>
 800ad16:	6106      	str	r6, [r0, #16]
 800ad18:	b003      	add	sp, #12
 800ad1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad1e:	f843 2b04 	str.w	r2, [r3], #4
 800ad22:	e7e3      	b.n	800acec <__multiply+0x42>
 800ad24:	f8b2 b000 	ldrh.w	fp, [r2]
 800ad28:	f1bb 0f00 	cmp.w	fp, #0
 800ad2c:	d023      	beq.n	800ad76 <__multiply+0xcc>
 800ad2e:	4689      	mov	r9, r1
 800ad30:	46ac      	mov	ip, r5
 800ad32:	f04f 0800 	mov.w	r8, #0
 800ad36:	f859 4b04 	ldr.w	r4, [r9], #4
 800ad3a:	f8dc a000 	ldr.w	sl, [ip]
 800ad3e:	b2a3      	uxth	r3, r4
 800ad40:	fa1f fa8a 	uxth.w	sl, sl
 800ad44:	fb0b a303 	mla	r3, fp, r3, sl
 800ad48:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ad4c:	f8dc 4000 	ldr.w	r4, [ip]
 800ad50:	4443      	add	r3, r8
 800ad52:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ad56:	fb0b 840a 	mla	r4, fp, sl, r8
 800ad5a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ad5e:	46e2      	mov	sl, ip
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ad66:	454f      	cmp	r7, r9
 800ad68:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ad6c:	f84a 3b04 	str.w	r3, [sl], #4
 800ad70:	d82b      	bhi.n	800adca <__multiply+0x120>
 800ad72:	f8cc 8004 	str.w	r8, [ip, #4]
 800ad76:	9b01      	ldr	r3, [sp, #4]
 800ad78:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ad7c:	3204      	adds	r2, #4
 800ad7e:	f1ba 0f00 	cmp.w	sl, #0
 800ad82:	d020      	beq.n	800adc6 <__multiply+0x11c>
 800ad84:	682b      	ldr	r3, [r5, #0]
 800ad86:	4689      	mov	r9, r1
 800ad88:	46a8      	mov	r8, r5
 800ad8a:	f04f 0b00 	mov.w	fp, #0
 800ad8e:	f8b9 c000 	ldrh.w	ip, [r9]
 800ad92:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ad96:	fb0a 440c 	mla	r4, sl, ip, r4
 800ad9a:	445c      	add	r4, fp
 800ad9c:	46c4      	mov	ip, r8
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ada4:	f84c 3b04 	str.w	r3, [ip], #4
 800ada8:	f859 3b04 	ldr.w	r3, [r9], #4
 800adac:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800adb0:	0c1b      	lsrs	r3, r3, #16
 800adb2:	fb0a b303 	mla	r3, sl, r3, fp
 800adb6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800adba:	454f      	cmp	r7, r9
 800adbc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800adc0:	d805      	bhi.n	800adce <__multiply+0x124>
 800adc2:	f8c8 3004 	str.w	r3, [r8, #4]
 800adc6:	3504      	adds	r5, #4
 800adc8:	e79b      	b.n	800ad02 <__multiply+0x58>
 800adca:	46d4      	mov	ip, sl
 800adcc:	e7b3      	b.n	800ad36 <__multiply+0x8c>
 800adce:	46e0      	mov	r8, ip
 800add0:	e7dd      	b.n	800ad8e <__multiply+0xe4>
 800add2:	3e01      	subs	r6, #1
 800add4:	e799      	b.n	800ad0a <__multiply+0x60>
	...

0800add8 <__pow5mult>:
 800add8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800addc:	4615      	mov	r5, r2
 800adde:	f012 0203 	ands.w	r2, r2, #3
 800ade2:	4606      	mov	r6, r0
 800ade4:	460f      	mov	r7, r1
 800ade6:	d007      	beq.n	800adf8 <__pow5mult+0x20>
 800ade8:	3a01      	subs	r2, #1
 800adea:	4c21      	ldr	r4, [pc, #132]	; (800ae70 <__pow5mult+0x98>)
 800adec:	2300      	movs	r3, #0
 800adee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800adf2:	f7ff fe8a 	bl	800ab0a <__multadd>
 800adf6:	4607      	mov	r7, r0
 800adf8:	10ad      	asrs	r5, r5, #2
 800adfa:	d035      	beq.n	800ae68 <__pow5mult+0x90>
 800adfc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800adfe:	b93c      	cbnz	r4, 800ae10 <__pow5mult+0x38>
 800ae00:	2010      	movs	r0, #16
 800ae02:	f001 f941 	bl	800c088 <malloc>
 800ae06:	6270      	str	r0, [r6, #36]	; 0x24
 800ae08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae0c:	6004      	str	r4, [r0, #0]
 800ae0e:	60c4      	str	r4, [r0, #12]
 800ae10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ae14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae18:	b94c      	cbnz	r4, 800ae2e <__pow5mult+0x56>
 800ae1a:	f240 2171 	movw	r1, #625	; 0x271
 800ae1e:	4630      	mov	r0, r6
 800ae20:	f7ff ff3a 	bl	800ac98 <__i2b>
 800ae24:	2300      	movs	r3, #0
 800ae26:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae2a:	4604      	mov	r4, r0
 800ae2c:	6003      	str	r3, [r0, #0]
 800ae2e:	f04f 0800 	mov.w	r8, #0
 800ae32:	07eb      	lsls	r3, r5, #31
 800ae34:	d50a      	bpl.n	800ae4c <__pow5mult+0x74>
 800ae36:	4639      	mov	r1, r7
 800ae38:	4622      	mov	r2, r4
 800ae3a:	4630      	mov	r0, r6
 800ae3c:	f7ff ff35 	bl	800acaa <__multiply>
 800ae40:	4639      	mov	r1, r7
 800ae42:	4681      	mov	r9, r0
 800ae44:	4630      	mov	r0, r6
 800ae46:	f7ff fe49 	bl	800aadc <_Bfree>
 800ae4a:	464f      	mov	r7, r9
 800ae4c:	106d      	asrs	r5, r5, #1
 800ae4e:	d00b      	beq.n	800ae68 <__pow5mult+0x90>
 800ae50:	6820      	ldr	r0, [r4, #0]
 800ae52:	b938      	cbnz	r0, 800ae64 <__pow5mult+0x8c>
 800ae54:	4622      	mov	r2, r4
 800ae56:	4621      	mov	r1, r4
 800ae58:	4630      	mov	r0, r6
 800ae5a:	f7ff ff26 	bl	800acaa <__multiply>
 800ae5e:	6020      	str	r0, [r4, #0]
 800ae60:	f8c0 8000 	str.w	r8, [r0]
 800ae64:	4604      	mov	r4, r0
 800ae66:	e7e4      	b.n	800ae32 <__pow5mult+0x5a>
 800ae68:	4638      	mov	r0, r7
 800ae6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae6e:	bf00      	nop
 800ae70:	0800eb20 	.word	0x0800eb20

0800ae74 <__lshift>:
 800ae74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae78:	460c      	mov	r4, r1
 800ae7a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae7e:	6923      	ldr	r3, [r4, #16]
 800ae80:	6849      	ldr	r1, [r1, #4]
 800ae82:	eb0a 0903 	add.w	r9, sl, r3
 800ae86:	68a3      	ldr	r3, [r4, #8]
 800ae88:	4607      	mov	r7, r0
 800ae8a:	4616      	mov	r6, r2
 800ae8c:	f109 0501 	add.w	r5, r9, #1
 800ae90:	42ab      	cmp	r3, r5
 800ae92:	db32      	blt.n	800aefa <__lshift+0x86>
 800ae94:	4638      	mov	r0, r7
 800ae96:	f7ff fded 	bl	800aa74 <_Balloc>
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	4680      	mov	r8, r0
 800ae9e:	f100 0114 	add.w	r1, r0, #20
 800aea2:	461a      	mov	r2, r3
 800aea4:	4553      	cmp	r3, sl
 800aea6:	db2b      	blt.n	800af00 <__lshift+0x8c>
 800aea8:	6920      	ldr	r0, [r4, #16]
 800aeaa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aeae:	f104 0314 	add.w	r3, r4, #20
 800aeb2:	f016 021f 	ands.w	r2, r6, #31
 800aeb6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aeba:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aebe:	d025      	beq.n	800af0c <__lshift+0x98>
 800aec0:	f1c2 0e20 	rsb	lr, r2, #32
 800aec4:	2000      	movs	r0, #0
 800aec6:	681e      	ldr	r6, [r3, #0]
 800aec8:	468a      	mov	sl, r1
 800aeca:	4096      	lsls	r6, r2
 800aecc:	4330      	orrs	r0, r6
 800aece:	f84a 0b04 	str.w	r0, [sl], #4
 800aed2:	f853 0b04 	ldr.w	r0, [r3], #4
 800aed6:	459c      	cmp	ip, r3
 800aed8:	fa20 f00e 	lsr.w	r0, r0, lr
 800aedc:	d814      	bhi.n	800af08 <__lshift+0x94>
 800aede:	6048      	str	r0, [r1, #4]
 800aee0:	b108      	cbz	r0, 800aee6 <__lshift+0x72>
 800aee2:	f109 0502 	add.w	r5, r9, #2
 800aee6:	3d01      	subs	r5, #1
 800aee8:	4638      	mov	r0, r7
 800aeea:	f8c8 5010 	str.w	r5, [r8, #16]
 800aeee:	4621      	mov	r1, r4
 800aef0:	f7ff fdf4 	bl	800aadc <_Bfree>
 800aef4:	4640      	mov	r0, r8
 800aef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aefa:	3101      	adds	r1, #1
 800aefc:	005b      	lsls	r3, r3, #1
 800aefe:	e7c7      	b.n	800ae90 <__lshift+0x1c>
 800af00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800af04:	3301      	adds	r3, #1
 800af06:	e7cd      	b.n	800aea4 <__lshift+0x30>
 800af08:	4651      	mov	r1, sl
 800af0a:	e7dc      	b.n	800aec6 <__lshift+0x52>
 800af0c:	3904      	subs	r1, #4
 800af0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af12:	f841 2f04 	str.w	r2, [r1, #4]!
 800af16:	459c      	cmp	ip, r3
 800af18:	d8f9      	bhi.n	800af0e <__lshift+0x9a>
 800af1a:	e7e4      	b.n	800aee6 <__lshift+0x72>

0800af1c <__mcmp>:
 800af1c:	6903      	ldr	r3, [r0, #16]
 800af1e:	690a      	ldr	r2, [r1, #16]
 800af20:	1a9b      	subs	r3, r3, r2
 800af22:	b530      	push	{r4, r5, lr}
 800af24:	d10c      	bne.n	800af40 <__mcmp+0x24>
 800af26:	0092      	lsls	r2, r2, #2
 800af28:	3014      	adds	r0, #20
 800af2a:	3114      	adds	r1, #20
 800af2c:	1884      	adds	r4, r0, r2
 800af2e:	4411      	add	r1, r2
 800af30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800af34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800af38:	4295      	cmp	r5, r2
 800af3a:	d003      	beq.n	800af44 <__mcmp+0x28>
 800af3c:	d305      	bcc.n	800af4a <__mcmp+0x2e>
 800af3e:	2301      	movs	r3, #1
 800af40:	4618      	mov	r0, r3
 800af42:	bd30      	pop	{r4, r5, pc}
 800af44:	42a0      	cmp	r0, r4
 800af46:	d3f3      	bcc.n	800af30 <__mcmp+0x14>
 800af48:	e7fa      	b.n	800af40 <__mcmp+0x24>
 800af4a:	f04f 33ff 	mov.w	r3, #4294967295
 800af4e:	e7f7      	b.n	800af40 <__mcmp+0x24>

0800af50 <__mdiff>:
 800af50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af54:	460d      	mov	r5, r1
 800af56:	4607      	mov	r7, r0
 800af58:	4611      	mov	r1, r2
 800af5a:	4628      	mov	r0, r5
 800af5c:	4614      	mov	r4, r2
 800af5e:	f7ff ffdd 	bl	800af1c <__mcmp>
 800af62:	1e06      	subs	r6, r0, #0
 800af64:	d108      	bne.n	800af78 <__mdiff+0x28>
 800af66:	4631      	mov	r1, r6
 800af68:	4638      	mov	r0, r7
 800af6a:	f7ff fd83 	bl	800aa74 <_Balloc>
 800af6e:	2301      	movs	r3, #1
 800af70:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800af74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af78:	bfa4      	itt	ge
 800af7a:	4623      	movge	r3, r4
 800af7c:	462c      	movge	r4, r5
 800af7e:	4638      	mov	r0, r7
 800af80:	6861      	ldr	r1, [r4, #4]
 800af82:	bfa6      	itte	ge
 800af84:	461d      	movge	r5, r3
 800af86:	2600      	movge	r6, #0
 800af88:	2601      	movlt	r6, #1
 800af8a:	f7ff fd73 	bl	800aa74 <_Balloc>
 800af8e:	692b      	ldr	r3, [r5, #16]
 800af90:	60c6      	str	r6, [r0, #12]
 800af92:	6926      	ldr	r6, [r4, #16]
 800af94:	f105 0914 	add.w	r9, r5, #20
 800af98:	f104 0214 	add.w	r2, r4, #20
 800af9c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800afa0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800afa4:	f100 0514 	add.w	r5, r0, #20
 800afa8:	f04f 0e00 	mov.w	lr, #0
 800afac:	f852 ab04 	ldr.w	sl, [r2], #4
 800afb0:	f859 4b04 	ldr.w	r4, [r9], #4
 800afb4:	fa1e f18a 	uxtah	r1, lr, sl
 800afb8:	b2a3      	uxth	r3, r4
 800afba:	1ac9      	subs	r1, r1, r3
 800afbc:	0c23      	lsrs	r3, r4, #16
 800afbe:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800afc2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800afc6:	b289      	uxth	r1, r1
 800afc8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800afcc:	45c8      	cmp	r8, r9
 800afce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800afd2:	4694      	mov	ip, r2
 800afd4:	f845 3b04 	str.w	r3, [r5], #4
 800afd8:	d8e8      	bhi.n	800afac <__mdiff+0x5c>
 800afda:	45bc      	cmp	ip, r7
 800afdc:	d304      	bcc.n	800afe8 <__mdiff+0x98>
 800afde:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800afe2:	b183      	cbz	r3, 800b006 <__mdiff+0xb6>
 800afe4:	6106      	str	r6, [r0, #16]
 800afe6:	e7c5      	b.n	800af74 <__mdiff+0x24>
 800afe8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800afec:	fa1e f381 	uxtah	r3, lr, r1
 800aff0:	141a      	asrs	r2, r3, #16
 800aff2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800affc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b000:	f845 3b04 	str.w	r3, [r5], #4
 800b004:	e7e9      	b.n	800afda <__mdiff+0x8a>
 800b006:	3e01      	subs	r6, #1
 800b008:	e7e9      	b.n	800afde <__mdiff+0x8e>
	...

0800b00c <__ulp>:
 800b00c:	4b12      	ldr	r3, [pc, #72]	; (800b058 <__ulp+0x4c>)
 800b00e:	ee10 2a90 	vmov	r2, s1
 800b012:	401a      	ands	r2, r3
 800b014:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800b018:	2b00      	cmp	r3, #0
 800b01a:	dd04      	ble.n	800b026 <__ulp+0x1a>
 800b01c:	2000      	movs	r0, #0
 800b01e:	4619      	mov	r1, r3
 800b020:	ec41 0b10 	vmov	d0, r0, r1
 800b024:	4770      	bx	lr
 800b026:	425b      	negs	r3, r3
 800b028:	151b      	asrs	r3, r3, #20
 800b02a:	2b13      	cmp	r3, #19
 800b02c:	f04f 0000 	mov.w	r0, #0
 800b030:	f04f 0100 	mov.w	r1, #0
 800b034:	dc04      	bgt.n	800b040 <__ulp+0x34>
 800b036:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b03a:	fa42 f103 	asr.w	r1, r2, r3
 800b03e:	e7ef      	b.n	800b020 <__ulp+0x14>
 800b040:	3b14      	subs	r3, #20
 800b042:	2b1e      	cmp	r3, #30
 800b044:	f04f 0201 	mov.w	r2, #1
 800b048:	bfda      	itte	le
 800b04a:	f1c3 031f 	rsble	r3, r3, #31
 800b04e:	fa02 f303 	lslle.w	r3, r2, r3
 800b052:	4613      	movgt	r3, r2
 800b054:	4618      	mov	r0, r3
 800b056:	e7e3      	b.n	800b020 <__ulp+0x14>
 800b058:	7ff00000 	.word	0x7ff00000

0800b05c <__b2d>:
 800b05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05e:	6905      	ldr	r5, [r0, #16]
 800b060:	f100 0714 	add.w	r7, r0, #20
 800b064:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b068:	1f2e      	subs	r6, r5, #4
 800b06a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b06e:	4620      	mov	r0, r4
 800b070:	f7ff fdc4 	bl	800abfc <__hi0bits>
 800b074:	f1c0 0320 	rsb	r3, r0, #32
 800b078:	280a      	cmp	r0, #10
 800b07a:	600b      	str	r3, [r1, #0]
 800b07c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b0f4 <__b2d+0x98>
 800b080:	dc14      	bgt.n	800b0ac <__b2d+0x50>
 800b082:	f1c0 0e0b 	rsb	lr, r0, #11
 800b086:	fa24 f10e 	lsr.w	r1, r4, lr
 800b08a:	42b7      	cmp	r7, r6
 800b08c:	ea41 030c 	orr.w	r3, r1, ip
 800b090:	bf34      	ite	cc
 800b092:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b096:	2100      	movcs	r1, #0
 800b098:	3015      	adds	r0, #21
 800b09a:	fa04 f000 	lsl.w	r0, r4, r0
 800b09e:	fa21 f10e 	lsr.w	r1, r1, lr
 800b0a2:	ea40 0201 	orr.w	r2, r0, r1
 800b0a6:	ec43 2b10 	vmov	d0, r2, r3
 800b0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0ac:	42b7      	cmp	r7, r6
 800b0ae:	bf3a      	itte	cc
 800b0b0:	f1a5 0608 	subcc.w	r6, r5, #8
 800b0b4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b0b8:	2100      	movcs	r1, #0
 800b0ba:	380b      	subs	r0, #11
 800b0bc:	d015      	beq.n	800b0ea <__b2d+0x8e>
 800b0be:	4084      	lsls	r4, r0
 800b0c0:	f1c0 0520 	rsb	r5, r0, #32
 800b0c4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800b0c8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800b0cc:	42be      	cmp	r6, r7
 800b0ce:	fa21 fc05 	lsr.w	ip, r1, r5
 800b0d2:	ea44 030c 	orr.w	r3, r4, ip
 800b0d6:	bf8c      	ite	hi
 800b0d8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b0dc:	2400      	movls	r4, #0
 800b0de:	fa01 f000 	lsl.w	r0, r1, r0
 800b0e2:	40ec      	lsrs	r4, r5
 800b0e4:	ea40 0204 	orr.w	r2, r0, r4
 800b0e8:	e7dd      	b.n	800b0a6 <__b2d+0x4a>
 800b0ea:	ea44 030c 	orr.w	r3, r4, ip
 800b0ee:	460a      	mov	r2, r1
 800b0f0:	e7d9      	b.n	800b0a6 <__b2d+0x4a>
 800b0f2:	bf00      	nop
 800b0f4:	3ff00000 	.word	0x3ff00000

0800b0f8 <__d2b>:
 800b0f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b0fc:	460e      	mov	r6, r1
 800b0fe:	2101      	movs	r1, #1
 800b100:	ec59 8b10 	vmov	r8, r9, d0
 800b104:	4615      	mov	r5, r2
 800b106:	f7ff fcb5 	bl	800aa74 <_Balloc>
 800b10a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b10e:	4607      	mov	r7, r0
 800b110:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b114:	bb34      	cbnz	r4, 800b164 <__d2b+0x6c>
 800b116:	9301      	str	r3, [sp, #4]
 800b118:	f1b8 0300 	subs.w	r3, r8, #0
 800b11c:	d027      	beq.n	800b16e <__d2b+0x76>
 800b11e:	a802      	add	r0, sp, #8
 800b120:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b124:	f7ff fd89 	bl	800ac3a <__lo0bits>
 800b128:	9900      	ldr	r1, [sp, #0]
 800b12a:	b1f0      	cbz	r0, 800b16a <__d2b+0x72>
 800b12c:	9a01      	ldr	r2, [sp, #4]
 800b12e:	f1c0 0320 	rsb	r3, r0, #32
 800b132:	fa02 f303 	lsl.w	r3, r2, r3
 800b136:	430b      	orrs	r3, r1
 800b138:	40c2      	lsrs	r2, r0
 800b13a:	617b      	str	r3, [r7, #20]
 800b13c:	9201      	str	r2, [sp, #4]
 800b13e:	9b01      	ldr	r3, [sp, #4]
 800b140:	61bb      	str	r3, [r7, #24]
 800b142:	2b00      	cmp	r3, #0
 800b144:	bf14      	ite	ne
 800b146:	2102      	movne	r1, #2
 800b148:	2101      	moveq	r1, #1
 800b14a:	6139      	str	r1, [r7, #16]
 800b14c:	b1c4      	cbz	r4, 800b180 <__d2b+0x88>
 800b14e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b152:	4404      	add	r4, r0
 800b154:	6034      	str	r4, [r6, #0]
 800b156:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b15a:	6028      	str	r0, [r5, #0]
 800b15c:	4638      	mov	r0, r7
 800b15e:	b003      	add	sp, #12
 800b160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b164:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b168:	e7d5      	b.n	800b116 <__d2b+0x1e>
 800b16a:	6179      	str	r1, [r7, #20]
 800b16c:	e7e7      	b.n	800b13e <__d2b+0x46>
 800b16e:	a801      	add	r0, sp, #4
 800b170:	f7ff fd63 	bl	800ac3a <__lo0bits>
 800b174:	9b01      	ldr	r3, [sp, #4]
 800b176:	617b      	str	r3, [r7, #20]
 800b178:	2101      	movs	r1, #1
 800b17a:	6139      	str	r1, [r7, #16]
 800b17c:	3020      	adds	r0, #32
 800b17e:	e7e5      	b.n	800b14c <__d2b+0x54>
 800b180:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b184:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b188:	6030      	str	r0, [r6, #0]
 800b18a:	6918      	ldr	r0, [r3, #16]
 800b18c:	f7ff fd36 	bl	800abfc <__hi0bits>
 800b190:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b194:	e7e1      	b.n	800b15a <__d2b+0x62>

0800b196 <__ratio>:
 800b196:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19a:	4688      	mov	r8, r1
 800b19c:	4669      	mov	r1, sp
 800b19e:	4681      	mov	r9, r0
 800b1a0:	f7ff ff5c 	bl	800b05c <__b2d>
 800b1a4:	a901      	add	r1, sp, #4
 800b1a6:	4640      	mov	r0, r8
 800b1a8:	ec57 6b10 	vmov	r6, r7, d0
 800b1ac:	f7ff ff56 	bl	800b05c <__b2d>
 800b1b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b1b4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b1b8:	eba3 0c02 	sub.w	ip, r3, r2
 800b1bc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b1c0:	1a9b      	subs	r3, r3, r2
 800b1c2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b1c6:	ec5b ab10 	vmov	sl, fp, d0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	bfce      	itee	gt
 800b1ce:	463a      	movgt	r2, r7
 800b1d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b1d4:	465a      	movle	r2, fp
 800b1d6:	4659      	mov	r1, fp
 800b1d8:	463d      	mov	r5, r7
 800b1da:	bfd4      	ite	le
 800b1dc:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800b1e0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800b1e4:	4630      	mov	r0, r6
 800b1e6:	ee10 2a10 	vmov	r2, s0
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	4629      	mov	r1, r5
 800b1ee:	f7f5 fadd 	bl	80007ac <__aeabi_ddiv>
 800b1f2:	ec41 0b10 	vmov	d0, r0, r1
 800b1f6:	b003      	add	sp, #12
 800b1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b1fc <_mprec_log10>:
 800b1fc:	2817      	cmp	r0, #23
 800b1fe:	b5d0      	push	{r4, r6, r7, lr}
 800b200:	4604      	mov	r4, r0
 800b202:	dc07      	bgt.n	800b214 <_mprec_log10+0x18>
 800b204:	4b09      	ldr	r3, [pc, #36]	; (800b22c <_mprec_log10+0x30>)
 800b206:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 800b20a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b20e:	ec41 0b10 	vmov	d0, r0, r1
 800b212:	bdd0      	pop	{r4, r6, r7, pc}
 800b214:	4906      	ldr	r1, [pc, #24]	; (800b230 <_mprec_log10+0x34>)
 800b216:	4f07      	ldr	r7, [pc, #28]	; (800b234 <_mprec_log10+0x38>)
 800b218:	2000      	movs	r0, #0
 800b21a:	2600      	movs	r6, #0
 800b21c:	4632      	mov	r2, r6
 800b21e:	463b      	mov	r3, r7
 800b220:	f7f5 f99a 	bl	8000558 <__aeabi_dmul>
 800b224:	3c01      	subs	r4, #1
 800b226:	d1f9      	bne.n	800b21c <_mprec_log10+0x20>
 800b228:	e7f1      	b.n	800b20e <_mprec_log10+0x12>
 800b22a:	bf00      	nop
 800b22c:	0800ea58 	.word	0x0800ea58
 800b230:	3ff00000 	.word	0x3ff00000
 800b234:	40240000 	.word	0x40240000

0800b238 <__copybits>:
 800b238:	3901      	subs	r1, #1
 800b23a:	b510      	push	{r4, lr}
 800b23c:	1149      	asrs	r1, r1, #5
 800b23e:	6914      	ldr	r4, [r2, #16]
 800b240:	3101      	adds	r1, #1
 800b242:	f102 0314 	add.w	r3, r2, #20
 800b246:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b24a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b24e:	42a3      	cmp	r3, r4
 800b250:	4602      	mov	r2, r0
 800b252:	d303      	bcc.n	800b25c <__copybits+0x24>
 800b254:	2300      	movs	r3, #0
 800b256:	428a      	cmp	r2, r1
 800b258:	d305      	bcc.n	800b266 <__copybits+0x2e>
 800b25a:	bd10      	pop	{r4, pc}
 800b25c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b260:	f840 2b04 	str.w	r2, [r0], #4
 800b264:	e7f3      	b.n	800b24e <__copybits+0x16>
 800b266:	f842 3b04 	str.w	r3, [r2], #4
 800b26a:	e7f4      	b.n	800b256 <__copybits+0x1e>

0800b26c <__any_on>:
 800b26c:	f100 0214 	add.w	r2, r0, #20
 800b270:	6900      	ldr	r0, [r0, #16]
 800b272:	114b      	asrs	r3, r1, #5
 800b274:	4298      	cmp	r0, r3
 800b276:	b510      	push	{r4, lr}
 800b278:	db11      	blt.n	800b29e <__any_on+0x32>
 800b27a:	dd0a      	ble.n	800b292 <__any_on+0x26>
 800b27c:	f011 011f 	ands.w	r1, r1, #31
 800b280:	d007      	beq.n	800b292 <__any_on+0x26>
 800b282:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b286:	fa24 f001 	lsr.w	r0, r4, r1
 800b28a:	fa00 f101 	lsl.w	r1, r0, r1
 800b28e:	428c      	cmp	r4, r1
 800b290:	d10b      	bne.n	800b2aa <__any_on+0x3e>
 800b292:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b296:	4293      	cmp	r3, r2
 800b298:	d803      	bhi.n	800b2a2 <__any_on+0x36>
 800b29a:	2000      	movs	r0, #0
 800b29c:	bd10      	pop	{r4, pc}
 800b29e:	4603      	mov	r3, r0
 800b2a0:	e7f7      	b.n	800b292 <__any_on+0x26>
 800b2a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b2a6:	2900      	cmp	r1, #0
 800b2a8:	d0f5      	beq.n	800b296 <__any_on+0x2a>
 800b2aa:	2001      	movs	r0, #1
 800b2ac:	e7f6      	b.n	800b29c <__any_on+0x30>

0800b2ae <_calloc_r>:
 800b2ae:	b538      	push	{r3, r4, r5, lr}
 800b2b0:	fb02 f401 	mul.w	r4, r2, r1
 800b2b4:	4621      	mov	r1, r4
 800b2b6:	f000 f809 	bl	800b2cc <_malloc_r>
 800b2ba:	4605      	mov	r5, r0
 800b2bc:	b118      	cbz	r0, 800b2c6 <_calloc_r+0x18>
 800b2be:	4622      	mov	r2, r4
 800b2c0:	2100      	movs	r1, #0
 800b2c2:	f7fe f805 	bl	80092d0 <memset>
 800b2c6:	4628      	mov	r0, r5
 800b2c8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b2cc <_malloc_r>:
 800b2cc:	b570      	push	{r4, r5, r6, lr}
 800b2ce:	1ccd      	adds	r5, r1, #3
 800b2d0:	f025 0503 	bic.w	r5, r5, #3
 800b2d4:	3508      	adds	r5, #8
 800b2d6:	2d0c      	cmp	r5, #12
 800b2d8:	bf38      	it	cc
 800b2da:	250c      	movcc	r5, #12
 800b2dc:	2d00      	cmp	r5, #0
 800b2de:	4606      	mov	r6, r0
 800b2e0:	db01      	blt.n	800b2e6 <_malloc_r+0x1a>
 800b2e2:	42a9      	cmp	r1, r5
 800b2e4:	d903      	bls.n	800b2ee <_malloc_r+0x22>
 800b2e6:	230c      	movs	r3, #12
 800b2e8:	6033      	str	r3, [r6, #0]
 800b2ea:	2000      	movs	r0, #0
 800b2ec:	bd70      	pop	{r4, r5, r6, pc}
 800b2ee:	f000 fed3 	bl	800c098 <__malloc_lock>
 800b2f2:	4a21      	ldr	r2, [pc, #132]	; (800b378 <_malloc_r+0xac>)
 800b2f4:	6814      	ldr	r4, [r2, #0]
 800b2f6:	4621      	mov	r1, r4
 800b2f8:	b991      	cbnz	r1, 800b320 <_malloc_r+0x54>
 800b2fa:	4c20      	ldr	r4, [pc, #128]	; (800b37c <_malloc_r+0xb0>)
 800b2fc:	6823      	ldr	r3, [r4, #0]
 800b2fe:	b91b      	cbnz	r3, 800b308 <_malloc_r+0x3c>
 800b300:	4630      	mov	r0, r6
 800b302:	f000 f83d 	bl	800b380 <_sbrk_r>
 800b306:	6020      	str	r0, [r4, #0]
 800b308:	4629      	mov	r1, r5
 800b30a:	4630      	mov	r0, r6
 800b30c:	f000 f838 	bl	800b380 <_sbrk_r>
 800b310:	1c43      	adds	r3, r0, #1
 800b312:	d124      	bne.n	800b35e <_malloc_r+0x92>
 800b314:	230c      	movs	r3, #12
 800b316:	6033      	str	r3, [r6, #0]
 800b318:	4630      	mov	r0, r6
 800b31a:	f000 febe 	bl	800c09a <__malloc_unlock>
 800b31e:	e7e4      	b.n	800b2ea <_malloc_r+0x1e>
 800b320:	680b      	ldr	r3, [r1, #0]
 800b322:	1b5b      	subs	r3, r3, r5
 800b324:	d418      	bmi.n	800b358 <_malloc_r+0x8c>
 800b326:	2b0b      	cmp	r3, #11
 800b328:	d90f      	bls.n	800b34a <_malloc_r+0x7e>
 800b32a:	600b      	str	r3, [r1, #0]
 800b32c:	50cd      	str	r5, [r1, r3]
 800b32e:	18cc      	adds	r4, r1, r3
 800b330:	4630      	mov	r0, r6
 800b332:	f000 feb2 	bl	800c09a <__malloc_unlock>
 800b336:	f104 000b 	add.w	r0, r4, #11
 800b33a:	1d23      	adds	r3, r4, #4
 800b33c:	f020 0007 	bic.w	r0, r0, #7
 800b340:	1ac3      	subs	r3, r0, r3
 800b342:	d0d3      	beq.n	800b2ec <_malloc_r+0x20>
 800b344:	425a      	negs	r2, r3
 800b346:	50e2      	str	r2, [r4, r3]
 800b348:	e7d0      	b.n	800b2ec <_malloc_r+0x20>
 800b34a:	428c      	cmp	r4, r1
 800b34c:	684b      	ldr	r3, [r1, #4]
 800b34e:	bf16      	itet	ne
 800b350:	6063      	strne	r3, [r4, #4]
 800b352:	6013      	streq	r3, [r2, #0]
 800b354:	460c      	movne	r4, r1
 800b356:	e7eb      	b.n	800b330 <_malloc_r+0x64>
 800b358:	460c      	mov	r4, r1
 800b35a:	6849      	ldr	r1, [r1, #4]
 800b35c:	e7cc      	b.n	800b2f8 <_malloc_r+0x2c>
 800b35e:	1cc4      	adds	r4, r0, #3
 800b360:	f024 0403 	bic.w	r4, r4, #3
 800b364:	42a0      	cmp	r0, r4
 800b366:	d005      	beq.n	800b374 <_malloc_r+0xa8>
 800b368:	1a21      	subs	r1, r4, r0
 800b36a:	4630      	mov	r0, r6
 800b36c:	f000 f808 	bl	800b380 <_sbrk_r>
 800b370:	3001      	adds	r0, #1
 800b372:	d0cf      	beq.n	800b314 <_malloc_r+0x48>
 800b374:	6025      	str	r5, [r4, #0]
 800b376:	e7db      	b.n	800b330 <_malloc_r+0x64>
 800b378:	20000388 	.word	0x20000388
 800b37c:	2000038c 	.word	0x2000038c

0800b380 <_sbrk_r>:
 800b380:	b538      	push	{r3, r4, r5, lr}
 800b382:	4c06      	ldr	r4, [pc, #24]	; (800b39c <_sbrk_r+0x1c>)
 800b384:	2300      	movs	r3, #0
 800b386:	4605      	mov	r5, r0
 800b388:	4608      	mov	r0, r1
 800b38a:	6023      	str	r3, [r4, #0]
 800b38c:	f7f8 fd70 	bl	8003e70 <_sbrk>
 800b390:	1c43      	adds	r3, r0, #1
 800b392:	d102      	bne.n	800b39a <_sbrk_r+0x1a>
 800b394:	6823      	ldr	r3, [r4, #0]
 800b396:	b103      	cbz	r3, 800b39a <_sbrk_r+0x1a>
 800b398:	602b      	str	r3, [r5, #0]
 800b39a:	bd38      	pop	{r3, r4, r5, pc}
 800b39c:	2000078c 	.word	0x2000078c

0800b3a0 <nanf>:
 800b3a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b3a8 <nanf+0x8>
 800b3a4:	4770      	bx	lr
 800b3a6:	bf00      	nop
 800b3a8:	7fc00000 	.word	0x7fc00000

0800b3ac <strcpy>:
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3b2:	f803 2b01 	strb.w	r2, [r3], #1
 800b3b6:	2a00      	cmp	r2, #0
 800b3b8:	d1f9      	bne.n	800b3ae <strcpy+0x2>
 800b3ba:	4770      	bx	lr

0800b3bc <strncmp>:
 800b3bc:	b510      	push	{r4, lr}
 800b3be:	b16a      	cbz	r2, 800b3dc <strncmp+0x20>
 800b3c0:	3901      	subs	r1, #1
 800b3c2:	1884      	adds	r4, r0, r2
 800b3c4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b3c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d103      	bne.n	800b3d8 <strncmp+0x1c>
 800b3d0:	42a0      	cmp	r0, r4
 800b3d2:	d001      	beq.n	800b3d8 <strncmp+0x1c>
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d1f5      	bne.n	800b3c4 <strncmp+0x8>
 800b3d8:	1a98      	subs	r0, r3, r2
 800b3da:	bd10      	pop	{r4, pc}
 800b3dc:	4610      	mov	r0, r2
 800b3de:	e7fc      	b.n	800b3da <strncmp+0x1e>

0800b3e0 <__ascii_wctomb>:
 800b3e0:	b149      	cbz	r1, 800b3f6 <__ascii_wctomb+0x16>
 800b3e2:	2aff      	cmp	r2, #255	; 0xff
 800b3e4:	bf85      	ittet	hi
 800b3e6:	238a      	movhi	r3, #138	; 0x8a
 800b3e8:	6003      	strhi	r3, [r0, #0]
 800b3ea:	700a      	strbls	r2, [r1, #0]
 800b3ec:	f04f 30ff 	movhi.w	r0, #4294967295
 800b3f0:	bf98      	it	ls
 800b3f2:	2001      	movls	r0, #1
 800b3f4:	4770      	bx	lr
 800b3f6:	4608      	mov	r0, r1
 800b3f8:	4770      	bx	lr

0800b3fa <quorem>:
 800b3fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fe:	6903      	ldr	r3, [r0, #16]
 800b400:	690c      	ldr	r4, [r1, #16]
 800b402:	42a3      	cmp	r3, r4
 800b404:	4680      	mov	r8, r0
 800b406:	f2c0 8082 	blt.w	800b50e <quorem+0x114>
 800b40a:	3c01      	subs	r4, #1
 800b40c:	f101 0714 	add.w	r7, r1, #20
 800b410:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b414:	f100 0614 	add.w	r6, r0, #20
 800b418:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b41c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b420:	eb06 030c 	add.w	r3, r6, ip
 800b424:	3501      	adds	r5, #1
 800b426:	eb07 090c 	add.w	r9, r7, ip
 800b42a:	9301      	str	r3, [sp, #4]
 800b42c:	fbb0 f5f5 	udiv	r5, r0, r5
 800b430:	b395      	cbz	r5, 800b498 <quorem+0x9e>
 800b432:	f04f 0a00 	mov.w	sl, #0
 800b436:	4638      	mov	r0, r7
 800b438:	46b6      	mov	lr, r6
 800b43a:	46d3      	mov	fp, sl
 800b43c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b440:	b293      	uxth	r3, r2
 800b442:	fb05 a303 	mla	r3, r5, r3, sl
 800b446:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	ebab 0303 	sub.w	r3, fp, r3
 800b450:	0c12      	lsrs	r2, r2, #16
 800b452:	f8de b000 	ldr.w	fp, [lr]
 800b456:	fb05 a202 	mla	r2, r5, r2, sl
 800b45a:	fa13 f38b 	uxtah	r3, r3, fp
 800b45e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b462:	fa1f fb82 	uxth.w	fp, r2
 800b466:	f8de 2000 	ldr.w	r2, [lr]
 800b46a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b46e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b472:	b29b      	uxth	r3, r3
 800b474:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b478:	4581      	cmp	r9, r0
 800b47a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b47e:	f84e 3b04 	str.w	r3, [lr], #4
 800b482:	d2db      	bcs.n	800b43c <quorem+0x42>
 800b484:	f856 300c 	ldr.w	r3, [r6, ip]
 800b488:	b933      	cbnz	r3, 800b498 <quorem+0x9e>
 800b48a:	9b01      	ldr	r3, [sp, #4]
 800b48c:	3b04      	subs	r3, #4
 800b48e:	429e      	cmp	r6, r3
 800b490:	461a      	mov	r2, r3
 800b492:	d330      	bcc.n	800b4f6 <quorem+0xfc>
 800b494:	f8c8 4010 	str.w	r4, [r8, #16]
 800b498:	4640      	mov	r0, r8
 800b49a:	f7ff fd3f 	bl	800af1c <__mcmp>
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	db25      	blt.n	800b4ee <quorem+0xf4>
 800b4a2:	3501      	adds	r5, #1
 800b4a4:	4630      	mov	r0, r6
 800b4a6:	f04f 0c00 	mov.w	ip, #0
 800b4aa:	f857 2b04 	ldr.w	r2, [r7], #4
 800b4ae:	f8d0 e000 	ldr.w	lr, [r0]
 800b4b2:	b293      	uxth	r3, r2
 800b4b4:	ebac 0303 	sub.w	r3, ip, r3
 800b4b8:	0c12      	lsrs	r2, r2, #16
 800b4ba:	fa13 f38e 	uxtah	r3, r3, lr
 800b4be:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b4c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4cc:	45b9      	cmp	r9, r7
 800b4ce:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b4d2:	f840 3b04 	str.w	r3, [r0], #4
 800b4d6:	d2e8      	bcs.n	800b4aa <quorem+0xb0>
 800b4d8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b4dc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b4e0:	b92a      	cbnz	r2, 800b4ee <quorem+0xf4>
 800b4e2:	3b04      	subs	r3, #4
 800b4e4:	429e      	cmp	r6, r3
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	d30b      	bcc.n	800b502 <quorem+0x108>
 800b4ea:	f8c8 4010 	str.w	r4, [r8, #16]
 800b4ee:	4628      	mov	r0, r5
 800b4f0:	b003      	add	sp, #12
 800b4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4f6:	6812      	ldr	r2, [r2, #0]
 800b4f8:	3b04      	subs	r3, #4
 800b4fa:	2a00      	cmp	r2, #0
 800b4fc:	d1ca      	bne.n	800b494 <quorem+0x9a>
 800b4fe:	3c01      	subs	r4, #1
 800b500:	e7c5      	b.n	800b48e <quorem+0x94>
 800b502:	6812      	ldr	r2, [r2, #0]
 800b504:	3b04      	subs	r3, #4
 800b506:	2a00      	cmp	r2, #0
 800b508:	d1ef      	bne.n	800b4ea <quorem+0xf0>
 800b50a:	3c01      	subs	r4, #1
 800b50c:	e7ea      	b.n	800b4e4 <quorem+0xea>
 800b50e:	2000      	movs	r0, #0
 800b510:	e7ee      	b.n	800b4f0 <quorem+0xf6>
 800b512:	0000      	movs	r0, r0
 800b514:	0000      	movs	r0, r0
	...

0800b518 <_dtoa_r>:
 800b518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b51c:	ec57 6b10 	vmov	r6, r7, d0
 800b520:	b097      	sub	sp, #92	; 0x5c
 800b522:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b524:	9106      	str	r1, [sp, #24]
 800b526:	4604      	mov	r4, r0
 800b528:	920b      	str	r2, [sp, #44]	; 0x2c
 800b52a:	9312      	str	r3, [sp, #72]	; 0x48
 800b52c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b530:	e9cd 6700 	strd	r6, r7, [sp]
 800b534:	b93d      	cbnz	r5, 800b546 <_dtoa_r+0x2e>
 800b536:	2010      	movs	r0, #16
 800b538:	f000 fda6 	bl	800c088 <malloc>
 800b53c:	6260      	str	r0, [r4, #36]	; 0x24
 800b53e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b542:	6005      	str	r5, [r0, #0]
 800b544:	60c5      	str	r5, [r0, #12]
 800b546:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b548:	6819      	ldr	r1, [r3, #0]
 800b54a:	b151      	cbz	r1, 800b562 <_dtoa_r+0x4a>
 800b54c:	685a      	ldr	r2, [r3, #4]
 800b54e:	604a      	str	r2, [r1, #4]
 800b550:	2301      	movs	r3, #1
 800b552:	4093      	lsls	r3, r2
 800b554:	608b      	str	r3, [r1, #8]
 800b556:	4620      	mov	r0, r4
 800b558:	f7ff fac0 	bl	800aadc <_Bfree>
 800b55c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b55e:	2200      	movs	r2, #0
 800b560:	601a      	str	r2, [r3, #0]
 800b562:	1e3b      	subs	r3, r7, #0
 800b564:	bfbb      	ittet	lt
 800b566:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b56a:	9301      	strlt	r3, [sp, #4]
 800b56c:	2300      	movge	r3, #0
 800b56e:	2201      	movlt	r2, #1
 800b570:	bfac      	ite	ge
 800b572:	f8c8 3000 	strge.w	r3, [r8]
 800b576:	f8c8 2000 	strlt.w	r2, [r8]
 800b57a:	4baf      	ldr	r3, [pc, #700]	; (800b838 <_dtoa_r+0x320>)
 800b57c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b580:	ea33 0308 	bics.w	r3, r3, r8
 800b584:	d114      	bne.n	800b5b0 <_dtoa_r+0x98>
 800b586:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b588:	f242 730f 	movw	r3, #9999	; 0x270f
 800b58c:	6013      	str	r3, [r2, #0]
 800b58e:	9b00      	ldr	r3, [sp, #0]
 800b590:	b923      	cbnz	r3, 800b59c <_dtoa_r+0x84>
 800b592:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b596:	2800      	cmp	r0, #0
 800b598:	f000 8542 	beq.w	800c020 <_dtoa_r+0xb08>
 800b59c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b59e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800b84c <_dtoa_r+0x334>
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	f000 8544 	beq.w	800c030 <_dtoa_r+0xb18>
 800b5a8:	f10b 0303 	add.w	r3, fp, #3
 800b5ac:	f000 bd3e 	b.w	800c02c <_dtoa_r+0xb14>
 800b5b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	4639      	mov	r1, r7
 800b5bc:	f7f5 fa34 	bl	8000a28 <__aeabi_dcmpeq>
 800b5c0:	4681      	mov	r9, r0
 800b5c2:	b168      	cbz	r0, 800b5e0 <_dtoa_r+0xc8>
 800b5c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	6013      	str	r3, [r2, #0]
 800b5ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f000 8524 	beq.w	800c01a <_dtoa_r+0xb02>
 800b5d2:	4b9a      	ldr	r3, [pc, #616]	; (800b83c <_dtoa_r+0x324>)
 800b5d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b5d6:	f103 3bff 	add.w	fp, r3, #4294967295
 800b5da:	6013      	str	r3, [r2, #0]
 800b5dc:	f000 bd28 	b.w	800c030 <_dtoa_r+0xb18>
 800b5e0:	aa14      	add	r2, sp, #80	; 0x50
 800b5e2:	a915      	add	r1, sp, #84	; 0x54
 800b5e4:	ec47 6b10 	vmov	d0, r6, r7
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	f7ff fd85 	bl	800b0f8 <__d2b>
 800b5ee:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b5f2:	9004      	str	r0, [sp, #16]
 800b5f4:	2d00      	cmp	r5, #0
 800b5f6:	d07c      	beq.n	800b6f2 <_dtoa_r+0x1da>
 800b5f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b5fc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b600:	46b2      	mov	sl, r6
 800b602:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b606:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b60a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b60e:	2200      	movs	r2, #0
 800b610:	4b8b      	ldr	r3, [pc, #556]	; (800b840 <_dtoa_r+0x328>)
 800b612:	4650      	mov	r0, sl
 800b614:	4659      	mov	r1, fp
 800b616:	f7f4 fde7 	bl	80001e8 <__aeabi_dsub>
 800b61a:	a381      	add	r3, pc, #516	; (adr r3, 800b820 <_dtoa_r+0x308>)
 800b61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b620:	f7f4 ff9a 	bl	8000558 <__aeabi_dmul>
 800b624:	a380      	add	r3, pc, #512	; (adr r3, 800b828 <_dtoa_r+0x310>)
 800b626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62a:	f7f4 fddf 	bl	80001ec <__adddf3>
 800b62e:	4606      	mov	r6, r0
 800b630:	4628      	mov	r0, r5
 800b632:	460f      	mov	r7, r1
 800b634:	f7f4 ff26 	bl	8000484 <__aeabi_i2d>
 800b638:	a37d      	add	r3, pc, #500	; (adr r3, 800b830 <_dtoa_r+0x318>)
 800b63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63e:	f7f4 ff8b 	bl	8000558 <__aeabi_dmul>
 800b642:	4602      	mov	r2, r0
 800b644:	460b      	mov	r3, r1
 800b646:	4630      	mov	r0, r6
 800b648:	4639      	mov	r1, r7
 800b64a:	f7f4 fdcf 	bl	80001ec <__adddf3>
 800b64e:	4606      	mov	r6, r0
 800b650:	460f      	mov	r7, r1
 800b652:	f7f5 fa31 	bl	8000ab8 <__aeabi_d2iz>
 800b656:	2200      	movs	r2, #0
 800b658:	4682      	mov	sl, r0
 800b65a:	2300      	movs	r3, #0
 800b65c:	4630      	mov	r0, r6
 800b65e:	4639      	mov	r1, r7
 800b660:	f7f5 f9ec 	bl	8000a3c <__aeabi_dcmplt>
 800b664:	b148      	cbz	r0, 800b67a <_dtoa_r+0x162>
 800b666:	4650      	mov	r0, sl
 800b668:	f7f4 ff0c 	bl	8000484 <__aeabi_i2d>
 800b66c:	4632      	mov	r2, r6
 800b66e:	463b      	mov	r3, r7
 800b670:	f7f5 f9da 	bl	8000a28 <__aeabi_dcmpeq>
 800b674:	b908      	cbnz	r0, 800b67a <_dtoa_r+0x162>
 800b676:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b67a:	f1ba 0f16 	cmp.w	sl, #22
 800b67e:	d859      	bhi.n	800b734 <_dtoa_r+0x21c>
 800b680:	4970      	ldr	r1, [pc, #448]	; (800b844 <_dtoa_r+0x32c>)
 800b682:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b686:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b68a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b68e:	f7f5 f9f3 	bl	8000a78 <__aeabi_dcmpgt>
 800b692:	2800      	cmp	r0, #0
 800b694:	d050      	beq.n	800b738 <_dtoa_r+0x220>
 800b696:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b69a:	2300      	movs	r3, #0
 800b69c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b69e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b6a0:	1b5d      	subs	r5, r3, r5
 800b6a2:	f1b5 0801 	subs.w	r8, r5, #1
 800b6a6:	bf49      	itett	mi
 800b6a8:	f1c5 0301 	rsbmi	r3, r5, #1
 800b6ac:	2300      	movpl	r3, #0
 800b6ae:	9305      	strmi	r3, [sp, #20]
 800b6b0:	f04f 0800 	movmi.w	r8, #0
 800b6b4:	bf58      	it	pl
 800b6b6:	9305      	strpl	r3, [sp, #20]
 800b6b8:	f1ba 0f00 	cmp.w	sl, #0
 800b6bc:	db3e      	blt.n	800b73c <_dtoa_r+0x224>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	44d0      	add	r8, sl
 800b6c2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b6c6:	9307      	str	r3, [sp, #28]
 800b6c8:	9b06      	ldr	r3, [sp, #24]
 800b6ca:	2b09      	cmp	r3, #9
 800b6cc:	f200 8090 	bhi.w	800b7f0 <_dtoa_r+0x2d8>
 800b6d0:	2b05      	cmp	r3, #5
 800b6d2:	bfc4      	itt	gt
 800b6d4:	3b04      	subgt	r3, #4
 800b6d6:	9306      	strgt	r3, [sp, #24]
 800b6d8:	9b06      	ldr	r3, [sp, #24]
 800b6da:	f1a3 0302 	sub.w	r3, r3, #2
 800b6de:	bfcc      	ite	gt
 800b6e0:	2500      	movgt	r5, #0
 800b6e2:	2501      	movle	r5, #1
 800b6e4:	2b03      	cmp	r3, #3
 800b6e6:	f200 808f 	bhi.w	800b808 <_dtoa_r+0x2f0>
 800b6ea:	e8df f003 	tbb	[pc, r3]
 800b6ee:	7f7d      	.short	0x7f7d
 800b6f0:	7131      	.short	0x7131
 800b6f2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b6f6:	441d      	add	r5, r3
 800b6f8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b6fc:	2820      	cmp	r0, #32
 800b6fe:	dd13      	ble.n	800b728 <_dtoa_r+0x210>
 800b700:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b704:	9b00      	ldr	r3, [sp, #0]
 800b706:	fa08 f800 	lsl.w	r8, r8, r0
 800b70a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b70e:	fa23 f000 	lsr.w	r0, r3, r0
 800b712:	ea48 0000 	orr.w	r0, r8, r0
 800b716:	f7f4 fea5 	bl	8000464 <__aeabi_ui2d>
 800b71a:	2301      	movs	r3, #1
 800b71c:	4682      	mov	sl, r0
 800b71e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b722:	3d01      	subs	r5, #1
 800b724:	9313      	str	r3, [sp, #76]	; 0x4c
 800b726:	e772      	b.n	800b60e <_dtoa_r+0xf6>
 800b728:	9b00      	ldr	r3, [sp, #0]
 800b72a:	f1c0 0020 	rsb	r0, r0, #32
 800b72e:	fa03 f000 	lsl.w	r0, r3, r0
 800b732:	e7f0      	b.n	800b716 <_dtoa_r+0x1fe>
 800b734:	2301      	movs	r3, #1
 800b736:	e7b1      	b.n	800b69c <_dtoa_r+0x184>
 800b738:	900f      	str	r0, [sp, #60]	; 0x3c
 800b73a:	e7b0      	b.n	800b69e <_dtoa_r+0x186>
 800b73c:	9b05      	ldr	r3, [sp, #20]
 800b73e:	eba3 030a 	sub.w	r3, r3, sl
 800b742:	9305      	str	r3, [sp, #20]
 800b744:	f1ca 0300 	rsb	r3, sl, #0
 800b748:	9307      	str	r3, [sp, #28]
 800b74a:	2300      	movs	r3, #0
 800b74c:	930e      	str	r3, [sp, #56]	; 0x38
 800b74e:	e7bb      	b.n	800b6c8 <_dtoa_r+0x1b0>
 800b750:	2301      	movs	r3, #1
 800b752:	930a      	str	r3, [sp, #40]	; 0x28
 800b754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b756:	2b00      	cmp	r3, #0
 800b758:	dd59      	ble.n	800b80e <_dtoa_r+0x2f6>
 800b75a:	9302      	str	r3, [sp, #8]
 800b75c:	4699      	mov	r9, r3
 800b75e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b760:	2200      	movs	r2, #0
 800b762:	6072      	str	r2, [r6, #4]
 800b764:	2204      	movs	r2, #4
 800b766:	f102 0014 	add.w	r0, r2, #20
 800b76a:	4298      	cmp	r0, r3
 800b76c:	6871      	ldr	r1, [r6, #4]
 800b76e:	d953      	bls.n	800b818 <_dtoa_r+0x300>
 800b770:	4620      	mov	r0, r4
 800b772:	f7ff f97f 	bl	800aa74 <_Balloc>
 800b776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b778:	6030      	str	r0, [r6, #0]
 800b77a:	f1b9 0f0e 	cmp.w	r9, #14
 800b77e:	f8d3 b000 	ldr.w	fp, [r3]
 800b782:	f200 80e6 	bhi.w	800b952 <_dtoa_r+0x43a>
 800b786:	2d00      	cmp	r5, #0
 800b788:	f000 80e3 	beq.w	800b952 <_dtoa_r+0x43a>
 800b78c:	ed9d 7b00 	vldr	d7, [sp]
 800b790:	f1ba 0f00 	cmp.w	sl, #0
 800b794:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b798:	dd74      	ble.n	800b884 <_dtoa_r+0x36c>
 800b79a:	4a2a      	ldr	r2, [pc, #168]	; (800b844 <_dtoa_r+0x32c>)
 800b79c:	f00a 030f 	and.w	r3, sl, #15
 800b7a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b7a4:	ed93 7b00 	vldr	d7, [r3]
 800b7a8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b7ac:	06f0      	lsls	r0, r6, #27
 800b7ae:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b7b2:	d565      	bpl.n	800b880 <_dtoa_r+0x368>
 800b7b4:	4b24      	ldr	r3, [pc, #144]	; (800b848 <_dtoa_r+0x330>)
 800b7b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b7ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b7be:	f7f4 fff5 	bl	80007ac <__aeabi_ddiv>
 800b7c2:	e9cd 0100 	strd	r0, r1, [sp]
 800b7c6:	f006 060f 	and.w	r6, r6, #15
 800b7ca:	2503      	movs	r5, #3
 800b7cc:	4f1e      	ldr	r7, [pc, #120]	; (800b848 <_dtoa_r+0x330>)
 800b7ce:	e04c      	b.n	800b86a <_dtoa_r+0x352>
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	930a      	str	r3, [sp, #40]	; 0x28
 800b7d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7d6:	4453      	add	r3, sl
 800b7d8:	f103 0901 	add.w	r9, r3, #1
 800b7dc:	9302      	str	r3, [sp, #8]
 800b7de:	464b      	mov	r3, r9
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	bfb8      	it	lt
 800b7e4:	2301      	movlt	r3, #1
 800b7e6:	e7ba      	b.n	800b75e <_dtoa_r+0x246>
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	e7b2      	b.n	800b752 <_dtoa_r+0x23a>
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	e7f0      	b.n	800b7d2 <_dtoa_r+0x2ba>
 800b7f0:	2501      	movs	r5, #1
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	9306      	str	r3, [sp, #24]
 800b7f6:	950a      	str	r5, [sp, #40]	; 0x28
 800b7f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7fc:	9302      	str	r3, [sp, #8]
 800b7fe:	4699      	mov	r9, r3
 800b800:	2200      	movs	r2, #0
 800b802:	2312      	movs	r3, #18
 800b804:	920b      	str	r2, [sp, #44]	; 0x2c
 800b806:	e7aa      	b.n	800b75e <_dtoa_r+0x246>
 800b808:	2301      	movs	r3, #1
 800b80a:	930a      	str	r3, [sp, #40]	; 0x28
 800b80c:	e7f4      	b.n	800b7f8 <_dtoa_r+0x2e0>
 800b80e:	2301      	movs	r3, #1
 800b810:	9302      	str	r3, [sp, #8]
 800b812:	4699      	mov	r9, r3
 800b814:	461a      	mov	r2, r3
 800b816:	e7f5      	b.n	800b804 <_dtoa_r+0x2ec>
 800b818:	3101      	adds	r1, #1
 800b81a:	6071      	str	r1, [r6, #4]
 800b81c:	0052      	lsls	r2, r2, #1
 800b81e:	e7a2      	b.n	800b766 <_dtoa_r+0x24e>
 800b820:	636f4361 	.word	0x636f4361
 800b824:	3fd287a7 	.word	0x3fd287a7
 800b828:	8b60c8b3 	.word	0x8b60c8b3
 800b82c:	3fc68a28 	.word	0x3fc68a28
 800b830:	509f79fb 	.word	0x509f79fb
 800b834:	3fd34413 	.word	0x3fd34413
 800b838:	7ff00000 	.word	0x7ff00000
 800b83c:	0800ec3b 	.word	0x0800ec3b
 800b840:	3ff80000 	.word	0x3ff80000
 800b844:	0800ea58 	.word	0x0800ea58
 800b848:	0800ea30 	.word	0x0800ea30
 800b84c:	0800ec36 	.word	0x0800ec36
 800b850:	07f1      	lsls	r1, r6, #31
 800b852:	d508      	bpl.n	800b866 <_dtoa_r+0x34e>
 800b854:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b85c:	f7f4 fe7c 	bl	8000558 <__aeabi_dmul>
 800b860:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b864:	3501      	adds	r5, #1
 800b866:	1076      	asrs	r6, r6, #1
 800b868:	3708      	adds	r7, #8
 800b86a:	2e00      	cmp	r6, #0
 800b86c:	d1f0      	bne.n	800b850 <_dtoa_r+0x338>
 800b86e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b872:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b876:	f7f4 ff99 	bl	80007ac <__aeabi_ddiv>
 800b87a:	e9cd 0100 	strd	r0, r1, [sp]
 800b87e:	e01a      	b.n	800b8b6 <_dtoa_r+0x39e>
 800b880:	2502      	movs	r5, #2
 800b882:	e7a3      	b.n	800b7cc <_dtoa_r+0x2b4>
 800b884:	f000 80a0 	beq.w	800b9c8 <_dtoa_r+0x4b0>
 800b888:	f1ca 0600 	rsb	r6, sl, #0
 800b88c:	4b9f      	ldr	r3, [pc, #636]	; (800bb0c <_dtoa_r+0x5f4>)
 800b88e:	4fa0      	ldr	r7, [pc, #640]	; (800bb10 <_dtoa_r+0x5f8>)
 800b890:	f006 020f 	and.w	r2, r6, #15
 800b894:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b8a0:	f7f4 fe5a 	bl	8000558 <__aeabi_dmul>
 800b8a4:	e9cd 0100 	strd	r0, r1, [sp]
 800b8a8:	1136      	asrs	r6, r6, #4
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	2502      	movs	r5, #2
 800b8ae:	2e00      	cmp	r6, #0
 800b8b0:	d17f      	bne.n	800b9b2 <_dtoa_r+0x49a>
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d1e1      	bne.n	800b87a <_dtoa_r+0x362>
 800b8b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	f000 8087 	beq.w	800b9cc <_dtoa_r+0x4b4>
 800b8be:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	4b93      	ldr	r3, [pc, #588]	; (800bb14 <_dtoa_r+0x5fc>)
 800b8c6:	4630      	mov	r0, r6
 800b8c8:	4639      	mov	r1, r7
 800b8ca:	f7f5 f8b7 	bl	8000a3c <__aeabi_dcmplt>
 800b8ce:	2800      	cmp	r0, #0
 800b8d0:	d07c      	beq.n	800b9cc <_dtoa_r+0x4b4>
 800b8d2:	f1b9 0f00 	cmp.w	r9, #0
 800b8d6:	d079      	beq.n	800b9cc <_dtoa_r+0x4b4>
 800b8d8:	9b02      	ldr	r3, [sp, #8]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	dd35      	ble.n	800b94a <_dtoa_r+0x432>
 800b8de:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b8e2:	9308      	str	r3, [sp, #32]
 800b8e4:	4639      	mov	r1, r7
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	4b8b      	ldr	r3, [pc, #556]	; (800bb18 <_dtoa_r+0x600>)
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	f7f4 fe34 	bl	8000558 <__aeabi_dmul>
 800b8f0:	e9cd 0100 	strd	r0, r1, [sp]
 800b8f4:	9f02      	ldr	r7, [sp, #8]
 800b8f6:	3501      	adds	r5, #1
 800b8f8:	4628      	mov	r0, r5
 800b8fa:	f7f4 fdc3 	bl	8000484 <__aeabi_i2d>
 800b8fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b902:	f7f4 fe29 	bl	8000558 <__aeabi_dmul>
 800b906:	2200      	movs	r2, #0
 800b908:	4b84      	ldr	r3, [pc, #528]	; (800bb1c <_dtoa_r+0x604>)
 800b90a:	f7f4 fc6f 	bl	80001ec <__adddf3>
 800b90e:	4605      	mov	r5, r0
 800b910:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b914:	2f00      	cmp	r7, #0
 800b916:	d15d      	bne.n	800b9d4 <_dtoa_r+0x4bc>
 800b918:	2200      	movs	r2, #0
 800b91a:	4b81      	ldr	r3, [pc, #516]	; (800bb20 <_dtoa_r+0x608>)
 800b91c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b920:	f7f4 fc62 	bl	80001e8 <__aeabi_dsub>
 800b924:	462a      	mov	r2, r5
 800b926:	4633      	mov	r3, r6
 800b928:	e9cd 0100 	strd	r0, r1, [sp]
 800b92c:	f7f5 f8a4 	bl	8000a78 <__aeabi_dcmpgt>
 800b930:	2800      	cmp	r0, #0
 800b932:	f040 8288 	bne.w	800be46 <_dtoa_r+0x92e>
 800b936:	462a      	mov	r2, r5
 800b938:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b93c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b940:	f7f5 f87c 	bl	8000a3c <__aeabi_dcmplt>
 800b944:	2800      	cmp	r0, #0
 800b946:	f040 827c 	bne.w	800be42 <_dtoa_r+0x92a>
 800b94a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b94e:	e9cd 2300 	strd	r2, r3, [sp]
 800b952:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b954:	2b00      	cmp	r3, #0
 800b956:	f2c0 8150 	blt.w	800bbfa <_dtoa_r+0x6e2>
 800b95a:	f1ba 0f0e 	cmp.w	sl, #14
 800b95e:	f300 814c 	bgt.w	800bbfa <_dtoa_r+0x6e2>
 800b962:	4b6a      	ldr	r3, [pc, #424]	; (800bb0c <_dtoa_r+0x5f4>)
 800b964:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b968:	ed93 7b00 	vldr	d7, [r3]
 800b96c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b96e:	2b00      	cmp	r3, #0
 800b970:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b974:	f280 80d8 	bge.w	800bb28 <_dtoa_r+0x610>
 800b978:	f1b9 0f00 	cmp.w	r9, #0
 800b97c:	f300 80d4 	bgt.w	800bb28 <_dtoa_r+0x610>
 800b980:	f040 825e 	bne.w	800be40 <_dtoa_r+0x928>
 800b984:	2200      	movs	r2, #0
 800b986:	4b66      	ldr	r3, [pc, #408]	; (800bb20 <_dtoa_r+0x608>)
 800b988:	ec51 0b17 	vmov	r0, r1, d7
 800b98c:	f7f4 fde4 	bl	8000558 <__aeabi_dmul>
 800b990:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b994:	f7f5 f866 	bl	8000a64 <__aeabi_dcmpge>
 800b998:	464f      	mov	r7, r9
 800b99a:	464e      	mov	r6, r9
 800b99c:	2800      	cmp	r0, #0
 800b99e:	f040 8234 	bne.w	800be0a <_dtoa_r+0x8f2>
 800b9a2:	2331      	movs	r3, #49	; 0x31
 800b9a4:	f10b 0501 	add.w	r5, fp, #1
 800b9a8:	f88b 3000 	strb.w	r3, [fp]
 800b9ac:	f10a 0a01 	add.w	sl, sl, #1
 800b9b0:	e22f      	b.n	800be12 <_dtoa_r+0x8fa>
 800b9b2:	07f2      	lsls	r2, r6, #31
 800b9b4:	d505      	bpl.n	800b9c2 <_dtoa_r+0x4aa>
 800b9b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9ba:	f7f4 fdcd 	bl	8000558 <__aeabi_dmul>
 800b9be:	3501      	adds	r5, #1
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	1076      	asrs	r6, r6, #1
 800b9c4:	3708      	adds	r7, #8
 800b9c6:	e772      	b.n	800b8ae <_dtoa_r+0x396>
 800b9c8:	2502      	movs	r5, #2
 800b9ca:	e774      	b.n	800b8b6 <_dtoa_r+0x39e>
 800b9cc:	f8cd a020 	str.w	sl, [sp, #32]
 800b9d0:	464f      	mov	r7, r9
 800b9d2:	e791      	b.n	800b8f8 <_dtoa_r+0x3e0>
 800b9d4:	4b4d      	ldr	r3, [pc, #308]	; (800bb0c <_dtoa_r+0x5f4>)
 800b9d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b9da:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b9de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d047      	beq.n	800ba74 <_dtoa_r+0x55c>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	2000      	movs	r0, #0
 800b9ea:	494e      	ldr	r1, [pc, #312]	; (800bb24 <_dtoa_r+0x60c>)
 800b9ec:	f7f4 fede 	bl	80007ac <__aeabi_ddiv>
 800b9f0:	462a      	mov	r2, r5
 800b9f2:	4633      	mov	r3, r6
 800b9f4:	f7f4 fbf8 	bl	80001e8 <__aeabi_dsub>
 800b9f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b9fc:	465d      	mov	r5, fp
 800b9fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba02:	f7f5 f859 	bl	8000ab8 <__aeabi_d2iz>
 800ba06:	4606      	mov	r6, r0
 800ba08:	f7f4 fd3c 	bl	8000484 <__aeabi_i2d>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	460b      	mov	r3, r1
 800ba10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba14:	f7f4 fbe8 	bl	80001e8 <__aeabi_dsub>
 800ba18:	3630      	adds	r6, #48	; 0x30
 800ba1a:	f805 6b01 	strb.w	r6, [r5], #1
 800ba1e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ba22:	e9cd 0100 	strd	r0, r1, [sp]
 800ba26:	f7f5 f809 	bl	8000a3c <__aeabi_dcmplt>
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	d163      	bne.n	800baf6 <_dtoa_r+0x5de>
 800ba2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba32:	2000      	movs	r0, #0
 800ba34:	4937      	ldr	r1, [pc, #220]	; (800bb14 <_dtoa_r+0x5fc>)
 800ba36:	f7f4 fbd7 	bl	80001e8 <__aeabi_dsub>
 800ba3a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ba3e:	f7f4 fffd 	bl	8000a3c <__aeabi_dcmplt>
 800ba42:	2800      	cmp	r0, #0
 800ba44:	f040 80b7 	bne.w	800bbb6 <_dtoa_r+0x69e>
 800ba48:	eba5 030b 	sub.w	r3, r5, fp
 800ba4c:	429f      	cmp	r7, r3
 800ba4e:	f77f af7c 	ble.w	800b94a <_dtoa_r+0x432>
 800ba52:	2200      	movs	r2, #0
 800ba54:	4b30      	ldr	r3, [pc, #192]	; (800bb18 <_dtoa_r+0x600>)
 800ba56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ba5a:	f7f4 fd7d 	bl	8000558 <__aeabi_dmul>
 800ba5e:	2200      	movs	r2, #0
 800ba60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ba64:	4b2c      	ldr	r3, [pc, #176]	; (800bb18 <_dtoa_r+0x600>)
 800ba66:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba6a:	f7f4 fd75 	bl	8000558 <__aeabi_dmul>
 800ba6e:	e9cd 0100 	strd	r0, r1, [sp]
 800ba72:	e7c4      	b.n	800b9fe <_dtoa_r+0x4e6>
 800ba74:	462a      	mov	r2, r5
 800ba76:	4633      	mov	r3, r6
 800ba78:	f7f4 fd6e 	bl	8000558 <__aeabi_dmul>
 800ba7c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ba80:	eb0b 0507 	add.w	r5, fp, r7
 800ba84:	465e      	mov	r6, fp
 800ba86:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba8a:	f7f5 f815 	bl	8000ab8 <__aeabi_d2iz>
 800ba8e:	4607      	mov	r7, r0
 800ba90:	f7f4 fcf8 	bl	8000484 <__aeabi_i2d>
 800ba94:	3730      	adds	r7, #48	; 0x30
 800ba96:	4602      	mov	r2, r0
 800ba98:	460b      	mov	r3, r1
 800ba9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba9e:	f7f4 fba3 	bl	80001e8 <__aeabi_dsub>
 800baa2:	f806 7b01 	strb.w	r7, [r6], #1
 800baa6:	42ae      	cmp	r6, r5
 800baa8:	e9cd 0100 	strd	r0, r1, [sp]
 800baac:	f04f 0200 	mov.w	r2, #0
 800bab0:	d126      	bne.n	800bb00 <_dtoa_r+0x5e8>
 800bab2:	4b1c      	ldr	r3, [pc, #112]	; (800bb24 <_dtoa_r+0x60c>)
 800bab4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bab8:	f7f4 fb98 	bl	80001ec <__adddf3>
 800babc:	4602      	mov	r2, r0
 800babe:	460b      	mov	r3, r1
 800bac0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bac4:	f7f4 ffd8 	bl	8000a78 <__aeabi_dcmpgt>
 800bac8:	2800      	cmp	r0, #0
 800baca:	d174      	bne.n	800bbb6 <_dtoa_r+0x69e>
 800bacc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bad0:	2000      	movs	r0, #0
 800bad2:	4914      	ldr	r1, [pc, #80]	; (800bb24 <_dtoa_r+0x60c>)
 800bad4:	f7f4 fb88 	bl	80001e8 <__aeabi_dsub>
 800bad8:	4602      	mov	r2, r0
 800bada:	460b      	mov	r3, r1
 800badc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bae0:	f7f4 ffac 	bl	8000a3c <__aeabi_dcmplt>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	f43f af30 	beq.w	800b94a <_dtoa_r+0x432>
 800baea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800baee:	2b30      	cmp	r3, #48	; 0x30
 800baf0:	f105 32ff 	add.w	r2, r5, #4294967295
 800baf4:	d002      	beq.n	800bafc <_dtoa_r+0x5e4>
 800baf6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bafa:	e04a      	b.n	800bb92 <_dtoa_r+0x67a>
 800bafc:	4615      	mov	r5, r2
 800bafe:	e7f4      	b.n	800baea <_dtoa_r+0x5d2>
 800bb00:	4b05      	ldr	r3, [pc, #20]	; (800bb18 <_dtoa_r+0x600>)
 800bb02:	f7f4 fd29 	bl	8000558 <__aeabi_dmul>
 800bb06:	e9cd 0100 	strd	r0, r1, [sp]
 800bb0a:	e7bc      	b.n	800ba86 <_dtoa_r+0x56e>
 800bb0c:	0800ea58 	.word	0x0800ea58
 800bb10:	0800ea30 	.word	0x0800ea30
 800bb14:	3ff00000 	.word	0x3ff00000
 800bb18:	40240000 	.word	0x40240000
 800bb1c:	401c0000 	.word	0x401c0000
 800bb20:	40140000 	.word	0x40140000
 800bb24:	3fe00000 	.word	0x3fe00000
 800bb28:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bb2c:	465d      	mov	r5, fp
 800bb2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb32:	4630      	mov	r0, r6
 800bb34:	4639      	mov	r1, r7
 800bb36:	f7f4 fe39 	bl	80007ac <__aeabi_ddiv>
 800bb3a:	f7f4 ffbd 	bl	8000ab8 <__aeabi_d2iz>
 800bb3e:	4680      	mov	r8, r0
 800bb40:	f7f4 fca0 	bl	8000484 <__aeabi_i2d>
 800bb44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb48:	f7f4 fd06 	bl	8000558 <__aeabi_dmul>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	460b      	mov	r3, r1
 800bb50:	4630      	mov	r0, r6
 800bb52:	4639      	mov	r1, r7
 800bb54:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800bb58:	f7f4 fb46 	bl	80001e8 <__aeabi_dsub>
 800bb5c:	f805 6b01 	strb.w	r6, [r5], #1
 800bb60:	eba5 060b 	sub.w	r6, r5, fp
 800bb64:	45b1      	cmp	r9, r6
 800bb66:	4602      	mov	r2, r0
 800bb68:	460b      	mov	r3, r1
 800bb6a:	d139      	bne.n	800bbe0 <_dtoa_r+0x6c8>
 800bb6c:	f7f4 fb3e 	bl	80001ec <__adddf3>
 800bb70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb74:	4606      	mov	r6, r0
 800bb76:	460f      	mov	r7, r1
 800bb78:	f7f4 ff7e 	bl	8000a78 <__aeabi_dcmpgt>
 800bb7c:	b9c8      	cbnz	r0, 800bbb2 <_dtoa_r+0x69a>
 800bb7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb82:	4630      	mov	r0, r6
 800bb84:	4639      	mov	r1, r7
 800bb86:	f7f4 ff4f 	bl	8000a28 <__aeabi_dcmpeq>
 800bb8a:	b110      	cbz	r0, 800bb92 <_dtoa_r+0x67a>
 800bb8c:	f018 0f01 	tst.w	r8, #1
 800bb90:	d10f      	bne.n	800bbb2 <_dtoa_r+0x69a>
 800bb92:	9904      	ldr	r1, [sp, #16]
 800bb94:	4620      	mov	r0, r4
 800bb96:	f7fe ffa1 	bl	800aadc <_Bfree>
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bb9e:	702b      	strb	r3, [r5, #0]
 800bba0:	f10a 0301 	add.w	r3, sl, #1
 800bba4:	6013      	str	r3, [r2, #0]
 800bba6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	f000 8241 	beq.w	800c030 <_dtoa_r+0xb18>
 800bbae:	601d      	str	r5, [r3, #0]
 800bbb0:	e23e      	b.n	800c030 <_dtoa_r+0xb18>
 800bbb2:	f8cd a020 	str.w	sl, [sp, #32]
 800bbb6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bbba:	2a39      	cmp	r2, #57	; 0x39
 800bbbc:	f105 33ff 	add.w	r3, r5, #4294967295
 800bbc0:	d108      	bne.n	800bbd4 <_dtoa_r+0x6bc>
 800bbc2:	459b      	cmp	fp, r3
 800bbc4:	d10a      	bne.n	800bbdc <_dtoa_r+0x6c4>
 800bbc6:	9b08      	ldr	r3, [sp, #32]
 800bbc8:	3301      	adds	r3, #1
 800bbca:	9308      	str	r3, [sp, #32]
 800bbcc:	2330      	movs	r3, #48	; 0x30
 800bbce:	f88b 3000 	strb.w	r3, [fp]
 800bbd2:	465b      	mov	r3, fp
 800bbd4:	781a      	ldrb	r2, [r3, #0]
 800bbd6:	3201      	adds	r2, #1
 800bbd8:	701a      	strb	r2, [r3, #0]
 800bbda:	e78c      	b.n	800baf6 <_dtoa_r+0x5de>
 800bbdc:	461d      	mov	r5, r3
 800bbde:	e7ea      	b.n	800bbb6 <_dtoa_r+0x69e>
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	4b9b      	ldr	r3, [pc, #620]	; (800be50 <_dtoa_r+0x938>)
 800bbe4:	f7f4 fcb8 	bl	8000558 <__aeabi_dmul>
 800bbe8:	2200      	movs	r2, #0
 800bbea:	2300      	movs	r3, #0
 800bbec:	4606      	mov	r6, r0
 800bbee:	460f      	mov	r7, r1
 800bbf0:	f7f4 ff1a 	bl	8000a28 <__aeabi_dcmpeq>
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	d09a      	beq.n	800bb2e <_dtoa_r+0x616>
 800bbf8:	e7cb      	b.n	800bb92 <_dtoa_r+0x67a>
 800bbfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbfc:	2a00      	cmp	r2, #0
 800bbfe:	f000 808b 	beq.w	800bd18 <_dtoa_r+0x800>
 800bc02:	9a06      	ldr	r2, [sp, #24]
 800bc04:	2a01      	cmp	r2, #1
 800bc06:	dc6e      	bgt.n	800bce6 <_dtoa_r+0x7ce>
 800bc08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bc0a:	2a00      	cmp	r2, #0
 800bc0c:	d067      	beq.n	800bcde <_dtoa_r+0x7c6>
 800bc0e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bc12:	9f07      	ldr	r7, [sp, #28]
 800bc14:	9d05      	ldr	r5, [sp, #20]
 800bc16:	9a05      	ldr	r2, [sp, #20]
 800bc18:	2101      	movs	r1, #1
 800bc1a:	441a      	add	r2, r3
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	9205      	str	r2, [sp, #20]
 800bc20:	4498      	add	r8, r3
 800bc22:	f7ff f839 	bl	800ac98 <__i2b>
 800bc26:	4606      	mov	r6, r0
 800bc28:	2d00      	cmp	r5, #0
 800bc2a:	dd0c      	ble.n	800bc46 <_dtoa_r+0x72e>
 800bc2c:	f1b8 0f00 	cmp.w	r8, #0
 800bc30:	dd09      	ble.n	800bc46 <_dtoa_r+0x72e>
 800bc32:	4545      	cmp	r5, r8
 800bc34:	9a05      	ldr	r2, [sp, #20]
 800bc36:	462b      	mov	r3, r5
 800bc38:	bfa8      	it	ge
 800bc3a:	4643      	movge	r3, r8
 800bc3c:	1ad2      	subs	r2, r2, r3
 800bc3e:	9205      	str	r2, [sp, #20]
 800bc40:	1aed      	subs	r5, r5, r3
 800bc42:	eba8 0803 	sub.w	r8, r8, r3
 800bc46:	9b07      	ldr	r3, [sp, #28]
 800bc48:	b1eb      	cbz	r3, 800bc86 <_dtoa_r+0x76e>
 800bc4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d067      	beq.n	800bd20 <_dtoa_r+0x808>
 800bc50:	b18f      	cbz	r7, 800bc76 <_dtoa_r+0x75e>
 800bc52:	4631      	mov	r1, r6
 800bc54:	463a      	mov	r2, r7
 800bc56:	4620      	mov	r0, r4
 800bc58:	f7ff f8be 	bl	800add8 <__pow5mult>
 800bc5c:	9a04      	ldr	r2, [sp, #16]
 800bc5e:	4601      	mov	r1, r0
 800bc60:	4606      	mov	r6, r0
 800bc62:	4620      	mov	r0, r4
 800bc64:	f7ff f821 	bl	800acaa <__multiply>
 800bc68:	9904      	ldr	r1, [sp, #16]
 800bc6a:	9008      	str	r0, [sp, #32]
 800bc6c:	4620      	mov	r0, r4
 800bc6e:	f7fe ff35 	bl	800aadc <_Bfree>
 800bc72:	9b08      	ldr	r3, [sp, #32]
 800bc74:	9304      	str	r3, [sp, #16]
 800bc76:	9b07      	ldr	r3, [sp, #28]
 800bc78:	1bda      	subs	r2, r3, r7
 800bc7a:	d004      	beq.n	800bc86 <_dtoa_r+0x76e>
 800bc7c:	9904      	ldr	r1, [sp, #16]
 800bc7e:	4620      	mov	r0, r4
 800bc80:	f7ff f8aa 	bl	800add8 <__pow5mult>
 800bc84:	9004      	str	r0, [sp, #16]
 800bc86:	2101      	movs	r1, #1
 800bc88:	4620      	mov	r0, r4
 800bc8a:	f7ff f805 	bl	800ac98 <__i2b>
 800bc8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc90:	4607      	mov	r7, r0
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	f000 81d0 	beq.w	800c038 <_dtoa_r+0xb20>
 800bc98:	461a      	mov	r2, r3
 800bc9a:	4601      	mov	r1, r0
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	f7ff f89b 	bl	800add8 <__pow5mult>
 800bca2:	9b06      	ldr	r3, [sp, #24]
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	4607      	mov	r7, r0
 800bca8:	dc40      	bgt.n	800bd2c <_dtoa_r+0x814>
 800bcaa:	9b00      	ldr	r3, [sp, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d139      	bne.n	800bd24 <_dtoa_r+0x80c>
 800bcb0:	9b01      	ldr	r3, [sp, #4]
 800bcb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d136      	bne.n	800bd28 <_dtoa_r+0x810>
 800bcba:	9b01      	ldr	r3, [sp, #4]
 800bcbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bcc0:	0d1b      	lsrs	r3, r3, #20
 800bcc2:	051b      	lsls	r3, r3, #20
 800bcc4:	b12b      	cbz	r3, 800bcd2 <_dtoa_r+0x7ba>
 800bcc6:	9b05      	ldr	r3, [sp, #20]
 800bcc8:	3301      	adds	r3, #1
 800bcca:	9305      	str	r3, [sp, #20]
 800bccc:	f108 0801 	add.w	r8, r8, #1
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	9307      	str	r3, [sp, #28]
 800bcd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d12a      	bne.n	800bd30 <_dtoa_r+0x818>
 800bcda:	2001      	movs	r0, #1
 800bcdc:	e030      	b.n	800bd40 <_dtoa_r+0x828>
 800bcde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bce0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bce4:	e795      	b.n	800bc12 <_dtoa_r+0x6fa>
 800bce6:	9b07      	ldr	r3, [sp, #28]
 800bce8:	f109 37ff 	add.w	r7, r9, #4294967295
 800bcec:	42bb      	cmp	r3, r7
 800bcee:	bfbf      	itttt	lt
 800bcf0:	9b07      	ldrlt	r3, [sp, #28]
 800bcf2:	9707      	strlt	r7, [sp, #28]
 800bcf4:	1afa      	sublt	r2, r7, r3
 800bcf6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bcf8:	bfbb      	ittet	lt
 800bcfa:	189b      	addlt	r3, r3, r2
 800bcfc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bcfe:	1bdf      	subge	r7, r3, r7
 800bd00:	2700      	movlt	r7, #0
 800bd02:	f1b9 0f00 	cmp.w	r9, #0
 800bd06:	bfb5      	itete	lt
 800bd08:	9b05      	ldrlt	r3, [sp, #20]
 800bd0a:	9d05      	ldrge	r5, [sp, #20]
 800bd0c:	eba3 0509 	sublt.w	r5, r3, r9
 800bd10:	464b      	movge	r3, r9
 800bd12:	bfb8      	it	lt
 800bd14:	2300      	movlt	r3, #0
 800bd16:	e77e      	b.n	800bc16 <_dtoa_r+0x6fe>
 800bd18:	9f07      	ldr	r7, [sp, #28]
 800bd1a:	9d05      	ldr	r5, [sp, #20]
 800bd1c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800bd1e:	e783      	b.n	800bc28 <_dtoa_r+0x710>
 800bd20:	9a07      	ldr	r2, [sp, #28]
 800bd22:	e7ab      	b.n	800bc7c <_dtoa_r+0x764>
 800bd24:	2300      	movs	r3, #0
 800bd26:	e7d4      	b.n	800bcd2 <_dtoa_r+0x7ba>
 800bd28:	9b00      	ldr	r3, [sp, #0]
 800bd2a:	e7d2      	b.n	800bcd2 <_dtoa_r+0x7ba>
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	9307      	str	r3, [sp, #28]
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800bd36:	6918      	ldr	r0, [r3, #16]
 800bd38:	f7fe ff60 	bl	800abfc <__hi0bits>
 800bd3c:	f1c0 0020 	rsb	r0, r0, #32
 800bd40:	4440      	add	r0, r8
 800bd42:	f010 001f 	ands.w	r0, r0, #31
 800bd46:	d047      	beq.n	800bdd8 <_dtoa_r+0x8c0>
 800bd48:	f1c0 0320 	rsb	r3, r0, #32
 800bd4c:	2b04      	cmp	r3, #4
 800bd4e:	dd3b      	ble.n	800bdc8 <_dtoa_r+0x8b0>
 800bd50:	9b05      	ldr	r3, [sp, #20]
 800bd52:	f1c0 001c 	rsb	r0, r0, #28
 800bd56:	4403      	add	r3, r0
 800bd58:	9305      	str	r3, [sp, #20]
 800bd5a:	4405      	add	r5, r0
 800bd5c:	4480      	add	r8, r0
 800bd5e:	9b05      	ldr	r3, [sp, #20]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	dd05      	ble.n	800bd70 <_dtoa_r+0x858>
 800bd64:	461a      	mov	r2, r3
 800bd66:	9904      	ldr	r1, [sp, #16]
 800bd68:	4620      	mov	r0, r4
 800bd6a:	f7ff f883 	bl	800ae74 <__lshift>
 800bd6e:	9004      	str	r0, [sp, #16]
 800bd70:	f1b8 0f00 	cmp.w	r8, #0
 800bd74:	dd05      	ble.n	800bd82 <_dtoa_r+0x86a>
 800bd76:	4639      	mov	r1, r7
 800bd78:	4642      	mov	r2, r8
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f7ff f87a 	bl	800ae74 <__lshift>
 800bd80:	4607      	mov	r7, r0
 800bd82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd84:	b353      	cbz	r3, 800bddc <_dtoa_r+0x8c4>
 800bd86:	4639      	mov	r1, r7
 800bd88:	9804      	ldr	r0, [sp, #16]
 800bd8a:	f7ff f8c7 	bl	800af1c <__mcmp>
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	da24      	bge.n	800bddc <_dtoa_r+0x8c4>
 800bd92:	2300      	movs	r3, #0
 800bd94:	220a      	movs	r2, #10
 800bd96:	9904      	ldr	r1, [sp, #16]
 800bd98:	4620      	mov	r0, r4
 800bd9a:	f7fe feb6 	bl	800ab0a <__multadd>
 800bd9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bda0:	9004      	str	r0, [sp, #16]
 800bda2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	f000 814d 	beq.w	800c046 <_dtoa_r+0xb2e>
 800bdac:	2300      	movs	r3, #0
 800bdae:	4631      	mov	r1, r6
 800bdb0:	220a      	movs	r2, #10
 800bdb2:	4620      	mov	r0, r4
 800bdb4:	f7fe fea9 	bl	800ab0a <__multadd>
 800bdb8:	9b02      	ldr	r3, [sp, #8]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	4606      	mov	r6, r0
 800bdbe:	dc4f      	bgt.n	800be60 <_dtoa_r+0x948>
 800bdc0:	9b06      	ldr	r3, [sp, #24]
 800bdc2:	2b02      	cmp	r3, #2
 800bdc4:	dd4c      	ble.n	800be60 <_dtoa_r+0x948>
 800bdc6:	e011      	b.n	800bdec <_dtoa_r+0x8d4>
 800bdc8:	d0c9      	beq.n	800bd5e <_dtoa_r+0x846>
 800bdca:	9a05      	ldr	r2, [sp, #20]
 800bdcc:	331c      	adds	r3, #28
 800bdce:	441a      	add	r2, r3
 800bdd0:	9205      	str	r2, [sp, #20]
 800bdd2:	441d      	add	r5, r3
 800bdd4:	4498      	add	r8, r3
 800bdd6:	e7c2      	b.n	800bd5e <_dtoa_r+0x846>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	e7f6      	b.n	800bdca <_dtoa_r+0x8b2>
 800bddc:	f1b9 0f00 	cmp.w	r9, #0
 800bde0:	dc38      	bgt.n	800be54 <_dtoa_r+0x93c>
 800bde2:	9b06      	ldr	r3, [sp, #24]
 800bde4:	2b02      	cmp	r3, #2
 800bde6:	dd35      	ble.n	800be54 <_dtoa_r+0x93c>
 800bde8:	f8cd 9008 	str.w	r9, [sp, #8]
 800bdec:	9b02      	ldr	r3, [sp, #8]
 800bdee:	b963      	cbnz	r3, 800be0a <_dtoa_r+0x8f2>
 800bdf0:	4639      	mov	r1, r7
 800bdf2:	2205      	movs	r2, #5
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	f7fe fe88 	bl	800ab0a <__multadd>
 800bdfa:	4601      	mov	r1, r0
 800bdfc:	4607      	mov	r7, r0
 800bdfe:	9804      	ldr	r0, [sp, #16]
 800be00:	f7ff f88c 	bl	800af1c <__mcmp>
 800be04:	2800      	cmp	r0, #0
 800be06:	f73f adcc 	bgt.w	800b9a2 <_dtoa_r+0x48a>
 800be0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be0c:	465d      	mov	r5, fp
 800be0e:	ea6f 0a03 	mvn.w	sl, r3
 800be12:	f04f 0900 	mov.w	r9, #0
 800be16:	4639      	mov	r1, r7
 800be18:	4620      	mov	r0, r4
 800be1a:	f7fe fe5f 	bl	800aadc <_Bfree>
 800be1e:	2e00      	cmp	r6, #0
 800be20:	f43f aeb7 	beq.w	800bb92 <_dtoa_r+0x67a>
 800be24:	f1b9 0f00 	cmp.w	r9, #0
 800be28:	d005      	beq.n	800be36 <_dtoa_r+0x91e>
 800be2a:	45b1      	cmp	r9, r6
 800be2c:	d003      	beq.n	800be36 <_dtoa_r+0x91e>
 800be2e:	4649      	mov	r1, r9
 800be30:	4620      	mov	r0, r4
 800be32:	f7fe fe53 	bl	800aadc <_Bfree>
 800be36:	4631      	mov	r1, r6
 800be38:	4620      	mov	r0, r4
 800be3a:	f7fe fe4f 	bl	800aadc <_Bfree>
 800be3e:	e6a8      	b.n	800bb92 <_dtoa_r+0x67a>
 800be40:	2700      	movs	r7, #0
 800be42:	463e      	mov	r6, r7
 800be44:	e7e1      	b.n	800be0a <_dtoa_r+0x8f2>
 800be46:	f8dd a020 	ldr.w	sl, [sp, #32]
 800be4a:	463e      	mov	r6, r7
 800be4c:	e5a9      	b.n	800b9a2 <_dtoa_r+0x48a>
 800be4e:	bf00      	nop
 800be50:	40240000 	.word	0x40240000
 800be54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be56:	f8cd 9008 	str.w	r9, [sp, #8]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	f000 80fa 	beq.w	800c054 <_dtoa_r+0xb3c>
 800be60:	2d00      	cmp	r5, #0
 800be62:	dd05      	ble.n	800be70 <_dtoa_r+0x958>
 800be64:	4631      	mov	r1, r6
 800be66:	462a      	mov	r2, r5
 800be68:	4620      	mov	r0, r4
 800be6a:	f7ff f803 	bl	800ae74 <__lshift>
 800be6e:	4606      	mov	r6, r0
 800be70:	9b07      	ldr	r3, [sp, #28]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d04c      	beq.n	800bf10 <_dtoa_r+0x9f8>
 800be76:	6871      	ldr	r1, [r6, #4]
 800be78:	4620      	mov	r0, r4
 800be7a:	f7fe fdfb 	bl	800aa74 <_Balloc>
 800be7e:	6932      	ldr	r2, [r6, #16]
 800be80:	3202      	adds	r2, #2
 800be82:	4605      	mov	r5, r0
 800be84:	0092      	lsls	r2, r2, #2
 800be86:	f106 010c 	add.w	r1, r6, #12
 800be8a:	300c      	adds	r0, #12
 800be8c:	f7fe fde7 	bl	800aa5e <memcpy>
 800be90:	2201      	movs	r2, #1
 800be92:	4629      	mov	r1, r5
 800be94:	4620      	mov	r0, r4
 800be96:	f7fe ffed 	bl	800ae74 <__lshift>
 800be9a:	9b00      	ldr	r3, [sp, #0]
 800be9c:	f8cd b014 	str.w	fp, [sp, #20]
 800bea0:	f003 0301 	and.w	r3, r3, #1
 800bea4:	46b1      	mov	r9, r6
 800bea6:	9307      	str	r3, [sp, #28]
 800bea8:	4606      	mov	r6, r0
 800beaa:	4639      	mov	r1, r7
 800beac:	9804      	ldr	r0, [sp, #16]
 800beae:	f7ff faa4 	bl	800b3fa <quorem>
 800beb2:	4649      	mov	r1, r9
 800beb4:	4605      	mov	r5, r0
 800beb6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800beba:	9804      	ldr	r0, [sp, #16]
 800bebc:	f7ff f82e 	bl	800af1c <__mcmp>
 800bec0:	4632      	mov	r2, r6
 800bec2:	9000      	str	r0, [sp, #0]
 800bec4:	4639      	mov	r1, r7
 800bec6:	4620      	mov	r0, r4
 800bec8:	f7ff f842 	bl	800af50 <__mdiff>
 800becc:	68c3      	ldr	r3, [r0, #12]
 800bece:	4602      	mov	r2, r0
 800bed0:	bb03      	cbnz	r3, 800bf14 <_dtoa_r+0x9fc>
 800bed2:	4601      	mov	r1, r0
 800bed4:	9008      	str	r0, [sp, #32]
 800bed6:	9804      	ldr	r0, [sp, #16]
 800bed8:	f7ff f820 	bl	800af1c <__mcmp>
 800bedc:	9a08      	ldr	r2, [sp, #32]
 800bede:	4603      	mov	r3, r0
 800bee0:	4611      	mov	r1, r2
 800bee2:	4620      	mov	r0, r4
 800bee4:	9308      	str	r3, [sp, #32]
 800bee6:	f7fe fdf9 	bl	800aadc <_Bfree>
 800beea:	9b08      	ldr	r3, [sp, #32]
 800beec:	b9a3      	cbnz	r3, 800bf18 <_dtoa_r+0xa00>
 800beee:	9a06      	ldr	r2, [sp, #24]
 800bef0:	b992      	cbnz	r2, 800bf18 <_dtoa_r+0xa00>
 800bef2:	9a07      	ldr	r2, [sp, #28]
 800bef4:	b982      	cbnz	r2, 800bf18 <_dtoa_r+0xa00>
 800bef6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800befa:	d029      	beq.n	800bf50 <_dtoa_r+0xa38>
 800befc:	9b00      	ldr	r3, [sp, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	dd01      	ble.n	800bf06 <_dtoa_r+0x9ee>
 800bf02:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800bf06:	9b05      	ldr	r3, [sp, #20]
 800bf08:	1c5d      	adds	r5, r3, #1
 800bf0a:	f883 8000 	strb.w	r8, [r3]
 800bf0e:	e782      	b.n	800be16 <_dtoa_r+0x8fe>
 800bf10:	4630      	mov	r0, r6
 800bf12:	e7c2      	b.n	800be9a <_dtoa_r+0x982>
 800bf14:	2301      	movs	r3, #1
 800bf16:	e7e3      	b.n	800bee0 <_dtoa_r+0x9c8>
 800bf18:	9a00      	ldr	r2, [sp, #0]
 800bf1a:	2a00      	cmp	r2, #0
 800bf1c:	db04      	blt.n	800bf28 <_dtoa_r+0xa10>
 800bf1e:	d125      	bne.n	800bf6c <_dtoa_r+0xa54>
 800bf20:	9a06      	ldr	r2, [sp, #24]
 800bf22:	bb1a      	cbnz	r2, 800bf6c <_dtoa_r+0xa54>
 800bf24:	9a07      	ldr	r2, [sp, #28]
 800bf26:	bb0a      	cbnz	r2, 800bf6c <_dtoa_r+0xa54>
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	ddec      	ble.n	800bf06 <_dtoa_r+0x9ee>
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	9904      	ldr	r1, [sp, #16]
 800bf30:	4620      	mov	r0, r4
 800bf32:	f7fe ff9f 	bl	800ae74 <__lshift>
 800bf36:	4639      	mov	r1, r7
 800bf38:	9004      	str	r0, [sp, #16]
 800bf3a:	f7fe ffef 	bl	800af1c <__mcmp>
 800bf3e:	2800      	cmp	r0, #0
 800bf40:	dc03      	bgt.n	800bf4a <_dtoa_r+0xa32>
 800bf42:	d1e0      	bne.n	800bf06 <_dtoa_r+0x9ee>
 800bf44:	f018 0f01 	tst.w	r8, #1
 800bf48:	d0dd      	beq.n	800bf06 <_dtoa_r+0x9ee>
 800bf4a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bf4e:	d1d8      	bne.n	800bf02 <_dtoa_r+0x9ea>
 800bf50:	9b05      	ldr	r3, [sp, #20]
 800bf52:	9a05      	ldr	r2, [sp, #20]
 800bf54:	1c5d      	adds	r5, r3, #1
 800bf56:	2339      	movs	r3, #57	; 0x39
 800bf58:	7013      	strb	r3, [r2, #0]
 800bf5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf5e:	2b39      	cmp	r3, #57	; 0x39
 800bf60:	f105 32ff 	add.w	r2, r5, #4294967295
 800bf64:	d04f      	beq.n	800c006 <_dtoa_r+0xaee>
 800bf66:	3301      	adds	r3, #1
 800bf68:	7013      	strb	r3, [r2, #0]
 800bf6a:	e754      	b.n	800be16 <_dtoa_r+0x8fe>
 800bf6c:	9a05      	ldr	r2, [sp, #20]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	f102 0501 	add.w	r5, r2, #1
 800bf74:	dd06      	ble.n	800bf84 <_dtoa_r+0xa6c>
 800bf76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bf7a:	d0e9      	beq.n	800bf50 <_dtoa_r+0xa38>
 800bf7c:	f108 0801 	add.w	r8, r8, #1
 800bf80:	9b05      	ldr	r3, [sp, #20]
 800bf82:	e7c2      	b.n	800bf0a <_dtoa_r+0x9f2>
 800bf84:	9a02      	ldr	r2, [sp, #8]
 800bf86:	f805 8c01 	strb.w	r8, [r5, #-1]
 800bf8a:	eba5 030b 	sub.w	r3, r5, fp
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d021      	beq.n	800bfd6 <_dtoa_r+0xabe>
 800bf92:	2300      	movs	r3, #0
 800bf94:	220a      	movs	r2, #10
 800bf96:	9904      	ldr	r1, [sp, #16]
 800bf98:	4620      	mov	r0, r4
 800bf9a:	f7fe fdb6 	bl	800ab0a <__multadd>
 800bf9e:	45b1      	cmp	r9, r6
 800bfa0:	9004      	str	r0, [sp, #16]
 800bfa2:	f04f 0300 	mov.w	r3, #0
 800bfa6:	f04f 020a 	mov.w	r2, #10
 800bfaa:	4649      	mov	r1, r9
 800bfac:	4620      	mov	r0, r4
 800bfae:	d105      	bne.n	800bfbc <_dtoa_r+0xaa4>
 800bfb0:	f7fe fdab 	bl	800ab0a <__multadd>
 800bfb4:	4681      	mov	r9, r0
 800bfb6:	4606      	mov	r6, r0
 800bfb8:	9505      	str	r5, [sp, #20]
 800bfba:	e776      	b.n	800beaa <_dtoa_r+0x992>
 800bfbc:	f7fe fda5 	bl	800ab0a <__multadd>
 800bfc0:	4631      	mov	r1, r6
 800bfc2:	4681      	mov	r9, r0
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	220a      	movs	r2, #10
 800bfc8:	4620      	mov	r0, r4
 800bfca:	f7fe fd9e 	bl	800ab0a <__multadd>
 800bfce:	4606      	mov	r6, r0
 800bfd0:	e7f2      	b.n	800bfb8 <_dtoa_r+0xaa0>
 800bfd2:	f04f 0900 	mov.w	r9, #0
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	9904      	ldr	r1, [sp, #16]
 800bfda:	4620      	mov	r0, r4
 800bfdc:	f7fe ff4a 	bl	800ae74 <__lshift>
 800bfe0:	4639      	mov	r1, r7
 800bfe2:	9004      	str	r0, [sp, #16]
 800bfe4:	f7fe ff9a 	bl	800af1c <__mcmp>
 800bfe8:	2800      	cmp	r0, #0
 800bfea:	dcb6      	bgt.n	800bf5a <_dtoa_r+0xa42>
 800bfec:	d102      	bne.n	800bff4 <_dtoa_r+0xadc>
 800bfee:	f018 0f01 	tst.w	r8, #1
 800bff2:	d1b2      	bne.n	800bf5a <_dtoa_r+0xa42>
 800bff4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bff8:	2b30      	cmp	r3, #48	; 0x30
 800bffa:	f105 32ff 	add.w	r2, r5, #4294967295
 800bffe:	f47f af0a 	bne.w	800be16 <_dtoa_r+0x8fe>
 800c002:	4615      	mov	r5, r2
 800c004:	e7f6      	b.n	800bff4 <_dtoa_r+0xadc>
 800c006:	4593      	cmp	fp, r2
 800c008:	d105      	bne.n	800c016 <_dtoa_r+0xafe>
 800c00a:	2331      	movs	r3, #49	; 0x31
 800c00c:	f10a 0a01 	add.w	sl, sl, #1
 800c010:	f88b 3000 	strb.w	r3, [fp]
 800c014:	e6ff      	b.n	800be16 <_dtoa_r+0x8fe>
 800c016:	4615      	mov	r5, r2
 800c018:	e79f      	b.n	800bf5a <_dtoa_r+0xa42>
 800c01a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c080 <_dtoa_r+0xb68>
 800c01e:	e007      	b.n	800c030 <_dtoa_r+0xb18>
 800c020:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c022:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c084 <_dtoa_r+0xb6c>
 800c026:	b11b      	cbz	r3, 800c030 <_dtoa_r+0xb18>
 800c028:	f10b 0308 	add.w	r3, fp, #8
 800c02c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c02e:	6013      	str	r3, [r2, #0]
 800c030:	4658      	mov	r0, fp
 800c032:	b017      	add	sp, #92	; 0x5c
 800c034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c038:	9b06      	ldr	r3, [sp, #24]
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	f77f ae35 	ble.w	800bcaa <_dtoa_r+0x792>
 800c040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c042:	9307      	str	r3, [sp, #28]
 800c044:	e649      	b.n	800bcda <_dtoa_r+0x7c2>
 800c046:	9b02      	ldr	r3, [sp, #8]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	dc03      	bgt.n	800c054 <_dtoa_r+0xb3c>
 800c04c:	9b06      	ldr	r3, [sp, #24]
 800c04e:	2b02      	cmp	r3, #2
 800c050:	f73f aecc 	bgt.w	800bdec <_dtoa_r+0x8d4>
 800c054:	465d      	mov	r5, fp
 800c056:	4639      	mov	r1, r7
 800c058:	9804      	ldr	r0, [sp, #16]
 800c05a:	f7ff f9ce 	bl	800b3fa <quorem>
 800c05e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c062:	f805 8b01 	strb.w	r8, [r5], #1
 800c066:	9a02      	ldr	r2, [sp, #8]
 800c068:	eba5 030b 	sub.w	r3, r5, fp
 800c06c:	429a      	cmp	r2, r3
 800c06e:	ddb0      	ble.n	800bfd2 <_dtoa_r+0xaba>
 800c070:	2300      	movs	r3, #0
 800c072:	220a      	movs	r2, #10
 800c074:	9904      	ldr	r1, [sp, #16]
 800c076:	4620      	mov	r0, r4
 800c078:	f7fe fd47 	bl	800ab0a <__multadd>
 800c07c:	9004      	str	r0, [sp, #16]
 800c07e:	e7ea      	b.n	800c056 <_dtoa_r+0xb3e>
 800c080:	0800ec3a 	.word	0x0800ec3a
 800c084:	0800ec2d 	.word	0x0800ec2d

0800c088 <malloc>:
 800c088:	4b02      	ldr	r3, [pc, #8]	; (800c094 <malloc+0xc>)
 800c08a:	4601      	mov	r1, r0
 800c08c:	6818      	ldr	r0, [r3, #0]
 800c08e:	f7ff b91d 	b.w	800b2cc <_malloc_r>
 800c092:	bf00      	nop
 800c094:	20000044 	.word	0x20000044

0800c098 <__malloc_lock>:
 800c098:	4770      	bx	lr

0800c09a <__malloc_unlock>:
 800c09a:	4770      	bx	lr
 800c09c:	0000      	movs	r0, r0
	...

0800c0a0 <cos>:
 800c0a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0a2:	ec51 0b10 	vmov	r0, r1, d0
 800c0a6:	4a1e      	ldr	r2, [pc, #120]	; (800c120 <cos+0x80>)
 800c0a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	dc06      	bgt.n	800c0be <cos+0x1e>
 800c0b0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800c118 <cos+0x78>
 800c0b4:	f001 fc68 	bl	800d988 <__kernel_cos>
 800c0b8:	ec51 0b10 	vmov	r0, r1, d0
 800c0bc:	e007      	b.n	800c0ce <cos+0x2e>
 800c0be:	4a19      	ldr	r2, [pc, #100]	; (800c124 <cos+0x84>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	dd09      	ble.n	800c0d8 <cos+0x38>
 800c0c4:	ee10 2a10 	vmov	r2, s0
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	f7f4 f88d 	bl	80001e8 <__aeabi_dsub>
 800c0ce:	ec41 0b10 	vmov	d0, r0, r1
 800c0d2:	b005      	add	sp, #20
 800c0d4:	f85d fb04 	ldr.w	pc, [sp], #4
 800c0d8:	4668      	mov	r0, sp
 800c0da:	f001 f9b1 	bl	800d440 <__ieee754_rem_pio2>
 800c0de:	f000 0003 	and.w	r0, r0, #3
 800c0e2:	2801      	cmp	r0, #1
 800c0e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c0e8:	ed9d 0b00 	vldr	d0, [sp]
 800c0ec:	d007      	beq.n	800c0fe <cos+0x5e>
 800c0ee:	2802      	cmp	r0, #2
 800c0f0:	d00e      	beq.n	800c110 <cos+0x70>
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	d0de      	beq.n	800c0b4 <cos+0x14>
 800c0f6:	2001      	movs	r0, #1
 800c0f8:	f002 f84e 	bl	800e198 <__kernel_sin>
 800c0fc:	e7dc      	b.n	800c0b8 <cos+0x18>
 800c0fe:	f002 f84b 	bl	800e198 <__kernel_sin>
 800c102:	ec53 2b10 	vmov	r2, r3, d0
 800c106:	ee10 0a10 	vmov	r0, s0
 800c10a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c10e:	e7de      	b.n	800c0ce <cos+0x2e>
 800c110:	f001 fc3a 	bl	800d988 <__kernel_cos>
 800c114:	e7f5      	b.n	800c102 <cos+0x62>
 800c116:	bf00      	nop
	...
 800c120:	3fe921fb 	.word	0x3fe921fb
 800c124:	7fefffff 	.word	0x7fefffff

0800c128 <sin>:
 800c128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c12a:	ec51 0b10 	vmov	r0, r1, d0
 800c12e:	4a20      	ldr	r2, [pc, #128]	; (800c1b0 <sin+0x88>)
 800c130:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c134:	4293      	cmp	r3, r2
 800c136:	dc07      	bgt.n	800c148 <sin+0x20>
 800c138:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800c1a8 <sin+0x80>
 800c13c:	2000      	movs	r0, #0
 800c13e:	f002 f82b 	bl	800e198 <__kernel_sin>
 800c142:	ec51 0b10 	vmov	r0, r1, d0
 800c146:	e007      	b.n	800c158 <sin+0x30>
 800c148:	4a1a      	ldr	r2, [pc, #104]	; (800c1b4 <sin+0x8c>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	dd09      	ble.n	800c162 <sin+0x3a>
 800c14e:	ee10 2a10 	vmov	r2, s0
 800c152:	460b      	mov	r3, r1
 800c154:	f7f4 f848 	bl	80001e8 <__aeabi_dsub>
 800c158:	ec41 0b10 	vmov	d0, r0, r1
 800c15c:	b005      	add	sp, #20
 800c15e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c162:	4668      	mov	r0, sp
 800c164:	f001 f96c 	bl	800d440 <__ieee754_rem_pio2>
 800c168:	f000 0003 	and.w	r0, r0, #3
 800c16c:	2801      	cmp	r0, #1
 800c16e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c172:	ed9d 0b00 	vldr	d0, [sp]
 800c176:	d004      	beq.n	800c182 <sin+0x5a>
 800c178:	2802      	cmp	r0, #2
 800c17a:	d005      	beq.n	800c188 <sin+0x60>
 800c17c:	b970      	cbnz	r0, 800c19c <sin+0x74>
 800c17e:	2001      	movs	r0, #1
 800c180:	e7dd      	b.n	800c13e <sin+0x16>
 800c182:	f001 fc01 	bl	800d988 <__kernel_cos>
 800c186:	e7dc      	b.n	800c142 <sin+0x1a>
 800c188:	2001      	movs	r0, #1
 800c18a:	f002 f805 	bl	800e198 <__kernel_sin>
 800c18e:	ec53 2b10 	vmov	r2, r3, d0
 800c192:	ee10 0a10 	vmov	r0, s0
 800c196:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c19a:	e7dd      	b.n	800c158 <sin+0x30>
 800c19c:	f001 fbf4 	bl	800d988 <__kernel_cos>
 800c1a0:	e7f5      	b.n	800c18e <sin+0x66>
 800c1a2:	bf00      	nop
 800c1a4:	f3af 8000 	nop.w
	...
 800c1b0:	3fe921fb 	.word	0x3fe921fb
 800c1b4:	7fefffff 	.word	0x7fefffff

0800c1b8 <asin>:
 800c1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1ba:	ed2d 8b02 	vpush	{d8}
 800c1be:	4e26      	ldr	r6, [pc, #152]	; (800c258 <asin+0xa0>)
 800c1c0:	b08b      	sub	sp, #44	; 0x2c
 800c1c2:	ec55 4b10 	vmov	r4, r5, d0
 800c1c6:	f000 fa1b 	bl	800c600 <__ieee754_asin>
 800c1ca:	f996 3000 	ldrsb.w	r3, [r6]
 800c1ce:	eeb0 8a40 	vmov.f32	s16, s0
 800c1d2:	eef0 8a60 	vmov.f32	s17, s1
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	d036      	beq.n	800c248 <asin+0x90>
 800c1da:	4622      	mov	r2, r4
 800c1dc:	462b      	mov	r3, r5
 800c1de:	4620      	mov	r0, r4
 800c1e0:	4629      	mov	r1, r5
 800c1e2:	f7f4 fc53 	bl	8000a8c <__aeabi_dcmpun>
 800c1e6:	4607      	mov	r7, r0
 800c1e8:	bb70      	cbnz	r0, 800c248 <asin+0x90>
 800c1ea:	ec45 4b10 	vmov	d0, r4, r5
 800c1ee:	f002 f88d 	bl	800e30c <fabs>
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	4b19      	ldr	r3, [pc, #100]	; (800c25c <asin+0xa4>)
 800c1f6:	ec51 0b10 	vmov	r0, r1, d0
 800c1fa:	f7f4 fc3d 	bl	8000a78 <__aeabi_dcmpgt>
 800c1fe:	b318      	cbz	r0, 800c248 <asin+0x90>
 800c200:	2301      	movs	r3, #1
 800c202:	9300      	str	r3, [sp, #0]
 800c204:	4816      	ldr	r0, [pc, #88]	; (800c260 <asin+0xa8>)
 800c206:	4b17      	ldr	r3, [pc, #92]	; (800c264 <asin+0xac>)
 800c208:	9301      	str	r3, [sp, #4]
 800c20a:	9708      	str	r7, [sp, #32]
 800c20c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c210:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c214:	f002 f914 	bl	800e440 <nan>
 800c218:	f996 3000 	ldrsb.w	r3, [r6]
 800c21c:	2b02      	cmp	r3, #2
 800c21e:	ed8d 0b06 	vstr	d0, [sp, #24]
 800c222:	d104      	bne.n	800c22e <asin+0x76>
 800c224:	f7fd f82a 	bl	800927c <__errno>
 800c228:	2321      	movs	r3, #33	; 0x21
 800c22a:	6003      	str	r3, [r0, #0]
 800c22c:	e004      	b.n	800c238 <asin+0x80>
 800c22e:	4668      	mov	r0, sp
 800c230:	f002 f902 	bl	800e438 <matherr>
 800c234:	2800      	cmp	r0, #0
 800c236:	d0f5      	beq.n	800c224 <asin+0x6c>
 800c238:	9b08      	ldr	r3, [sp, #32]
 800c23a:	b11b      	cbz	r3, 800c244 <asin+0x8c>
 800c23c:	f7fd f81e 	bl	800927c <__errno>
 800c240:	9b08      	ldr	r3, [sp, #32]
 800c242:	6003      	str	r3, [r0, #0]
 800c244:	ed9d 8b06 	vldr	d8, [sp, #24]
 800c248:	eeb0 0a48 	vmov.f32	s0, s16
 800c24c:	eef0 0a68 	vmov.f32	s1, s17
 800c250:	b00b      	add	sp, #44	; 0x2c
 800c252:	ecbd 8b02 	vpop	{d8}
 800c256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c258:	20000214 	.word	0x20000214
 800c25c:	3ff00000 	.word	0x3ff00000
 800c260:	0800ea29 	.word	0x0800ea29
 800c264:	0800ec3c 	.word	0x0800ec3c

0800c268 <pow>:
 800c268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c26c:	ed2d 8b04 	vpush	{d8-d9}
 800c270:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800c544 <pow+0x2dc>
 800c274:	b08d      	sub	sp, #52	; 0x34
 800c276:	ec57 6b10 	vmov	r6, r7, d0
 800c27a:	ec55 4b11 	vmov	r4, r5, d1
 800c27e:	f000 fbcf 	bl	800ca20 <__ieee754_pow>
 800c282:	f999 3000 	ldrsb.w	r3, [r9]
 800c286:	9300      	str	r3, [sp, #0]
 800c288:	3301      	adds	r3, #1
 800c28a:	eeb0 8a40 	vmov.f32	s16, s0
 800c28e:	eef0 8a60 	vmov.f32	s17, s1
 800c292:	46c8      	mov	r8, r9
 800c294:	d05f      	beq.n	800c356 <pow+0xee>
 800c296:	4622      	mov	r2, r4
 800c298:	462b      	mov	r3, r5
 800c29a:	4620      	mov	r0, r4
 800c29c:	4629      	mov	r1, r5
 800c29e:	f7f4 fbf5 	bl	8000a8c <__aeabi_dcmpun>
 800c2a2:	4683      	mov	fp, r0
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	d156      	bne.n	800c356 <pow+0xee>
 800c2a8:	4632      	mov	r2, r6
 800c2aa:	463b      	mov	r3, r7
 800c2ac:	4630      	mov	r0, r6
 800c2ae:	4639      	mov	r1, r7
 800c2b0:	f7f4 fbec 	bl	8000a8c <__aeabi_dcmpun>
 800c2b4:	9001      	str	r0, [sp, #4]
 800c2b6:	b1e8      	cbz	r0, 800c2f4 <pow+0x8c>
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	4620      	mov	r0, r4
 800c2be:	4629      	mov	r1, r5
 800c2c0:	f7f4 fbb2 	bl	8000a28 <__aeabi_dcmpeq>
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	d046      	beq.n	800c356 <pow+0xee>
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	9302      	str	r3, [sp, #8]
 800c2cc:	4b96      	ldr	r3, [pc, #600]	; (800c528 <pow+0x2c0>)
 800c2ce:	9303      	str	r3, [sp, #12]
 800c2d0:	4b96      	ldr	r3, [pc, #600]	; (800c52c <pow+0x2c4>)
 800c2d2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c2dc:	9b00      	ldr	r3, [sp, #0]
 800c2de:	2b02      	cmp	r3, #2
 800c2e0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c2e4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c2e8:	d033      	beq.n	800c352 <pow+0xea>
 800c2ea:	a802      	add	r0, sp, #8
 800c2ec:	f002 f8a4 	bl	800e438 <matherr>
 800c2f0:	bb48      	cbnz	r0, 800c346 <pow+0xde>
 800c2f2:	e05d      	b.n	800c3b0 <pow+0x148>
 800c2f4:	f04f 0a00 	mov.w	sl, #0
 800c2f8:	f04f 0b00 	mov.w	fp, #0
 800c2fc:	4652      	mov	r2, sl
 800c2fe:	465b      	mov	r3, fp
 800c300:	4630      	mov	r0, r6
 800c302:	4639      	mov	r1, r7
 800c304:	f7f4 fb90 	bl	8000a28 <__aeabi_dcmpeq>
 800c308:	ec4b ab19 	vmov	d9, sl, fp
 800c30c:	2800      	cmp	r0, #0
 800c30e:	d054      	beq.n	800c3ba <pow+0x152>
 800c310:	4652      	mov	r2, sl
 800c312:	465b      	mov	r3, fp
 800c314:	4620      	mov	r0, r4
 800c316:	4629      	mov	r1, r5
 800c318:	f7f4 fb86 	bl	8000a28 <__aeabi_dcmpeq>
 800c31c:	4680      	mov	r8, r0
 800c31e:	b318      	cbz	r0, 800c368 <pow+0x100>
 800c320:	2301      	movs	r3, #1
 800c322:	9302      	str	r3, [sp, #8]
 800c324:	4b80      	ldr	r3, [pc, #512]	; (800c528 <pow+0x2c0>)
 800c326:	9303      	str	r3, [sp, #12]
 800c328:	9b01      	ldr	r3, [sp, #4]
 800c32a:	930a      	str	r3, [sp, #40]	; 0x28
 800c32c:	9b00      	ldr	r3, [sp, #0]
 800c32e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c332:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c336:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d0d5      	beq.n	800c2ea <pow+0x82>
 800c33e:	4b7b      	ldr	r3, [pc, #492]	; (800c52c <pow+0x2c4>)
 800c340:	2200      	movs	r2, #0
 800c342:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c348:	b11b      	cbz	r3, 800c352 <pow+0xea>
 800c34a:	f7fc ff97 	bl	800927c <__errno>
 800c34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c350:	6003      	str	r3, [r0, #0]
 800c352:	ed9d 8b08 	vldr	d8, [sp, #32]
 800c356:	eeb0 0a48 	vmov.f32	s0, s16
 800c35a:	eef0 0a68 	vmov.f32	s1, s17
 800c35e:	b00d      	add	sp, #52	; 0x34
 800c360:	ecbd 8b04 	vpop	{d8-d9}
 800c364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c368:	ec45 4b10 	vmov	d0, r4, r5
 800c36c:	f001 ffd7 	bl	800e31e <finite>
 800c370:	2800      	cmp	r0, #0
 800c372:	d0f0      	beq.n	800c356 <pow+0xee>
 800c374:	4652      	mov	r2, sl
 800c376:	465b      	mov	r3, fp
 800c378:	4620      	mov	r0, r4
 800c37a:	4629      	mov	r1, r5
 800c37c:	f7f4 fb5e 	bl	8000a3c <__aeabi_dcmplt>
 800c380:	2800      	cmp	r0, #0
 800c382:	d0e8      	beq.n	800c356 <pow+0xee>
 800c384:	2301      	movs	r3, #1
 800c386:	9302      	str	r3, [sp, #8]
 800c388:	4b67      	ldr	r3, [pc, #412]	; (800c528 <pow+0x2c0>)
 800c38a:	9303      	str	r3, [sp, #12]
 800c38c:	f999 3000 	ldrsb.w	r3, [r9]
 800c390:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800c394:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c398:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c39c:	b913      	cbnz	r3, 800c3a4 <pow+0x13c>
 800c39e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c3a2:	e7a2      	b.n	800c2ea <pow+0x82>
 800c3a4:	4962      	ldr	r1, [pc, #392]	; (800c530 <pow+0x2c8>)
 800c3a6:	2000      	movs	r0, #0
 800c3a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c3ac:	2b02      	cmp	r3, #2
 800c3ae:	d19c      	bne.n	800c2ea <pow+0x82>
 800c3b0:	f7fc ff64 	bl	800927c <__errno>
 800c3b4:	2321      	movs	r3, #33	; 0x21
 800c3b6:	6003      	str	r3, [r0, #0]
 800c3b8:	e7c5      	b.n	800c346 <pow+0xde>
 800c3ba:	eeb0 0a48 	vmov.f32	s0, s16
 800c3be:	eef0 0a68 	vmov.f32	s1, s17
 800c3c2:	f001 ffac 	bl	800e31e <finite>
 800c3c6:	9000      	str	r0, [sp, #0]
 800c3c8:	2800      	cmp	r0, #0
 800c3ca:	f040 8081 	bne.w	800c4d0 <pow+0x268>
 800c3ce:	ec47 6b10 	vmov	d0, r6, r7
 800c3d2:	f001 ffa4 	bl	800e31e <finite>
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	d07a      	beq.n	800c4d0 <pow+0x268>
 800c3da:	ec45 4b10 	vmov	d0, r4, r5
 800c3de:	f001 ff9e 	bl	800e31e <finite>
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	d074      	beq.n	800c4d0 <pow+0x268>
 800c3e6:	ec53 2b18 	vmov	r2, r3, d8
 800c3ea:	ee18 0a10 	vmov	r0, s16
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	f7f4 fb4c 	bl	8000a8c <__aeabi_dcmpun>
 800c3f4:	f999 9000 	ldrsb.w	r9, [r9]
 800c3f8:	4b4b      	ldr	r3, [pc, #300]	; (800c528 <pow+0x2c0>)
 800c3fa:	b1b0      	cbz	r0, 800c42a <pow+0x1c2>
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c402:	9b00      	ldr	r3, [sp, #0]
 800c404:	930a      	str	r3, [sp, #40]	; 0x28
 800c406:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c40a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c40e:	f1b9 0f00 	cmp.w	r9, #0
 800c412:	d0c4      	beq.n	800c39e <pow+0x136>
 800c414:	4652      	mov	r2, sl
 800c416:	465b      	mov	r3, fp
 800c418:	4650      	mov	r0, sl
 800c41a:	4659      	mov	r1, fp
 800c41c:	f7f4 f9c6 	bl	80007ac <__aeabi_ddiv>
 800c420:	f1b9 0f02 	cmp.w	r9, #2
 800c424:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c428:	e7c1      	b.n	800c3ae <pow+0x146>
 800c42a:	2203      	movs	r2, #3
 800c42c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c430:	900a      	str	r0, [sp, #40]	; 0x28
 800c432:	4629      	mov	r1, r5
 800c434:	4620      	mov	r0, r4
 800c436:	2200      	movs	r2, #0
 800c438:	4b3e      	ldr	r3, [pc, #248]	; (800c534 <pow+0x2cc>)
 800c43a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c43e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c442:	f7f4 f889 	bl	8000558 <__aeabi_dmul>
 800c446:	4604      	mov	r4, r0
 800c448:	460d      	mov	r5, r1
 800c44a:	f1b9 0f00 	cmp.w	r9, #0
 800c44e:	d124      	bne.n	800c49a <pow+0x232>
 800c450:	4b39      	ldr	r3, [pc, #228]	; (800c538 <pow+0x2d0>)
 800c452:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c456:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c45a:	4630      	mov	r0, r6
 800c45c:	4652      	mov	r2, sl
 800c45e:	465b      	mov	r3, fp
 800c460:	4639      	mov	r1, r7
 800c462:	f7f4 faeb 	bl	8000a3c <__aeabi_dcmplt>
 800c466:	2800      	cmp	r0, #0
 800c468:	d056      	beq.n	800c518 <pow+0x2b0>
 800c46a:	ec45 4b10 	vmov	d0, r4, r5
 800c46e:	f001 ffef 	bl	800e450 <rint>
 800c472:	4622      	mov	r2, r4
 800c474:	462b      	mov	r3, r5
 800c476:	ec51 0b10 	vmov	r0, r1, d0
 800c47a:	f7f4 fad5 	bl	8000a28 <__aeabi_dcmpeq>
 800c47e:	b920      	cbnz	r0, 800c48a <pow+0x222>
 800c480:	4b2e      	ldr	r3, [pc, #184]	; (800c53c <pow+0x2d4>)
 800c482:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c486:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c48a:	f998 3000 	ldrsb.w	r3, [r8]
 800c48e:	2b02      	cmp	r3, #2
 800c490:	d142      	bne.n	800c518 <pow+0x2b0>
 800c492:	f7fc fef3 	bl	800927c <__errno>
 800c496:	2322      	movs	r3, #34	; 0x22
 800c498:	e78d      	b.n	800c3b6 <pow+0x14e>
 800c49a:	4b29      	ldr	r3, [pc, #164]	; (800c540 <pow+0x2d8>)
 800c49c:	2200      	movs	r2, #0
 800c49e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c4a2:	4630      	mov	r0, r6
 800c4a4:	4652      	mov	r2, sl
 800c4a6:	465b      	mov	r3, fp
 800c4a8:	4639      	mov	r1, r7
 800c4aa:	f7f4 fac7 	bl	8000a3c <__aeabi_dcmplt>
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	d0eb      	beq.n	800c48a <pow+0x222>
 800c4b2:	ec45 4b10 	vmov	d0, r4, r5
 800c4b6:	f001 ffcb 	bl	800e450 <rint>
 800c4ba:	4622      	mov	r2, r4
 800c4bc:	462b      	mov	r3, r5
 800c4be:	ec51 0b10 	vmov	r0, r1, d0
 800c4c2:	f7f4 fab1 	bl	8000a28 <__aeabi_dcmpeq>
 800c4c6:	2800      	cmp	r0, #0
 800c4c8:	d1df      	bne.n	800c48a <pow+0x222>
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	4b18      	ldr	r3, [pc, #96]	; (800c530 <pow+0x2c8>)
 800c4ce:	e7da      	b.n	800c486 <pow+0x21e>
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	ec51 0b18 	vmov	r0, r1, d8
 800c4d8:	f7f4 faa6 	bl	8000a28 <__aeabi_dcmpeq>
 800c4dc:	2800      	cmp	r0, #0
 800c4de:	f43f af3a 	beq.w	800c356 <pow+0xee>
 800c4e2:	ec47 6b10 	vmov	d0, r6, r7
 800c4e6:	f001 ff1a 	bl	800e31e <finite>
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	f43f af33 	beq.w	800c356 <pow+0xee>
 800c4f0:	ec45 4b10 	vmov	d0, r4, r5
 800c4f4:	f001 ff13 	bl	800e31e <finite>
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	f43f af2c 	beq.w	800c356 <pow+0xee>
 800c4fe:	2304      	movs	r3, #4
 800c500:	9302      	str	r3, [sp, #8]
 800c502:	4b09      	ldr	r3, [pc, #36]	; (800c528 <pow+0x2c0>)
 800c504:	9303      	str	r3, [sp, #12]
 800c506:	2300      	movs	r3, #0
 800c508:	930a      	str	r3, [sp, #40]	; 0x28
 800c50a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c50e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c512:	ed8d 9b08 	vstr	d9, [sp, #32]
 800c516:	e7b8      	b.n	800c48a <pow+0x222>
 800c518:	a802      	add	r0, sp, #8
 800c51a:	f001 ff8d 	bl	800e438 <matherr>
 800c51e:	2800      	cmp	r0, #0
 800c520:	f47f af11 	bne.w	800c346 <pow+0xde>
 800c524:	e7b5      	b.n	800c492 <pow+0x22a>
 800c526:	bf00      	nop
 800c528:	0800ec41 	.word	0x0800ec41
 800c52c:	3ff00000 	.word	0x3ff00000
 800c530:	fff00000 	.word	0xfff00000
 800c534:	3fe00000 	.word	0x3fe00000
 800c538:	47efffff 	.word	0x47efffff
 800c53c:	c7efffff 	.word	0xc7efffff
 800c540:	7ff00000 	.word	0x7ff00000
 800c544:	20000214 	.word	0x20000214

0800c548 <sqrt>:
 800c548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c54c:	ed2d 8b02 	vpush	{d8}
 800c550:	b08b      	sub	sp, #44	; 0x2c
 800c552:	ec55 4b10 	vmov	r4, r5, d0
 800c556:	f001 f965 	bl	800d824 <__ieee754_sqrt>
 800c55a:	4b26      	ldr	r3, [pc, #152]	; (800c5f4 <sqrt+0xac>)
 800c55c:	eeb0 8a40 	vmov.f32	s16, s0
 800c560:	eef0 8a60 	vmov.f32	s17, s1
 800c564:	f993 6000 	ldrsb.w	r6, [r3]
 800c568:	1c73      	adds	r3, r6, #1
 800c56a:	d02a      	beq.n	800c5c2 <sqrt+0x7a>
 800c56c:	4622      	mov	r2, r4
 800c56e:	462b      	mov	r3, r5
 800c570:	4620      	mov	r0, r4
 800c572:	4629      	mov	r1, r5
 800c574:	f7f4 fa8a 	bl	8000a8c <__aeabi_dcmpun>
 800c578:	4607      	mov	r7, r0
 800c57a:	bb10      	cbnz	r0, 800c5c2 <sqrt+0x7a>
 800c57c:	f04f 0800 	mov.w	r8, #0
 800c580:	f04f 0900 	mov.w	r9, #0
 800c584:	4642      	mov	r2, r8
 800c586:	464b      	mov	r3, r9
 800c588:	4620      	mov	r0, r4
 800c58a:	4629      	mov	r1, r5
 800c58c:	f7f4 fa56 	bl	8000a3c <__aeabi_dcmplt>
 800c590:	b1b8      	cbz	r0, 800c5c2 <sqrt+0x7a>
 800c592:	2301      	movs	r3, #1
 800c594:	9300      	str	r3, [sp, #0]
 800c596:	4b18      	ldr	r3, [pc, #96]	; (800c5f8 <sqrt+0xb0>)
 800c598:	9301      	str	r3, [sp, #4]
 800c59a:	9708      	str	r7, [sp, #32]
 800c59c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c5a0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c5a4:	b9b6      	cbnz	r6, 800c5d4 <sqrt+0x8c>
 800c5a6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c5aa:	4668      	mov	r0, sp
 800c5ac:	f001 ff44 	bl	800e438 <matherr>
 800c5b0:	b1d0      	cbz	r0, 800c5e8 <sqrt+0xa0>
 800c5b2:	9b08      	ldr	r3, [sp, #32]
 800c5b4:	b11b      	cbz	r3, 800c5be <sqrt+0x76>
 800c5b6:	f7fc fe61 	bl	800927c <__errno>
 800c5ba:	9b08      	ldr	r3, [sp, #32]
 800c5bc:	6003      	str	r3, [r0, #0]
 800c5be:	ed9d 8b06 	vldr	d8, [sp, #24]
 800c5c2:	eeb0 0a48 	vmov.f32	s0, s16
 800c5c6:	eef0 0a68 	vmov.f32	s1, s17
 800c5ca:	b00b      	add	sp, #44	; 0x2c
 800c5cc:	ecbd 8b02 	vpop	{d8}
 800c5d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5d4:	4642      	mov	r2, r8
 800c5d6:	464b      	mov	r3, r9
 800c5d8:	4640      	mov	r0, r8
 800c5da:	4649      	mov	r1, r9
 800c5dc:	f7f4 f8e6 	bl	80007ac <__aeabi_ddiv>
 800c5e0:	2e02      	cmp	r6, #2
 800c5e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c5e6:	d1e0      	bne.n	800c5aa <sqrt+0x62>
 800c5e8:	f7fc fe48 	bl	800927c <__errno>
 800c5ec:	2321      	movs	r3, #33	; 0x21
 800c5ee:	6003      	str	r3, [r0, #0]
 800c5f0:	e7df      	b.n	800c5b2 <sqrt+0x6a>
 800c5f2:	bf00      	nop
 800c5f4:	20000214 	.word	0x20000214
 800c5f8:	0800ec45 	.word	0x0800ec45
 800c5fc:	00000000 	.word	0x00000000

0800c600 <__ieee754_asin>:
 800c600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c604:	ec55 4b10 	vmov	r4, r5, d0
 800c608:	4bcb      	ldr	r3, [pc, #812]	; (800c938 <__ieee754_asin+0x338>)
 800c60a:	b087      	sub	sp, #28
 800c60c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800c610:	429f      	cmp	r7, r3
 800c612:	9501      	str	r5, [sp, #4]
 800c614:	dd31      	ble.n	800c67a <__ieee754_asin+0x7a>
 800c616:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800c61a:	ee10 3a10 	vmov	r3, s0
 800c61e:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800c622:	433b      	orrs	r3, r7
 800c624:	d117      	bne.n	800c656 <__ieee754_asin+0x56>
 800c626:	a3aa      	add	r3, pc, #680	; (adr r3, 800c8d0 <__ieee754_asin+0x2d0>)
 800c628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62c:	ee10 0a10 	vmov	r0, s0
 800c630:	4629      	mov	r1, r5
 800c632:	f7f3 ff91 	bl	8000558 <__aeabi_dmul>
 800c636:	a3a8      	add	r3, pc, #672	; (adr r3, 800c8d8 <__ieee754_asin+0x2d8>)
 800c638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63c:	4606      	mov	r6, r0
 800c63e:	460f      	mov	r7, r1
 800c640:	4620      	mov	r0, r4
 800c642:	4629      	mov	r1, r5
 800c644:	f7f3 ff88 	bl	8000558 <__aeabi_dmul>
 800c648:	4602      	mov	r2, r0
 800c64a:	460b      	mov	r3, r1
 800c64c:	4630      	mov	r0, r6
 800c64e:	4639      	mov	r1, r7
 800c650:	f7f3 fdcc 	bl	80001ec <__adddf3>
 800c654:	e00a      	b.n	800c66c <__ieee754_asin+0x6c>
 800c656:	ee10 2a10 	vmov	r2, s0
 800c65a:	462b      	mov	r3, r5
 800c65c:	4620      	mov	r0, r4
 800c65e:	4629      	mov	r1, r5
 800c660:	f7f3 fdc2 	bl	80001e8 <__aeabi_dsub>
 800c664:	4602      	mov	r2, r0
 800c666:	460b      	mov	r3, r1
 800c668:	f7f4 f8a0 	bl	80007ac <__aeabi_ddiv>
 800c66c:	4604      	mov	r4, r0
 800c66e:	460d      	mov	r5, r1
 800c670:	ec45 4b10 	vmov	d0, r4, r5
 800c674:	b007      	add	sp, #28
 800c676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c67a:	4bb0      	ldr	r3, [pc, #704]	; (800c93c <__ieee754_asin+0x33c>)
 800c67c:	429f      	cmp	r7, r3
 800c67e:	dc11      	bgt.n	800c6a4 <__ieee754_asin+0xa4>
 800c680:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800c684:	f280 80ae 	bge.w	800c7e4 <__ieee754_asin+0x1e4>
 800c688:	a395      	add	r3, pc, #596	; (adr r3, 800c8e0 <__ieee754_asin+0x2e0>)
 800c68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68e:	ee10 0a10 	vmov	r0, s0
 800c692:	4629      	mov	r1, r5
 800c694:	f7f3 fdaa 	bl	80001ec <__adddf3>
 800c698:	2200      	movs	r2, #0
 800c69a:	4ba9      	ldr	r3, [pc, #676]	; (800c940 <__ieee754_asin+0x340>)
 800c69c:	f7f4 f9ec 	bl	8000a78 <__aeabi_dcmpgt>
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	d1e5      	bne.n	800c670 <__ieee754_asin+0x70>
 800c6a4:	ec45 4b10 	vmov	d0, r4, r5
 800c6a8:	f001 fe30 	bl	800e30c <fabs>
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	ec53 2b10 	vmov	r2, r3, d0
 800c6b2:	49a3      	ldr	r1, [pc, #652]	; (800c940 <__ieee754_asin+0x340>)
 800c6b4:	f7f3 fd98 	bl	80001e8 <__aeabi_dsub>
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	4ba2      	ldr	r3, [pc, #648]	; (800c944 <__ieee754_asin+0x344>)
 800c6bc:	f7f3 ff4c 	bl	8000558 <__aeabi_dmul>
 800c6c0:	a389      	add	r3, pc, #548	; (adr r3, 800c8e8 <__ieee754_asin+0x2e8>)
 800c6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c6:	4604      	mov	r4, r0
 800c6c8:	460d      	mov	r5, r1
 800c6ca:	f7f3 ff45 	bl	8000558 <__aeabi_dmul>
 800c6ce:	a388      	add	r3, pc, #544	; (adr r3, 800c8f0 <__ieee754_asin+0x2f0>)
 800c6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d4:	f7f3 fd8a 	bl	80001ec <__adddf3>
 800c6d8:	4622      	mov	r2, r4
 800c6da:	462b      	mov	r3, r5
 800c6dc:	f7f3 ff3c 	bl	8000558 <__aeabi_dmul>
 800c6e0:	a385      	add	r3, pc, #532	; (adr r3, 800c8f8 <__ieee754_asin+0x2f8>)
 800c6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e6:	f7f3 fd7f 	bl	80001e8 <__aeabi_dsub>
 800c6ea:	4622      	mov	r2, r4
 800c6ec:	462b      	mov	r3, r5
 800c6ee:	f7f3 ff33 	bl	8000558 <__aeabi_dmul>
 800c6f2:	a383      	add	r3, pc, #524	; (adr r3, 800c900 <__ieee754_asin+0x300>)
 800c6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f8:	f7f3 fd78 	bl	80001ec <__adddf3>
 800c6fc:	4622      	mov	r2, r4
 800c6fe:	462b      	mov	r3, r5
 800c700:	f7f3 ff2a 	bl	8000558 <__aeabi_dmul>
 800c704:	a380      	add	r3, pc, #512	; (adr r3, 800c908 <__ieee754_asin+0x308>)
 800c706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70a:	f7f3 fd6d 	bl	80001e8 <__aeabi_dsub>
 800c70e:	4622      	mov	r2, r4
 800c710:	462b      	mov	r3, r5
 800c712:	f7f3 ff21 	bl	8000558 <__aeabi_dmul>
 800c716:	a37e      	add	r3, pc, #504	; (adr r3, 800c910 <__ieee754_asin+0x310>)
 800c718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71c:	f7f3 fd66 	bl	80001ec <__adddf3>
 800c720:	4622      	mov	r2, r4
 800c722:	462b      	mov	r3, r5
 800c724:	f7f3 ff18 	bl	8000558 <__aeabi_dmul>
 800c728:	a37b      	add	r3, pc, #492	; (adr r3, 800c918 <__ieee754_asin+0x318>)
 800c72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72e:	4680      	mov	r8, r0
 800c730:	4689      	mov	r9, r1
 800c732:	4620      	mov	r0, r4
 800c734:	4629      	mov	r1, r5
 800c736:	f7f3 ff0f 	bl	8000558 <__aeabi_dmul>
 800c73a:	a379      	add	r3, pc, #484	; (adr r3, 800c920 <__ieee754_asin+0x320>)
 800c73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c740:	f7f3 fd52 	bl	80001e8 <__aeabi_dsub>
 800c744:	4622      	mov	r2, r4
 800c746:	462b      	mov	r3, r5
 800c748:	f7f3 ff06 	bl	8000558 <__aeabi_dmul>
 800c74c:	a376      	add	r3, pc, #472	; (adr r3, 800c928 <__ieee754_asin+0x328>)
 800c74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c752:	f7f3 fd4b 	bl	80001ec <__adddf3>
 800c756:	4622      	mov	r2, r4
 800c758:	462b      	mov	r3, r5
 800c75a:	f7f3 fefd 	bl	8000558 <__aeabi_dmul>
 800c75e:	a374      	add	r3, pc, #464	; (adr r3, 800c930 <__ieee754_asin+0x330>)
 800c760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c764:	f7f3 fd40 	bl	80001e8 <__aeabi_dsub>
 800c768:	4622      	mov	r2, r4
 800c76a:	462b      	mov	r3, r5
 800c76c:	f7f3 fef4 	bl	8000558 <__aeabi_dmul>
 800c770:	4b73      	ldr	r3, [pc, #460]	; (800c940 <__ieee754_asin+0x340>)
 800c772:	2200      	movs	r2, #0
 800c774:	f7f3 fd3a 	bl	80001ec <__adddf3>
 800c778:	ec45 4b10 	vmov	d0, r4, r5
 800c77c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c780:	f001 f850 	bl	800d824 <__ieee754_sqrt>
 800c784:	4b70      	ldr	r3, [pc, #448]	; (800c948 <__ieee754_asin+0x348>)
 800c786:	429f      	cmp	r7, r3
 800c788:	ec5b ab10 	vmov	sl, fp, d0
 800c78c:	f340 80de 	ble.w	800c94c <__ieee754_asin+0x34c>
 800c790:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c794:	4640      	mov	r0, r8
 800c796:	4649      	mov	r1, r9
 800c798:	f7f4 f808 	bl	80007ac <__aeabi_ddiv>
 800c79c:	4652      	mov	r2, sl
 800c79e:	465b      	mov	r3, fp
 800c7a0:	f7f3 feda 	bl	8000558 <__aeabi_dmul>
 800c7a4:	4652      	mov	r2, sl
 800c7a6:	465b      	mov	r3, fp
 800c7a8:	f7f3 fd20 	bl	80001ec <__adddf3>
 800c7ac:	4602      	mov	r2, r0
 800c7ae:	460b      	mov	r3, r1
 800c7b0:	f7f3 fd1c 	bl	80001ec <__adddf3>
 800c7b4:	a348      	add	r3, pc, #288	; (adr r3, 800c8d8 <__ieee754_asin+0x2d8>)
 800c7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ba:	f7f3 fd15 	bl	80001e8 <__aeabi_dsub>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	a143      	add	r1, pc, #268	; (adr r1, 800c8d0 <__ieee754_asin+0x2d0>)
 800c7c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7c8:	f7f3 fd0e 	bl	80001e8 <__aeabi_dsub>
 800c7cc:	9b01      	ldr	r3, [sp, #4]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	bfdc      	itt	le
 800c7d2:	4602      	movle	r2, r0
 800c7d4:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800c7d8:	4604      	mov	r4, r0
 800c7da:	460d      	mov	r5, r1
 800c7dc:	bfdc      	itt	le
 800c7de:	4614      	movle	r4, r2
 800c7e0:	461d      	movle	r5, r3
 800c7e2:	e745      	b.n	800c670 <__ieee754_asin+0x70>
 800c7e4:	ee10 2a10 	vmov	r2, s0
 800c7e8:	ee10 0a10 	vmov	r0, s0
 800c7ec:	462b      	mov	r3, r5
 800c7ee:	4629      	mov	r1, r5
 800c7f0:	f7f3 feb2 	bl	8000558 <__aeabi_dmul>
 800c7f4:	a33c      	add	r3, pc, #240	; (adr r3, 800c8e8 <__ieee754_asin+0x2e8>)
 800c7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fa:	4606      	mov	r6, r0
 800c7fc:	460f      	mov	r7, r1
 800c7fe:	f7f3 feab 	bl	8000558 <__aeabi_dmul>
 800c802:	a33b      	add	r3, pc, #236	; (adr r3, 800c8f0 <__ieee754_asin+0x2f0>)
 800c804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c808:	f7f3 fcf0 	bl	80001ec <__adddf3>
 800c80c:	4632      	mov	r2, r6
 800c80e:	463b      	mov	r3, r7
 800c810:	f7f3 fea2 	bl	8000558 <__aeabi_dmul>
 800c814:	a338      	add	r3, pc, #224	; (adr r3, 800c8f8 <__ieee754_asin+0x2f8>)
 800c816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81a:	f7f3 fce5 	bl	80001e8 <__aeabi_dsub>
 800c81e:	4632      	mov	r2, r6
 800c820:	463b      	mov	r3, r7
 800c822:	f7f3 fe99 	bl	8000558 <__aeabi_dmul>
 800c826:	a336      	add	r3, pc, #216	; (adr r3, 800c900 <__ieee754_asin+0x300>)
 800c828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82c:	f7f3 fcde 	bl	80001ec <__adddf3>
 800c830:	4632      	mov	r2, r6
 800c832:	463b      	mov	r3, r7
 800c834:	f7f3 fe90 	bl	8000558 <__aeabi_dmul>
 800c838:	a333      	add	r3, pc, #204	; (adr r3, 800c908 <__ieee754_asin+0x308>)
 800c83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83e:	f7f3 fcd3 	bl	80001e8 <__aeabi_dsub>
 800c842:	4632      	mov	r2, r6
 800c844:	463b      	mov	r3, r7
 800c846:	f7f3 fe87 	bl	8000558 <__aeabi_dmul>
 800c84a:	a331      	add	r3, pc, #196	; (adr r3, 800c910 <__ieee754_asin+0x310>)
 800c84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c850:	f7f3 fccc 	bl	80001ec <__adddf3>
 800c854:	4632      	mov	r2, r6
 800c856:	463b      	mov	r3, r7
 800c858:	f7f3 fe7e 	bl	8000558 <__aeabi_dmul>
 800c85c:	a32e      	add	r3, pc, #184	; (adr r3, 800c918 <__ieee754_asin+0x318>)
 800c85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c862:	4680      	mov	r8, r0
 800c864:	4689      	mov	r9, r1
 800c866:	4630      	mov	r0, r6
 800c868:	4639      	mov	r1, r7
 800c86a:	f7f3 fe75 	bl	8000558 <__aeabi_dmul>
 800c86e:	a32c      	add	r3, pc, #176	; (adr r3, 800c920 <__ieee754_asin+0x320>)
 800c870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c874:	f7f3 fcb8 	bl	80001e8 <__aeabi_dsub>
 800c878:	4632      	mov	r2, r6
 800c87a:	463b      	mov	r3, r7
 800c87c:	f7f3 fe6c 	bl	8000558 <__aeabi_dmul>
 800c880:	a329      	add	r3, pc, #164	; (adr r3, 800c928 <__ieee754_asin+0x328>)
 800c882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c886:	f7f3 fcb1 	bl	80001ec <__adddf3>
 800c88a:	4632      	mov	r2, r6
 800c88c:	463b      	mov	r3, r7
 800c88e:	f7f3 fe63 	bl	8000558 <__aeabi_dmul>
 800c892:	a327      	add	r3, pc, #156	; (adr r3, 800c930 <__ieee754_asin+0x330>)
 800c894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c898:	f7f3 fca6 	bl	80001e8 <__aeabi_dsub>
 800c89c:	4632      	mov	r2, r6
 800c89e:	463b      	mov	r3, r7
 800c8a0:	f7f3 fe5a 	bl	8000558 <__aeabi_dmul>
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	4b26      	ldr	r3, [pc, #152]	; (800c940 <__ieee754_asin+0x340>)
 800c8a8:	f7f3 fca0 	bl	80001ec <__adddf3>
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	4640      	mov	r0, r8
 800c8b2:	4649      	mov	r1, r9
 800c8b4:	f7f3 ff7a 	bl	80007ac <__aeabi_ddiv>
 800c8b8:	4622      	mov	r2, r4
 800c8ba:	462b      	mov	r3, r5
 800c8bc:	f7f3 fe4c 	bl	8000558 <__aeabi_dmul>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	4629      	mov	r1, r5
 800c8c8:	e6c2      	b.n	800c650 <__ieee754_asin+0x50>
 800c8ca:	bf00      	nop
 800c8cc:	f3af 8000 	nop.w
 800c8d0:	54442d18 	.word	0x54442d18
 800c8d4:	3ff921fb 	.word	0x3ff921fb
 800c8d8:	33145c07 	.word	0x33145c07
 800c8dc:	3c91a626 	.word	0x3c91a626
 800c8e0:	8800759c 	.word	0x8800759c
 800c8e4:	7e37e43c 	.word	0x7e37e43c
 800c8e8:	0dfdf709 	.word	0x0dfdf709
 800c8ec:	3f023de1 	.word	0x3f023de1
 800c8f0:	7501b288 	.word	0x7501b288
 800c8f4:	3f49efe0 	.word	0x3f49efe0
 800c8f8:	b5688f3b 	.word	0xb5688f3b
 800c8fc:	3fa48228 	.word	0x3fa48228
 800c900:	0e884455 	.word	0x0e884455
 800c904:	3fc9c155 	.word	0x3fc9c155
 800c908:	03eb6f7d 	.word	0x03eb6f7d
 800c90c:	3fd4d612 	.word	0x3fd4d612
 800c910:	55555555 	.word	0x55555555
 800c914:	3fc55555 	.word	0x3fc55555
 800c918:	b12e9282 	.word	0xb12e9282
 800c91c:	3fb3b8c5 	.word	0x3fb3b8c5
 800c920:	1b8d0159 	.word	0x1b8d0159
 800c924:	3fe6066c 	.word	0x3fe6066c
 800c928:	9c598ac8 	.word	0x9c598ac8
 800c92c:	40002ae5 	.word	0x40002ae5
 800c930:	1c8a2d4b 	.word	0x1c8a2d4b
 800c934:	40033a27 	.word	0x40033a27
 800c938:	3fefffff 	.word	0x3fefffff
 800c93c:	3fdfffff 	.word	0x3fdfffff
 800c940:	3ff00000 	.word	0x3ff00000
 800c944:	3fe00000 	.word	0x3fe00000
 800c948:	3fef3332 	.word	0x3fef3332
 800c94c:	ee10 2a10 	vmov	r2, s0
 800c950:	ee10 0a10 	vmov	r0, s0
 800c954:	465b      	mov	r3, fp
 800c956:	4659      	mov	r1, fp
 800c958:	f7f3 fc48 	bl	80001ec <__adddf3>
 800c95c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c960:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c964:	4640      	mov	r0, r8
 800c966:	4649      	mov	r1, r9
 800c968:	f7f3 ff20 	bl	80007ac <__aeabi_ddiv>
 800c96c:	4602      	mov	r2, r0
 800c96e:	460b      	mov	r3, r1
 800c970:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c974:	f7f3 fdf0 	bl	8000558 <__aeabi_dmul>
 800c978:	2600      	movs	r6, #0
 800c97a:	4680      	mov	r8, r0
 800c97c:	4689      	mov	r9, r1
 800c97e:	4632      	mov	r2, r6
 800c980:	465b      	mov	r3, fp
 800c982:	4630      	mov	r0, r6
 800c984:	4659      	mov	r1, fp
 800c986:	f7f3 fde7 	bl	8000558 <__aeabi_dmul>
 800c98a:	4602      	mov	r2, r0
 800c98c:	460b      	mov	r3, r1
 800c98e:	4620      	mov	r0, r4
 800c990:	4629      	mov	r1, r5
 800c992:	f7f3 fc29 	bl	80001e8 <__aeabi_dsub>
 800c996:	4632      	mov	r2, r6
 800c998:	4604      	mov	r4, r0
 800c99a:	460d      	mov	r5, r1
 800c99c:	465b      	mov	r3, fp
 800c99e:	4650      	mov	r0, sl
 800c9a0:	4659      	mov	r1, fp
 800c9a2:	f7f3 fc23 	bl	80001ec <__adddf3>
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	4620      	mov	r0, r4
 800c9ac:	4629      	mov	r1, r5
 800c9ae:	f7f3 fefd 	bl	80007ac <__aeabi_ddiv>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	460b      	mov	r3, r1
 800c9b6:	f7f3 fc19 	bl	80001ec <__adddf3>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	460b      	mov	r3, r1
 800c9be:	a114      	add	r1, pc, #80	; (adr r1, 800ca10 <__ieee754_asin+0x410>)
 800c9c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9c4:	f7f3 fc10 	bl	80001e8 <__aeabi_dsub>
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	4640      	mov	r0, r8
 800c9ce:	4649      	mov	r1, r9
 800c9d0:	f7f3 fc0a 	bl	80001e8 <__aeabi_dsub>
 800c9d4:	465f      	mov	r7, fp
 800c9d6:	4604      	mov	r4, r0
 800c9d8:	460d      	mov	r5, r1
 800c9da:	4632      	mov	r2, r6
 800c9dc:	465b      	mov	r3, fp
 800c9de:	4630      	mov	r0, r6
 800c9e0:	4639      	mov	r1, r7
 800c9e2:	f7f3 fc03 	bl	80001ec <__adddf3>
 800c9e6:	4602      	mov	r2, r0
 800c9e8:	460b      	mov	r3, r1
 800c9ea:	a10b      	add	r1, pc, #44	; (adr r1, 800ca18 <__ieee754_asin+0x418>)
 800c9ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9f0:	f7f3 fbfa 	bl	80001e8 <__aeabi_dsub>
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	460b      	mov	r3, r1
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	4629      	mov	r1, r5
 800c9fc:	f7f3 fbf4 	bl	80001e8 <__aeabi_dsub>
 800ca00:	4602      	mov	r2, r0
 800ca02:	460b      	mov	r3, r1
 800ca04:	a104      	add	r1, pc, #16	; (adr r1, 800ca18 <__ieee754_asin+0x418>)
 800ca06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca0a:	e6dd      	b.n	800c7c8 <__ieee754_asin+0x1c8>
 800ca0c:	f3af 8000 	nop.w
 800ca10:	33145c07 	.word	0x33145c07
 800ca14:	3c91a626 	.word	0x3c91a626
 800ca18:	54442d18 	.word	0x54442d18
 800ca1c:	3fe921fb 	.word	0x3fe921fb

0800ca20 <__ieee754_pow>:
 800ca20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca24:	b091      	sub	sp, #68	; 0x44
 800ca26:	ed8d 1b00 	vstr	d1, [sp]
 800ca2a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ca2e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ca32:	ea58 0302 	orrs.w	r3, r8, r2
 800ca36:	ec57 6b10 	vmov	r6, r7, d0
 800ca3a:	f000 84be 	beq.w	800d3ba <__ieee754_pow+0x99a>
 800ca3e:	4b7a      	ldr	r3, [pc, #488]	; (800cc28 <__ieee754_pow+0x208>)
 800ca40:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ca44:	429c      	cmp	r4, r3
 800ca46:	463d      	mov	r5, r7
 800ca48:	ee10 aa10 	vmov	sl, s0
 800ca4c:	dc09      	bgt.n	800ca62 <__ieee754_pow+0x42>
 800ca4e:	d103      	bne.n	800ca58 <__ieee754_pow+0x38>
 800ca50:	b93e      	cbnz	r6, 800ca62 <__ieee754_pow+0x42>
 800ca52:	45a0      	cmp	r8, r4
 800ca54:	dc0d      	bgt.n	800ca72 <__ieee754_pow+0x52>
 800ca56:	e001      	b.n	800ca5c <__ieee754_pow+0x3c>
 800ca58:	4598      	cmp	r8, r3
 800ca5a:	dc02      	bgt.n	800ca62 <__ieee754_pow+0x42>
 800ca5c:	4598      	cmp	r8, r3
 800ca5e:	d10e      	bne.n	800ca7e <__ieee754_pow+0x5e>
 800ca60:	b16a      	cbz	r2, 800ca7e <__ieee754_pow+0x5e>
 800ca62:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ca66:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ca6a:	ea54 030a 	orrs.w	r3, r4, sl
 800ca6e:	f000 84a4 	beq.w	800d3ba <__ieee754_pow+0x99a>
 800ca72:	486e      	ldr	r0, [pc, #440]	; (800cc2c <__ieee754_pow+0x20c>)
 800ca74:	b011      	add	sp, #68	; 0x44
 800ca76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca7a:	f001 bce1 	b.w	800e440 <nan>
 800ca7e:	2d00      	cmp	r5, #0
 800ca80:	da53      	bge.n	800cb2a <__ieee754_pow+0x10a>
 800ca82:	4b6b      	ldr	r3, [pc, #428]	; (800cc30 <__ieee754_pow+0x210>)
 800ca84:	4598      	cmp	r8, r3
 800ca86:	dc4d      	bgt.n	800cb24 <__ieee754_pow+0x104>
 800ca88:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ca8c:	4598      	cmp	r8, r3
 800ca8e:	dd4c      	ble.n	800cb2a <__ieee754_pow+0x10a>
 800ca90:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ca94:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ca98:	2b14      	cmp	r3, #20
 800ca9a:	dd26      	ble.n	800caea <__ieee754_pow+0xca>
 800ca9c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800caa0:	fa22 f103 	lsr.w	r1, r2, r3
 800caa4:	fa01 f303 	lsl.w	r3, r1, r3
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d13e      	bne.n	800cb2a <__ieee754_pow+0x10a>
 800caac:	f001 0101 	and.w	r1, r1, #1
 800cab0:	f1c1 0b02 	rsb	fp, r1, #2
 800cab4:	2a00      	cmp	r2, #0
 800cab6:	d15b      	bne.n	800cb70 <__ieee754_pow+0x150>
 800cab8:	4b5b      	ldr	r3, [pc, #364]	; (800cc28 <__ieee754_pow+0x208>)
 800caba:	4598      	cmp	r8, r3
 800cabc:	d124      	bne.n	800cb08 <__ieee754_pow+0xe8>
 800cabe:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cac2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cac6:	ea53 030a 	orrs.w	r3, r3, sl
 800caca:	f000 8476 	beq.w	800d3ba <__ieee754_pow+0x99a>
 800cace:	4b59      	ldr	r3, [pc, #356]	; (800cc34 <__ieee754_pow+0x214>)
 800cad0:	429c      	cmp	r4, r3
 800cad2:	dd2d      	ble.n	800cb30 <__ieee754_pow+0x110>
 800cad4:	f1b9 0f00 	cmp.w	r9, #0
 800cad8:	f280 8473 	bge.w	800d3c2 <__ieee754_pow+0x9a2>
 800cadc:	2000      	movs	r0, #0
 800cade:	2100      	movs	r1, #0
 800cae0:	ec41 0b10 	vmov	d0, r0, r1
 800cae4:	b011      	add	sp, #68	; 0x44
 800cae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caea:	2a00      	cmp	r2, #0
 800caec:	d13e      	bne.n	800cb6c <__ieee754_pow+0x14c>
 800caee:	f1c3 0314 	rsb	r3, r3, #20
 800caf2:	fa48 f103 	asr.w	r1, r8, r3
 800caf6:	fa01 f303 	lsl.w	r3, r1, r3
 800cafa:	4543      	cmp	r3, r8
 800cafc:	f040 8469 	bne.w	800d3d2 <__ieee754_pow+0x9b2>
 800cb00:	f001 0101 	and.w	r1, r1, #1
 800cb04:	f1c1 0b02 	rsb	fp, r1, #2
 800cb08:	4b4b      	ldr	r3, [pc, #300]	; (800cc38 <__ieee754_pow+0x218>)
 800cb0a:	4598      	cmp	r8, r3
 800cb0c:	d118      	bne.n	800cb40 <__ieee754_pow+0x120>
 800cb0e:	f1b9 0f00 	cmp.w	r9, #0
 800cb12:	f280 845a 	bge.w	800d3ca <__ieee754_pow+0x9aa>
 800cb16:	4948      	ldr	r1, [pc, #288]	; (800cc38 <__ieee754_pow+0x218>)
 800cb18:	4632      	mov	r2, r6
 800cb1a:	463b      	mov	r3, r7
 800cb1c:	2000      	movs	r0, #0
 800cb1e:	f7f3 fe45 	bl	80007ac <__aeabi_ddiv>
 800cb22:	e7dd      	b.n	800cae0 <__ieee754_pow+0xc0>
 800cb24:	f04f 0b02 	mov.w	fp, #2
 800cb28:	e7c4      	b.n	800cab4 <__ieee754_pow+0x94>
 800cb2a:	f04f 0b00 	mov.w	fp, #0
 800cb2e:	e7c1      	b.n	800cab4 <__ieee754_pow+0x94>
 800cb30:	f1b9 0f00 	cmp.w	r9, #0
 800cb34:	dad2      	bge.n	800cadc <__ieee754_pow+0xbc>
 800cb36:	e9dd 0300 	ldrd	r0, r3, [sp]
 800cb3a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cb3e:	e7cf      	b.n	800cae0 <__ieee754_pow+0xc0>
 800cb40:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800cb44:	d106      	bne.n	800cb54 <__ieee754_pow+0x134>
 800cb46:	4632      	mov	r2, r6
 800cb48:	463b      	mov	r3, r7
 800cb4a:	4610      	mov	r0, r2
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	f7f3 fd03 	bl	8000558 <__aeabi_dmul>
 800cb52:	e7c5      	b.n	800cae0 <__ieee754_pow+0xc0>
 800cb54:	4b39      	ldr	r3, [pc, #228]	; (800cc3c <__ieee754_pow+0x21c>)
 800cb56:	4599      	cmp	r9, r3
 800cb58:	d10a      	bne.n	800cb70 <__ieee754_pow+0x150>
 800cb5a:	2d00      	cmp	r5, #0
 800cb5c:	db08      	blt.n	800cb70 <__ieee754_pow+0x150>
 800cb5e:	ec47 6b10 	vmov	d0, r6, r7
 800cb62:	b011      	add	sp, #68	; 0x44
 800cb64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb68:	f000 be5c 	b.w	800d824 <__ieee754_sqrt>
 800cb6c:	f04f 0b00 	mov.w	fp, #0
 800cb70:	ec47 6b10 	vmov	d0, r6, r7
 800cb74:	f001 fbca 	bl	800e30c <fabs>
 800cb78:	ec51 0b10 	vmov	r0, r1, d0
 800cb7c:	f1ba 0f00 	cmp.w	sl, #0
 800cb80:	d127      	bne.n	800cbd2 <__ieee754_pow+0x1b2>
 800cb82:	b124      	cbz	r4, 800cb8e <__ieee754_pow+0x16e>
 800cb84:	4b2c      	ldr	r3, [pc, #176]	; (800cc38 <__ieee754_pow+0x218>)
 800cb86:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d121      	bne.n	800cbd2 <__ieee754_pow+0x1b2>
 800cb8e:	f1b9 0f00 	cmp.w	r9, #0
 800cb92:	da05      	bge.n	800cba0 <__ieee754_pow+0x180>
 800cb94:	4602      	mov	r2, r0
 800cb96:	460b      	mov	r3, r1
 800cb98:	2000      	movs	r0, #0
 800cb9a:	4927      	ldr	r1, [pc, #156]	; (800cc38 <__ieee754_pow+0x218>)
 800cb9c:	f7f3 fe06 	bl	80007ac <__aeabi_ddiv>
 800cba0:	2d00      	cmp	r5, #0
 800cba2:	da9d      	bge.n	800cae0 <__ieee754_pow+0xc0>
 800cba4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cba8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cbac:	ea54 030b 	orrs.w	r3, r4, fp
 800cbb0:	d108      	bne.n	800cbc4 <__ieee754_pow+0x1a4>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	4610      	mov	r0, r2
 800cbb8:	4619      	mov	r1, r3
 800cbba:	f7f3 fb15 	bl	80001e8 <__aeabi_dsub>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	e7ac      	b.n	800cb1e <__ieee754_pow+0xfe>
 800cbc4:	f1bb 0f01 	cmp.w	fp, #1
 800cbc8:	d18a      	bne.n	800cae0 <__ieee754_pow+0xc0>
 800cbca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cbce:	4619      	mov	r1, r3
 800cbd0:	e786      	b.n	800cae0 <__ieee754_pow+0xc0>
 800cbd2:	0fed      	lsrs	r5, r5, #31
 800cbd4:	1e6b      	subs	r3, r5, #1
 800cbd6:	930d      	str	r3, [sp, #52]	; 0x34
 800cbd8:	ea5b 0303 	orrs.w	r3, fp, r3
 800cbdc:	d102      	bne.n	800cbe4 <__ieee754_pow+0x1c4>
 800cbde:	4632      	mov	r2, r6
 800cbe0:	463b      	mov	r3, r7
 800cbe2:	e7e8      	b.n	800cbb6 <__ieee754_pow+0x196>
 800cbe4:	4b16      	ldr	r3, [pc, #88]	; (800cc40 <__ieee754_pow+0x220>)
 800cbe6:	4598      	cmp	r8, r3
 800cbe8:	f340 80fe 	ble.w	800cde8 <__ieee754_pow+0x3c8>
 800cbec:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800cbf0:	4598      	cmp	r8, r3
 800cbf2:	dd0a      	ble.n	800cc0a <__ieee754_pow+0x1ea>
 800cbf4:	4b0f      	ldr	r3, [pc, #60]	; (800cc34 <__ieee754_pow+0x214>)
 800cbf6:	429c      	cmp	r4, r3
 800cbf8:	dc0d      	bgt.n	800cc16 <__ieee754_pow+0x1f6>
 800cbfa:	f1b9 0f00 	cmp.w	r9, #0
 800cbfe:	f6bf af6d 	bge.w	800cadc <__ieee754_pow+0xbc>
 800cc02:	a307      	add	r3, pc, #28	; (adr r3, 800cc20 <__ieee754_pow+0x200>)
 800cc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc08:	e79f      	b.n	800cb4a <__ieee754_pow+0x12a>
 800cc0a:	4b0e      	ldr	r3, [pc, #56]	; (800cc44 <__ieee754_pow+0x224>)
 800cc0c:	429c      	cmp	r4, r3
 800cc0e:	ddf4      	ble.n	800cbfa <__ieee754_pow+0x1da>
 800cc10:	4b09      	ldr	r3, [pc, #36]	; (800cc38 <__ieee754_pow+0x218>)
 800cc12:	429c      	cmp	r4, r3
 800cc14:	dd18      	ble.n	800cc48 <__ieee754_pow+0x228>
 800cc16:	f1b9 0f00 	cmp.w	r9, #0
 800cc1a:	dcf2      	bgt.n	800cc02 <__ieee754_pow+0x1e2>
 800cc1c:	e75e      	b.n	800cadc <__ieee754_pow+0xbc>
 800cc1e:	bf00      	nop
 800cc20:	8800759c 	.word	0x8800759c
 800cc24:	7e37e43c 	.word	0x7e37e43c
 800cc28:	7ff00000 	.word	0x7ff00000
 800cc2c:	0800ea29 	.word	0x0800ea29
 800cc30:	433fffff 	.word	0x433fffff
 800cc34:	3fefffff 	.word	0x3fefffff
 800cc38:	3ff00000 	.word	0x3ff00000
 800cc3c:	3fe00000 	.word	0x3fe00000
 800cc40:	41e00000 	.word	0x41e00000
 800cc44:	3feffffe 	.word	0x3feffffe
 800cc48:	2200      	movs	r2, #0
 800cc4a:	4b63      	ldr	r3, [pc, #396]	; (800cdd8 <__ieee754_pow+0x3b8>)
 800cc4c:	f7f3 facc 	bl	80001e8 <__aeabi_dsub>
 800cc50:	a355      	add	r3, pc, #340	; (adr r3, 800cda8 <__ieee754_pow+0x388>)
 800cc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc56:	4604      	mov	r4, r0
 800cc58:	460d      	mov	r5, r1
 800cc5a:	f7f3 fc7d 	bl	8000558 <__aeabi_dmul>
 800cc5e:	a354      	add	r3, pc, #336	; (adr r3, 800cdb0 <__ieee754_pow+0x390>)
 800cc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc64:	4606      	mov	r6, r0
 800cc66:	460f      	mov	r7, r1
 800cc68:	4620      	mov	r0, r4
 800cc6a:	4629      	mov	r1, r5
 800cc6c:	f7f3 fc74 	bl	8000558 <__aeabi_dmul>
 800cc70:	2200      	movs	r2, #0
 800cc72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc76:	4b59      	ldr	r3, [pc, #356]	; (800cddc <__ieee754_pow+0x3bc>)
 800cc78:	4620      	mov	r0, r4
 800cc7a:	4629      	mov	r1, r5
 800cc7c:	f7f3 fc6c 	bl	8000558 <__aeabi_dmul>
 800cc80:	4602      	mov	r2, r0
 800cc82:	460b      	mov	r3, r1
 800cc84:	a14c      	add	r1, pc, #304	; (adr r1, 800cdb8 <__ieee754_pow+0x398>)
 800cc86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc8a:	f7f3 faad 	bl	80001e8 <__aeabi_dsub>
 800cc8e:	4622      	mov	r2, r4
 800cc90:	462b      	mov	r3, r5
 800cc92:	f7f3 fc61 	bl	8000558 <__aeabi_dmul>
 800cc96:	4602      	mov	r2, r0
 800cc98:	460b      	mov	r3, r1
 800cc9a:	2000      	movs	r0, #0
 800cc9c:	4950      	ldr	r1, [pc, #320]	; (800cde0 <__ieee754_pow+0x3c0>)
 800cc9e:	f7f3 faa3 	bl	80001e8 <__aeabi_dsub>
 800cca2:	4622      	mov	r2, r4
 800cca4:	462b      	mov	r3, r5
 800cca6:	4680      	mov	r8, r0
 800cca8:	4689      	mov	r9, r1
 800ccaa:	4620      	mov	r0, r4
 800ccac:	4629      	mov	r1, r5
 800ccae:	f7f3 fc53 	bl	8000558 <__aeabi_dmul>
 800ccb2:	4602      	mov	r2, r0
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	4640      	mov	r0, r8
 800ccb8:	4649      	mov	r1, r9
 800ccba:	f7f3 fc4d 	bl	8000558 <__aeabi_dmul>
 800ccbe:	a340      	add	r3, pc, #256	; (adr r3, 800cdc0 <__ieee754_pow+0x3a0>)
 800ccc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc4:	f7f3 fc48 	bl	8000558 <__aeabi_dmul>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	460b      	mov	r3, r1
 800cccc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccd0:	f7f3 fa8a 	bl	80001e8 <__aeabi_dsub>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	460b      	mov	r3, r1
 800ccd8:	4604      	mov	r4, r0
 800ccda:	460d      	mov	r5, r1
 800ccdc:	4630      	mov	r0, r6
 800ccde:	4639      	mov	r1, r7
 800cce0:	f7f3 fa84 	bl	80001ec <__adddf3>
 800cce4:	2000      	movs	r0, #0
 800cce6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ccea:	4632      	mov	r2, r6
 800ccec:	463b      	mov	r3, r7
 800ccee:	f7f3 fa7b 	bl	80001e8 <__aeabi_dsub>
 800ccf2:	4602      	mov	r2, r0
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	4620      	mov	r0, r4
 800ccf8:	4629      	mov	r1, r5
 800ccfa:	f7f3 fa75 	bl	80001e8 <__aeabi_dsub>
 800ccfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd00:	f10b 33ff 	add.w	r3, fp, #4294967295
 800cd04:	4313      	orrs	r3, r2
 800cd06:	4606      	mov	r6, r0
 800cd08:	460f      	mov	r7, r1
 800cd0a:	f040 81eb 	bne.w	800d0e4 <__ieee754_pow+0x6c4>
 800cd0e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800cdc8 <__ieee754_pow+0x3a8>
 800cd12:	e9dd 4500 	ldrd	r4, r5, [sp]
 800cd16:	2400      	movs	r4, #0
 800cd18:	4622      	mov	r2, r4
 800cd1a:	462b      	mov	r3, r5
 800cd1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd20:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cd24:	f7f3 fa60 	bl	80001e8 <__aeabi_dsub>
 800cd28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd2c:	f7f3 fc14 	bl	8000558 <__aeabi_dmul>
 800cd30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd34:	4680      	mov	r8, r0
 800cd36:	4689      	mov	r9, r1
 800cd38:	4630      	mov	r0, r6
 800cd3a:	4639      	mov	r1, r7
 800cd3c:	f7f3 fc0c 	bl	8000558 <__aeabi_dmul>
 800cd40:	4602      	mov	r2, r0
 800cd42:	460b      	mov	r3, r1
 800cd44:	4640      	mov	r0, r8
 800cd46:	4649      	mov	r1, r9
 800cd48:	f7f3 fa50 	bl	80001ec <__adddf3>
 800cd4c:	4622      	mov	r2, r4
 800cd4e:	462b      	mov	r3, r5
 800cd50:	4680      	mov	r8, r0
 800cd52:	4689      	mov	r9, r1
 800cd54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd58:	f7f3 fbfe 	bl	8000558 <__aeabi_dmul>
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	4604      	mov	r4, r0
 800cd60:	460d      	mov	r5, r1
 800cd62:	4602      	mov	r2, r0
 800cd64:	4649      	mov	r1, r9
 800cd66:	4640      	mov	r0, r8
 800cd68:	e9cd 4500 	strd	r4, r5, [sp]
 800cd6c:	f7f3 fa3e 	bl	80001ec <__adddf3>
 800cd70:	4b1c      	ldr	r3, [pc, #112]	; (800cde4 <__ieee754_pow+0x3c4>)
 800cd72:	4299      	cmp	r1, r3
 800cd74:	4606      	mov	r6, r0
 800cd76:	460f      	mov	r7, r1
 800cd78:	468b      	mov	fp, r1
 800cd7a:	f340 82f7 	ble.w	800d36c <__ieee754_pow+0x94c>
 800cd7e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800cd82:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800cd86:	4303      	orrs	r3, r0
 800cd88:	f000 81ea 	beq.w	800d160 <__ieee754_pow+0x740>
 800cd8c:	a310      	add	r3, pc, #64	; (adr r3, 800cdd0 <__ieee754_pow+0x3b0>)
 800cd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd96:	f7f3 fbdf 	bl	8000558 <__aeabi_dmul>
 800cd9a:	a30d      	add	r3, pc, #52	; (adr r3, 800cdd0 <__ieee754_pow+0x3b0>)
 800cd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda0:	e6d5      	b.n	800cb4e <__ieee754_pow+0x12e>
 800cda2:	bf00      	nop
 800cda4:	f3af 8000 	nop.w
 800cda8:	60000000 	.word	0x60000000
 800cdac:	3ff71547 	.word	0x3ff71547
 800cdb0:	f85ddf44 	.word	0xf85ddf44
 800cdb4:	3e54ae0b 	.word	0x3e54ae0b
 800cdb8:	55555555 	.word	0x55555555
 800cdbc:	3fd55555 	.word	0x3fd55555
 800cdc0:	652b82fe 	.word	0x652b82fe
 800cdc4:	3ff71547 	.word	0x3ff71547
 800cdc8:	00000000 	.word	0x00000000
 800cdcc:	bff00000 	.word	0xbff00000
 800cdd0:	8800759c 	.word	0x8800759c
 800cdd4:	7e37e43c 	.word	0x7e37e43c
 800cdd8:	3ff00000 	.word	0x3ff00000
 800cddc:	3fd00000 	.word	0x3fd00000
 800cde0:	3fe00000 	.word	0x3fe00000
 800cde4:	408fffff 	.word	0x408fffff
 800cde8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800cdec:	f04f 0200 	mov.w	r2, #0
 800cdf0:	da05      	bge.n	800cdfe <__ieee754_pow+0x3de>
 800cdf2:	4bd3      	ldr	r3, [pc, #844]	; (800d140 <__ieee754_pow+0x720>)
 800cdf4:	f7f3 fbb0 	bl	8000558 <__aeabi_dmul>
 800cdf8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800cdfc:	460c      	mov	r4, r1
 800cdfe:	1523      	asrs	r3, r4, #20
 800ce00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ce04:	4413      	add	r3, r2
 800ce06:	9309      	str	r3, [sp, #36]	; 0x24
 800ce08:	4bce      	ldr	r3, [pc, #824]	; (800d144 <__ieee754_pow+0x724>)
 800ce0a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ce0e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ce12:	429c      	cmp	r4, r3
 800ce14:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ce18:	dd08      	ble.n	800ce2c <__ieee754_pow+0x40c>
 800ce1a:	4bcb      	ldr	r3, [pc, #812]	; (800d148 <__ieee754_pow+0x728>)
 800ce1c:	429c      	cmp	r4, r3
 800ce1e:	f340 815e 	ble.w	800d0de <__ieee754_pow+0x6be>
 800ce22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce24:	3301      	adds	r3, #1
 800ce26:	9309      	str	r3, [sp, #36]	; 0x24
 800ce28:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ce2c:	f04f 0a00 	mov.w	sl, #0
 800ce30:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800ce34:	930c      	str	r3, [sp, #48]	; 0x30
 800ce36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ce38:	4bc4      	ldr	r3, [pc, #784]	; (800d14c <__ieee754_pow+0x72c>)
 800ce3a:	4413      	add	r3, r2
 800ce3c:	ed93 7b00 	vldr	d7, [r3]
 800ce40:	4629      	mov	r1, r5
 800ce42:	ec53 2b17 	vmov	r2, r3, d7
 800ce46:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ce4a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ce4e:	f7f3 f9cb 	bl	80001e8 <__aeabi_dsub>
 800ce52:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ce56:	4606      	mov	r6, r0
 800ce58:	460f      	mov	r7, r1
 800ce5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce5e:	f7f3 f9c5 	bl	80001ec <__adddf3>
 800ce62:	4602      	mov	r2, r0
 800ce64:	460b      	mov	r3, r1
 800ce66:	2000      	movs	r0, #0
 800ce68:	49b9      	ldr	r1, [pc, #740]	; (800d150 <__ieee754_pow+0x730>)
 800ce6a:	f7f3 fc9f 	bl	80007ac <__aeabi_ddiv>
 800ce6e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ce72:	4602      	mov	r2, r0
 800ce74:	460b      	mov	r3, r1
 800ce76:	4630      	mov	r0, r6
 800ce78:	4639      	mov	r1, r7
 800ce7a:	f7f3 fb6d 	bl	8000558 <__aeabi_dmul>
 800ce7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce82:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ce86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	9302      	str	r3, [sp, #8]
 800ce8e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ce92:	106d      	asrs	r5, r5, #1
 800ce94:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ce98:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800cea2:	4640      	mov	r0, r8
 800cea4:	4649      	mov	r1, r9
 800cea6:	4614      	mov	r4, r2
 800cea8:	461d      	mov	r5, r3
 800ceaa:	f7f3 fb55 	bl	8000558 <__aeabi_dmul>
 800ceae:	4602      	mov	r2, r0
 800ceb0:	460b      	mov	r3, r1
 800ceb2:	4630      	mov	r0, r6
 800ceb4:	4639      	mov	r1, r7
 800ceb6:	f7f3 f997 	bl	80001e8 <__aeabi_dsub>
 800ceba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cebe:	4606      	mov	r6, r0
 800cec0:	460f      	mov	r7, r1
 800cec2:	4620      	mov	r0, r4
 800cec4:	4629      	mov	r1, r5
 800cec6:	f7f3 f98f 	bl	80001e8 <__aeabi_dsub>
 800ceca:	4602      	mov	r2, r0
 800cecc:	460b      	mov	r3, r1
 800cece:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ced2:	f7f3 f989 	bl	80001e8 <__aeabi_dsub>
 800ced6:	4642      	mov	r2, r8
 800ced8:	464b      	mov	r3, r9
 800ceda:	f7f3 fb3d 	bl	8000558 <__aeabi_dmul>
 800cede:	4602      	mov	r2, r0
 800cee0:	460b      	mov	r3, r1
 800cee2:	4630      	mov	r0, r6
 800cee4:	4639      	mov	r1, r7
 800cee6:	f7f3 f97f 	bl	80001e8 <__aeabi_dsub>
 800ceea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ceee:	f7f3 fb33 	bl	8000558 <__aeabi_dmul>
 800cef2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cef6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cefa:	4610      	mov	r0, r2
 800cefc:	4619      	mov	r1, r3
 800cefe:	f7f3 fb2b 	bl	8000558 <__aeabi_dmul>
 800cf02:	a37b      	add	r3, pc, #492	; (adr r3, 800d0f0 <__ieee754_pow+0x6d0>)
 800cf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf08:	4604      	mov	r4, r0
 800cf0a:	460d      	mov	r5, r1
 800cf0c:	f7f3 fb24 	bl	8000558 <__aeabi_dmul>
 800cf10:	a379      	add	r3, pc, #484	; (adr r3, 800d0f8 <__ieee754_pow+0x6d8>)
 800cf12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf16:	f7f3 f969 	bl	80001ec <__adddf3>
 800cf1a:	4622      	mov	r2, r4
 800cf1c:	462b      	mov	r3, r5
 800cf1e:	f7f3 fb1b 	bl	8000558 <__aeabi_dmul>
 800cf22:	a377      	add	r3, pc, #476	; (adr r3, 800d100 <__ieee754_pow+0x6e0>)
 800cf24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf28:	f7f3 f960 	bl	80001ec <__adddf3>
 800cf2c:	4622      	mov	r2, r4
 800cf2e:	462b      	mov	r3, r5
 800cf30:	f7f3 fb12 	bl	8000558 <__aeabi_dmul>
 800cf34:	a374      	add	r3, pc, #464	; (adr r3, 800d108 <__ieee754_pow+0x6e8>)
 800cf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf3a:	f7f3 f957 	bl	80001ec <__adddf3>
 800cf3e:	4622      	mov	r2, r4
 800cf40:	462b      	mov	r3, r5
 800cf42:	f7f3 fb09 	bl	8000558 <__aeabi_dmul>
 800cf46:	a372      	add	r3, pc, #456	; (adr r3, 800d110 <__ieee754_pow+0x6f0>)
 800cf48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4c:	f7f3 f94e 	bl	80001ec <__adddf3>
 800cf50:	4622      	mov	r2, r4
 800cf52:	462b      	mov	r3, r5
 800cf54:	f7f3 fb00 	bl	8000558 <__aeabi_dmul>
 800cf58:	a36f      	add	r3, pc, #444	; (adr r3, 800d118 <__ieee754_pow+0x6f8>)
 800cf5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5e:	f7f3 f945 	bl	80001ec <__adddf3>
 800cf62:	4622      	mov	r2, r4
 800cf64:	4606      	mov	r6, r0
 800cf66:	460f      	mov	r7, r1
 800cf68:	462b      	mov	r3, r5
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	4629      	mov	r1, r5
 800cf6e:	f7f3 faf3 	bl	8000558 <__aeabi_dmul>
 800cf72:	4602      	mov	r2, r0
 800cf74:	460b      	mov	r3, r1
 800cf76:	4630      	mov	r0, r6
 800cf78:	4639      	mov	r1, r7
 800cf7a:	f7f3 faed 	bl	8000558 <__aeabi_dmul>
 800cf7e:	4642      	mov	r2, r8
 800cf80:	4604      	mov	r4, r0
 800cf82:	460d      	mov	r5, r1
 800cf84:	464b      	mov	r3, r9
 800cf86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf8a:	f7f3 f92f 	bl	80001ec <__adddf3>
 800cf8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cf92:	f7f3 fae1 	bl	8000558 <__aeabi_dmul>
 800cf96:	4622      	mov	r2, r4
 800cf98:	462b      	mov	r3, r5
 800cf9a:	f7f3 f927 	bl	80001ec <__adddf3>
 800cf9e:	4642      	mov	r2, r8
 800cfa0:	4606      	mov	r6, r0
 800cfa2:	460f      	mov	r7, r1
 800cfa4:	464b      	mov	r3, r9
 800cfa6:	4640      	mov	r0, r8
 800cfa8:	4649      	mov	r1, r9
 800cfaa:	f7f3 fad5 	bl	8000558 <__aeabi_dmul>
 800cfae:	2200      	movs	r2, #0
 800cfb0:	4b68      	ldr	r3, [pc, #416]	; (800d154 <__ieee754_pow+0x734>)
 800cfb2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cfb6:	f7f3 f919 	bl	80001ec <__adddf3>
 800cfba:	4632      	mov	r2, r6
 800cfbc:	463b      	mov	r3, r7
 800cfbe:	f7f3 f915 	bl	80001ec <__adddf3>
 800cfc2:	9802      	ldr	r0, [sp, #8]
 800cfc4:	460d      	mov	r5, r1
 800cfc6:	4604      	mov	r4, r0
 800cfc8:	4602      	mov	r2, r0
 800cfca:	460b      	mov	r3, r1
 800cfcc:	4640      	mov	r0, r8
 800cfce:	4649      	mov	r1, r9
 800cfd0:	f7f3 fac2 	bl	8000558 <__aeabi_dmul>
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	4680      	mov	r8, r0
 800cfd8:	4689      	mov	r9, r1
 800cfda:	4b5e      	ldr	r3, [pc, #376]	; (800d154 <__ieee754_pow+0x734>)
 800cfdc:	4620      	mov	r0, r4
 800cfde:	4629      	mov	r1, r5
 800cfe0:	f7f3 f902 	bl	80001e8 <__aeabi_dsub>
 800cfe4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cfe8:	f7f3 f8fe 	bl	80001e8 <__aeabi_dsub>
 800cfec:	4602      	mov	r2, r0
 800cfee:	460b      	mov	r3, r1
 800cff0:	4630      	mov	r0, r6
 800cff2:	4639      	mov	r1, r7
 800cff4:	f7f3 f8f8 	bl	80001e8 <__aeabi_dsub>
 800cff8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cffc:	f7f3 faac 	bl	8000558 <__aeabi_dmul>
 800d000:	4622      	mov	r2, r4
 800d002:	4606      	mov	r6, r0
 800d004:	460f      	mov	r7, r1
 800d006:	462b      	mov	r3, r5
 800d008:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d00c:	f7f3 faa4 	bl	8000558 <__aeabi_dmul>
 800d010:	4602      	mov	r2, r0
 800d012:	460b      	mov	r3, r1
 800d014:	4630      	mov	r0, r6
 800d016:	4639      	mov	r1, r7
 800d018:	f7f3 f8e8 	bl	80001ec <__adddf3>
 800d01c:	4606      	mov	r6, r0
 800d01e:	460f      	mov	r7, r1
 800d020:	4602      	mov	r2, r0
 800d022:	460b      	mov	r3, r1
 800d024:	4640      	mov	r0, r8
 800d026:	4649      	mov	r1, r9
 800d028:	f7f3 f8e0 	bl	80001ec <__adddf3>
 800d02c:	9802      	ldr	r0, [sp, #8]
 800d02e:	a33c      	add	r3, pc, #240	; (adr r3, 800d120 <__ieee754_pow+0x700>)
 800d030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d034:	4604      	mov	r4, r0
 800d036:	460d      	mov	r5, r1
 800d038:	f7f3 fa8e 	bl	8000558 <__aeabi_dmul>
 800d03c:	4642      	mov	r2, r8
 800d03e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d042:	464b      	mov	r3, r9
 800d044:	4620      	mov	r0, r4
 800d046:	4629      	mov	r1, r5
 800d048:	f7f3 f8ce 	bl	80001e8 <__aeabi_dsub>
 800d04c:	4602      	mov	r2, r0
 800d04e:	460b      	mov	r3, r1
 800d050:	4630      	mov	r0, r6
 800d052:	4639      	mov	r1, r7
 800d054:	f7f3 f8c8 	bl	80001e8 <__aeabi_dsub>
 800d058:	a333      	add	r3, pc, #204	; (adr r3, 800d128 <__ieee754_pow+0x708>)
 800d05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d05e:	f7f3 fa7b 	bl	8000558 <__aeabi_dmul>
 800d062:	a333      	add	r3, pc, #204	; (adr r3, 800d130 <__ieee754_pow+0x710>)
 800d064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d068:	4606      	mov	r6, r0
 800d06a:	460f      	mov	r7, r1
 800d06c:	4620      	mov	r0, r4
 800d06e:	4629      	mov	r1, r5
 800d070:	f7f3 fa72 	bl	8000558 <__aeabi_dmul>
 800d074:	4602      	mov	r2, r0
 800d076:	460b      	mov	r3, r1
 800d078:	4630      	mov	r0, r6
 800d07a:	4639      	mov	r1, r7
 800d07c:	f7f3 f8b6 	bl	80001ec <__adddf3>
 800d080:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d082:	4b35      	ldr	r3, [pc, #212]	; (800d158 <__ieee754_pow+0x738>)
 800d084:	4413      	add	r3, r2
 800d086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d08a:	f7f3 f8af 	bl	80001ec <__adddf3>
 800d08e:	4604      	mov	r4, r0
 800d090:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d092:	460d      	mov	r5, r1
 800d094:	f7f3 f9f6 	bl	8000484 <__aeabi_i2d>
 800d098:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d09a:	4b30      	ldr	r3, [pc, #192]	; (800d15c <__ieee754_pow+0x73c>)
 800d09c:	4413      	add	r3, r2
 800d09e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d0a2:	4606      	mov	r6, r0
 800d0a4:	460f      	mov	r7, r1
 800d0a6:	4622      	mov	r2, r4
 800d0a8:	462b      	mov	r3, r5
 800d0aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d0ae:	f7f3 f89d 	bl	80001ec <__adddf3>
 800d0b2:	4642      	mov	r2, r8
 800d0b4:	464b      	mov	r3, r9
 800d0b6:	f7f3 f899 	bl	80001ec <__adddf3>
 800d0ba:	4632      	mov	r2, r6
 800d0bc:	463b      	mov	r3, r7
 800d0be:	f7f3 f895 	bl	80001ec <__adddf3>
 800d0c2:	9802      	ldr	r0, [sp, #8]
 800d0c4:	4632      	mov	r2, r6
 800d0c6:	463b      	mov	r3, r7
 800d0c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d0cc:	f7f3 f88c 	bl	80001e8 <__aeabi_dsub>
 800d0d0:	4642      	mov	r2, r8
 800d0d2:	464b      	mov	r3, r9
 800d0d4:	f7f3 f888 	bl	80001e8 <__aeabi_dsub>
 800d0d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d0dc:	e607      	b.n	800ccee <__ieee754_pow+0x2ce>
 800d0de:	f04f 0a01 	mov.w	sl, #1
 800d0e2:	e6a5      	b.n	800ce30 <__ieee754_pow+0x410>
 800d0e4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800d138 <__ieee754_pow+0x718>
 800d0e8:	e613      	b.n	800cd12 <__ieee754_pow+0x2f2>
 800d0ea:	bf00      	nop
 800d0ec:	f3af 8000 	nop.w
 800d0f0:	4a454eef 	.word	0x4a454eef
 800d0f4:	3fca7e28 	.word	0x3fca7e28
 800d0f8:	93c9db65 	.word	0x93c9db65
 800d0fc:	3fcd864a 	.word	0x3fcd864a
 800d100:	a91d4101 	.word	0xa91d4101
 800d104:	3fd17460 	.word	0x3fd17460
 800d108:	518f264d 	.word	0x518f264d
 800d10c:	3fd55555 	.word	0x3fd55555
 800d110:	db6fabff 	.word	0xdb6fabff
 800d114:	3fdb6db6 	.word	0x3fdb6db6
 800d118:	33333303 	.word	0x33333303
 800d11c:	3fe33333 	.word	0x3fe33333
 800d120:	e0000000 	.word	0xe0000000
 800d124:	3feec709 	.word	0x3feec709
 800d128:	dc3a03fd 	.word	0xdc3a03fd
 800d12c:	3feec709 	.word	0x3feec709
 800d130:	145b01f5 	.word	0x145b01f5
 800d134:	be3e2fe0 	.word	0xbe3e2fe0
 800d138:	00000000 	.word	0x00000000
 800d13c:	3ff00000 	.word	0x3ff00000
 800d140:	43400000 	.word	0x43400000
 800d144:	0003988e 	.word	0x0003988e
 800d148:	000bb679 	.word	0x000bb679
 800d14c:	0800ec50 	.word	0x0800ec50
 800d150:	3ff00000 	.word	0x3ff00000
 800d154:	40080000 	.word	0x40080000
 800d158:	0800ec70 	.word	0x0800ec70
 800d15c:	0800ec60 	.word	0x0800ec60
 800d160:	a3b4      	add	r3, pc, #720	; (adr r3, 800d434 <__ieee754_pow+0xa14>)
 800d162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d166:	4640      	mov	r0, r8
 800d168:	4649      	mov	r1, r9
 800d16a:	f7f3 f83f 	bl	80001ec <__adddf3>
 800d16e:	4622      	mov	r2, r4
 800d170:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d174:	462b      	mov	r3, r5
 800d176:	4630      	mov	r0, r6
 800d178:	4639      	mov	r1, r7
 800d17a:	f7f3 f835 	bl	80001e8 <__aeabi_dsub>
 800d17e:	4602      	mov	r2, r0
 800d180:	460b      	mov	r3, r1
 800d182:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d186:	f7f3 fc77 	bl	8000a78 <__aeabi_dcmpgt>
 800d18a:	2800      	cmp	r0, #0
 800d18c:	f47f adfe 	bne.w	800cd8c <__ieee754_pow+0x36c>
 800d190:	4aa3      	ldr	r2, [pc, #652]	; (800d420 <__ieee754_pow+0xa00>)
 800d192:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d196:	4293      	cmp	r3, r2
 800d198:	f340 810a 	ble.w	800d3b0 <__ieee754_pow+0x990>
 800d19c:	151b      	asrs	r3, r3, #20
 800d19e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d1a2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d1a6:	fa4a f303 	asr.w	r3, sl, r3
 800d1aa:	445b      	add	r3, fp
 800d1ac:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d1b0:	4e9c      	ldr	r6, [pc, #624]	; (800d424 <__ieee754_pow+0xa04>)
 800d1b2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d1b6:	4116      	asrs	r6, r2
 800d1b8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d1bc:	2000      	movs	r0, #0
 800d1be:	ea23 0106 	bic.w	r1, r3, r6
 800d1c2:	f1c2 0214 	rsb	r2, r2, #20
 800d1c6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d1ca:	fa4a fa02 	asr.w	sl, sl, r2
 800d1ce:	f1bb 0f00 	cmp.w	fp, #0
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	460b      	mov	r3, r1
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	4629      	mov	r1, r5
 800d1da:	bfb8      	it	lt
 800d1dc:	f1ca 0a00 	rsblt	sl, sl, #0
 800d1e0:	f7f3 f802 	bl	80001e8 <__aeabi_dsub>
 800d1e4:	e9cd 0100 	strd	r0, r1, [sp]
 800d1e8:	4642      	mov	r2, r8
 800d1ea:	464b      	mov	r3, r9
 800d1ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1f0:	f7f2 fffc 	bl	80001ec <__adddf3>
 800d1f4:	2000      	movs	r0, #0
 800d1f6:	a378      	add	r3, pc, #480	; (adr r3, 800d3d8 <__ieee754_pow+0x9b8>)
 800d1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fc:	4604      	mov	r4, r0
 800d1fe:	460d      	mov	r5, r1
 800d200:	f7f3 f9aa 	bl	8000558 <__aeabi_dmul>
 800d204:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d208:	4606      	mov	r6, r0
 800d20a:	460f      	mov	r7, r1
 800d20c:	4620      	mov	r0, r4
 800d20e:	4629      	mov	r1, r5
 800d210:	f7f2 ffea 	bl	80001e8 <__aeabi_dsub>
 800d214:	4602      	mov	r2, r0
 800d216:	460b      	mov	r3, r1
 800d218:	4640      	mov	r0, r8
 800d21a:	4649      	mov	r1, r9
 800d21c:	f7f2 ffe4 	bl	80001e8 <__aeabi_dsub>
 800d220:	a36f      	add	r3, pc, #444	; (adr r3, 800d3e0 <__ieee754_pow+0x9c0>)
 800d222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d226:	f7f3 f997 	bl	8000558 <__aeabi_dmul>
 800d22a:	a36f      	add	r3, pc, #444	; (adr r3, 800d3e8 <__ieee754_pow+0x9c8>)
 800d22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d230:	4680      	mov	r8, r0
 800d232:	4689      	mov	r9, r1
 800d234:	4620      	mov	r0, r4
 800d236:	4629      	mov	r1, r5
 800d238:	f7f3 f98e 	bl	8000558 <__aeabi_dmul>
 800d23c:	4602      	mov	r2, r0
 800d23e:	460b      	mov	r3, r1
 800d240:	4640      	mov	r0, r8
 800d242:	4649      	mov	r1, r9
 800d244:	f7f2 ffd2 	bl	80001ec <__adddf3>
 800d248:	4604      	mov	r4, r0
 800d24a:	460d      	mov	r5, r1
 800d24c:	4602      	mov	r2, r0
 800d24e:	460b      	mov	r3, r1
 800d250:	4630      	mov	r0, r6
 800d252:	4639      	mov	r1, r7
 800d254:	f7f2 ffca 	bl	80001ec <__adddf3>
 800d258:	4632      	mov	r2, r6
 800d25a:	463b      	mov	r3, r7
 800d25c:	4680      	mov	r8, r0
 800d25e:	4689      	mov	r9, r1
 800d260:	f7f2 ffc2 	bl	80001e8 <__aeabi_dsub>
 800d264:	4602      	mov	r2, r0
 800d266:	460b      	mov	r3, r1
 800d268:	4620      	mov	r0, r4
 800d26a:	4629      	mov	r1, r5
 800d26c:	f7f2 ffbc 	bl	80001e8 <__aeabi_dsub>
 800d270:	4642      	mov	r2, r8
 800d272:	4606      	mov	r6, r0
 800d274:	460f      	mov	r7, r1
 800d276:	464b      	mov	r3, r9
 800d278:	4640      	mov	r0, r8
 800d27a:	4649      	mov	r1, r9
 800d27c:	f7f3 f96c 	bl	8000558 <__aeabi_dmul>
 800d280:	a35b      	add	r3, pc, #364	; (adr r3, 800d3f0 <__ieee754_pow+0x9d0>)
 800d282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d286:	4604      	mov	r4, r0
 800d288:	460d      	mov	r5, r1
 800d28a:	f7f3 f965 	bl	8000558 <__aeabi_dmul>
 800d28e:	a35a      	add	r3, pc, #360	; (adr r3, 800d3f8 <__ieee754_pow+0x9d8>)
 800d290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d294:	f7f2 ffa8 	bl	80001e8 <__aeabi_dsub>
 800d298:	4622      	mov	r2, r4
 800d29a:	462b      	mov	r3, r5
 800d29c:	f7f3 f95c 	bl	8000558 <__aeabi_dmul>
 800d2a0:	a357      	add	r3, pc, #348	; (adr r3, 800d400 <__ieee754_pow+0x9e0>)
 800d2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a6:	f7f2 ffa1 	bl	80001ec <__adddf3>
 800d2aa:	4622      	mov	r2, r4
 800d2ac:	462b      	mov	r3, r5
 800d2ae:	f7f3 f953 	bl	8000558 <__aeabi_dmul>
 800d2b2:	a355      	add	r3, pc, #340	; (adr r3, 800d408 <__ieee754_pow+0x9e8>)
 800d2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b8:	f7f2 ff96 	bl	80001e8 <__aeabi_dsub>
 800d2bc:	4622      	mov	r2, r4
 800d2be:	462b      	mov	r3, r5
 800d2c0:	f7f3 f94a 	bl	8000558 <__aeabi_dmul>
 800d2c4:	a352      	add	r3, pc, #328	; (adr r3, 800d410 <__ieee754_pow+0x9f0>)
 800d2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ca:	f7f2 ff8f 	bl	80001ec <__adddf3>
 800d2ce:	4622      	mov	r2, r4
 800d2d0:	462b      	mov	r3, r5
 800d2d2:	f7f3 f941 	bl	8000558 <__aeabi_dmul>
 800d2d6:	4602      	mov	r2, r0
 800d2d8:	460b      	mov	r3, r1
 800d2da:	4640      	mov	r0, r8
 800d2dc:	4649      	mov	r1, r9
 800d2de:	f7f2 ff83 	bl	80001e8 <__aeabi_dsub>
 800d2e2:	4604      	mov	r4, r0
 800d2e4:	460d      	mov	r5, r1
 800d2e6:	4602      	mov	r2, r0
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	4640      	mov	r0, r8
 800d2ec:	4649      	mov	r1, r9
 800d2ee:	f7f3 f933 	bl	8000558 <__aeabi_dmul>
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	e9cd 0100 	strd	r0, r1, [sp]
 800d2f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	4629      	mov	r1, r5
 800d300:	f7f2 ff72 	bl	80001e8 <__aeabi_dsub>
 800d304:	4602      	mov	r2, r0
 800d306:	460b      	mov	r3, r1
 800d308:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d30c:	f7f3 fa4e 	bl	80007ac <__aeabi_ddiv>
 800d310:	4632      	mov	r2, r6
 800d312:	4604      	mov	r4, r0
 800d314:	460d      	mov	r5, r1
 800d316:	463b      	mov	r3, r7
 800d318:	4640      	mov	r0, r8
 800d31a:	4649      	mov	r1, r9
 800d31c:	f7f3 f91c 	bl	8000558 <__aeabi_dmul>
 800d320:	4632      	mov	r2, r6
 800d322:	463b      	mov	r3, r7
 800d324:	f7f2 ff62 	bl	80001ec <__adddf3>
 800d328:	4602      	mov	r2, r0
 800d32a:	460b      	mov	r3, r1
 800d32c:	4620      	mov	r0, r4
 800d32e:	4629      	mov	r1, r5
 800d330:	f7f2 ff5a 	bl	80001e8 <__aeabi_dsub>
 800d334:	4642      	mov	r2, r8
 800d336:	464b      	mov	r3, r9
 800d338:	f7f2 ff56 	bl	80001e8 <__aeabi_dsub>
 800d33c:	4602      	mov	r2, r0
 800d33e:	460b      	mov	r3, r1
 800d340:	2000      	movs	r0, #0
 800d342:	4939      	ldr	r1, [pc, #228]	; (800d428 <__ieee754_pow+0xa08>)
 800d344:	f7f2 ff50 	bl	80001e8 <__aeabi_dsub>
 800d348:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d34c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d350:	4602      	mov	r2, r0
 800d352:	460b      	mov	r3, r1
 800d354:	da2f      	bge.n	800d3b6 <__ieee754_pow+0x996>
 800d356:	4650      	mov	r0, sl
 800d358:	ec43 2b10 	vmov	d0, r2, r3
 800d35c:	f001 f8fc 	bl	800e558 <scalbn>
 800d360:	ec51 0b10 	vmov	r0, r1, d0
 800d364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d368:	f7ff bbf1 	b.w	800cb4e <__ieee754_pow+0x12e>
 800d36c:	4b2f      	ldr	r3, [pc, #188]	; (800d42c <__ieee754_pow+0xa0c>)
 800d36e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d372:	429e      	cmp	r6, r3
 800d374:	f77f af0c 	ble.w	800d190 <__ieee754_pow+0x770>
 800d378:	4b2d      	ldr	r3, [pc, #180]	; (800d430 <__ieee754_pow+0xa10>)
 800d37a:	440b      	add	r3, r1
 800d37c:	4303      	orrs	r3, r0
 800d37e:	d00b      	beq.n	800d398 <__ieee754_pow+0x978>
 800d380:	a325      	add	r3, pc, #148	; (adr r3, 800d418 <__ieee754_pow+0x9f8>)
 800d382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d38a:	f7f3 f8e5 	bl	8000558 <__aeabi_dmul>
 800d38e:	a322      	add	r3, pc, #136	; (adr r3, 800d418 <__ieee754_pow+0x9f8>)
 800d390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d394:	f7ff bbdb 	b.w	800cb4e <__ieee754_pow+0x12e>
 800d398:	4622      	mov	r2, r4
 800d39a:	462b      	mov	r3, r5
 800d39c:	f7f2 ff24 	bl	80001e8 <__aeabi_dsub>
 800d3a0:	4642      	mov	r2, r8
 800d3a2:	464b      	mov	r3, r9
 800d3a4:	f7f3 fb5e 	bl	8000a64 <__aeabi_dcmpge>
 800d3a8:	2800      	cmp	r0, #0
 800d3aa:	f43f aef1 	beq.w	800d190 <__ieee754_pow+0x770>
 800d3ae:	e7e7      	b.n	800d380 <__ieee754_pow+0x960>
 800d3b0:	f04f 0a00 	mov.w	sl, #0
 800d3b4:	e718      	b.n	800d1e8 <__ieee754_pow+0x7c8>
 800d3b6:	4621      	mov	r1, r4
 800d3b8:	e7d4      	b.n	800d364 <__ieee754_pow+0x944>
 800d3ba:	2000      	movs	r0, #0
 800d3bc:	491a      	ldr	r1, [pc, #104]	; (800d428 <__ieee754_pow+0xa08>)
 800d3be:	f7ff bb8f 	b.w	800cae0 <__ieee754_pow+0xc0>
 800d3c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3c6:	f7ff bb8b 	b.w	800cae0 <__ieee754_pow+0xc0>
 800d3ca:	4630      	mov	r0, r6
 800d3cc:	4639      	mov	r1, r7
 800d3ce:	f7ff bb87 	b.w	800cae0 <__ieee754_pow+0xc0>
 800d3d2:	4693      	mov	fp, r2
 800d3d4:	f7ff bb98 	b.w	800cb08 <__ieee754_pow+0xe8>
 800d3d8:	00000000 	.word	0x00000000
 800d3dc:	3fe62e43 	.word	0x3fe62e43
 800d3e0:	fefa39ef 	.word	0xfefa39ef
 800d3e4:	3fe62e42 	.word	0x3fe62e42
 800d3e8:	0ca86c39 	.word	0x0ca86c39
 800d3ec:	be205c61 	.word	0xbe205c61
 800d3f0:	72bea4d0 	.word	0x72bea4d0
 800d3f4:	3e663769 	.word	0x3e663769
 800d3f8:	c5d26bf1 	.word	0xc5d26bf1
 800d3fc:	3ebbbd41 	.word	0x3ebbbd41
 800d400:	af25de2c 	.word	0xaf25de2c
 800d404:	3f11566a 	.word	0x3f11566a
 800d408:	16bebd93 	.word	0x16bebd93
 800d40c:	3f66c16c 	.word	0x3f66c16c
 800d410:	5555553e 	.word	0x5555553e
 800d414:	3fc55555 	.word	0x3fc55555
 800d418:	c2f8f359 	.word	0xc2f8f359
 800d41c:	01a56e1f 	.word	0x01a56e1f
 800d420:	3fe00000 	.word	0x3fe00000
 800d424:	000fffff 	.word	0x000fffff
 800d428:	3ff00000 	.word	0x3ff00000
 800d42c:	4090cbff 	.word	0x4090cbff
 800d430:	3f6f3400 	.word	0x3f6f3400
 800d434:	652b82fe 	.word	0x652b82fe
 800d438:	3c971547 	.word	0x3c971547
 800d43c:	00000000 	.word	0x00000000

0800d440 <__ieee754_rem_pio2>:
 800d440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d444:	ec57 6b10 	vmov	r6, r7, d0
 800d448:	4bc3      	ldr	r3, [pc, #780]	; (800d758 <__ieee754_rem_pio2+0x318>)
 800d44a:	b08d      	sub	sp, #52	; 0x34
 800d44c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d450:	4598      	cmp	r8, r3
 800d452:	4604      	mov	r4, r0
 800d454:	9704      	str	r7, [sp, #16]
 800d456:	dc07      	bgt.n	800d468 <__ieee754_rem_pio2+0x28>
 800d458:	2200      	movs	r2, #0
 800d45a:	2300      	movs	r3, #0
 800d45c:	ed84 0b00 	vstr	d0, [r4]
 800d460:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d464:	2500      	movs	r5, #0
 800d466:	e027      	b.n	800d4b8 <__ieee754_rem_pio2+0x78>
 800d468:	4bbc      	ldr	r3, [pc, #752]	; (800d75c <__ieee754_rem_pio2+0x31c>)
 800d46a:	4598      	cmp	r8, r3
 800d46c:	dc75      	bgt.n	800d55a <__ieee754_rem_pio2+0x11a>
 800d46e:	9b04      	ldr	r3, [sp, #16]
 800d470:	4dbb      	ldr	r5, [pc, #748]	; (800d760 <__ieee754_rem_pio2+0x320>)
 800d472:	2b00      	cmp	r3, #0
 800d474:	ee10 0a10 	vmov	r0, s0
 800d478:	a3a9      	add	r3, pc, #676	; (adr r3, 800d720 <__ieee754_rem_pio2+0x2e0>)
 800d47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d47e:	4639      	mov	r1, r7
 800d480:	dd36      	ble.n	800d4f0 <__ieee754_rem_pio2+0xb0>
 800d482:	f7f2 feb1 	bl	80001e8 <__aeabi_dsub>
 800d486:	45a8      	cmp	r8, r5
 800d488:	4606      	mov	r6, r0
 800d48a:	460f      	mov	r7, r1
 800d48c:	d018      	beq.n	800d4c0 <__ieee754_rem_pio2+0x80>
 800d48e:	a3a6      	add	r3, pc, #664	; (adr r3, 800d728 <__ieee754_rem_pio2+0x2e8>)
 800d490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d494:	f7f2 fea8 	bl	80001e8 <__aeabi_dsub>
 800d498:	4602      	mov	r2, r0
 800d49a:	460b      	mov	r3, r1
 800d49c:	e9c4 2300 	strd	r2, r3, [r4]
 800d4a0:	4630      	mov	r0, r6
 800d4a2:	4639      	mov	r1, r7
 800d4a4:	f7f2 fea0 	bl	80001e8 <__aeabi_dsub>
 800d4a8:	a39f      	add	r3, pc, #636	; (adr r3, 800d728 <__ieee754_rem_pio2+0x2e8>)
 800d4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ae:	f7f2 fe9b 	bl	80001e8 <__aeabi_dsub>
 800d4b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d4b6:	2501      	movs	r5, #1
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	b00d      	add	sp, #52	; 0x34
 800d4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4c0:	a39b      	add	r3, pc, #620	; (adr r3, 800d730 <__ieee754_rem_pio2+0x2f0>)
 800d4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c6:	f7f2 fe8f 	bl	80001e8 <__aeabi_dsub>
 800d4ca:	a39b      	add	r3, pc, #620	; (adr r3, 800d738 <__ieee754_rem_pio2+0x2f8>)
 800d4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d0:	4606      	mov	r6, r0
 800d4d2:	460f      	mov	r7, r1
 800d4d4:	f7f2 fe88 	bl	80001e8 <__aeabi_dsub>
 800d4d8:	4602      	mov	r2, r0
 800d4da:	460b      	mov	r3, r1
 800d4dc:	e9c4 2300 	strd	r2, r3, [r4]
 800d4e0:	4630      	mov	r0, r6
 800d4e2:	4639      	mov	r1, r7
 800d4e4:	f7f2 fe80 	bl	80001e8 <__aeabi_dsub>
 800d4e8:	a393      	add	r3, pc, #588	; (adr r3, 800d738 <__ieee754_rem_pio2+0x2f8>)
 800d4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ee:	e7de      	b.n	800d4ae <__ieee754_rem_pio2+0x6e>
 800d4f0:	f7f2 fe7c 	bl	80001ec <__adddf3>
 800d4f4:	45a8      	cmp	r8, r5
 800d4f6:	4606      	mov	r6, r0
 800d4f8:	460f      	mov	r7, r1
 800d4fa:	d016      	beq.n	800d52a <__ieee754_rem_pio2+0xea>
 800d4fc:	a38a      	add	r3, pc, #552	; (adr r3, 800d728 <__ieee754_rem_pio2+0x2e8>)
 800d4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d502:	f7f2 fe73 	bl	80001ec <__adddf3>
 800d506:	4602      	mov	r2, r0
 800d508:	460b      	mov	r3, r1
 800d50a:	e9c4 2300 	strd	r2, r3, [r4]
 800d50e:	4630      	mov	r0, r6
 800d510:	4639      	mov	r1, r7
 800d512:	f7f2 fe69 	bl	80001e8 <__aeabi_dsub>
 800d516:	a384      	add	r3, pc, #528	; (adr r3, 800d728 <__ieee754_rem_pio2+0x2e8>)
 800d518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51c:	f7f2 fe66 	bl	80001ec <__adddf3>
 800d520:	f04f 35ff 	mov.w	r5, #4294967295
 800d524:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d528:	e7c6      	b.n	800d4b8 <__ieee754_rem_pio2+0x78>
 800d52a:	a381      	add	r3, pc, #516	; (adr r3, 800d730 <__ieee754_rem_pio2+0x2f0>)
 800d52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d530:	f7f2 fe5c 	bl	80001ec <__adddf3>
 800d534:	a380      	add	r3, pc, #512	; (adr r3, 800d738 <__ieee754_rem_pio2+0x2f8>)
 800d536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53a:	4606      	mov	r6, r0
 800d53c:	460f      	mov	r7, r1
 800d53e:	f7f2 fe55 	bl	80001ec <__adddf3>
 800d542:	4602      	mov	r2, r0
 800d544:	460b      	mov	r3, r1
 800d546:	e9c4 2300 	strd	r2, r3, [r4]
 800d54a:	4630      	mov	r0, r6
 800d54c:	4639      	mov	r1, r7
 800d54e:	f7f2 fe4b 	bl	80001e8 <__aeabi_dsub>
 800d552:	a379      	add	r3, pc, #484	; (adr r3, 800d738 <__ieee754_rem_pio2+0x2f8>)
 800d554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d558:	e7e0      	b.n	800d51c <__ieee754_rem_pio2+0xdc>
 800d55a:	4b82      	ldr	r3, [pc, #520]	; (800d764 <__ieee754_rem_pio2+0x324>)
 800d55c:	4598      	cmp	r8, r3
 800d55e:	f300 80d0 	bgt.w	800d702 <__ieee754_rem_pio2+0x2c2>
 800d562:	f000 fed3 	bl	800e30c <fabs>
 800d566:	ec57 6b10 	vmov	r6, r7, d0
 800d56a:	ee10 0a10 	vmov	r0, s0
 800d56e:	a374      	add	r3, pc, #464	; (adr r3, 800d740 <__ieee754_rem_pio2+0x300>)
 800d570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d574:	4639      	mov	r1, r7
 800d576:	f7f2 ffef 	bl	8000558 <__aeabi_dmul>
 800d57a:	2200      	movs	r2, #0
 800d57c:	4b7a      	ldr	r3, [pc, #488]	; (800d768 <__ieee754_rem_pio2+0x328>)
 800d57e:	f7f2 fe35 	bl	80001ec <__adddf3>
 800d582:	f7f3 fa99 	bl	8000ab8 <__aeabi_d2iz>
 800d586:	4605      	mov	r5, r0
 800d588:	f7f2 ff7c 	bl	8000484 <__aeabi_i2d>
 800d58c:	a364      	add	r3, pc, #400	; (adr r3, 800d720 <__ieee754_rem_pio2+0x2e0>)
 800d58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d592:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d596:	f7f2 ffdf 	bl	8000558 <__aeabi_dmul>
 800d59a:	4602      	mov	r2, r0
 800d59c:	460b      	mov	r3, r1
 800d59e:	4630      	mov	r0, r6
 800d5a0:	4639      	mov	r1, r7
 800d5a2:	f7f2 fe21 	bl	80001e8 <__aeabi_dsub>
 800d5a6:	a360      	add	r3, pc, #384	; (adr r3, 800d728 <__ieee754_rem_pio2+0x2e8>)
 800d5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ac:	4682      	mov	sl, r0
 800d5ae:	468b      	mov	fp, r1
 800d5b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5b4:	f7f2 ffd0 	bl	8000558 <__aeabi_dmul>
 800d5b8:	2d1f      	cmp	r5, #31
 800d5ba:	4606      	mov	r6, r0
 800d5bc:	460f      	mov	r7, r1
 800d5be:	dc0c      	bgt.n	800d5da <__ieee754_rem_pio2+0x19a>
 800d5c0:	1e6a      	subs	r2, r5, #1
 800d5c2:	4b6a      	ldr	r3, [pc, #424]	; (800d76c <__ieee754_rem_pio2+0x32c>)
 800d5c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5c8:	4543      	cmp	r3, r8
 800d5ca:	d006      	beq.n	800d5da <__ieee754_rem_pio2+0x19a>
 800d5cc:	4632      	mov	r2, r6
 800d5ce:	463b      	mov	r3, r7
 800d5d0:	4650      	mov	r0, sl
 800d5d2:	4659      	mov	r1, fp
 800d5d4:	f7f2 fe08 	bl	80001e8 <__aeabi_dsub>
 800d5d8:	e00e      	b.n	800d5f8 <__ieee754_rem_pio2+0x1b8>
 800d5da:	4632      	mov	r2, r6
 800d5dc:	463b      	mov	r3, r7
 800d5de:	4650      	mov	r0, sl
 800d5e0:	4659      	mov	r1, fp
 800d5e2:	f7f2 fe01 	bl	80001e8 <__aeabi_dsub>
 800d5e6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d5ea:	9305      	str	r3, [sp, #20]
 800d5ec:	9a05      	ldr	r2, [sp, #20]
 800d5ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d5f2:	1ad3      	subs	r3, r2, r3
 800d5f4:	2b10      	cmp	r3, #16
 800d5f6:	dc02      	bgt.n	800d5fe <__ieee754_rem_pio2+0x1be>
 800d5f8:	e9c4 0100 	strd	r0, r1, [r4]
 800d5fc:	e039      	b.n	800d672 <__ieee754_rem_pio2+0x232>
 800d5fe:	a34c      	add	r3, pc, #304	; (adr r3, 800d730 <__ieee754_rem_pio2+0x2f0>)
 800d600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d604:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d608:	f7f2 ffa6 	bl	8000558 <__aeabi_dmul>
 800d60c:	4606      	mov	r6, r0
 800d60e:	460f      	mov	r7, r1
 800d610:	4602      	mov	r2, r0
 800d612:	460b      	mov	r3, r1
 800d614:	4650      	mov	r0, sl
 800d616:	4659      	mov	r1, fp
 800d618:	f7f2 fde6 	bl	80001e8 <__aeabi_dsub>
 800d61c:	4602      	mov	r2, r0
 800d61e:	460b      	mov	r3, r1
 800d620:	4680      	mov	r8, r0
 800d622:	4689      	mov	r9, r1
 800d624:	4650      	mov	r0, sl
 800d626:	4659      	mov	r1, fp
 800d628:	f7f2 fdde 	bl	80001e8 <__aeabi_dsub>
 800d62c:	4632      	mov	r2, r6
 800d62e:	463b      	mov	r3, r7
 800d630:	f7f2 fdda 	bl	80001e8 <__aeabi_dsub>
 800d634:	a340      	add	r3, pc, #256	; (adr r3, 800d738 <__ieee754_rem_pio2+0x2f8>)
 800d636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d63a:	4606      	mov	r6, r0
 800d63c:	460f      	mov	r7, r1
 800d63e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d642:	f7f2 ff89 	bl	8000558 <__aeabi_dmul>
 800d646:	4632      	mov	r2, r6
 800d648:	463b      	mov	r3, r7
 800d64a:	f7f2 fdcd 	bl	80001e8 <__aeabi_dsub>
 800d64e:	4602      	mov	r2, r0
 800d650:	460b      	mov	r3, r1
 800d652:	4606      	mov	r6, r0
 800d654:	460f      	mov	r7, r1
 800d656:	4640      	mov	r0, r8
 800d658:	4649      	mov	r1, r9
 800d65a:	f7f2 fdc5 	bl	80001e8 <__aeabi_dsub>
 800d65e:	9a05      	ldr	r2, [sp, #20]
 800d660:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d664:	1ad3      	subs	r3, r2, r3
 800d666:	2b31      	cmp	r3, #49	; 0x31
 800d668:	dc20      	bgt.n	800d6ac <__ieee754_rem_pio2+0x26c>
 800d66a:	e9c4 0100 	strd	r0, r1, [r4]
 800d66e:	46c2      	mov	sl, r8
 800d670:	46cb      	mov	fp, r9
 800d672:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d676:	4650      	mov	r0, sl
 800d678:	4642      	mov	r2, r8
 800d67a:	464b      	mov	r3, r9
 800d67c:	4659      	mov	r1, fp
 800d67e:	f7f2 fdb3 	bl	80001e8 <__aeabi_dsub>
 800d682:	463b      	mov	r3, r7
 800d684:	4632      	mov	r2, r6
 800d686:	f7f2 fdaf 	bl	80001e8 <__aeabi_dsub>
 800d68a:	9b04      	ldr	r3, [sp, #16]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d692:	f6bf af11 	bge.w	800d4b8 <__ieee754_rem_pio2+0x78>
 800d696:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d69a:	6063      	str	r3, [r4, #4]
 800d69c:	f8c4 8000 	str.w	r8, [r4]
 800d6a0:	60a0      	str	r0, [r4, #8]
 800d6a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6a6:	60e3      	str	r3, [r4, #12]
 800d6a8:	426d      	negs	r5, r5
 800d6aa:	e705      	b.n	800d4b8 <__ieee754_rem_pio2+0x78>
 800d6ac:	a326      	add	r3, pc, #152	; (adr r3, 800d748 <__ieee754_rem_pio2+0x308>)
 800d6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6b6:	f7f2 ff4f 	bl	8000558 <__aeabi_dmul>
 800d6ba:	4606      	mov	r6, r0
 800d6bc:	460f      	mov	r7, r1
 800d6be:	4602      	mov	r2, r0
 800d6c0:	460b      	mov	r3, r1
 800d6c2:	4640      	mov	r0, r8
 800d6c4:	4649      	mov	r1, r9
 800d6c6:	f7f2 fd8f 	bl	80001e8 <__aeabi_dsub>
 800d6ca:	4602      	mov	r2, r0
 800d6cc:	460b      	mov	r3, r1
 800d6ce:	4682      	mov	sl, r0
 800d6d0:	468b      	mov	fp, r1
 800d6d2:	4640      	mov	r0, r8
 800d6d4:	4649      	mov	r1, r9
 800d6d6:	f7f2 fd87 	bl	80001e8 <__aeabi_dsub>
 800d6da:	4632      	mov	r2, r6
 800d6dc:	463b      	mov	r3, r7
 800d6de:	f7f2 fd83 	bl	80001e8 <__aeabi_dsub>
 800d6e2:	a31b      	add	r3, pc, #108	; (adr r3, 800d750 <__ieee754_rem_pio2+0x310>)
 800d6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e8:	4606      	mov	r6, r0
 800d6ea:	460f      	mov	r7, r1
 800d6ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6f0:	f7f2 ff32 	bl	8000558 <__aeabi_dmul>
 800d6f4:	4632      	mov	r2, r6
 800d6f6:	463b      	mov	r3, r7
 800d6f8:	f7f2 fd76 	bl	80001e8 <__aeabi_dsub>
 800d6fc:	4606      	mov	r6, r0
 800d6fe:	460f      	mov	r7, r1
 800d700:	e764      	b.n	800d5cc <__ieee754_rem_pio2+0x18c>
 800d702:	4b1b      	ldr	r3, [pc, #108]	; (800d770 <__ieee754_rem_pio2+0x330>)
 800d704:	4598      	cmp	r8, r3
 800d706:	dd35      	ble.n	800d774 <__ieee754_rem_pio2+0x334>
 800d708:	ee10 2a10 	vmov	r2, s0
 800d70c:	463b      	mov	r3, r7
 800d70e:	4630      	mov	r0, r6
 800d710:	4639      	mov	r1, r7
 800d712:	f7f2 fd69 	bl	80001e8 <__aeabi_dsub>
 800d716:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d71a:	e9c4 0100 	strd	r0, r1, [r4]
 800d71e:	e6a1      	b.n	800d464 <__ieee754_rem_pio2+0x24>
 800d720:	54400000 	.word	0x54400000
 800d724:	3ff921fb 	.word	0x3ff921fb
 800d728:	1a626331 	.word	0x1a626331
 800d72c:	3dd0b461 	.word	0x3dd0b461
 800d730:	1a600000 	.word	0x1a600000
 800d734:	3dd0b461 	.word	0x3dd0b461
 800d738:	2e037073 	.word	0x2e037073
 800d73c:	3ba3198a 	.word	0x3ba3198a
 800d740:	6dc9c883 	.word	0x6dc9c883
 800d744:	3fe45f30 	.word	0x3fe45f30
 800d748:	2e000000 	.word	0x2e000000
 800d74c:	3ba3198a 	.word	0x3ba3198a
 800d750:	252049c1 	.word	0x252049c1
 800d754:	397b839a 	.word	0x397b839a
 800d758:	3fe921fb 	.word	0x3fe921fb
 800d75c:	4002d97b 	.word	0x4002d97b
 800d760:	3ff921fb 	.word	0x3ff921fb
 800d764:	413921fb 	.word	0x413921fb
 800d768:	3fe00000 	.word	0x3fe00000
 800d76c:	0800ec80 	.word	0x0800ec80
 800d770:	7fefffff 	.word	0x7fefffff
 800d774:	ea4f 5528 	mov.w	r5, r8, asr #20
 800d778:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800d77c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800d780:	4630      	mov	r0, r6
 800d782:	460f      	mov	r7, r1
 800d784:	f7f3 f998 	bl	8000ab8 <__aeabi_d2iz>
 800d788:	f7f2 fe7c 	bl	8000484 <__aeabi_i2d>
 800d78c:	4602      	mov	r2, r0
 800d78e:	460b      	mov	r3, r1
 800d790:	4630      	mov	r0, r6
 800d792:	4639      	mov	r1, r7
 800d794:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d798:	f7f2 fd26 	bl	80001e8 <__aeabi_dsub>
 800d79c:	2200      	movs	r2, #0
 800d79e:	4b1f      	ldr	r3, [pc, #124]	; (800d81c <__ieee754_rem_pio2+0x3dc>)
 800d7a0:	f7f2 feda 	bl	8000558 <__aeabi_dmul>
 800d7a4:	460f      	mov	r7, r1
 800d7a6:	4606      	mov	r6, r0
 800d7a8:	f7f3 f986 	bl	8000ab8 <__aeabi_d2iz>
 800d7ac:	f7f2 fe6a 	bl	8000484 <__aeabi_i2d>
 800d7b0:	4602      	mov	r2, r0
 800d7b2:	460b      	mov	r3, r1
 800d7b4:	4630      	mov	r0, r6
 800d7b6:	4639      	mov	r1, r7
 800d7b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d7bc:	f7f2 fd14 	bl	80001e8 <__aeabi_dsub>
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	4b16      	ldr	r3, [pc, #88]	; (800d81c <__ieee754_rem_pio2+0x3dc>)
 800d7c4:	f7f2 fec8 	bl	8000558 <__aeabi_dmul>
 800d7c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d7cc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800d7d0:	f04f 0803 	mov.w	r8, #3
 800d7d4:	2600      	movs	r6, #0
 800d7d6:	2700      	movs	r7, #0
 800d7d8:	4632      	mov	r2, r6
 800d7da:	463b      	mov	r3, r7
 800d7dc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d7e0:	f108 3aff 	add.w	sl, r8, #4294967295
 800d7e4:	f7f3 f920 	bl	8000a28 <__aeabi_dcmpeq>
 800d7e8:	b9b0      	cbnz	r0, 800d818 <__ieee754_rem_pio2+0x3d8>
 800d7ea:	4b0d      	ldr	r3, [pc, #52]	; (800d820 <__ieee754_rem_pio2+0x3e0>)
 800d7ec:	9301      	str	r3, [sp, #4]
 800d7ee:	2302      	movs	r3, #2
 800d7f0:	9300      	str	r3, [sp, #0]
 800d7f2:	462a      	mov	r2, r5
 800d7f4:	4643      	mov	r3, r8
 800d7f6:	4621      	mov	r1, r4
 800d7f8:	a806      	add	r0, sp, #24
 800d7fa:	f000 f98d 	bl	800db18 <__kernel_rem_pio2>
 800d7fe:	9b04      	ldr	r3, [sp, #16]
 800d800:	2b00      	cmp	r3, #0
 800d802:	4605      	mov	r5, r0
 800d804:	f6bf ae58 	bge.w	800d4b8 <__ieee754_rem_pio2+0x78>
 800d808:	6863      	ldr	r3, [r4, #4]
 800d80a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d80e:	6063      	str	r3, [r4, #4]
 800d810:	68e3      	ldr	r3, [r4, #12]
 800d812:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d816:	e746      	b.n	800d6a6 <__ieee754_rem_pio2+0x266>
 800d818:	46d0      	mov	r8, sl
 800d81a:	e7dd      	b.n	800d7d8 <__ieee754_rem_pio2+0x398>
 800d81c:	41700000 	.word	0x41700000
 800d820:	0800ed00 	.word	0x0800ed00

0800d824 <__ieee754_sqrt>:
 800d824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d828:	4955      	ldr	r1, [pc, #340]	; (800d980 <__ieee754_sqrt+0x15c>)
 800d82a:	ec55 4b10 	vmov	r4, r5, d0
 800d82e:	43a9      	bics	r1, r5
 800d830:	462b      	mov	r3, r5
 800d832:	462a      	mov	r2, r5
 800d834:	d112      	bne.n	800d85c <__ieee754_sqrt+0x38>
 800d836:	ee10 2a10 	vmov	r2, s0
 800d83a:	ee10 0a10 	vmov	r0, s0
 800d83e:	4629      	mov	r1, r5
 800d840:	f7f2 fe8a 	bl	8000558 <__aeabi_dmul>
 800d844:	4602      	mov	r2, r0
 800d846:	460b      	mov	r3, r1
 800d848:	4620      	mov	r0, r4
 800d84a:	4629      	mov	r1, r5
 800d84c:	f7f2 fcce 	bl	80001ec <__adddf3>
 800d850:	4604      	mov	r4, r0
 800d852:	460d      	mov	r5, r1
 800d854:	ec45 4b10 	vmov	d0, r4, r5
 800d858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d85c:	2d00      	cmp	r5, #0
 800d85e:	ee10 0a10 	vmov	r0, s0
 800d862:	4621      	mov	r1, r4
 800d864:	dc0f      	bgt.n	800d886 <__ieee754_sqrt+0x62>
 800d866:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d86a:	4330      	orrs	r0, r6
 800d86c:	d0f2      	beq.n	800d854 <__ieee754_sqrt+0x30>
 800d86e:	b155      	cbz	r5, 800d886 <__ieee754_sqrt+0x62>
 800d870:	ee10 2a10 	vmov	r2, s0
 800d874:	4620      	mov	r0, r4
 800d876:	4629      	mov	r1, r5
 800d878:	f7f2 fcb6 	bl	80001e8 <__aeabi_dsub>
 800d87c:	4602      	mov	r2, r0
 800d87e:	460b      	mov	r3, r1
 800d880:	f7f2 ff94 	bl	80007ac <__aeabi_ddiv>
 800d884:	e7e4      	b.n	800d850 <__ieee754_sqrt+0x2c>
 800d886:	151b      	asrs	r3, r3, #20
 800d888:	d073      	beq.n	800d972 <__ieee754_sqrt+0x14e>
 800d88a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d88e:	07dd      	lsls	r5, r3, #31
 800d890:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d894:	bf48      	it	mi
 800d896:	0fc8      	lsrmi	r0, r1, #31
 800d898:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d89c:	bf44      	itt	mi
 800d89e:	0049      	lslmi	r1, r1, #1
 800d8a0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800d8a4:	2500      	movs	r5, #0
 800d8a6:	1058      	asrs	r0, r3, #1
 800d8a8:	0fcb      	lsrs	r3, r1, #31
 800d8aa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800d8ae:	0049      	lsls	r1, r1, #1
 800d8b0:	2316      	movs	r3, #22
 800d8b2:	462c      	mov	r4, r5
 800d8b4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800d8b8:	19a7      	adds	r7, r4, r6
 800d8ba:	4297      	cmp	r7, r2
 800d8bc:	bfde      	ittt	le
 800d8be:	19bc      	addle	r4, r7, r6
 800d8c0:	1bd2      	suble	r2, r2, r7
 800d8c2:	19ad      	addle	r5, r5, r6
 800d8c4:	0fcf      	lsrs	r7, r1, #31
 800d8c6:	3b01      	subs	r3, #1
 800d8c8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800d8cc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d8d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d8d4:	d1f0      	bne.n	800d8b8 <__ieee754_sqrt+0x94>
 800d8d6:	f04f 0c20 	mov.w	ip, #32
 800d8da:	469e      	mov	lr, r3
 800d8dc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d8e0:	42a2      	cmp	r2, r4
 800d8e2:	eb06 070e 	add.w	r7, r6, lr
 800d8e6:	dc02      	bgt.n	800d8ee <__ieee754_sqrt+0xca>
 800d8e8:	d112      	bne.n	800d910 <__ieee754_sqrt+0xec>
 800d8ea:	428f      	cmp	r7, r1
 800d8ec:	d810      	bhi.n	800d910 <__ieee754_sqrt+0xec>
 800d8ee:	2f00      	cmp	r7, #0
 800d8f0:	eb07 0e06 	add.w	lr, r7, r6
 800d8f4:	da42      	bge.n	800d97c <__ieee754_sqrt+0x158>
 800d8f6:	f1be 0f00 	cmp.w	lr, #0
 800d8fa:	db3f      	blt.n	800d97c <__ieee754_sqrt+0x158>
 800d8fc:	f104 0801 	add.w	r8, r4, #1
 800d900:	1b12      	subs	r2, r2, r4
 800d902:	428f      	cmp	r7, r1
 800d904:	bf88      	it	hi
 800d906:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800d90a:	1bc9      	subs	r1, r1, r7
 800d90c:	4433      	add	r3, r6
 800d90e:	4644      	mov	r4, r8
 800d910:	0052      	lsls	r2, r2, #1
 800d912:	f1bc 0c01 	subs.w	ip, ip, #1
 800d916:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800d91a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d91e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d922:	d1dd      	bne.n	800d8e0 <__ieee754_sqrt+0xbc>
 800d924:	430a      	orrs	r2, r1
 800d926:	d006      	beq.n	800d936 <__ieee754_sqrt+0x112>
 800d928:	1c5c      	adds	r4, r3, #1
 800d92a:	bf13      	iteet	ne
 800d92c:	3301      	addne	r3, #1
 800d92e:	3501      	addeq	r5, #1
 800d930:	4663      	moveq	r3, ip
 800d932:	f023 0301 	bicne.w	r3, r3, #1
 800d936:	106a      	asrs	r2, r5, #1
 800d938:	085b      	lsrs	r3, r3, #1
 800d93a:	07e9      	lsls	r1, r5, #31
 800d93c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d940:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d944:	bf48      	it	mi
 800d946:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d94a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800d94e:	461c      	mov	r4, r3
 800d950:	e780      	b.n	800d854 <__ieee754_sqrt+0x30>
 800d952:	0aca      	lsrs	r2, r1, #11
 800d954:	3815      	subs	r0, #21
 800d956:	0549      	lsls	r1, r1, #21
 800d958:	2a00      	cmp	r2, #0
 800d95a:	d0fa      	beq.n	800d952 <__ieee754_sqrt+0x12e>
 800d95c:	02d6      	lsls	r6, r2, #11
 800d95e:	d50a      	bpl.n	800d976 <__ieee754_sqrt+0x152>
 800d960:	f1c3 0420 	rsb	r4, r3, #32
 800d964:	fa21 f404 	lsr.w	r4, r1, r4
 800d968:	1e5d      	subs	r5, r3, #1
 800d96a:	4099      	lsls	r1, r3
 800d96c:	4322      	orrs	r2, r4
 800d96e:	1b43      	subs	r3, r0, r5
 800d970:	e78b      	b.n	800d88a <__ieee754_sqrt+0x66>
 800d972:	4618      	mov	r0, r3
 800d974:	e7f0      	b.n	800d958 <__ieee754_sqrt+0x134>
 800d976:	0052      	lsls	r2, r2, #1
 800d978:	3301      	adds	r3, #1
 800d97a:	e7ef      	b.n	800d95c <__ieee754_sqrt+0x138>
 800d97c:	46a0      	mov	r8, r4
 800d97e:	e7bf      	b.n	800d900 <__ieee754_sqrt+0xdc>
 800d980:	7ff00000 	.word	0x7ff00000
 800d984:	00000000 	.word	0x00000000

0800d988 <__kernel_cos>:
 800d988:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d98c:	ec59 8b10 	vmov	r8, r9, d0
 800d990:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800d994:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800d998:	ed2d 8b02 	vpush	{d8}
 800d99c:	eeb0 8a41 	vmov.f32	s16, s2
 800d9a0:	eef0 8a61 	vmov.f32	s17, s3
 800d9a4:	da07      	bge.n	800d9b6 <__kernel_cos+0x2e>
 800d9a6:	ee10 0a10 	vmov	r0, s0
 800d9aa:	4649      	mov	r1, r9
 800d9ac:	f7f3 f884 	bl	8000ab8 <__aeabi_d2iz>
 800d9b0:	2800      	cmp	r0, #0
 800d9b2:	f000 8089 	beq.w	800dac8 <__kernel_cos+0x140>
 800d9b6:	4642      	mov	r2, r8
 800d9b8:	464b      	mov	r3, r9
 800d9ba:	4640      	mov	r0, r8
 800d9bc:	4649      	mov	r1, r9
 800d9be:	f7f2 fdcb 	bl	8000558 <__aeabi_dmul>
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	4b4e      	ldr	r3, [pc, #312]	; (800db00 <__kernel_cos+0x178>)
 800d9c6:	4604      	mov	r4, r0
 800d9c8:	460d      	mov	r5, r1
 800d9ca:	f7f2 fdc5 	bl	8000558 <__aeabi_dmul>
 800d9ce:	a340      	add	r3, pc, #256	; (adr r3, 800dad0 <__kernel_cos+0x148>)
 800d9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d4:	4682      	mov	sl, r0
 800d9d6:	468b      	mov	fp, r1
 800d9d8:	4620      	mov	r0, r4
 800d9da:	4629      	mov	r1, r5
 800d9dc:	f7f2 fdbc 	bl	8000558 <__aeabi_dmul>
 800d9e0:	a33d      	add	r3, pc, #244	; (adr r3, 800dad8 <__kernel_cos+0x150>)
 800d9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e6:	f7f2 fc01 	bl	80001ec <__adddf3>
 800d9ea:	4622      	mov	r2, r4
 800d9ec:	462b      	mov	r3, r5
 800d9ee:	f7f2 fdb3 	bl	8000558 <__aeabi_dmul>
 800d9f2:	a33b      	add	r3, pc, #236	; (adr r3, 800dae0 <__kernel_cos+0x158>)
 800d9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f8:	f7f2 fbf6 	bl	80001e8 <__aeabi_dsub>
 800d9fc:	4622      	mov	r2, r4
 800d9fe:	462b      	mov	r3, r5
 800da00:	f7f2 fdaa 	bl	8000558 <__aeabi_dmul>
 800da04:	a338      	add	r3, pc, #224	; (adr r3, 800dae8 <__kernel_cos+0x160>)
 800da06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0a:	f7f2 fbef 	bl	80001ec <__adddf3>
 800da0e:	4622      	mov	r2, r4
 800da10:	462b      	mov	r3, r5
 800da12:	f7f2 fda1 	bl	8000558 <__aeabi_dmul>
 800da16:	a336      	add	r3, pc, #216	; (adr r3, 800daf0 <__kernel_cos+0x168>)
 800da18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1c:	f7f2 fbe4 	bl	80001e8 <__aeabi_dsub>
 800da20:	4622      	mov	r2, r4
 800da22:	462b      	mov	r3, r5
 800da24:	f7f2 fd98 	bl	8000558 <__aeabi_dmul>
 800da28:	a333      	add	r3, pc, #204	; (adr r3, 800daf8 <__kernel_cos+0x170>)
 800da2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da2e:	f7f2 fbdd 	bl	80001ec <__adddf3>
 800da32:	4622      	mov	r2, r4
 800da34:	462b      	mov	r3, r5
 800da36:	f7f2 fd8f 	bl	8000558 <__aeabi_dmul>
 800da3a:	4622      	mov	r2, r4
 800da3c:	462b      	mov	r3, r5
 800da3e:	f7f2 fd8b 	bl	8000558 <__aeabi_dmul>
 800da42:	ec53 2b18 	vmov	r2, r3, d8
 800da46:	4604      	mov	r4, r0
 800da48:	460d      	mov	r5, r1
 800da4a:	4640      	mov	r0, r8
 800da4c:	4649      	mov	r1, r9
 800da4e:	f7f2 fd83 	bl	8000558 <__aeabi_dmul>
 800da52:	460b      	mov	r3, r1
 800da54:	4602      	mov	r2, r0
 800da56:	4629      	mov	r1, r5
 800da58:	4620      	mov	r0, r4
 800da5a:	f7f2 fbc5 	bl	80001e8 <__aeabi_dsub>
 800da5e:	4b29      	ldr	r3, [pc, #164]	; (800db04 <__kernel_cos+0x17c>)
 800da60:	429e      	cmp	r6, r3
 800da62:	4680      	mov	r8, r0
 800da64:	4689      	mov	r9, r1
 800da66:	dc11      	bgt.n	800da8c <__kernel_cos+0x104>
 800da68:	4602      	mov	r2, r0
 800da6a:	460b      	mov	r3, r1
 800da6c:	4650      	mov	r0, sl
 800da6e:	4659      	mov	r1, fp
 800da70:	f7f2 fbba 	bl	80001e8 <__aeabi_dsub>
 800da74:	460b      	mov	r3, r1
 800da76:	4924      	ldr	r1, [pc, #144]	; (800db08 <__kernel_cos+0x180>)
 800da78:	4602      	mov	r2, r0
 800da7a:	2000      	movs	r0, #0
 800da7c:	f7f2 fbb4 	bl	80001e8 <__aeabi_dsub>
 800da80:	ecbd 8b02 	vpop	{d8}
 800da84:	ec41 0b10 	vmov	d0, r0, r1
 800da88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da8c:	4b1f      	ldr	r3, [pc, #124]	; (800db0c <__kernel_cos+0x184>)
 800da8e:	491e      	ldr	r1, [pc, #120]	; (800db08 <__kernel_cos+0x180>)
 800da90:	429e      	cmp	r6, r3
 800da92:	bfcc      	ite	gt
 800da94:	4d1e      	ldrgt	r5, [pc, #120]	; (800db10 <__kernel_cos+0x188>)
 800da96:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800da9a:	2400      	movs	r4, #0
 800da9c:	4622      	mov	r2, r4
 800da9e:	462b      	mov	r3, r5
 800daa0:	2000      	movs	r0, #0
 800daa2:	f7f2 fba1 	bl	80001e8 <__aeabi_dsub>
 800daa6:	4622      	mov	r2, r4
 800daa8:	4606      	mov	r6, r0
 800daaa:	460f      	mov	r7, r1
 800daac:	462b      	mov	r3, r5
 800daae:	4650      	mov	r0, sl
 800dab0:	4659      	mov	r1, fp
 800dab2:	f7f2 fb99 	bl	80001e8 <__aeabi_dsub>
 800dab6:	4642      	mov	r2, r8
 800dab8:	464b      	mov	r3, r9
 800daba:	f7f2 fb95 	bl	80001e8 <__aeabi_dsub>
 800dabe:	4602      	mov	r2, r0
 800dac0:	460b      	mov	r3, r1
 800dac2:	4630      	mov	r0, r6
 800dac4:	4639      	mov	r1, r7
 800dac6:	e7d9      	b.n	800da7c <__kernel_cos+0xf4>
 800dac8:	2000      	movs	r0, #0
 800daca:	490f      	ldr	r1, [pc, #60]	; (800db08 <__kernel_cos+0x180>)
 800dacc:	e7d8      	b.n	800da80 <__kernel_cos+0xf8>
 800dace:	bf00      	nop
 800dad0:	be8838d4 	.word	0xbe8838d4
 800dad4:	bda8fae9 	.word	0xbda8fae9
 800dad8:	bdb4b1c4 	.word	0xbdb4b1c4
 800dadc:	3e21ee9e 	.word	0x3e21ee9e
 800dae0:	809c52ad 	.word	0x809c52ad
 800dae4:	3e927e4f 	.word	0x3e927e4f
 800dae8:	19cb1590 	.word	0x19cb1590
 800daec:	3efa01a0 	.word	0x3efa01a0
 800daf0:	16c15177 	.word	0x16c15177
 800daf4:	3f56c16c 	.word	0x3f56c16c
 800daf8:	5555554c 	.word	0x5555554c
 800dafc:	3fa55555 	.word	0x3fa55555
 800db00:	3fe00000 	.word	0x3fe00000
 800db04:	3fd33332 	.word	0x3fd33332
 800db08:	3ff00000 	.word	0x3ff00000
 800db0c:	3fe90000 	.word	0x3fe90000
 800db10:	3fd20000 	.word	0x3fd20000
 800db14:	00000000 	.word	0x00000000

0800db18 <__kernel_rem_pio2>:
 800db18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db1c:	ed2d 8b02 	vpush	{d8}
 800db20:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800db24:	1ed4      	subs	r4, r2, #3
 800db26:	9308      	str	r3, [sp, #32]
 800db28:	9101      	str	r1, [sp, #4]
 800db2a:	4bc5      	ldr	r3, [pc, #788]	; (800de40 <__kernel_rem_pio2+0x328>)
 800db2c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800db2e:	9009      	str	r0, [sp, #36]	; 0x24
 800db30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800db34:	9304      	str	r3, [sp, #16]
 800db36:	9b08      	ldr	r3, [sp, #32]
 800db38:	3b01      	subs	r3, #1
 800db3a:	9307      	str	r3, [sp, #28]
 800db3c:	2318      	movs	r3, #24
 800db3e:	fb94 f4f3 	sdiv	r4, r4, r3
 800db42:	f06f 0317 	mvn.w	r3, #23
 800db46:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800db4a:	fb04 3303 	mla	r3, r4, r3, r3
 800db4e:	eb03 0a02 	add.w	sl, r3, r2
 800db52:	9b04      	ldr	r3, [sp, #16]
 800db54:	9a07      	ldr	r2, [sp, #28]
 800db56:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800de30 <__kernel_rem_pio2+0x318>
 800db5a:	eb03 0802 	add.w	r8, r3, r2
 800db5e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800db60:	1aa7      	subs	r7, r4, r2
 800db62:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800db66:	ae22      	add	r6, sp, #136	; 0x88
 800db68:	2500      	movs	r5, #0
 800db6a:	4545      	cmp	r5, r8
 800db6c:	dd13      	ble.n	800db96 <__kernel_rem_pio2+0x7e>
 800db6e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800de30 <__kernel_rem_pio2+0x318>
 800db72:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800db76:	2600      	movs	r6, #0
 800db78:	9b04      	ldr	r3, [sp, #16]
 800db7a:	429e      	cmp	r6, r3
 800db7c:	dc32      	bgt.n	800dbe4 <__kernel_rem_pio2+0xcc>
 800db7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db80:	9302      	str	r3, [sp, #8]
 800db82:	9b08      	ldr	r3, [sp, #32]
 800db84:	199d      	adds	r5, r3, r6
 800db86:	ab22      	add	r3, sp, #136	; 0x88
 800db88:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800db8c:	9306      	str	r3, [sp, #24]
 800db8e:	ec59 8b18 	vmov	r8, r9, d8
 800db92:	2700      	movs	r7, #0
 800db94:	e01f      	b.n	800dbd6 <__kernel_rem_pio2+0xbe>
 800db96:	42ef      	cmn	r7, r5
 800db98:	d407      	bmi.n	800dbaa <__kernel_rem_pio2+0x92>
 800db9a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800db9e:	f7f2 fc71 	bl	8000484 <__aeabi_i2d>
 800dba2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800dba6:	3501      	adds	r5, #1
 800dba8:	e7df      	b.n	800db6a <__kernel_rem_pio2+0x52>
 800dbaa:	ec51 0b18 	vmov	r0, r1, d8
 800dbae:	e7f8      	b.n	800dba2 <__kernel_rem_pio2+0x8a>
 800dbb0:	9906      	ldr	r1, [sp, #24]
 800dbb2:	9d02      	ldr	r5, [sp, #8]
 800dbb4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800dbb8:	9106      	str	r1, [sp, #24]
 800dbba:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800dbbe:	9502      	str	r5, [sp, #8]
 800dbc0:	f7f2 fcca 	bl	8000558 <__aeabi_dmul>
 800dbc4:	4602      	mov	r2, r0
 800dbc6:	460b      	mov	r3, r1
 800dbc8:	4640      	mov	r0, r8
 800dbca:	4649      	mov	r1, r9
 800dbcc:	f7f2 fb0e 	bl	80001ec <__adddf3>
 800dbd0:	3701      	adds	r7, #1
 800dbd2:	4680      	mov	r8, r0
 800dbd4:	4689      	mov	r9, r1
 800dbd6:	9b07      	ldr	r3, [sp, #28]
 800dbd8:	429f      	cmp	r7, r3
 800dbda:	dde9      	ble.n	800dbb0 <__kernel_rem_pio2+0x98>
 800dbdc:	e8eb 8902 	strd	r8, r9, [fp], #8
 800dbe0:	3601      	adds	r6, #1
 800dbe2:	e7c9      	b.n	800db78 <__kernel_rem_pio2+0x60>
 800dbe4:	9b04      	ldr	r3, [sp, #16]
 800dbe6:	aa0e      	add	r2, sp, #56	; 0x38
 800dbe8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dbec:	930c      	str	r3, [sp, #48]	; 0x30
 800dbee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800dbf0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800dbf4:	9c04      	ldr	r4, [sp, #16]
 800dbf6:	930b      	str	r3, [sp, #44]	; 0x2c
 800dbf8:	ab9a      	add	r3, sp, #616	; 0x268
 800dbfa:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800dbfe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc02:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dc06:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800dc0a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800dc0e:	ab9a      	add	r3, sp, #616	; 0x268
 800dc10:	445b      	add	r3, fp
 800dc12:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800dc16:	2500      	movs	r5, #0
 800dc18:	1b63      	subs	r3, r4, r5
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	dc78      	bgt.n	800dd10 <__kernel_rem_pio2+0x1f8>
 800dc1e:	4650      	mov	r0, sl
 800dc20:	ec49 8b10 	vmov	d0, r8, r9
 800dc24:	f000 fc98 	bl	800e558 <scalbn>
 800dc28:	ec57 6b10 	vmov	r6, r7, d0
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800dc32:	ee10 0a10 	vmov	r0, s0
 800dc36:	4639      	mov	r1, r7
 800dc38:	f7f2 fc8e 	bl	8000558 <__aeabi_dmul>
 800dc3c:	ec41 0b10 	vmov	d0, r0, r1
 800dc40:	f000 fb76 	bl	800e330 <floor>
 800dc44:	2200      	movs	r2, #0
 800dc46:	ec51 0b10 	vmov	r0, r1, d0
 800dc4a:	4b7e      	ldr	r3, [pc, #504]	; (800de44 <__kernel_rem_pio2+0x32c>)
 800dc4c:	f7f2 fc84 	bl	8000558 <__aeabi_dmul>
 800dc50:	4602      	mov	r2, r0
 800dc52:	460b      	mov	r3, r1
 800dc54:	4630      	mov	r0, r6
 800dc56:	4639      	mov	r1, r7
 800dc58:	f7f2 fac6 	bl	80001e8 <__aeabi_dsub>
 800dc5c:	460f      	mov	r7, r1
 800dc5e:	4606      	mov	r6, r0
 800dc60:	f7f2 ff2a 	bl	8000ab8 <__aeabi_d2iz>
 800dc64:	9006      	str	r0, [sp, #24]
 800dc66:	f7f2 fc0d 	bl	8000484 <__aeabi_i2d>
 800dc6a:	4602      	mov	r2, r0
 800dc6c:	460b      	mov	r3, r1
 800dc6e:	4630      	mov	r0, r6
 800dc70:	4639      	mov	r1, r7
 800dc72:	f7f2 fab9 	bl	80001e8 <__aeabi_dsub>
 800dc76:	f1ba 0f00 	cmp.w	sl, #0
 800dc7a:	4606      	mov	r6, r0
 800dc7c:	460f      	mov	r7, r1
 800dc7e:	dd6c      	ble.n	800dd5a <__kernel_rem_pio2+0x242>
 800dc80:	1e62      	subs	r2, r4, #1
 800dc82:	ab0e      	add	r3, sp, #56	; 0x38
 800dc84:	f1ca 0118 	rsb	r1, sl, #24
 800dc88:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800dc8c:	9d06      	ldr	r5, [sp, #24]
 800dc8e:	fa40 f301 	asr.w	r3, r0, r1
 800dc92:	441d      	add	r5, r3
 800dc94:	408b      	lsls	r3, r1
 800dc96:	1ac0      	subs	r0, r0, r3
 800dc98:	ab0e      	add	r3, sp, #56	; 0x38
 800dc9a:	9506      	str	r5, [sp, #24]
 800dc9c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800dca0:	f1ca 0317 	rsb	r3, sl, #23
 800dca4:	fa40 f303 	asr.w	r3, r0, r3
 800dca8:	9302      	str	r3, [sp, #8]
 800dcaa:	9b02      	ldr	r3, [sp, #8]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	dd62      	ble.n	800dd76 <__kernel_rem_pio2+0x25e>
 800dcb0:	9b06      	ldr	r3, [sp, #24]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	3301      	adds	r3, #1
 800dcb6:	9306      	str	r3, [sp, #24]
 800dcb8:	4615      	mov	r5, r2
 800dcba:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800dcbe:	4294      	cmp	r4, r2
 800dcc0:	f300 8095 	bgt.w	800ddee <__kernel_rem_pio2+0x2d6>
 800dcc4:	f1ba 0f00 	cmp.w	sl, #0
 800dcc8:	dd07      	ble.n	800dcda <__kernel_rem_pio2+0x1c2>
 800dcca:	f1ba 0f01 	cmp.w	sl, #1
 800dcce:	f000 80a2 	beq.w	800de16 <__kernel_rem_pio2+0x2fe>
 800dcd2:	f1ba 0f02 	cmp.w	sl, #2
 800dcd6:	f000 80c1 	beq.w	800de5c <__kernel_rem_pio2+0x344>
 800dcda:	9b02      	ldr	r3, [sp, #8]
 800dcdc:	2b02      	cmp	r3, #2
 800dcde:	d14a      	bne.n	800dd76 <__kernel_rem_pio2+0x25e>
 800dce0:	4632      	mov	r2, r6
 800dce2:	463b      	mov	r3, r7
 800dce4:	2000      	movs	r0, #0
 800dce6:	4958      	ldr	r1, [pc, #352]	; (800de48 <__kernel_rem_pio2+0x330>)
 800dce8:	f7f2 fa7e 	bl	80001e8 <__aeabi_dsub>
 800dcec:	4606      	mov	r6, r0
 800dcee:	460f      	mov	r7, r1
 800dcf0:	2d00      	cmp	r5, #0
 800dcf2:	d040      	beq.n	800dd76 <__kernel_rem_pio2+0x25e>
 800dcf4:	4650      	mov	r0, sl
 800dcf6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800de38 <__kernel_rem_pio2+0x320>
 800dcfa:	f000 fc2d 	bl	800e558 <scalbn>
 800dcfe:	4630      	mov	r0, r6
 800dd00:	4639      	mov	r1, r7
 800dd02:	ec53 2b10 	vmov	r2, r3, d0
 800dd06:	f7f2 fa6f 	bl	80001e8 <__aeabi_dsub>
 800dd0a:	4606      	mov	r6, r0
 800dd0c:	460f      	mov	r7, r1
 800dd0e:	e032      	b.n	800dd76 <__kernel_rem_pio2+0x25e>
 800dd10:	2200      	movs	r2, #0
 800dd12:	4b4e      	ldr	r3, [pc, #312]	; (800de4c <__kernel_rem_pio2+0x334>)
 800dd14:	4640      	mov	r0, r8
 800dd16:	4649      	mov	r1, r9
 800dd18:	f7f2 fc1e 	bl	8000558 <__aeabi_dmul>
 800dd1c:	f7f2 fecc 	bl	8000ab8 <__aeabi_d2iz>
 800dd20:	f7f2 fbb0 	bl	8000484 <__aeabi_i2d>
 800dd24:	2200      	movs	r2, #0
 800dd26:	4b4a      	ldr	r3, [pc, #296]	; (800de50 <__kernel_rem_pio2+0x338>)
 800dd28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd2c:	f7f2 fc14 	bl	8000558 <__aeabi_dmul>
 800dd30:	4602      	mov	r2, r0
 800dd32:	460b      	mov	r3, r1
 800dd34:	4640      	mov	r0, r8
 800dd36:	4649      	mov	r1, r9
 800dd38:	f7f2 fa56 	bl	80001e8 <__aeabi_dsub>
 800dd3c:	f7f2 febc 	bl	8000ab8 <__aeabi_d2iz>
 800dd40:	ab0e      	add	r3, sp, #56	; 0x38
 800dd42:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800dd46:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800dd4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd4e:	f7f2 fa4d 	bl	80001ec <__adddf3>
 800dd52:	3501      	adds	r5, #1
 800dd54:	4680      	mov	r8, r0
 800dd56:	4689      	mov	r9, r1
 800dd58:	e75e      	b.n	800dc18 <__kernel_rem_pio2+0x100>
 800dd5a:	d105      	bne.n	800dd68 <__kernel_rem_pio2+0x250>
 800dd5c:	1e63      	subs	r3, r4, #1
 800dd5e:	aa0e      	add	r2, sp, #56	; 0x38
 800dd60:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800dd64:	15c3      	asrs	r3, r0, #23
 800dd66:	e79f      	b.n	800dca8 <__kernel_rem_pio2+0x190>
 800dd68:	2200      	movs	r2, #0
 800dd6a:	4b3a      	ldr	r3, [pc, #232]	; (800de54 <__kernel_rem_pio2+0x33c>)
 800dd6c:	f7f2 fe7a 	bl	8000a64 <__aeabi_dcmpge>
 800dd70:	2800      	cmp	r0, #0
 800dd72:	d139      	bne.n	800dde8 <__kernel_rem_pio2+0x2d0>
 800dd74:	9002      	str	r0, [sp, #8]
 800dd76:	2200      	movs	r2, #0
 800dd78:	2300      	movs	r3, #0
 800dd7a:	4630      	mov	r0, r6
 800dd7c:	4639      	mov	r1, r7
 800dd7e:	f7f2 fe53 	bl	8000a28 <__aeabi_dcmpeq>
 800dd82:	2800      	cmp	r0, #0
 800dd84:	f000 80c7 	beq.w	800df16 <__kernel_rem_pio2+0x3fe>
 800dd88:	1e65      	subs	r5, r4, #1
 800dd8a:	462b      	mov	r3, r5
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	9904      	ldr	r1, [sp, #16]
 800dd90:	428b      	cmp	r3, r1
 800dd92:	da6a      	bge.n	800de6a <__kernel_rem_pio2+0x352>
 800dd94:	2a00      	cmp	r2, #0
 800dd96:	f000 8088 	beq.w	800deaa <__kernel_rem_pio2+0x392>
 800dd9a:	ab0e      	add	r3, sp, #56	; 0x38
 800dd9c:	f1aa 0a18 	sub.w	sl, sl, #24
 800dda0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	f000 80b4 	beq.w	800df12 <__kernel_rem_pio2+0x3fa>
 800ddaa:	4650      	mov	r0, sl
 800ddac:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800de38 <__kernel_rem_pio2+0x320>
 800ddb0:	f000 fbd2 	bl	800e558 <scalbn>
 800ddb4:	00ec      	lsls	r4, r5, #3
 800ddb6:	ab72      	add	r3, sp, #456	; 0x1c8
 800ddb8:	191e      	adds	r6, r3, r4
 800ddba:	ec59 8b10 	vmov	r8, r9, d0
 800ddbe:	f106 0a08 	add.w	sl, r6, #8
 800ddc2:	462f      	mov	r7, r5
 800ddc4:	2f00      	cmp	r7, #0
 800ddc6:	f280 80df 	bge.w	800df88 <__kernel_rem_pio2+0x470>
 800ddca:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800de30 <__kernel_rem_pio2+0x318>
 800ddce:	f04f 0a00 	mov.w	sl, #0
 800ddd2:	eba5 030a 	sub.w	r3, r5, sl
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	f2c0 810a 	blt.w	800dff0 <__kernel_rem_pio2+0x4d8>
 800dddc:	f8df b078 	ldr.w	fp, [pc, #120]	; 800de58 <__kernel_rem_pio2+0x340>
 800dde0:	ec59 8b18 	vmov	r8, r9, d8
 800dde4:	2700      	movs	r7, #0
 800dde6:	e0f5      	b.n	800dfd4 <__kernel_rem_pio2+0x4bc>
 800dde8:	2302      	movs	r3, #2
 800ddea:	9302      	str	r3, [sp, #8]
 800ddec:	e760      	b.n	800dcb0 <__kernel_rem_pio2+0x198>
 800ddee:	ab0e      	add	r3, sp, #56	; 0x38
 800ddf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddf4:	b94d      	cbnz	r5, 800de0a <__kernel_rem_pio2+0x2f2>
 800ddf6:	b12b      	cbz	r3, 800de04 <__kernel_rem_pio2+0x2ec>
 800ddf8:	a80e      	add	r0, sp, #56	; 0x38
 800ddfa:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ddfe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800de02:	2301      	movs	r3, #1
 800de04:	3201      	adds	r2, #1
 800de06:	461d      	mov	r5, r3
 800de08:	e759      	b.n	800dcbe <__kernel_rem_pio2+0x1a6>
 800de0a:	a80e      	add	r0, sp, #56	; 0x38
 800de0c:	1acb      	subs	r3, r1, r3
 800de0e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800de12:	462b      	mov	r3, r5
 800de14:	e7f6      	b.n	800de04 <__kernel_rem_pio2+0x2ec>
 800de16:	1e62      	subs	r2, r4, #1
 800de18:	ab0e      	add	r3, sp, #56	; 0x38
 800de1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de1e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800de22:	a90e      	add	r1, sp, #56	; 0x38
 800de24:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800de28:	e757      	b.n	800dcda <__kernel_rem_pio2+0x1c2>
 800de2a:	bf00      	nop
 800de2c:	f3af 8000 	nop.w
	...
 800de3c:	3ff00000 	.word	0x3ff00000
 800de40:	0800ee48 	.word	0x0800ee48
 800de44:	40200000 	.word	0x40200000
 800de48:	3ff00000 	.word	0x3ff00000
 800de4c:	3e700000 	.word	0x3e700000
 800de50:	41700000 	.word	0x41700000
 800de54:	3fe00000 	.word	0x3fe00000
 800de58:	0800ee08 	.word	0x0800ee08
 800de5c:	1e62      	subs	r2, r4, #1
 800de5e:	ab0e      	add	r3, sp, #56	; 0x38
 800de60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de64:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800de68:	e7db      	b.n	800de22 <__kernel_rem_pio2+0x30a>
 800de6a:	a90e      	add	r1, sp, #56	; 0x38
 800de6c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800de70:	3b01      	subs	r3, #1
 800de72:	430a      	orrs	r2, r1
 800de74:	e78b      	b.n	800dd8e <__kernel_rem_pio2+0x276>
 800de76:	3301      	adds	r3, #1
 800de78:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800de7c:	2900      	cmp	r1, #0
 800de7e:	d0fa      	beq.n	800de76 <__kernel_rem_pio2+0x35e>
 800de80:	9a08      	ldr	r2, [sp, #32]
 800de82:	4422      	add	r2, r4
 800de84:	00d2      	lsls	r2, r2, #3
 800de86:	a922      	add	r1, sp, #136	; 0x88
 800de88:	18e3      	adds	r3, r4, r3
 800de8a:	9206      	str	r2, [sp, #24]
 800de8c:	440a      	add	r2, r1
 800de8e:	9302      	str	r3, [sp, #8]
 800de90:	f10b 0108 	add.w	r1, fp, #8
 800de94:	f102 0308 	add.w	r3, r2, #8
 800de98:	1c66      	adds	r6, r4, #1
 800de9a:	910a      	str	r1, [sp, #40]	; 0x28
 800de9c:	2500      	movs	r5, #0
 800de9e:	930d      	str	r3, [sp, #52]	; 0x34
 800dea0:	9b02      	ldr	r3, [sp, #8]
 800dea2:	42b3      	cmp	r3, r6
 800dea4:	da04      	bge.n	800deb0 <__kernel_rem_pio2+0x398>
 800dea6:	461c      	mov	r4, r3
 800dea8:	e6a6      	b.n	800dbf8 <__kernel_rem_pio2+0xe0>
 800deaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800deac:	2301      	movs	r3, #1
 800deae:	e7e3      	b.n	800de78 <__kernel_rem_pio2+0x360>
 800deb0:	9b06      	ldr	r3, [sp, #24]
 800deb2:	18ef      	adds	r7, r5, r3
 800deb4:	ab22      	add	r3, sp, #136	; 0x88
 800deb6:	441f      	add	r7, r3
 800deb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800deba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800debe:	f7f2 fae1 	bl	8000484 <__aeabi_i2d>
 800dec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dec4:	461c      	mov	r4, r3
 800dec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dec8:	e9c7 0100 	strd	r0, r1, [r7]
 800decc:	eb03 0b05 	add.w	fp, r3, r5
 800ded0:	2700      	movs	r7, #0
 800ded2:	f04f 0800 	mov.w	r8, #0
 800ded6:	f04f 0900 	mov.w	r9, #0
 800deda:	9b07      	ldr	r3, [sp, #28]
 800dedc:	429f      	cmp	r7, r3
 800dede:	dd08      	ble.n	800def2 <__kernel_rem_pio2+0x3da>
 800dee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dee2:	aa72      	add	r2, sp, #456	; 0x1c8
 800dee4:	18eb      	adds	r3, r5, r3
 800dee6:	4413      	add	r3, r2
 800dee8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800deec:	3601      	adds	r6, #1
 800deee:	3508      	adds	r5, #8
 800def0:	e7d6      	b.n	800dea0 <__kernel_rem_pio2+0x388>
 800def2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800def6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800defa:	f7f2 fb2d 	bl	8000558 <__aeabi_dmul>
 800defe:	4602      	mov	r2, r0
 800df00:	460b      	mov	r3, r1
 800df02:	4640      	mov	r0, r8
 800df04:	4649      	mov	r1, r9
 800df06:	f7f2 f971 	bl	80001ec <__adddf3>
 800df0a:	3701      	adds	r7, #1
 800df0c:	4680      	mov	r8, r0
 800df0e:	4689      	mov	r9, r1
 800df10:	e7e3      	b.n	800deda <__kernel_rem_pio2+0x3c2>
 800df12:	3d01      	subs	r5, #1
 800df14:	e741      	b.n	800dd9a <__kernel_rem_pio2+0x282>
 800df16:	f1ca 0000 	rsb	r0, sl, #0
 800df1a:	ec47 6b10 	vmov	d0, r6, r7
 800df1e:	f000 fb1b 	bl	800e558 <scalbn>
 800df22:	ec57 6b10 	vmov	r6, r7, d0
 800df26:	2200      	movs	r2, #0
 800df28:	4b99      	ldr	r3, [pc, #612]	; (800e190 <__kernel_rem_pio2+0x678>)
 800df2a:	ee10 0a10 	vmov	r0, s0
 800df2e:	4639      	mov	r1, r7
 800df30:	f7f2 fd98 	bl	8000a64 <__aeabi_dcmpge>
 800df34:	b1f8      	cbz	r0, 800df76 <__kernel_rem_pio2+0x45e>
 800df36:	2200      	movs	r2, #0
 800df38:	4b96      	ldr	r3, [pc, #600]	; (800e194 <__kernel_rem_pio2+0x67c>)
 800df3a:	4630      	mov	r0, r6
 800df3c:	4639      	mov	r1, r7
 800df3e:	f7f2 fb0b 	bl	8000558 <__aeabi_dmul>
 800df42:	f7f2 fdb9 	bl	8000ab8 <__aeabi_d2iz>
 800df46:	4680      	mov	r8, r0
 800df48:	f7f2 fa9c 	bl	8000484 <__aeabi_i2d>
 800df4c:	2200      	movs	r2, #0
 800df4e:	4b90      	ldr	r3, [pc, #576]	; (800e190 <__kernel_rem_pio2+0x678>)
 800df50:	f7f2 fb02 	bl	8000558 <__aeabi_dmul>
 800df54:	460b      	mov	r3, r1
 800df56:	4602      	mov	r2, r0
 800df58:	4639      	mov	r1, r7
 800df5a:	4630      	mov	r0, r6
 800df5c:	f7f2 f944 	bl	80001e8 <__aeabi_dsub>
 800df60:	f7f2 fdaa 	bl	8000ab8 <__aeabi_d2iz>
 800df64:	1c65      	adds	r5, r4, #1
 800df66:	ab0e      	add	r3, sp, #56	; 0x38
 800df68:	f10a 0a18 	add.w	sl, sl, #24
 800df6c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800df70:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800df74:	e719      	b.n	800ddaa <__kernel_rem_pio2+0x292>
 800df76:	4630      	mov	r0, r6
 800df78:	4639      	mov	r1, r7
 800df7a:	f7f2 fd9d 	bl	8000ab8 <__aeabi_d2iz>
 800df7e:	ab0e      	add	r3, sp, #56	; 0x38
 800df80:	4625      	mov	r5, r4
 800df82:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800df86:	e710      	b.n	800ddaa <__kernel_rem_pio2+0x292>
 800df88:	ab0e      	add	r3, sp, #56	; 0x38
 800df8a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800df8e:	f7f2 fa79 	bl	8000484 <__aeabi_i2d>
 800df92:	4642      	mov	r2, r8
 800df94:	464b      	mov	r3, r9
 800df96:	f7f2 fadf 	bl	8000558 <__aeabi_dmul>
 800df9a:	2200      	movs	r2, #0
 800df9c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800dfa0:	4b7c      	ldr	r3, [pc, #496]	; (800e194 <__kernel_rem_pio2+0x67c>)
 800dfa2:	4640      	mov	r0, r8
 800dfa4:	4649      	mov	r1, r9
 800dfa6:	f7f2 fad7 	bl	8000558 <__aeabi_dmul>
 800dfaa:	3f01      	subs	r7, #1
 800dfac:	4680      	mov	r8, r0
 800dfae:	4689      	mov	r9, r1
 800dfb0:	e708      	b.n	800ddc4 <__kernel_rem_pio2+0x2ac>
 800dfb2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800dfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfba:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800dfbe:	f7f2 facb 	bl	8000558 <__aeabi_dmul>
 800dfc2:	4602      	mov	r2, r0
 800dfc4:	460b      	mov	r3, r1
 800dfc6:	4640      	mov	r0, r8
 800dfc8:	4649      	mov	r1, r9
 800dfca:	f7f2 f90f 	bl	80001ec <__adddf3>
 800dfce:	3701      	adds	r7, #1
 800dfd0:	4680      	mov	r8, r0
 800dfd2:	4689      	mov	r9, r1
 800dfd4:	9b04      	ldr	r3, [sp, #16]
 800dfd6:	429f      	cmp	r7, r3
 800dfd8:	dc01      	bgt.n	800dfde <__kernel_rem_pio2+0x4c6>
 800dfda:	45ba      	cmp	sl, r7
 800dfdc:	dae9      	bge.n	800dfb2 <__kernel_rem_pio2+0x49a>
 800dfde:	ab4a      	add	r3, sp, #296	; 0x128
 800dfe0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dfe4:	e9c3 8900 	strd	r8, r9, [r3]
 800dfe8:	f10a 0a01 	add.w	sl, sl, #1
 800dfec:	3e08      	subs	r6, #8
 800dfee:	e6f0      	b.n	800ddd2 <__kernel_rem_pio2+0x2ba>
 800dff0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800dff2:	2b03      	cmp	r3, #3
 800dff4:	d85b      	bhi.n	800e0ae <__kernel_rem_pio2+0x596>
 800dff6:	e8df f003 	tbb	[pc, r3]
 800dffa:	264a      	.short	0x264a
 800dffc:	0226      	.short	0x0226
 800dffe:	ab9a      	add	r3, sp, #616	; 0x268
 800e000:	441c      	add	r4, r3
 800e002:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e006:	46a2      	mov	sl, r4
 800e008:	46ab      	mov	fp, r5
 800e00a:	f1bb 0f00 	cmp.w	fp, #0
 800e00e:	dc6c      	bgt.n	800e0ea <__kernel_rem_pio2+0x5d2>
 800e010:	46a2      	mov	sl, r4
 800e012:	46ab      	mov	fp, r5
 800e014:	f1bb 0f01 	cmp.w	fp, #1
 800e018:	f300 8086 	bgt.w	800e128 <__kernel_rem_pio2+0x610>
 800e01c:	2000      	movs	r0, #0
 800e01e:	2100      	movs	r1, #0
 800e020:	2d01      	cmp	r5, #1
 800e022:	f300 80a0 	bgt.w	800e166 <__kernel_rem_pio2+0x64e>
 800e026:	9b02      	ldr	r3, [sp, #8]
 800e028:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800e02c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800e030:	2b00      	cmp	r3, #0
 800e032:	f040 809e 	bne.w	800e172 <__kernel_rem_pio2+0x65a>
 800e036:	9b01      	ldr	r3, [sp, #4]
 800e038:	e9c3 7800 	strd	r7, r8, [r3]
 800e03c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e040:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e044:	e033      	b.n	800e0ae <__kernel_rem_pio2+0x596>
 800e046:	3408      	adds	r4, #8
 800e048:	ab4a      	add	r3, sp, #296	; 0x128
 800e04a:	441c      	add	r4, r3
 800e04c:	462e      	mov	r6, r5
 800e04e:	2000      	movs	r0, #0
 800e050:	2100      	movs	r1, #0
 800e052:	2e00      	cmp	r6, #0
 800e054:	da3a      	bge.n	800e0cc <__kernel_rem_pio2+0x5b4>
 800e056:	9b02      	ldr	r3, [sp, #8]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d03d      	beq.n	800e0d8 <__kernel_rem_pio2+0x5c0>
 800e05c:	4602      	mov	r2, r0
 800e05e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e062:	9c01      	ldr	r4, [sp, #4]
 800e064:	e9c4 2300 	strd	r2, r3, [r4]
 800e068:	4602      	mov	r2, r0
 800e06a:	460b      	mov	r3, r1
 800e06c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800e070:	f7f2 f8ba 	bl	80001e8 <__aeabi_dsub>
 800e074:	ae4c      	add	r6, sp, #304	; 0x130
 800e076:	2401      	movs	r4, #1
 800e078:	42a5      	cmp	r5, r4
 800e07a:	da30      	bge.n	800e0de <__kernel_rem_pio2+0x5c6>
 800e07c:	9b02      	ldr	r3, [sp, #8]
 800e07e:	b113      	cbz	r3, 800e086 <__kernel_rem_pio2+0x56e>
 800e080:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e084:	4619      	mov	r1, r3
 800e086:	9b01      	ldr	r3, [sp, #4]
 800e088:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e08c:	e00f      	b.n	800e0ae <__kernel_rem_pio2+0x596>
 800e08e:	ab9a      	add	r3, sp, #616	; 0x268
 800e090:	441c      	add	r4, r3
 800e092:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e096:	2000      	movs	r0, #0
 800e098:	2100      	movs	r1, #0
 800e09a:	2d00      	cmp	r5, #0
 800e09c:	da10      	bge.n	800e0c0 <__kernel_rem_pio2+0x5a8>
 800e09e:	9b02      	ldr	r3, [sp, #8]
 800e0a0:	b113      	cbz	r3, 800e0a8 <__kernel_rem_pio2+0x590>
 800e0a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	9b01      	ldr	r3, [sp, #4]
 800e0aa:	e9c3 0100 	strd	r0, r1, [r3]
 800e0ae:	9b06      	ldr	r3, [sp, #24]
 800e0b0:	f003 0007 	and.w	r0, r3, #7
 800e0b4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800e0b8:	ecbd 8b02 	vpop	{d8}
 800e0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0c0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e0c4:	f7f2 f892 	bl	80001ec <__adddf3>
 800e0c8:	3d01      	subs	r5, #1
 800e0ca:	e7e6      	b.n	800e09a <__kernel_rem_pio2+0x582>
 800e0cc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e0d0:	f7f2 f88c 	bl	80001ec <__adddf3>
 800e0d4:	3e01      	subs	r6, #1
 800e0d6:	e7bc      	b.n	800e052 <__kernel_rem_pio2+0x53a>
 800e0d8:	4602      	mov	r2, r0
 800e0da:	460b      	mov	r3, r1
 800e0dc:	e7c1      	b.n	800e062 <__kernel_rem_pio2+0x54a>
 800e0de:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e0e2:	f7f2 f883 	bl	80001ec <__adddf3>
 800e0e6:	3401      	adds	r4, #1
 800e0e8:	e7c6      	b.n	800e078 <__kernel_rem_pio2+0x560>
 800e0ea:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800e0ee:	ed3a 7b02 	vldmdb	sl!, {d7}
 800e0f2:	4640      	mov	r0, r8
 800e0f4:	ec53 2b17 	vmov	r2, r3, d7
 800e0f8:	4649      	mov	r1, r9
 800e0fa:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e0fe:	f7f2 f875 	bl	80001ec <__adddf3>
 800e102:	4602      	mov	r2, r0
 800e104:	460b      	mov	r3, r1
 800e106:	4606      	mov	r6, r0
 800e108:	460f      	mov	r7, r1
 800e10a:	4640      	mov	r0, r8
 800e10c:	4649      	mov	r1, r9
 800e10e:	f7f2 f86b 	bl	80001e8 <__aeabi_dsub>
 800e112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e116:	f7f2 f869 	bl	80001ec <__adddf3>
 800e11a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e11e:	e9ca 0100 	strd	r0, r1, [sl]
 800e122:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800e126:	e770      	b.n	800e00a <__kernel_rem_pio2+0x4f2>
 800e128:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800e12c:	ed3a 7b02 	vldmdb	sl!, {d7}
 800e130:	4630      	mov	r0, r6
 800e132:	ec53 2b17 	vmov	r2, r3, d7
 800e136:	4639      	mov	r1, r7
 800e138:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e13c:	f7f2 f856 	bl	80001ec <__adddf3>
 800e140:	4602      	mov	r2, r0
 800e142:	460b      	mov	r3, r1
 800e144:	4680      	mov	r8, r0
 800e146:	4689      	mov	r9, r1
 800e148:	4630      	mov	r0, r6
 800e14a:	4639      	mov	r1, r7
 800e14c:	f7f2 f84c 	bl	80001e8 <__aeabi_dsub>
 800e150:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e154:	f7f2 f84a 	bl	80001ec <__adddf3>
 800e158:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e15c:	e9ca 0100 	strd	r0, r1, [sl]
 800e160:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800e164:	e756      	b.n	800e014 <__kernel_rem_pio2+0x4fc>
 800e166:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e16a:	f7f2 f83f 	bl	80001ec <__adddf3>
 800e16e:	3d01      	subs	r5, #1
 800e170:	e756      	b.n	800e020 <__kernel_rem_pio2+0x508>
 800e172:	9b01      	ldr	r3, [sp, #4]
 800e174:	9a01      	ldr	r2, [sp, #4]
 800e176:	601f      	str	r7, [r3, #0]
 800e178:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800e17c:	605c      	str	r4, [r3, #4]
 800e17e:	609d      	str	r5, [r3, #8]
 800e180:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e184:	60d3      	str	r3, [r2, #12]
 800e186:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e18a:	6110      	str	r0, [r2, #16]
 800e18c:	6153      	str	r3, [r2, #20]
 800e18e:	e78e      	b.n	800e0ae <__kernel_rem_pio2+0x596>
 800e190:	41700000 	.word	0x41700000
 800e194:	3e700000 	.word	0x3e700000

0800e198 <__kernel_sin>:
 800e198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e19c:	ec55 4b10 	vmov	r4, r5, d0
 800e1a0:	b085      	sub	sp, #20
 800e1a2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e1a6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e1aa:	ed8d 1b00 	vstr	d1, [sp]
 800e1ae:	9002      	str	r0, [sp, #8]
 800e1b0:	da06      	bge.n	800e1c0 <__kernel_sin+0x28>
 800e1b2:	ee10 0a10 	vmov	r0, s0
 800e1b6:	4629      	mov	r1, r5
 800e1b8:	f7f2 fc7e 	bl	8000ab8 <__aeabi_d2iz>
 800e1bc:	2800      	cmp	r0, #0
 800e1be:	d051      	beq.n	800e264 <__kernel_sin+0xcc>
 800e1c0:	4622      	mov	r2, r4
 800e1c2:	462b      	mov	r3, r5
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	4629      	mov	r1, r5
 800e1c8:	f7f2 f9c6 	bl	8000558 <__aeabi_dmul>
 800e1cc:	4682      	mov	sl, r0
 800e1ce:	468b      	mov	fp, r1
 800e1d0:	4602      	mov	r2, r0
 800e1d2:	460b      	mov	r3, r1
 800e1d4:	4620      	mov	r0, r4
 800e1d6:	4629      	mov	r1, r5
 800e1d8:	f7f2 f9be 	bl	8000558 <__aeabi_dmul>
 800e1dc:	a341      	add	r3, pc, #260	; (adr r3, 800e2e4 <__kernel_sin+0x14c>)
 800e1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e2:	4680      	mov	r8, r0
 800e1e4:	4689      	mov	r9, r1
 800e1e6:	4650      	mov	r0, sl
 800e1e8:	4659      	mov	r1, fp
 800e1ea:	f7f2 f9b5 	bl	8000558 <__aeabi_dmul>
 800e1ee:	a33f      	add	r3, pc, #252	; (adr r3, 800e2ec <__kernel_sin+0x154>)
 800e1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f4:	f7f1 fff8 	bl	80001e8 <__aeabi_dsub>
 800e1f8:	4652      	mov	r2, sl
 800e1fa:	465b      	mov	r3, fp
 800e1fc:	f7f2 f9ac 	bl	8000558 <__aeabi_dmul>
 800e200:	a33c      	add	r3, pc, #240	; (adr r3, 800e2f4 <__kernel_sin+0x15c>)
 800e202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e206:	f7f1 fff1 	bl	80001ec <__adddf3>
 800e20a:	4652      	mov	r2, sl
 800e20c:	465b      	mov	r3, fp
 800e20e:	f7f2 f9a3 	bl	8000558 <__aeabi_dmul>
 800e212:	a33a      	add	r3, pc, #232	; (adr r3, 800e2fc <__kernel_sin+0x164>)
 800e214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e218:	f7f1 ffe6 	bl	80001e8 <__aeabi_dsub>
 800e21c:	4652      	mov	r2, sl
 800e21e:	465b      	mov	r3, fp
 800e220:	f7f2 f99a 	bl	8000558 <__aeabi_dmul>
 800e224:	a337      	add	r3, pc, #220	; (adr r3, 800e304 <__kernel_sin+0x16c>)
 800e226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e22a:	f7f1 ffdf 	bl	80001ec <__adddf3>
 800e22e:	9b02      	ldr	r3, [sp, #8]
 800e230:	4606      	mov	r6, r0
 800e232:	460f      	mov	r7, r1
 800e234:	b9db      	cbnz	r3, 800e26e <__kernel_sin+0xd6>
 800e236:	4602      	mov	r2, r0
 800e238:	460b      	mov	r3, r1
 800e23a:	4650      	mov	r0, sl
 800e23c:	4659      	mov	r1, fp
 800e23e:	f7f2 f98b 	bl	8000558 <__aeabi_dmul>
 800e242:	a325      	add	r3, pc, #148	; (adr r3, 800e2d8 <__kernel_sin+0x140>)
 800e244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e248:	f7f1 ffce 	bl	80001e8 <__aeabi_dsub>
 800e24c:	4642      	mov	r2, r8
 800e24e:	464b      	mov	r3, r9
 800e250:	f7f2 f982 	bl	8000558 <__aeabi_dmul>
 800e254:	4602      	mov	r2, r0
 800e256:	460b      	mov	r3, r1
 800e258:	4620      	mov	r0, r4
 800e25a:	4629      	mov	r1, r5
 800e25c:	f7f1 ffc6 	bl	80001ec <__adddf3>
 800e260:	4604      	mov	r4, r0
 800e262:	460d      	mov	r5, r1
 800e264:	ec45 4b10 	vmov	d0, r4, r5
 800e268:	b005      	add	sp, #20
 800e26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e26e:	2200      	movs	r2, #0
 800e270:	4b1b      	ldr	r3, [pc, #108]	; (800e2e0 <__kernel_sin+0x148>)
 800e272:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e276:	f7f2 f96f 	bl	8000558 <__aeabi_dmul>
 800e27a:	4632      	mov	r2, r6
 800e27c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e280:	463b      	mov	r3, r7
 800e282:	4640      	mov	r0, r8
 800e284:	4649      	mov	r1, r9
 800e286:	f7f2 f967 	bl	8000558 <__aeabi_dmul>
 800e28a:	4602      	mov	r2, r0
 800e28c:	460b      	mov	r3, r1
 800e28e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e292:	f7f1 ffa9 	bl	80001e8 <__aeabi_dsub>
 800e296:	4652      	mov	r2, sl
 800e298:	465b      	mov	r3, fp
 800e29a:	f7f2 f95d 	bl	8000558 <__aeabi_dmul>
 800e29e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2a2:	f7f1 ffa1 	bl	80001e8 <__aeabi_dsub>
 800e2a6:	a30c      	add	r3, pc, #48	; (adr r3, 800e2d8 <__kernel_sin+0x140>)
 800e2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ac:	4606      	mov	r6, r0
 800e2ae:	460f      	mov	r7, r1
 800e2b0:	4640      	mov	r0, r8
 800e2b2:	4649      	mov	r1, r9
 800e2b4:	f7f2 f950 	bl	8000558 <__aeabi_dmul>
 800e2b8:	4602      	mov	r2, r0
 800e2ba:	460b      	mov	r3, r1
 800e2bc:	4630      	mov	r0, r6
 800e2be:	4639      	mov	r1, r7
 800e2c0:	f7f1 ff94 	bl	80001ec <__adddf3>
 800e2c4:	4602      	mov	r2, r0
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	4629      	mov	r1, r5
 800e2cc:	f7f1 ff8c 	bl	80001e8 <__aeabi_dsub>
 800e2d0:	e7c6      	b.n	800e260 <__kernel_sin+0xc8>
 800e2d2:	bf00      	nop
 800e2d4:	f3af 8000 	nop.w
 800e2d8:	55555549 	.word	0x55555549
 800e2dc:	3fc55555 	.word	0x3fc55555
 800e2e0:	3fe00000 	.word	0x3fe00000
 800e2e4:	5acfd57c 	.word	0x5acfd57c
 800e2e8:	3de5d93a 	.word	0x3de5d93a
 800e2ec:	8a2b9ceb 	.word	0x8a2b9ceb
 800e2f0:	3e5ae5e6 	.word	0x3e5ae5e6
 800e2f4:	57b1fe7d 	.word	0x57b1fe7d
 800e2f8:	3ec71de3 	.word	0x3ec71de3
 800e2fc:	19c161d5 	.word	0x19c161d5
 800e300:	3f2a01a0 	.word	0x3f2a01a0
 800e304:	1110f8a6 	.word	0x1110f8a6
 800e308:	3f811111 	.word	0x3f811111

0800e30c <fabs>:
 800e30c:	ec51 0b10 	vmov	r0, r1, d0
 800e310:	ee10 2a10 	vmov	r2, s0
 800e314:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e318:	ec43 2b10 	vmov	d0, r2, r3
 800e31c:	4770      	bx	lr

0800e31e <finite>:
 800e31e:	ee10 3a90 	vmov	r3, s1
 800e322:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800e326:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e32a:	0fc0      	lsrs	r0, r0, #31
 800e32c:	4770      	bx	lr
	...

0800e330 <floor>:
 800e330:	ec51 0b10 	vmov	r0, r1, d0
 800e334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e338:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e33c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e340:	2e13      	cmp	r6, #19
 800e342:	460c      	mov	r4, r1
 800e344:	ee10 5a10 	vmov	r5, s0
 800e348:	4680      	mov	r8, r0
 800e34a:	dc34      	bgt.n	800e3b6 <floor+0x86>
 800e34c:	2e00      	cmp	r6, #0
 800e34e:	da16      	bge.n	800e37e <floor+0x4e>
 800e350:	a335      	add	r3, pc, #212	; (adr r3, 800e428 <floor+0xf8>)
 800e352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e356:	f7f1 ff49 	bl	80001ec <__adddf3>
 800e35a:	2200      	movs	r2, #0
 800e35c:	2300      	movs	r3, #0
 800e35e:	f7f2 fb8b 	bl	8000a78 <__aeabi_dcmpgt>
 800e362:	b148      	cbz	r0, 800e378 <floor+0x48>
 800e364:	2c00      	cmp	r4, #0
 800e366:	da59      	bge.n	800e41c <floor+0xec>
 800e368:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e36c:	4a30      	ldr	r2, [pc, #192]	; (800e430 <floor+0x100>)
 800e36e:	432b      	orrs	r3, r5
 800e370:	2500      	movs	r5, #0
 800e372:	42ab      	cmp	r3, r5
 800e374:	bf18      	it	ne
 800e376:	4614      	movne	r4, r2
 800e378:	4621      	mov	r1, r4
 800e37a:	4628      	mov	r0, r5
 800e37c:	e025      	b.n	800e3ca <floor+0x9a>
 800e37e:	4f2d      	ldr	r7, [pc, #180]	; (800e434 <floor+0x104>)
 800e380:	4137      	asrs	r7, r6
 800e382:	ea01 0307 	and.w	r3, r1, r7
 800e386:	4303      	orrs	r3, r0
 800e388:	d01f      	beq.n	800e3ca <floor+0x9a>
 800e38a:	a327      	add	r3, pc, #156	; (adr r3, 800e428 <floor+0xf8>)
 800e38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e390:	f7f1 ff2c 	bl	80001ec <__adddf3>
 800e394:	2200      	movs	r2, #0
 800e396:	2300      	movs	r3, #0
 800e398:	f7f2 fb6e 	bl	8000a78 <__aeabi_dcmpgt>
 800e39c:	2800      	cmp	r0, #0
 800e39e:	d0eb      	beq.n	800e378 <floor+0x48>
 800e3a0:	2c00      	cmp	r4, #0
 800e3a2:	bfbe      	ittt	lt
 800e3a4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e3a8:	fa43 f606 	asrlt.w	r6, r3, r6
 800e3ac:	19a4      	addlt	r4, r4, r6
 800e3ae:	ea24 0407 	bic.w	r4, r4, r7
 800e3b2:	2500      	movs	r5, #0
 800e3b4:	e7e0      	b.n	800e378 <floor+0x48>
 800e3b6:	2e33      	cmp	r6, #51	; 0x33
 800e3b8:	dd0b      	ble.n	800e3d2 <floor+0xa2>
 800e3ba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e3be:	d104      	bne.n	800e3ca <floor+0x9a>
 800e3c0:	ee10 2a10 	vmov	r2, s0
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	f7f1 ff11 	bl	80001ec <__adddf3>
 800e3ca:	ec41 0b10 	vmov	d0, r0, r1
 800e3ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3d2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e3d6:	f04f 33ff 	mov.w	r3, #4294967295
 800e3da:	fa23 f707 	lsr.w	r7, r3, r7
 800e3de:	4207      	tst	r7, r0
 800e3e0:	d0f3      	beq.n	800e3ca <floor+0x9a>
 800e3e2:	a311      	add	r3, pc, #68	; (adr r3, 800e428 <floor+0xf8>)
 800e3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e8:	f7f1 ff00 	bl	80001ec <__adddf3>
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	f7f2 fb42 	bl	8000a78 <__aeabi_dcmpgt>
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	d0bf      	beq.n	800e378 <floor+0x48>
 800e3f8:	2c00      	cmp	r4, #0
 800e3fa:	da02      	bge.n	800e402 <floor+0xd2>
 800e3fc:	2e14      	cmp	r6, #20
 800e3fe:	d103      	bne.n	800e408 <floor+0xd8>
 800e400:	3401      	adds	r4, #1
 800e402:	ea25 0507 	bic.w	r5, r5, r7
 800e406:	e7b7      	b.n	800e378 <floor+0x48>
 800e408:	2301      	movs	r3, #1
 800e40a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e40e:	fa03 f606 	lsl.w	r6, r3, r6
 800e412:	4435      	add	r5, r6
 800e414:	4545      	cmp	r5, r8
 800e416:	bf38      	it	cc
 800e418:	18e4      	addcc	r4, r4, r3
 800e41a:	e7f2      	b.n	800e402 <floor+0xd2>
 800e41c:	2500      	movs	r5, #0
 800e41e:	462c      	mov	r4, r5
 800e420:	e7aa      	b.n	800e378 <floor+0x48>
 800e422:	bf00      	nop
 800e424:	f3af 8000 	nop.w
 800e428:	8800759c 	.word	0x8800759c
 800e42c:	7e37e43c 	.word	0x7e37e43c
 800e430:	bff00000 	.word	0xbff00000
 800e434:	000fffff 	.word	0x000fffff

0800e438 <matherr>:
 800e438:	2000      	movs	r0, #0
 800e43a:	4770      	bx	lr
 800e43c:	0000      	movs	r0, r0
	...

0800e440 <nan>:
 800e440:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e448 <nan+0x8>
 800e444:	4770      	bx	lr
 800e446:	bf00      	nop
 800e448:	00000000 	.word	0x00000000
 800e44c:	7ff80000 	.word	0x7ff80000

0800e450 <rint>:
 800e450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e452:	ec51 0b10 	vmov	r0, r1, d0
 800e456:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e45a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800e45e:	2e13      	cmp	r6, #19
 800e460:	460b      	mov	r3, r1
 800e462:	ee10 4a10 	vmov	r4, s0
 800e466:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800e46a:	dc56      	bgt.n	800e51a <rint+0xca>
 800e46c:	2e00      	cmp	r6, #0
 800e46e:	da2b      	bge.n	800e4c8 <rint+0x78>
 800e470:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800e474:	4302      	orrs	r2, r0
 800e476:	d023      	beq.n	800e4c0 <rint+0x70>
 800e478:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800e47c:	4302      	orrs	r2, r0
 800e47e:	4254      	negs	r4, r2
 800e480:	4314      	orrs	r4, r2
 800e482:	0c4b      	lsrs	r3, r1, #17
 800e484:	0b24      	lsrs	r4, r4, #12
 800e486:	045b      	lsls	r3, r3, #17
 800e488:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800e48c:	ea44 0103 	orr.w	r1, r4, r3
 800e490:	460b      	mov	r3, r1
 800e492:	492f      	ldr	r1, [pc, #188]	; (800e550 <rint+0x100>)
 800e494:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800e498:	e9d1 6700 	ldrd	r6, r7, [r1]
 800e49c:	4602      	mov	r2, r0
 800e49e:	4639      	mov	r1, r7
 800e4a0:	4630      	mov	r0, r6
 800e4a2:	f7f1 fea3 	bl	80001ec <__adddf3>
 800e4a6:	e9cd 0100 	strd	r0, r1, [sp]
 800e4aa:	463b      	mov	r3, r7
 800e4ac:	4632      	mov	r2, r6
 800e4ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e4b2:	f7f1 fe99 	bl	80001e8 <__aeabi_dsub>
 800e4b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e4ba:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800e4be:	4639      	mov	r1, r7
 800e4c0:	ec41 0b10 	vmov	d0, r0, r1
 800e4c4:	b003      	add	sp, #12
 800e4c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4c8:	4a22      	ldr	r2, [pc, #136]	; (800e554 <rint+0x104>)
 800e4ca:	4132      	asrs	r2, r6
 800e4cc:	ea01 0702 	and.w	r7, r1, r2
 800e4d0:	4307      	orrs	r7, r0
 800e4d2:	d0f5      	beq.n	800e4c0 <rint+0x70>
 800e4d4:	0852      	lsrs	r2, r2, #1
 800e4d6:	4011      	ands	r1, r2
 800e4d8:	430c      	orrs	r4, r1
 800e4da:	d00b      	beq.n	800e4f4 <rint+0xa4>
 800e4dc:	ea23 0202 	bic.w	r2, r3, r2
 800e4e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e4e4:	2e13      	cmp	r6, #19
 800e4e6:	fa43 f306 	asr.w	r3, r3, r6
 800e4ea:	bf0c      	ite	eq
 800e4ec:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800e4f0:	2400      	movne	r4, #0
 800e4f2:	4313      	orrs	r3, r2
 800e4f4:	4916      	ldr	r1, [pc, #88]	; (800e550 <rint+0x100>)
 800e4f6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800e4fa:	4622      	mov	r2, r4
 800e4fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e500:	4620      	mov	r0, r4
 800e502:	4629      	mov	r1, r5
 800e504:	f7f1 fe72 	bl	80001ec <__adddf3>
 800e508:	e9cd 0100 	strd	r0, r1, [sp]
 800e50c:	4622      	mov	r2, r4
 800e50e:	462b      	mov	r3, r5
 800e510:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e514:	f7f1 fe68 	bl	80001e8 <__aeabi_dsub>
 800e518:	e7d2      	b.n	800e4c0 <rint+0x70>
 800e51a:	2e33      	cmp	r6, #51	; 0x33
 800e51c:	dd07      	ble.n	800e52e <rint+0xde>
 800e51e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e522:	d1cd      	bne.n	800e4c0 <rint+0x70>
 800e524:	ee10 2a10 	vmov	r2, s0
 800e528:	f7f1 fe60 	bl	80001ec <__adddf3>
 800e52c:	e7c8      	b.n	800e4c0 <rint+0x70>
 800e52e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800e532:	f04f 32ff 	mov.w	r2, #4294967295
 800e536:	40f2      	lsrs	r2, r6
 800e538:	4210      	tst	r0, r2
 800e53a:	d0c1      	beq.n	800e4c0 <rint+0x70>
 800e53c:	0852      	lsrs	r2, r2, #1
 800e53e:	4210      	tst	r0, r2
 800e540:	bf1f      	itttt	ne
 800e542:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800e546:	ea20 0202 	bicne.w	r2, r0, r2
 800e54a:	4134      	asrne	r4, r6
 800e54c:	4314      	orrne	r4, r2
 800e54e:	e7d1      	b.n	800e4f4 <rint+0xa4>
 800e550:	0800ee58 	.word	0x0800ee58
 800e554:	000fffff 	.word	0x000fffff

0800e558 <scalbn>:
 800e558:	b570      	push	{r4, r5, r6, lr}
 800e55a:	ec55 4b10 	vmov	r4, r5, d0
 800e55e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e562:	4606      	mov	r6, r0
 800e564:	462b      	mov	r3, r5
 800e566:	b9aa      	cbnz	r2, 800e594 <scalbn+0x3c>
 800e568:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e56c:	4323      	orrs	r3, r4
 800e56e:	d03b      	beq.n	800e5e8 <scalbn+0x90>
 800e570:	4b31      	ldr	r3, [pc, #196]	; (800e638 <scalbn+0xe0>)
 800e572:	4629      	mov	r1, r5
 800e574:	2200      	movs	r2, #0
 800e576:	ee10 0a10 	vmov	r0, s0
 800e57a:	f7f1 ffed 	bl	8000558 <__aeabi_dmul>
 800e57e:	4b2f      	ldr	r3, [pc, #188]	; (800e63c <scalbn+0xe4>)
 800e580:	429e      	cmp	r6, r3
 800e582:	4604      	mov	r4, r0
 800e584:	460d      	mov	r5, r1
 800e586:	da12      	bge.n	800e5ae <scalbn+0x56>
 800e588:	a327      	add	r3, pc, #156	; (adr r3, 800e628 <scalbn+0xd0>)
 800e58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58e:	f7f1 ffe3 	bl	8000558 <__aeabi_dmul>
 800e592:	e009      	b.n	800e5a8 <scalbn+0x50>
 800e594:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e598:	428a      	cmp	r2, r1
 800e59a:	d10c      	bne.n	800e5b6 <scalbn+0x5e>
 800e59c:	ee10 2a10 	vmov	r2, s0
 800e5a0:	4620      	mov	r0, r4
 800e5a2:	4629      	mov	r1, r5
 800e5a4:	f7f1 fe22 	bl	80001ec <__adddf3>
 800e5a8:	4604      	mov	r4, r0
 800e5aa:	460d      	mov	r5, r1
 800e5ac:	e01c      	b.n	800e5e8 <scalbn+0x90>
 800e5ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e5b2:	460b      	mov	r3, r1
 800e5b4:	3a36      	subs	r2, #54	; 0x36
 800e5b6:	4432      	add	r2, r6
 800e5b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e5bc:	428a      	cmp	r2, r1
 800e5be:	dd0b      	ble.n	800e5d8 <scalbn+0x80>
 800e5c0:	ec45 4b11 	vmov	d1, r4, r5
 800e5c4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800e630 <scalbn+0xd8>
 800e5c8:	f000 f83c 	bl	800e644 <copysign>
 800e5cc:	a318      	add	r3, pc, #96	; (adr r3, 800e630 <scalbn+0xd8>)
 800e5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d2:	ec51 0b10 	vmov	r0, r1, d0
 800e5d6:	e7da      	b.n	800e58e <scalbn+0x36>
 800e5d8:	2a00      	cmp	r2, #0
 800e5da:	dd08      	ble.n	800e5ee <scalbn+0x96>
 800e5dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e5e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e5e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e5e8:	ec45 4b10 	vmov	d0, r4, r5
 800e5ec:	bd70      	pop	{r4, r5, r6, pc}
 800e5ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e5f2:	da0d      	bge.n	800e610 <scalbn+0xb8>
 800e5f4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e5f8:	429e      	cmp	r6, r3
 800e5fa:	ec45 4b11 	vmov	d1, r4, r5
 800e5fe:	dce1      	bgt.n	800e5c4 <scalbn+0x6c>
 800e600:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800e628 <scalbn+0xd0>
 800e604:	f000 f81e 	bl	800e644 <copysign>
 800e608:	a307      	add	r3, pc, #28	; (adr r3, 800e628 <scalbn+0xd0>)
 800e60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e60e:	e7e0      	b.n	800e5d2 <scalbn+0x7a>
 800e610:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e614:	3236      	adds	r2, #54	; 0x36
 800e616:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e61a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e61e:	4620      	mov	r0, r4
 800e620:	4629      	mov	r1, r5
 800e622:	2200      	movs	r2, #0
 800e624:	4b06      	ldr	r3, [pc, #24]	; (800e640 <scalbn+0xe8>)
 800e626:	e7b2      	b.n	800e58e <scalbn+0x36>
 800e628:	c2f8f359 	.word	0xc2f8f359
 800e62c:	01a56e1f 	.word	0x01a56e1f
 800e630:	8800759c 	.word	0x8800759c
 800e634:	7e37e43c 	.word	0x7e37e43c
 800e638:	43500000 	.word	0x43500000
 800e63c:	ffff3cb0 	.word	0xffff3cb0
 800e640:	3c900000 	.word	0x3c900000

0800e644 <copysign>:
 800e644:	ec51 0b10 	vmov	r0, r1, d0
 800e648:	ee11 0a90 	vmov	r0, s3
 800e64c:	ee10 2a10 	vmov	r2, s0
 800e650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e654:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800e658:	ea41 0300 	orr.w	r3, r1, r0
 800e65c:	ec43 2b10 	vmov	d0, r2, r3
 800e660:	4770      	bx	lr
	...

0800e664 <_init>:
 800e664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e666:	bf00      	nop
 800e668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e66a:	bc08      	pop	{r3}
 800e66c:	469e      	mov	lr, r3
 800e66e:	4770      	bx	lr

0800e670 <_fini>:
 800e670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e672:	bf00      	nop
 800e674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e676:	bc08      	pop	{r3}
 800e678:	469e      	mov	lr, r3
 800e67a:	4770      	bx	lr
