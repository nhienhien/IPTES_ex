
CMCIS-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025c70  0800d690  0800d690  0001d690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08033300  08033300  00050e4c  2**0
                  CONTENTS
  4 .ARM          00000008  08033300  08033300  00043300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08033308  08033308  00050e4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08033308  08033308  00043308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803330c  0803330c  0004330c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000e4c  20000000  08033310  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003a27c  20000e4c  0803415c  00050e4c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  2003b0c8  0803415c  0005b0c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00050e4c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b648  00000000  00000000  00050e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f55  00000000  00000000  0006c4c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001090  00000000  00000000  00070418  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e18  00000000  00000000  000714a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029076  00000000  00000000  000722c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012e08  00000000  00000000  0009b336  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fac18  00000000  00000000  000ae13e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  001a8d56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b4c  00000000  00000000  001a8e44  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000392f  00000000  00000000  001ad990  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000e4c 	.word	0x20000e4c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d674 	.word	0x0800d674

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000e50 	.word	0x20000e50
 800020c:	0800d674 	.word	0x0800d674

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004be:	f1a4 0401 	sub.w	r4, r4, #1
 80004c2:	d1e9      	bne.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2uiz>:
 8000ca8:	004a      	lsls	r2, r1, #1
 8000caa:	d211      	bcs.n	8000cd0 <__aeabi_d2uiz+0x28>
 8000cac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cb0:	d211      	bcs.n	8000cd6 <__aeabi_d2uiz+0x2e>
 8000cb2:	d50d      	bpl.n	8000cd0 <__aeabi_d2uiz+0x28>
 8000cb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cbc:	d40e      	bmi.n	8000cdc <__aeabi_d2uiz+0x34>
 8000cbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cca:	fa23 f002 	lsr.w	r0, r3, r2
 8000cce:	4770      	bx	lr
 8000cd0:	f04f 0000 	mov.w	r0, #0
 8000cd4:	4770      	bx	lr
 8000cd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cda:	d102      	bne.n	8000ce2 <__aeabi_d2uiz+0x3a>
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	4770      	bx	lr
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2f>:
 8000ce8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cf0:	bf24      	itt	cs
 8000cf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cfa:	d90d      	bls.n	8000d18 <__aeabi_d2f+0x30>
 8000cfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d10:	bf08      	it	eq
 8000d12:	f020 0001 	biceq.w	r0, r0, #1
 8000d16:	4770      	bx	lr
 8000d18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d1c:	d121      	bne.n	8000d62 <__aeabi_d2f+0x7a>
 8000d1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d22:	bfbc      	itt	lt
 8000d24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d28:	4770      	bxlt	lr
 8000d2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d32:	f1c2 0218 	rsb	r2, r2, #24
 8000d36:	f1c2 0c20 	rsb	ip, r2, #32
 8000d3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d42:	bf18      	it	ne
 8000d44:	f040 0001 	orrne.w	r0, r0, #1
 8000d48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d54:	ea40 000c 	orr.w	r0, r0, ip
 8000d58:	fa23 f302 	lsr.w	r3, r3, r2
 8000d5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d60:	e7cc      	b.n	8000cfc <__aeabi_d2f+0x14>
 8000d62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d66:	d107      	bne.n	8000d78 <__aeabi_d2f+0x90>
 8000d68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d6c:	bf1e      	ittt	ne
 8000d6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d76:	4770      	bxne	lr
 8000d78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <__aeabi_uldivmod>:
 8000d88:	b953      	cbnz	r3, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8a:	b94a      	cbnz	r2, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	bf08      	it	eq
 8000d90:	2800      	cmpeq	r0, #0
 8000d92:	bf1c      	itt	ne
 8000d94:	f04f 31ff 	movne.w	r1, #4294967295
 8000d98:	f04f 30ff 	movne.w	r0, #4294967295
 8000d9c:	f000 b972 	b.w	8001084 <__aeabi_idiv0>
 8000da0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da8:	f000 f806 	bl	8000db8 <__udivmoddi4>
 8000dac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db4:	b004      	add	sp, #16
 8000db6:	4770      	bx	lr

08000db8 <__udivmoddi4>:
 8000db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dbc:	9e08      	ldr	r6, [sp, #32]
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	4688      	mov	r8, r1
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d14b      	bne.n	8000e5e <__udivmoddi4+0xa6>
 8000dc6:	428a      	cmp	r2, r1
 8000dc8:	4615      	mov	r5, r2
 8000dca:	d967      	bls.n	8000e9c <__udivmoddi4+0xe4>
 8000dcc:	fab2 f282 	clz	r2, r2
 8000dd0:	b14a      	cbz	r2, 8000de6 <__udivmoddi4+0x2e>
 8000dd2:	f1c2 0720 	rsb	r7, r2, #32
 8000dd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000dda:	fa20 f707 	lsr.w	r7, r0, r7
 8000dde:	4095      	lsls	r5, r2
 8000de0:	ea47 0803 	orr.w	r8, r7, r3
 8000de4:	4094      	lsls	r4, r2
 8000de6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000df0:	fa1f fc85 	uxth.w	ip, r5
 8000df4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000df8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000e00:	4299      	cmp	r1, r3
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x60>
 8000e04:	18eb      	adds	r3, r5, r3
 8000e06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000e0a:	f080 811b 	bcs.w	8001044 <__udivmoddi4+0x28c>
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	f240 8118 	bls.w	8001044 <__udivmoddi4+0x28c>
 8000e14:	3f02      	subs	r7, #2
 8000e16:	442b      	add	r3, r5
 8000e18:	1a5b      	subs	r3, r3, r1
 8000e1a:	b2a4      	uxth	r4, r4
 8000e1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e2c:	45a4      	cmp	ip, r4
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x8c>
 8000e30:	192c      	adds	r4, r5, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	f080 8107 	bcs.w	8001048 <__udivmoddi4+0x290>
 8000e3a:	45a4      	cmp	ip, r4
 8000e3c:	f240 8104 	bls.w	8001048 <__udivmoddi4+0x290>
 8000e40:	3802      	subs	r0, #2
 8000e42:	442c      	add	r4, r5
 8000e44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e48:	eba4 040c 	sub.w	r4, r4, ip
 8000e4c:	2700      	movs	r7, #0
 8000e4e:	b11e      	cbz	r6, 8000e58 <__udivmoddi4+0xa0>
 8000e50:	40d4      	lsrs	r4, r2
 8000e52:	2300      	movs	r3, #0
 8000e54:	e9c6 4300 	strd	r4, r3, [r6]
 8000e58:	4639      	mov	r1, r7
 8000e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d909      	bls.n	8000e76 <__udivmoddi4+0xbe>
 8000e62:	2e00      	cmp	r6, #0
 8000e64:	f000 80eb 	beq.w	800103e <__udivmoddi4+0x286>
 8000e68:	2700      	movs	r7, #0
 8000e6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e6e:	4638      	mov	r0, r7
 8000e70:	4639      	mov	r1, r7
 8000e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e76:	fab3 f783 	clz	r7, r3
 8000e7a:	2f00      	cmp	r7, #0
 8000e7c:	d147      	bne.n	8000f0e <__udivmoddi4+0x156>
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d302      	bcc.n	8000e88 <__udivmoddi4+0xd0>
 8000e82:	4282      	cmp	r2, r0
 8000e84:	f200 80fa 	bhi.w	800107c <__udivmoddi4+0x2c4>
 8000e88:	1a84      	subs	r4, r0, r2
 8000e8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e8e:	2001      	movs	r0, #1
 8000e90:	4698      	mov	r8, r3
 8000e92:	2e00      	cmp	r6, #0
 8000e94:	d0e0      	beq.n	8000e58 <__udivmoddi4+0xa0>
 8000e96:	e9c6 4800 	strd	r4, r8, [r6]
 8000e9a:	e7dd      	b.n	8000e58 <__udivmoddi4+0xa0>
 8000e9c:	b902      	cbnz	r2, 8000ea0 <__udivmoddi4+0xe8>
 8000e9e:	deff      	udf	#255	; 0xff
 8000ea0:	fab2 f282 	clz	r2, r2
 8000ea4:	2a00      	cmp	r2, #0
 8000ea6:	f040 808f 	bne.w	8000fc8 <__udivmoddi4+0x210>
 8000eaa:	1b49      	subs	r1, r1, r5
 8000eac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eb0:	fa1f f885 	uxth.w	r8, r5
 8000eb4:	2701      	movs	r7, #1
 8000eb6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000eba:	0c23      	lsrs	r3, r4, #16
 8000ebc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ec0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ec8:	4299      	cmp	r1, r3
 8000eca:	d907      	bls.n	8000edc <__udivmoddi4+0x124>
 8000ecc:	18eb      	adds	r3, r5, r3
 8000ece:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x122>
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	f200 80cd 	bhi.w	8001074 <__udivmoddi4+0x2bc>
 8000eda:	4684      	mov	ip, r0
 8000edc:	1a59      	subs	r1, r3, r1
 8000ede:	b2a3      	uxth	r3, r4
 8000ee0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ee8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000eec:	fb08 f800 	mul.w	r8, r8, r0
 8000ef0:	45a0      	cmp	r8, r4
 8000ef2:	d907      	bls.n	8000f04 <__udivmoddi4+0x14c>
 8000ef4:	192c      	adds	r4, r5, r4
 8000ef6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000efa:	d202      	bcs.n	8000f02 <__udivmoddi4+0x14a>
 8000efc:	45a0      	cmp	r8, r4
 8000efe:	f200 80b6 	bhi.w	800106e <__udivmoddi4+0x2b6>
 8000f02:	4618      	mov	r0, r3
 8000f04:	eba4 0408 	sub.w	r4, r4, r8
 8000f08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f0c:	e79f      	b.n	8000e4e <__udivmoddi4+0x96>
 8000f0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000f12:	40bb      	lsls	r3, r7
 8000f14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000f18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000f1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000f20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000f24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000f28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000f2c:	4325      	orrs	r5, r4
 8000f2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000f32:	0c2c      	lsrs	r4, r5, #16
 8000f34:	fb08 3319 	mls	r3, r8, r9, r3
 8000f38:	fa1f fa8e 	uxth.w	sl, lr
 8000f3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f40:	fb09 f40a 	mul.w	r4, r9, sl
 8000f44:	429c      	cmp	r4, r3
 8000f46:	fa02 f207 	lsl.w	r2, r2, r7
 8000f4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000f4e:	d90b      	bls.n	8000f68 <__udivmoddi4+0x1b0>
 8000f50:	eb1e 0303 	adds.w	r3, lr, r3
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	f080 8087 	bcs.w	800106a <__udivmoddi4+0x2b2>
 8000f5c:	429c      	cmp	r4, r3
 8000f5e:	f240 8084 	bls.w	800106a <__udivmoddi4+0x2b2>
 8000f62:	f1a9 0902 	sub.w	r9, r9, #2
 8000f66:	4473      	add	r3, lr
 8000f68:	1b1b      	subs	r3, r3, r4
 8000f6a:	b2ad      	uxth	r5, r5
 8000f6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f70:	fb08 3310 	mls	r3, r8, r0, r3
 8000f74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f7c:	45a2      	cmp	sl, r4
 8000f7e:	d908      	bls.n	8000f92 <__udivmoddi4+0x1da>
 8000f80:	eb1e 0404 	adds.w	r4, lr, r4
 8000f84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f88:	d26b      	bcs.n	8001062 <__udivmoddi4+0x2aa>
 8000f8a:	45a2      	cmp	sl, r4
 8000f8c:	d969      	bls.n	8001062 <__udivmoddi4+0x2aa>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	4474      	add	r4, lr
 8000f92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	eba4 040a 	sub.w	r4, r4, sl
 8000f9e:	454c      	cmp	r4, r9
 8000fa0:	46c2      	mov	sl, r8
 8000fa2:	464b      	mov	r3, r9
 8000fa4:	d354      	bcc.n	8001050 <__udivmoddi4+0x298>
 8000fa6:	d051      	beq.n	800104c <__udivmoddi4+0x294>
 8000fa8:	2e00      	cmp	r6, #0
 8000faa:	d069      	beq.n	8001080 <__udivmoddi4+0x2c8>
 8000fac:	ebb1 050a 	subs.w	r5, r1, sl
 8000fb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000fb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000fb8:	40fd      	lsrs	r5, r7
 8000fba:	40fc      	lsrs	r4, r7
 8000fbc:	ea4c 0505 	orr.w	r5, ip, r5
 8000fc0:	e9c6 5400 	strd	r5, r4, [r6]
 8000fc4:	2700      	movs	r7, #0
 8000fc6:	e747      	b.n	8000e58 <__udivmoddi4+0xa0>
 8000fc8:	f1c2 0320 	rsb	r3, r2, #32
 8000fcc:	fa20 f703 	lsr.w	r7, r0, r3
 8000fd0:	4095      	lsls	r5, r2
 8000fd2:	fa01 f002 	lsl.w	r0, r1, r2
 8000fd6:	fa21 f303 	lsr.w	r3, r1, r3
 8000fda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fde:	4338      	orrs	r0, r7
 8000fe0:	0c01      	lsrs	r1, r0, #16
 8000fe2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000fe6:	fa1f f885 	uxth.w	r8, r5
 8000fea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000fee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff2:	fb07 f308 	mul.w	r3, r7, r8
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ffc:	d907      	bls.n	800100e <__udivmoddi4+0x256>
 8000ffe:	1869      	adds	r1, r5, r1
 8001000:	f107 3cff 	add.w	ip, r7, #4294967295
 8001004:	d22f      	bcs.n	8001066 <__udivmoddi4+0x2ae>
 8001006:	428b      	cmp	r3, r1
 8001008:	d92d      	bls.n	8001066 <__udivmoddi4+0x2ae>
 800100a:	3f02      	subs	r7, #2
 800100c:	4429      	add	r1, r5
 800100e:	1acb      	subs	r3, r1, r3
 8001010:	b281      	uxth	r1, r0
 8001012:	fbb3 f0fe 	udiv	r0, r3, lr
 8001016:	fb0e 3310 	mls	r3, lr, r0, r3
 800101a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800101e:	fb00 f308 	mul.w	r3, r0, r8
 8001022:	428b      	cmp	r3, r1
 8001024:	d907      	bls.n	8001036 <__udivmoddi4+0x27e>
 8001026:	1869      	adds	r1, r5, r1
 8001028:	f100 3cff 	add.w	ip, r0, #4294967295
 800102c:	d217      	bcs.n	800105e <__udivmoddi4+0x2a6>
 800102e:	428b      	cmp	r3, r1
 8001030:	d915      	bls.n	800105e <__udivmoddi4+0x2a6>
 8001032:	3802      	subs	r0, #2
 8001034:	4429      	add	r1, r5
 8001036:	1ac9      	subs	r1, r1, r3
 8001038:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800103c:	e73b      	b.n	8000eb6 <__udivmoddi4+0xfe>
 800103e:	4637      	mov	r7, r6
 8001040:	4630      	mov	r0, r6
 8001042:	e709      	b.n	8000e58 <__udivmoddi4+0xa0>
 8001044:	4607      	mov	r7, r0
 8001046:	e6e7      	b.n	8000e18 <__udivmoddi4+0x60>
 8001048:	4618      	mov	r0, r3
 800104a:	e6fb      	b.n	8000e44 <__udivmoddi4+0x8c>
 800104c:	4541      	cmp	r1, r8
 800104e:	d2ab      	bcs.n	8000fa8 <__udivmoddi4+0x1f0>
 8001050:	ebb8 0a02 	subs.w	sl, r8, r2
 8001054:	eb69 020e 	sbc.w	r2, r9, lr
 8001058:	3801      	subs	r0, #1
 800105a:	4613      	mov	r3, r2
 800105c:	e7a4      	b.n	8000fa8 <__udivmoddi4+0x1f0>
 800105e:	4660      	mov	r0, ip
 8001060:	e7e9      	b.n	8001036 <__udivmoddi4+0x27e>
 8001062:	4618      	mov	r0, r3
 8001064:	e795      	b.n	8000f92 <__udivmoddi4+0x1da>
 8001066:	4667      	mov	r7, ip
 8001068:	e7d1      	b.n	800100e <__udivmoddi4+0x256>
 800106a:	4681      	mov	r9, r0
 800106c:	e77c      	b.n	8000f68 <__udivmoddi4+0x1b0>
 800106e:	3802      	subs	r0, #2
 8001070:	442c      	add	r4, r5
 8001072:	e747      	b.n	8000f04 <__udivmoddi4+0x14c>
 8001074:	f1ac 0c02 	sub.w	ip, ip, #2
 8001078:	442b      	add	r3, r5
 800107a:	e72f      	b.n	8000edc <__udivmoddi4+0x124>
 800107c:	4638      	mov	r0, r7
 800107e:	e708      	b.n	8000e92 <__udivmoddi4+0xda>
 8001080:	4637      	mov	r7, r6
 8001082:	e6e9      	b.n	8000e58 <__udivmoddi4+0xa0>

08001084 <__aeabi_idiv0>:
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <goToOutput>:
#define lineDown() 	HAL_GPIO_WritePin(DHT_Port, DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(DHT_Port, DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(DHT_Port, DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(void) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]

  //По умолчанию на линии высокий уровень
  HAL_GPIO_WritePin(DHT_Port, DHT_Pin, GPIO_PIN_SET);
 800109c:	2201      	movs	r2, #1
 800109e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a2:	480a      	ldr	r0, [pc, #40]	; (80010cc <goToOutput+0x44>)
 80010a4:	f003 f818 	bl	80040d8 <HAL_GPIO_WritePin>

  //Настройка порта на выход 
  GPIO_InitStruct.Pin = DHT_Pin;
 80010a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 80010ae:	2311      	movs	r3, #17
 80010b0:	60bb      	str	r3, [r7, #8]
	#if DHT_PullUp == 1
  GPIO_InitStruct.Pull = GPIO_PULLUP;						//Подтяжка к питанию
	#else 
  GPIO_InitStruct.Pull = GPIO_NOPULL;						//Без подтяжки
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
	#endif
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 80010b6:	2302      	movs	r3, #2
 80010b8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DHT_Port, &GPIO_InitStruct);
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	4619      	mov	r1, r3
 80010be:	4803      	ldr	r0, [pc, #12]	; (80010cc <goToOutput+0x44>)
 80010c0:	f002 fe48 	bl	8003d54 <HAL_GPIO_Init>
}
 80010c4:	bf00      	nop
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40021400 	.word	0x40021400

080010d0 <goToInput>:

static void goToInput(void) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]

  //Настройка порта на вход 
  GPIO_InitStruct.Pin = DHT_Pin;
 80010e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
	#if DHT_PullUp == 1
  GPIO_InitStruct.Pull = GPIO_PULLUP;						//Подтяжка к питанию
	#else 
  GPIO_InitStruct.Pull = GPIO_NOPULL;						//Без подтяжки
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
	#endif
  HAL_GPIO_Init(DHT_Port, &GPIO_InitStruct);
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	4619      	mov	r1, r3
 80010f6:	4803      	ldr	r0, [pc, #12]	; (8001104 <goToInput+0x34>)
 80010f8:	f002 fe2c 	bl	8003d54 <HAL_GPIO_Init>
}
 80010fc:	bf00      	nop
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40021400 	.word	0x40021400

08001108 <DHT_getData>:

DHT_data DHT_getData(DHT_type t) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
	DHT_data data = {0.0f, 0.0f};
 8001112:	2300      	movs	r3, #0
 8001114:	753b      	strb	r3, [r7, #20]
 8001116:	2300      	movs	r3, #0
 8001118:	757b      	strb	r3, [r7, #21]
	
	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput();
 800111a:	f7ff ffb5 	bl	8001088 <goToOutput>
	//Опускание линии данных на 15 мс
	lineDown();
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001124:	4890      	ldr	r0, [pc, #576]	; (8001368 <DHT_getData+0x260>)
 8001126:	f002 ffd7 	bl	80040d8 <HAL_GPIO_WritePin>
	Delay(15);
 800112a:	200f      	movs	r0, #15
 800112c:	f001 fc46 	bl	80029bc <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 8001130:	2201      	movs	r2, #1
 8001132:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001136:	488c      	ldr	r0, [pc, #560]	; (8001368 <DHT_getData+0x260>)
 8001138:	f002 ffce 	bl	80040d8 <HAL_GPIO_WritePin>
	goToInput();
 800113c:	f7ff ffc8 	bl	80010d0 <goToInput>
	
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	84fb      	strh	r3, [r7, #38]	; 0x26
	//Ожидание спада
	while(getLine()) {
 8001144:	e00a      	b.n	800115c <DHT_getData+0x54>
		timeout++;
 8001146:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001148:	3301      	adds	r3, #1
 800114a:	84fb      	strh	r3, [r7, #38]	; 0x26
		if (timeout > DHT_timeout) return data;
 800114c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800114e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001152:	4293      	cmp	r3, r2
 8001154:	d902      	bls.n	800115c <DHT_getData+0x54>
 8001156:	8abb      	ldrh	r3, [r7, #20]
 8001158:	833b      	strh	r3, [r7, #24]
 800115a:	e0fa      	b.n	8001352 <DHT_getData+0x24a>
	while(getLine()) {
 800115c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001160:	4881      	ldr	r0, [pc, #516]	; (8001368 <DHT_getData+0x260>)
 8001162:	f002 ffa1 	bl	80040a8 <HAL_GPIO_ReadPin>
 8001166:	4603      	mov	r3, r0
 8001168:	2b01      	cmp	r3, #1
 800116a:	d0ec      	beq.n	8001146 <DHT_getData+0x3e>
	}
	timeout = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	84fb      	strh	r3, [r7, #38]	; 0x26
	//Ожидание подъёма
	while(!getLine()) {
 8001170:	e00a      	b.n	8001188 <DHT_getData+0x80>
		timeout++;
 8001172:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001174:	3301      	adds	r3, #1
 8001176:	84fb      	strh	r3, [r7, #38]	; 0x26
		if (timeout > DHT_timeout) return data;
 8001178:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800117a:	f242 7210 	movw	r2, #10000	; 0x2710
 800117e:	4293      	cmp	r3, r2
 8001180:	d902      	bls.n	8001188 <DHT_getData+0x80>
 8001182:	8abb      	ldrh	r3, [r7, #20]
 8001184:	833b      	strh	r3, [r7, #24]
 8001186:	e0e4      	b.n	8001352 <DHT_getData+0x24a>
	while(!getLine()) {
 8001188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800118c:	4876      	ldr	r0, [pc, #472]	; (8001368 <DHT_getData+0x260>)
 800118e:	f002 ff8b 	bl	80040a8 <HAL_GPIO_ReadPin>
 8001192:	4603      	mov	r3, r0
 8001194:	2b01      	cmp	r3, #1
 8001196:	d1ec      	bne.n	8001172 <DHT_getData+0x6a>
	}
	timeout = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	84fb      	strh	r3, [r7, #38]	; 0x26
	//Ожидание спада
	while(getLine()) {
 800119c:	e00a      	b.n	80011b4 <DHT_getData+0xac>
		timeout++;
 800119e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011a0:	3301      	adds	r3, #1
 80011a2:	84fb      	strh	r3, [r7, #38]	; 0x26
		if (timeout > DHT_timeout) return data;
 80011a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d902      	bls.n	80011b4 <DHT_getData+0xac>
 80011ae:	8abb      	ldrh	r3, [r7, #20]
 80011b0:	833b      	strh	r3, [r7, #24]
 80011b2:	e0ce      	b.n	8001352 <DHT_getData+0x24a>
	while(getLine()) {
 80011b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b8:	486b      	ldr	r0, [pc, #428]	; (8001368 <DHT_getData+0x260>)
 80011ba:	f002 ff75 	bl	80040a8 <HAL_GPIO_ReadPin>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d0ec      	beq.n	800119e <DHT_getData+0x96>
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	711a      	strb	r2, [r3, #4]
	for(uint8_t a = 0; a < 5; a++) {
 80011ce:	2300      	movs	r3, #0
 80011d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80011d4:	e049      	b.n	800126a <DHT_getData+0x162>
		for(uint8_t b = 7; b != 255; b--) {
 80011d6:	2307      	movs	r3, #7
 80011d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80011dc:	e03c      	b.n	8001258 <DHT_getData+0x150>
			uint32_t hT = 0, lT = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	623b      	str	r3, [r7, #32]
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine()) lT++;
 80011e6:	e002      	b.n	80011ee <DHT_getData+0xe6>
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	3301      	adds	r3, #1
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f2:	485d      	ldr	r0, [pc, #372]	; (8001368 <DHT_getData+0x260>)
 80011f4:	f002 ff58 	bl	80040a8 <HAL_GPIO_ReadPin>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d1f4      	bne.n	80011e8 <DHT_getData+0xe0>
			//Пока линия в высоком уровне, инкремент переменной hT
			while(getLine()) hT++;
 80011fe:	e002      	b.n	8001206 <DHT_getData+0xfe>
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	3301      	adds	r3, #1
 8001204:	623b      	str	r3, [r7, #32]
 8001206:	f44f 7180 	mov.w	r1, #256	; 0x100
 800120a:	4857      	ldr	r0, [pc, #348]	; (8001368 <DHT_getData+0x260>)
 800120c:	f002 ff4c 	bl	80040a8 <HAL_GPIO_ReadPin>
 8001210:	4603      	mov	r3, r0
 8001212:	2b01      	cmp	r3, #1
 8001214:	d0f4      	beq.n	8001200 <DHT_getData+0xf8>
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 8001216:	6a3a      	ldr	r2, [r7, #32]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	429a      	cmp	r2, r3
 800121c:	d917      	bls.n	800124e <DHT_getData+0x146>
 800121e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001222:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001226:	4413      	add	r3, r2
 8001228:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800122c:	b25a      	sxtb	r2, r3
 800122e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001232:	2101      	movs	r1, #1
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	b25b      	sxtb	r3, r3
 800123a:	4313      	orrs	r3, r2
 800123c:	b25a      	sxtb	r2, r3
 800123e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001248:	440b      	add	r3, r1
 800124a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for(uint8_t b = 7; b != 255; b--) {
 800124e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001252:	3b01      	subs	r3, #1
 8001254:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001258:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800125c:	2bff      	cmp	r3, #255	; 0xff
 800125e:	d1be      	bne.n	80011de <DHT_getData+0xd6>
	for(uint8_t a = 0; a < 5; a++) {
 8001260:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001264:	3301      	adds	r3, #1
 8001266:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800126a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800126e:	2b04      	cmp	r3, #4
 8001270:	d9b1      	bls.n	80011d6 <DHT_getData+0xce>
		}
	}
	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 8001272:	7b3a      	ldrb	r2, [r7, #12]
 8001274:	7b7b      	ldrb	r3, [r7, #13]
 8001276:	4413      	add	r3, r2
 8001278:	b2da      	uxtb	r2, r3
 800127a:	7bbb      	ldrb	r3, [r7, #14]
 800127c:	4413      	add	r3, r2
 800127e:	b2da      	uxtb	r2, r3
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	4413      	add	r3, r2
 8001284:	b2da      	uxtb	r2, r3
 8001286:	7c3b      	ldrb	r3, [r7, #16]
 8001288:	429a      	cmp	r2, r3
 800128a:	d160      	bne.n	800134e <DHT_getData+0x246>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (t == DHT22) {
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d142      	bne.n	8001318 <DHT_getData+0x210>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8001292:	7b3b      	ldrb	r3, [r7, #12]
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	7b7a      	ldrb	r2, [r7, #13]
 8001298:	4313      	orrs	r3, r2
 800129a:	ee07 3a90 	vmov	s15, r3
 800129e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800136c <DHT_getData+0x264>
 80012a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ae:	edc7 7a00 	vstr	s15, [r7]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	753b      	strb	r3, [r7, #20]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 80012b8:	7bbb      	ldrb	r3, [r7, #14]
 80012ba:	b25b      	sxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	db13      	blt.n	80012e8 <DHT_getData+0x1e0>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 80012c0:	7bbb      	ldrb	r3, [r7, #14]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	7bfa      	ldrb	r2, [r7, #15]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	ee07 3a90 	vmov	s15, r3
 80012cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800136c <DHT_getData+0x264>
 80012d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012dc:	edc7 7a00 	vstr	s15, [r7]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	757b      	strb	r3, [r7, #21]
 80012e6:	e017      	b.n	8001318 <DHT_getData+0x210>
			}	else {
				rawData[2] &= ~(1<<7);
 80012e8:	7bbb      	ldrb	r3, [r7, #14]
 80012ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	73bb      	strb	r3, [r7, #14]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 80012f2:	7bbb      	ldrb	r3, [r7, #14]
 80012f4:	021b      	lsls	r3, r3, #8
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001302:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001370 <DHT_getData+0x268>
 8001306:	ee67 7a87 	vmul.f32	s15, s15, s14
 800130a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800130e:	edc7 7a00 	vstr	s15, [r7]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	757b      	strb	r3, [r7, #21]
			}
		}
		if (t == DHT11) {
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d117      	bne.n	800134e <DHT_getData+0x246>
			data.hum = (float)rawData[0];
 800131e:	7b3b      	ldrb	r3, [r7, #12]
 8001320:	ee07 3a90 	vmov	s15, r3
 8001324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800132c:	edc7 7a00 	vstr	s15, [r7]
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	753b      	strb	r3, [r7, #20]
			data.temp = (float)rawData[2];;
 8001336:	7bbb      	ldrb	r3, [r7, #14]
 8001338:	ee07 3a90 	vmov	s15, r3
 800133c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001344:	edc7 7a00 	vstr	s15, [r7]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	757b      	strb	r3, [r7, #21]
		}
	}
	return data;	
 800134e:	8abb      	ldrh	r3, [r7, #20]
 8001350:	833b      	strh	r3, [r7, #24]
 8001352:	2300      	movs	r3, #0
 8001354:	7e3a      	ldrb	r2, [r7, #24]
 8001356:	f362 0307 	bfi	r3, r2, #0, #8
 800135a:	7e7a      	ldrb	r2, [r7, #25]
 800135c:	f362 230f 	bfi	r3, r2, #8, #8
}
 8001360:	4618      	mov	r0, r3
 8001362:	3728      	adds	r7, #40	; 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40021400 	.word	0x40021400
 800136c:	3dcccccd 	.word	0x3dcccccd
 8001370:	bdcccccd 	.word	0xbdcccccd

08001374 <BH1750_Init>:


BH1750_DATA BH1750;

void BH1750_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <BH1750_Init+0x4c>)
 800137a:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <BH1750_Init+0x50>)
 800137c:	601a      	str	r2, [r3, #0]
  //hi2c1.Init.ClockSpeed = 100000;
  //hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <BH1750_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <BH1750_Init+0x4c>)
 8001386:	2201      	movs	r2, #1
 8001388:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <BH1750_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <BH1750_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	615a      	str	r2, [r3, #20]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <BH1750_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <BH1750_Init+0x4c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	621a      	str	r2, [r3, #32]
  HAL_I2C_Init(&hi2c1);
 80013a2:	4807      	ldr	r0, [pc, #28]	; (80013c0 <BH1750_Init+0x4c>)
 80013a4:	f002 feb2 	bl	800410c <HAL_I2C_Init>
	
	BH1750.time = 120;
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <BH1750_Init+0x54>)
 80013aa:	2278      	movs	r2, #120	; 0x78
 80013ac:	605a      	str	r2, [r3, #4]
	BH1750.mode	=	BH_CON_H_MODE;
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <BH1750_Init+0x54>)
 80013b0:	2210      	movs	r2, #16
 80013b2:	701a      	strb	r2, [r3, #0]
	BH1750.status	= GOOG;
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <BH1750_Init+0x54>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	739a      	strb	r2, [r3, #14]
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	2000f9c8 	.word	0x2000f9c8
 80013c4:	40005400 	.word	0x40005400
 80013c8:	2000f930 	.word	0x2000f930

080013cc <BH1750_Cmd_Write>:

void BH1750_Cmd_Write(uint8_t cmd)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af02      	add	r7, sp, #8
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
	uint8_t data[1];
	data[0] = cmd;
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	733b      	strb	r3, [r7, #12]
	while(HAL_I2C_Master_Transmit(&hi2c1,BH1750_Addr_L,data,1,BH1750.time)!=HAL_OK);
 80013da:	bf00      	nop
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <BH1750_Cmd_Write+0x3c>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f107 020c 	add.w	r2, r7, #12
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2301      	movs	r3, #1
 80013e8:	2146      	movs	r1, #70	; 0x46
 80013ea:	4808      	ldr	r0, [pc, #32]	; (800140c <BH1750_Cmd_Write+0x40>)
 80013ec:	f002 ff1e 	bl	800422c <HAL_I2C_Master_Transmit>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f2      	bne.n	80013dc <BH1750_Cmd_Write+0x10>
	__HAL_I2C_CLEAR_FLAG(&hi2c1,I2C_FLAG_STOPF);
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <BH1750_Cmd_Write+0x40>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2220      	movs	r2, #32
 80013fc:	61da      	str	r2, [r3, #28]
	//HAL_Delay(100);
}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2000f930 	.word	0x2000f930
 800140c:	2000f9c8 	.word	0x2000f9c8

08001410 <BH1750_Start>:
void BH1750_Start(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	BH1750_Cmd_Write(BH1750_ON);	 //power on
 8001414:	2001      	movs	r0, #1
 8001416:	f7ff ffd9 	bl	80013cc <BH1750_Cmd_Write>
	BH1750_Cmd_Write(BH1750_RESET);	//clear
 800141a:	2007      	movs	r0, #7
 800141c:	f7ff ffd6 	bl	80013cc <BH1750_Cmd_Write>
	BH1750_Cmd_Write(BH1750.mode);  //mode 
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <BH1750_Start+0x20>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ffd1 	bl	80013cc <BH1750_Cmd_Write>
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000f930 	.word	0x2000f930

08001434 <BH1750_Read>:
uint16_t BH1750_Read(void)
{   	
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b085      	sub	sp, #20
 8001438:	af02      	add	r7, sp, #8
	uint8_t data_re[2] = {0,0};
 800143a:	2300      	movs	r3, #0
 800143c:	713b      	strb	r3, [r7, #4]
 800143e:	2300      	movs	r3, #0
 8001440:	717b      	strb	r3, [r7, #5]
	while(HAL_I2C_Master_Receive(&hi2c1,BH1750_Addr_L,data_re,2,BH1750.time*2)!=HAL_OK);
 8001442:	bf00      	nop
 8001444:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <BH1750_Read+0x7c>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	1d3a      	adds	r2, r7, #4
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2302      	movs	r3, #2
 8001450:	2146      	movs	r1, #70	; 0x46
 8001452:	4818      	ldr	r0, [pc, #96]	; (80014b4 <BH1750_Read+0x80>)
 8001454:	f002 ffde 	bl	8004414 <HAL_I2C_Master_Receive>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f2      	bne.n	8001444 <BH1750_Read+0x10>
	//HAL_Delay(100);
	BH1750.result_lx=data_re[0];
 800145e:	793b      	ldrb	r3, [r7, #4]
 8001460:	b29a      	uxth	r2, r3
 8001462:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <BH1750_Read+0x7c>)
 8001464:	819a      	strh	r2, [r3, #12]
	BH1750.result_lx=(data_re[0]<<8)+data_re[1];  //????,?????
 8001466:	793b      	ldrb	r3, [r7, #4]
 8001468:	b29b      	uxth	r3, r3
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	b29a      	uxth	r2, r3
 800146e:	797b      	ldrb	r3, [r7, #5]
 8001470:	b29b      	uxth	r3, r3
 8001472:	4413      	add	r3, r2
 8001474:	b29a      	uxth	r2, r3
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <BH1750_Read+0x7c>)
 8001478:	819a      	strh	r2, [r3, #12]
	BH1750.result_lx= BH1750.result_lx/1.2;
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <BH1750_Read+0x7c>)
 800147c:	899b      	ldrh	r3, [r3, #12]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff f8d0 	bl	8000624 <__aeabi_i2d>
 8001484:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001488:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <BH1750_Read+0x84>)
 800148a:	f7ff fa5f 	bl	800094c <__aeabi_ddiv>
 800148e:	4603      	mov	r3, r0
 8001490:	460c      	mov	r4, r1
 8001492:	4618      	mov	r0, r3
 8001494:	4621      	mov	r1, r4
 8001496:	f7ff fc07 	bl	8000ca8 <__aeabi_d2uiz>
 800149a:	4603      	mov	r3, r0
 800149c:	b29a      	uxth	r2, r3
 800149e:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <BH1750_Read+0x7c>)
 80014a0:	819a      	strh	r2, [r3, #12]
	//HAL_Delay(100);
	return BH1750.result_lx;
 80014a2:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <BH1750_Read+0x7c>)
 80014a4:	899b      	ldrh	r3, [r3, #12]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd90      	pop	{r4, r7, pc}
 80014ae:	bf00      	nop
 80014b0:	2000f930 	.word	0x2000f930
 80014b4:	2000f9c8 	.word	0x2000f9c8
 80014b8:	3ff33333 	.word	0x3ff33333

080014bc <esp8266_write_bytes>:
#include <stdio.h>
#include <string.h>
/* UART2 object from main.c */
extern UART_HandleTypeDef huart4;

static void esp8266_write_bytes(void* data, size_t len) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart4, (uint8_t*) data, (uint16_t) len, 1000);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	4803      	ldr	r0, [pc, #12]	; (80014e0 <esp8266_write_bytes+0x24>)
 80014d2:	f004 fc0f 	bl	8005cf4 <HAL_UART_Transmit>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	2000f8b0 	.word	0x2000f8b0

080014e4 <esp8266_send_value>:
	uint16_t packetLen = (uint16_t) len;
	esp8266_write_bytes(&packetLen, 2);
	esp8266_write_bytes(data, len);
}

void esp8266_send_value(uint8_t temp, uint8_t hum, uint16_t lux, uint16_t pm1, uint16_t pm25, uint16_t pm10) {
 80014e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e6:	b091      	sub	sp, #68	; 0x44
 80014e8:	af06      	add	r7, sp, #24
 80014ea:	4604      	mov	r4, r0
 80014ec:	4608      	mov	r0, r1
 80014ee:	4611      	mov	r1, r2
 80014f0:	461a      	mov	r2, r3
 80014f2:	4623      	mov	r3, r4
 80014f4:	71fb      	strb	r3, [r7, #7]
 80014f6:	4603      	mov	r3, r0
 80014f8:	71bb      	strb	r3, [r7, #6]
 80014fa:	460b      	mov	r3, r1
 80014fc:	80bb      	strh	r3, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	807b      	strh	r3, [r7, #2]
	char line[25];
	snprintf(line, sizeof(line), "%d,%d,%d,%d,%d,%d,\n", temp, hum, lux, pm1, pm25, pm10);
 8001502:	79fe      	ldrb	r6, [r7, #7]
 8001504:	79bb      	ldrb	r3, [r7, #6]
 8001506:	88ba      	ldrh	r2, [r7, #4]
 8001508:	8879      	ldrh	r1, [r7, #2]
 800150a:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 800150e:	f8b7 4044 	ldrh.w	r4, [r7, #68]	; 0x44
 8001512:	f107 050c 	add.w	r5, r7, #12
 8001516:	9404      	str	r4, [sp, #16]
 8001518:	9003      	str	r0, [sp, #12]
 800151a:	9102      	str	r1, [sp, #8]
 800151c:	9201      	str	r2, [sp, #4]
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	4633      	mov	r3, r6
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <esp8266_send_value+0x68>)
 8001524:	2119      	movs	r1, #25
 8001526:	4628      	mov	r0, r5
 8001528:	f00a f9e8 	bl	800b8fc <sniprintf>
	esp8266_write_bytes(line, strlen(line));
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	4618      	mov	r0, r3
 8001532:	f7fe fecd 	bl	80002d0 <strlen>
 8001536:	4602      	mov	r2, r0
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	4611      	mov	r1, r2
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff ffbc 	bl	80014bc <esp8266_write_bytes>
	//uint8_t data[2] = { temp, hum };
	//esp8266_send_packet(ESP8266_COM_TAG_TEMP_SENSOR, data, sizeof(data));
}
 8001544:	bf00      	nop
 8001546:	372c      	adds	r7, #44	; 0x2c
 8001548:	46bd      	mov	sp, r7
 800154a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800154c:	0800d690 	.word	0x0800d690

08001550 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001554:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001558:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <SCB_EnableICache+0x3c>)
 800155e:	2200      	movs	r2, #0
 8001560:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001564:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001568:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <SCB_EnableICache+0x3c>)
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	4a06      	ldr	r2, [pc, #24]	; (800158c <SCB_EnableICache+0x3c>)
 8001572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001576:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001578:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800157c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <SCB_EnableDCache+0x7c>)
 8001598:	2200      	movs	r2, #0
 800159a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800159e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <SCB_EnableDCache+0x7c>)
 80015a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015a8:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	0b5b      	lsrs	r3, r3, #13
 80015ae:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015b2:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	08db      	lsrs	r3, r3, #3
 80015b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015bc:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	015a      	lsls	r2, r3, #5
 80015c2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80015c6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015cc:	490f      	ldr	r1, [pc, #60]	; (800160c <SCB_EnableDCache+0x7c>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	1e5a      	subs	r2, r3, #1
 80015d8:	60ba      	str	r2, [r7, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1ef      	bne.n	80015be <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1e5a      	subs	r2, r3, #1
 80015e2:	60fa      	str	r2, [r7, #12]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1e5      	bne.n	80015b4 <SCB_EnableDCache+0x24>
 80015e8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80015ec:	4b07      	ldr	r3, [pc, #28]	; (800160c <SCB_EnableDCache+0x7c>)
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	4a06      	ldr	r2, [pc, #24]	; (800160c <SCB_EnableDCache+0x7c>)
 80015f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f6:	6153      	str	r3, [r2, #20]
 80015f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80015fc:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001610:	b5b0      	push	{r4, r5, r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001616:	f7ff ff9b 	bl	8001550 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800161a:	f7ff ffb9 	bl	8001590 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161e:	f001 f970 	bl	8002902 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001622:	f000 f8ad 	bl	8001780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001626:	f000 fad7 	bl	8001bd8 <MX_GPIO_Init>
  MX_DMA_Init();
 800162a:	f000 fab7 	bl	8001b9c <MX_DMA_Init>
  MX_CRC_Init();
 800162e:	f000 f993 	bl	8001958 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8001632:	f000 fa53 	bl	8001adc <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001636:	f000 fa81 	bl	8001b3c <MX_USART6_UART_Init>
  MX_ADC3_Init();
 800163a:	f000 f93b 	bl	80018b4 <MX_ADC3_Init>
  MX_I2C1_Init();
 800163e:	f000 f9ad 	bl	800199c <MX_I2C1_Init>
  MX_UART7_Init();
 8001642:	f000 fa1b 	bl	8001a7c <MX_UART7_Init>
  MX_UART4_Init();
 8001646:	f000 f9e9 	bl	8001a1c <MX_UART4_Init>
  MX_X_CUBE_AI_Init();
 800164a:	f005 fc57 	bl	8006efc <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  Preprocessing_Init();
 800164e:	f000 fd01 	bl	8002054 <Preprocessing_Init>
  SpectrColIndex = 0;
 8001652:	4b3b      	ldr	r3, [pc, #236]	; (8001740 <main+0x130>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
  HAL_ADC_Start_DMA(&hadc3, (uint32_t *)ADC_buffer, ADC_BUF_LEN);
 8001658:	f44f 4284 	mov.w	r2, #16896	; 0x4200
 800165c:	4939      	ldr	r1, [pc, #228]	; (8001744 <main+0x134>)
 800165e:	483a      	ldr	r0, [pc, #232]	; (8001748 <main+0x138>)
 8001660:	f001 fa12 	bl	8002a88 <HAL_ADC_Start_DMA>
  BH1750_Init();
 8001664:	f7ff fe86 	bl	8001374 <BH1750_Init>
  BH1750_Start();
 8001668:	f7ff fed2 	bl	8001410 <BH1750_Start>
  PMS5003_ReceiveStart_IT(&huart6);
 800166c:	4837      	ldr	r0, [pc, #220]	; (800174c <main+0x13c>)
 800166e:	f000 fdcb 	bl	8002208 <PMS5003_ReceiveStart_IT>
  //HAL_TIM_Base_Start_IT(&htim2);
  //ESP_Init("IoT-Research", "Tapit168");
  HAL_Delay(1000);
 8001672:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001676:	f001 f9a1 	bl	80029bc <HAL_Delay>
	  	HAL_Delay(1000);
	  	HAL_UART_Transmit(&huart7,(uint8_t *)"temp.txt=\"9\"",16,1000);
	  	HAL_UART_Transmit(&huart7,Cmd_End,3,100);
	  	HAL_Delay(1000);*/

	    ind=hdma_adc3.Instance->NDTR;
 800167a:	4b35      	ldr	r3, [pc, #212]	; (8001750 <main+0x140>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	4a34      	ldr	r2, [pc, #208]	; (8001754 <main+0x144>)
 8001682:	6013      	str	r3, [r2, #0]
	    write=ADC_BUF_LEN-ind;
 8001684:	4b33      	ldr	r3, [pc, #204]	; (8001754 <main+0x144>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f5c3 4384 	rsb	r3, r3, #16896	; 0x4200
 800168c:	4a32      	ldr	r2, [pc, #200]	; (8001758 <main+0x148>)
 800168e:	6013      	str	r3, [r2, #0]
	    Sort_ADC_buffer();
 8001690:	f000 fade 	bl	8001c50 <Sort_ADC_buffer>
	    //lowpass_FIR();
	    Mel_array();
 8001694:	f000 fb1c 	bl	8001cd0 <Mel_array>
	  	PowerTodB(aSpectrogram);
 8001698:	4830      	ldr	r0, [pc, #192]	; (800175c <main+0x14c>)
 800169a:	f000 fd21 	bl	80020e0 <PowerTodB>
	  	aiRun(aSpectrogram, data_out);
 800169e:	4930      	ldr	r1, [pc, #192]	; (8001760 <main+0x150>)
 80016a0:	482e      	ldr	r0, [pc, #184]	; (800175c <main+0x14c>)
 80016a2:	f005 fbeb 	bl	8006e7c <aiRun>
	  	t1 = HAL_GetTick();
 80016a6:	f001 f97d 	bl	80029a4 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <main+0x154>)
 80016ae:	601a      	str	r2, [r3, #0]
	  	Find_max_output_ind();
 80016b0:	f000 fb7e 	bl	8001db0 <Find_max_output_ind>
	  	Send_Activities_to_NEXTION();
 80016b4:	f000 fbbc 	bl	8001e30 <Send_Activities_to_NEXTION>
	  	send_data++;
 80016b8:	4b2b      	ldr	r3, [pc, #172]	; (8001768 <main+0x158>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	3301      	adds	r3, #1
 80016be:	4a2a      	ldr	r2, [pc, #168]	; (8001768 <main+0x158>)
 80016c0:	6013      	str	r3, [r2, #0]
	  	if(send_data==15)
 80016c2:	4b29      	ldr	r3, [pc, #164]	; (8001768 <main+0x158>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b0f      	cmp	r3, #15
 80016c8:	d12d      	bne.n	8001726 <main+0x116>
	  	{
	  		value_lux = BH1750_Read();
 80016ca:	f7ff feb3 	bl	8001434 <BH1750_Read>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b26      	ldr	r3, [pc, #152]	; (800176c <main+0x15c>)
 80016d4:	801a      	strh	r2, [r3, #0]
	  		PMS5003_ReceiveData_IT(&huart6);
 80016d6:	481d      	ldr	r0, [pc, #116]	; (800174c <main+0x13c>)
 80016d8:	f000 fda6 	bl	8002228 <PMS5003_ReceiveData_IT>
	  		d = DHT_getData(DHT11);
 80016dc:	2000      	movs	r0, #0
 80016de:	f7ff fd13 	bl	8001108 <DHT_getData>
 80016e2:	4602      	mov	r2, r0
 80016e4:	4b22      	ldr	r3, [pc, #136]	; (8001770 <main+0x160>)
 80016e6:	b212      	sxth	r2, r2
 80016e8:	4611      	mov	r1, r2
 80016ea:	7019      	strb	r1, [r3, #0]
 80016ec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80016f0:	705a      	strb	r2, [r3, #1]
	  		Send_Sensor_to_NEXTION();
 80016f2:	f000 fc3b 	bl	8001f6c <Send_Sensor_to_NEXTION>
	  		send_data=0;
 80016f6:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <main+0x158>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
	  		/*Value_Buf [0]=d.temp;
	  		Value_Buf [1]=d.hum;
	  		Value_Buf [2]=value_lux;
	  		Value_Buf [3]= PMS5003.pm2p5_ATM;
	  		ESP_Send_Multi("QBICBAHQY14LYJSR", 4, Value_Buf);*/
	  		esp8266_send_value(d.temp, d.hum, value_lux, PMS5003.pm1p0_ATM, PMS5003.pm2p5_ATM, PMS5003.pm10_ATM);
 80016fc:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <main+0x160>)
 80016fe:	7858      	ldrb	r0, [r3, #1]
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <main+0x160>)
 8001702:	7819      	ldrb	r1, [r3, #0]
 8001704:	4b19      	ldr	r3, [pc, #100]	; (800176c <main+0x15c>)
 8001706:	881c      	ldrh	r4, [r3, #0]
 8001708:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <main+0x164>)
 800170a:	895b      	ldrh	r3, [r3, #10]
 800170c:	b29d      	uxth	r5, r3
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <main+0x164>)
 8001710:	899b      	ldrh	r3, [r3, #12]
 8001712:	b29b      	uxth	r3, r3
 8001714:	4a17      	ldr	r2, [pc, #92]	; (8001774 <main+0x164>)
 8001716:	89d2      	ldrh	r2, [r2, #14]
 8001718:	b292      	uxth	r2, r2
 800171a:	9201      	str	r2, [sp, #4]
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	462b      	mov	r3, r5
 8001720:	4622      	mov	r2, r4
 8001722:	f7ff fedf 	bl	80014e4 <esp8266_send_value>
	  	}
	  	//HAL_Delay(200);
	  	t2 = HAL_GetTick();
 8001726:	f001 f93d 	bl	80029a4 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <main+0x168>)
 800172e:	601a      	str	r2, [r3, #0]

	  	t = t2 - t1;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <main+0x168>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <main+0x154>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	4a10      	ldr	r2, [pc, #64]	; (800177c <main+0x16c>)
 800173c:	6013      	str	r3, [r2, #0]
	    ind=hdma_adc3.Instance->NDTR;
 800173e:	e79c      	b.n	800167a <main+0x6a>
 8001740:	20001de0 	.word	0x20001de0
 8001744:	20031c88 	.word	0x20031c88
 8001748:	2002030c 	.word	0x2002030c
 800174c:	200287fc 	.word	0x200287fc
 8001750:	2000fa40 	.word	0x2000fa40
 8001754:	20001e54 	.word	0x20001e54
 8001758:	20001e58 	.word	0x20001e58
 800175c:	20000e68 	.word	0x20000e68
 8001760:	200287d8 	.word	0x200287d8
 8001764:	200287f4 	.word	0x200287f4
 8001768:	20001e60 	.word	0x20001e60
 800176c:	20001e5c 	.word	0x20001e5c
 8001770:	200287f8 	.word	0x200287f8
 8001774:	2003b08c 	.word	0x2003b08c
 8001778:	2000fa3c 	.word	0x2000fa3c
 800177c:	2000f940 	.word	0x2000f940

08001780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b0b4      	sub	sp, #208	; 0xd0
 8001784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001786:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800178a:	2230      	movs	r2, #48	; 0x30
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f009 fb97 	bl	800aec2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001794:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017a4:	f107 0308 	add.w	r3, r7, #8
 80017a8:	2284      	movs	r2, #132	; 0x84
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f009 fb88 	bl	800aec2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	4b3e      	ldr	r3, [pc, #248]	; (80018ac <SystemClock_Config+0x12c>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	4a3d      	ldr	r2, [pc, #244]	; (80018ac <SystemClock_Config+0x12c>)
 80017b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017bc:	6413      	str	r3, [r2, #64]	; 0x40
 80017be:	4b3b      	ldr	r3, [pc, #236]	; (80018ac <SystemClock_Config+0x12c>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ca:	4b39      	ldr	r3, [pc, #228]	; (80018b0 <SystemClock_Config+0x130>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a38      	ldr	r2, [pc, #224]	; (80018b0 <SystemClock_Config+0x130>)
 80017d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <SystemClock_Config+0x130>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017e2:	2302      	movs	r3, #2
 80017e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017e8:	2301      	movs	r3, #1
 80017ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017ee:	2310      	movs	r3, #16
 80017f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f4:	2302      	movs	r3, #2
 80017f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001800:	2310      	movs	r3, #16
 8001802:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 369;
 8001806:	f240 1371 	movw	r3, #369	; 0x171
 800180a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800180e:	2302      	movs	r3, #2
 8001810:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001814:	2302      	movs	r3, #2
 8001816:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800181a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800181e:	4618      	mov	r0, r3
 8001820:	f003 f9b6 	bl	8004b90 <HAL_RCC_OscConfig>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800182a:	f000 fce5 	bl	80021f8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800182e:	f003 f95f 	bl	8004af0 <HAL_PWREx_EnableOverDrive>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001838:	f000 fcde 	bl	80021f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800183c:	230f      	movs	r3, #15
 800183e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001842:	2302      	movs	r3, #2
 8001844:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001848:	2300      	movs	r3, #0
 800184a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800184e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001852:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001856:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800185a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800185e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001862:	2106      	movs	r1, #6
 8001864:	4618      	mov	r0, r3
 8001866:	f003 fc37 	bl	80050d8 <HAL_RCC_ClockConfig>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001870:	f000 fcc2 	bl	80021f8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
 8001874:	f645 2340 	movw	r3, #23104	; 0x5a40
 8001878:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800187a:	2300      	movs	r3, #0
 800187c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800187e:	2300      	movs	r3, #0
 8001880:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001882:	2300      	movs	r3, #0
 8001884:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001886:	2300      	movs	r3, #0
 8001888:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800188a:	2300      	movs	r3, #0
 800188c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800188e:	f107 0308 	add.w	r3, r7, #8
 8001892:	4618      	mov	r0, r3
 8001894:	f003 fdf2 	bl	800547c <HAL_RCCEx_PeriphCLKConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <SystemClock_Config+0x122>
  {
    Error_Handler();
 800189e:	f000 fcab 	bl	80021f8 <Error_Handler>
  }
}
 80018a2:	bf00      	nop
 80018a4:	37d0      	adds	r7, #208	; 0xd0
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40007000 	.word	0x40007000

080018b4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ba:	463b      	mov	r3, r7
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80018c6:	4b21      	ldr	r3, [pc, #132]	; (800194c <MX_ADC3_Init+0x98>)
 80018c8:	4a21      	ldr	r2, [pc, #132]	; (8001950 <MX_ADC3_Init+0x9c>)
 80018ca:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80018cc:	4b1f      	ldr	r3, [pc, #124]	; (800194c <MX_ADC3_Init+0x98>)
 80018ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018d2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80018d4:	4b1d      	ldr	r3, [pc, #116]	; (800194c <MX_ADC3_Init+0x98>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018da:	4b1c      	ldr	r3, [pc, #112]	; (800194c <MX_ADC3_Init+0x98>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80018e0:	4b1a      	ldr	r3, [pc, #104]	; (800194c <MX_ADC3_Init+0x98>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80018e6:	4b19      	ldr	r3, [pc, #100]	; (800194c <MX_ADC3_Init+0x98>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <MX_ADC3_Init+0x98>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <MX_ADC3_Init+0x98>)
 80018f6:	4a17      	ldr	r2, [pc, #92]	; (8001954 <MX_ADC3_Init+0xa0>)
 80018f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018fa:	4b14      	ldr	r3, [pc, #80]	; (800194c <MX_ADC3_Init+0x98>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <MX_ADC3_Init+0x98>)
 8001902:	2201      	movs	r2, #1
 8001904:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <MX_ADC3_Init+0x98>)
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <MX_ADC3_Init+0x98>)
 8001910:	2201      	movs	r2, #1
 8001912:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001914:	480d      	ldr	r0, [pc, #52]	; (800194c <MX_ADC3_Init+0x98>)
 8001916:	f001 f873 	bl	8002a00 <HAL_ADC_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001920:	f000 fc6a 	bl	80021f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001924:	2308      	movs	r3, #8
 8001926:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001928:	2301      	movs	r3, #1
 800192a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800192c:	2307      	movs	r3, #7
 800192e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001930:	463b      	mov	r3, r7
 8001932:	4619      	mov	r1, r3
 8001934:	4805      	ldr	r0, [pc, #20]	; (800194c <MX_ADC3_Init+0x98>)
 8001936:	f001 f9b3 	bl	8002ca0 <HAL_ADC_ConfigChannel>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001940:	f000 fc5a 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	2002030c 	.word	0x2002030c
 8001950:	40012200 	.word	0x40012200
 8001954:	0f000001 	.word	0x0f000001

08001958 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800195c:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <MX_CRC_Init+0x3c>)
 800195e:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <MX_CRC_Init+0x40>)
 8001960:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001962:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <MX_CRC_Init+0x3c>)
 8001964:	2200      	movs	r2, #0
 8001966:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <MX_CRC_Init+0x3c>)
 800196a:	2200      	movs	r2, #0
 800196c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <MX_CRC_Init+0x3c>)
 8001970:	2200      	movs	r2, #0
 8001972:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <MX_CRC_Init+0x3c>)
 8001976:	2200      	movs	r2, #0
 8001978:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <MX_CRC_Init+0x3c>)
 800197c:	2201      	movs	r2, #1
 800197e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001980:	4804      	ldr	r0, [pc, #16]	; (8001994 <MX_CRC_Init+0x3c>)
 8001982:	f001 fd65 	bl	8003450 <HAL_CRC_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800198c:	f000 fc34 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	2000fa18 	.word	0x2000fa18
 8001998:	40023000 	.word	0x40023000

0800199c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019a0:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <MX_I2C1_Init+0x74>)
 80019a2:	4a1c      	ldr	r2, [pc, #112]	; (8001a14 <MX_I2C1_Init+0x78>)
 80019a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303C59;
 80019a6:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <MX_I2C1_Init+0x74>)
 80019a8:	4a1b      	ldr	r2, [pc, #108]	; (8001a18 <MX_I2C1_Init+0x7c>)
 80019aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019ac:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <MX_I2C1_Init+0x74>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019b2:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <MX_I2C1_Init+0x74>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019b8:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <MX_I2C1_Init+0x74>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <MX_I2C1_Init+0x74>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <MX_I2C1_Init+0x74>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <MX_I2C1_Init+0x74>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <MX_I2C1_Init+0x74>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019d6:	480e      	ldr	r0, [pc, #56]	; (8001a10 <MX_I2C1_Init+0x74>)
 80019d8:	f002 fb98 	bl	800410c <HAL_I2C_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80019e2:	f000 fc09 	bl	80021f8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019e6:	2100      	movs	r1, #0
 80019e8:	4809      	ldr	r0, [pc, #36]	; (8001a10 <MX_I2C1_Init+0x74>)
 80019ea:	f002 ffe9 	bl	80049c0 <HAL_I2CEx_ConfigAnalogFilter>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80019f4:	f000 fc00 	bl	80021f8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019f8:	2100      	movs	r1, #0
 80019fa:	4805      	ldr	r0, [pc, #20]	; (8001a10 <MX_I2C1_Init+0x74>)
 80019fc:	f003 f82b 	bl	8004a56 <HAL_I2CEx_ConfigDigitalFilter>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a06:	f000 fbf7 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	2000f9c8 	.word	0x2000f9c8
 8001a14:	40005400 	.word	0x40005400
 8001a18:	20303c59 	.word	0x20303c59

08001a1c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <MX_UART4_Init+0x58>)
 8001a22:	4a15      	ldr	r2, [pc, #84]	; (8001a78 <MX_UART4_Init+0x5c>)
 8001a24:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001a26:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <MX_UART4_Init+0x58>)
 8001a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a2c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <MX_UART4_Init+0x58>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <MX_UART4_Init+0x58>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <MX_UART4_Init+0x58>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <MX_UART4_Init+0x58>)
 8001a42:	220c      	movs	r2, #12
 8001a44:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <MX_UART4_Init+0x58>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <MX_UART4_Init+0x58>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <MX_UART4_Init+0x58>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <MX_UART4_Init+0x58>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a5e:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_UART4_Init+0x58>)
 8001a60:	f004 f8fa 	bl	8005c58 <HAL_UART_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001a6a:	f000 fbc5 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	2000f8b0 	.word	0x2000f8b0
 8001a78:	40004c00 	.word	0x40004c00

08001a7c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <MX_UART7_Init+0x58>)
 8001a82:	4a15      	ldr	r2, [pc, #84]	; (8001ad8 <MX_UART7_Init+0x5c>)
 8001a84:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <MX_UART7_Init+0x58>)
 8001a88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a8c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <MX_UART7_Init+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <MX_UART7_Init+0x58>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <MX_UART7_Init+0x58>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <MX_UART7_Init+0x58>)
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <MX_UART7_Init+0x58>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <MX_UART7_Init+0x58>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <MX_UART7_Init+0x58>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <MX_UART7_Init+0x58>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <MX_UART7_Init+0x58>)
 8001ac0:	f004 f8ca 	bl	8005c58 <HAL_UART_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001aca:	f000 fb95 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	2000f944 	.word	0x2000f944
 8001ad8:	40007800 	.word	0x40007800

08001adc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <MX_USART1_UART_Init+0x58>)
 8001ae2:	4a15      	ldr	r2, [pc, #84]	; (8001b38 <MX_USART1_UART_Init+0x5c>)
 8001ae4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <MX_USART1_UART_Init+0x58>)
 8001ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_USART1_UART_Init+0x58>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <MX_USART1_UART_Init+0x58>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <MX_USART1_UART_Init+0x58>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <MX_USART1_UART_Init+0x58>)
 8001b02:	220c      	movs	r2, #12
 8001b04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <MX_USART1_UART_Init+0x58>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <MX_USART1_UART_Init+0x58>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <MX_USART1_UART_Init+0x58>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <MX_USART1_UART_Init+0x58>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <MX_USART1_UART_Init+0x58>)
 8001b20:	f004 f89a 	bl	8005c58 <HAL_UART_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b2a:	f000 fb65 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20028758 	.word	0x20028758
 8001b38:	40011000 	.word	0x40011000

08001b3c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b40:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <MX_USART6_UART_Init+0x58>)
 8001b42:	4a15      	ldr	r2, [pc, #84]	; (8001b98 <MX_USART6_UART_Init+0x5c>)
 8001b44:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001b46:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <MX_USART6_UART_Init+0x58>)
 8001b48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b4c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <MX_USART6_UART_Init+0x58>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <MX_USART6_UART_Init+0x58>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <MX_USART6_UART_Init+0x58>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <MX_USART6_UART_Init+0x58>)
 8001b62:	220c      	movs	r2, #12
 8001b64:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b66:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <MX_USART6_UART_Init+0x58>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <MX_USART6_UART_Init+0x58>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <MX_USART6_UART_Init+0x58>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <MX_USART6_UART_Init+0x58>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b7e:	4805      	ldr	r0, [pc, #20]	; (8001b94 <MX_USART6_UART_Init+0x58>)
 8001b80:	f004 f86a 	bl	8005c58 <HAL_UART_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001b8a:	f000 fb35 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200287fc 	.word	0x200287fc
 8001b98:	40011400 	.word	0x40011400

08001b9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <MX_DMA_Init+0x38>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <MX_DMA_Init+0x38>)
 8001ba8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <MX_DMA_Init+0x38>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2038      	movs	r0, #56	; 0x38
 8001bc0:	f001 fc0f 	bl	80033e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001bc4:	2038      	movs	r0, #56	; 0x38
 8001bc6:	f001 fc28 	bl	800341a <HAL_NVIC_EnableIRQ>

}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800

08001bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bde:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <MX_GPIO_Init+0x74>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a1a      	ldr	r2, [pc, #104]	; (8001c4c <MX_GPIO_Init+0x74>)
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <MX_GPIO_Init+0x74>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <MX_GPIO_Init+0x74>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <MX_GPIO_Init+0x74>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <MX_GPIO_Init+0x74>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <MX_GPIO_Init+0x74>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <MX_GPIO_Init+0x74>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <MX_GPIO_Init+0x74>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <MX_GPIO_Init+0x74>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a08      	ldr	r2, [pc, #32]	; (8001c4c <MX_GPIO_Init+0x74>)
 8001c2c:	f043 0320 	orr.w	r3, r3, #32
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <MX_GPIO_Init+0x74>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0320 	and.w	r3, r3, #32
 8001c3a:	603b      	str	r3, [r7, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]

}
 8001c3e:	bf00      	nop
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40023800 	.word	0x40023800

08001c50 <Sort_ADC_buffer>:

/* USER CODE BEGIN 4 */
/////////////sắp xếp lại chuỗi dữ liệu//////
void Sort_ADC_buffer()
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
	for(int i=0;i<ind;i++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	e00d      	b.n	8001c78 <Sort_ADC_buffer+0x28>
		   ADC_buffer_sort[i]=ADC_buffer[i+write];
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <Sort_ADC_buffer+0x6c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	4a16      	ldr	r2, [pc, #88]	; (8001cc0 <Sort_ADC_buffer+0x70>)
 8001c66:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001c6a:	4a16      	ldr	r2, [pc, #88]	; (8001cc4 <Sort_ADC_buffer+0x74>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<ind;i++)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3301      	adds	r3, #1
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <Sort_ADC_buffer+0x78>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d3ec      	bcc.n	8001c5c <Sort_ADC_buffer+0xc>
	for(int i=0;i<write;i++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	603b      	str	r3, [r7, #0]
 8001c86:	e00d      	b.n	8001ca4 <Sort_ADC_buffer+0x54>
		   ADC_buffer_sort[i+ind]=ADC_buffer[i];
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <Sort_ADC_buffer+0x78>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	490b      	ldr	r1, [pc, #44]	; (8001cc0 <Sort_ADC_buffer+0x70>)
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001c98:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <Sort_ADC_buffer+0x74>)
 8001c9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<write;i++)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <Sort_ADC_buffer+0x6c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d3ec      	bcc.n	8001c88 <Sort_ADC_buffer+0x38>
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20001e58 	.word	0x20001e58
 8001cc0:	20031c88 	.word	0x20031c88
 8001cc4:	20020354 	.word	0x20020354
 8001cc8:	20001e54 	.word	0x20001e54
 8001ccc:	00000000 	.word	0x00000000

08001cd0 <Mel_array>:
///////////////mảng mel 32*30 giá trị//////////////////
void Mel_array()
{
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
	for (ColIndex=0; ColIndex<SPECTROGRAM_COLS; ColIndex++)
 8001cd6:	4b30      	ldr	r3, [pc, #192]	; (8001d98 <Mel_array+0xc8>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	e04f      	b.n	8001d7e <Mel_array+0xae>
	{
		for(int i=0; i<1024; i++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	e027      	b.n	8001d34 <Mel_array+0x64>
		  	pBuffer[i]=(ADC_buffer_sort[ColIndex*HOPLENGTH+i]-2047.0)/2047.0;
 8001ce4:	4b2c      	ldr	r3, [pc, #176]	; (8001d98 <Mel_array+0xc8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	025a      	lsls	r2, r3, #9
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	4a2b      	ldr	r2, [pc, #172]	; (8001d9c <Mel_array+0xcc>)
 8001cf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fc95 	bl	8000624 <__aeabi_i2d>
 8001cfa:	a325      	add	r3, pc, #148	; (adr r3, 8001d90 <Mel_array+0xc0>)
 8001cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d00:	f7fe fb42 	bl	8000388 <__aeabi_dsub>
 8001d04:	4603      	mov	r3, r0
 8001d06:	460c      	mov	r4, r1
 8001d08:	4618      	mov	r0, r3
 8001d0a:	4621      	mov	r1, r4
 8001d0c:	a320      	add	r3, pc, #128	; (adr r3, 8001d90 <Mel_array+0xc0>)
 8001d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d12:	f7fe fe1b 	bl	800094c <__aeabi_ddiv>
 8001d16:	4603      	mov	r3, r0
 8001d18:	460c      	mov	r4, r1
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	4621      	mov	r1, r4
 8001d1e:	f7fe ffe3 	bl	8000ce8 <__aeabi_d2f>
 8001d22:	4601      	mov	r1, r0
 8001d24:	4a1e      	ldr	r2, [pc, #120]	; (8001da0 <Mel_array+0xd0>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	6019      	str	r1, [r3, #0]
		for(int i=0; i<1024; i++)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3301      	adds	r3, #1
 8001d32:	607b      	str	r3, [r7, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d3a:	dbd3      	blt.n	8001ce4 <Mel_array+0x14>
		MelSpectrogramColumn(&S_MelSpectr, pBuffer, aColBuffer);
 8001d3c:	4a19      	ldr	r2, [pc, #100]	; (8001da4 <Mel_array+0xd4>)
 8001d3e:	4918      	ldr	r1, [pc, #96]	; (8001da0 <Mel_array+0xd0>)
 8001d40:	4819      	ldr	r0, [pc, #100]	; (8001da8 <Mel_array+0xd8>)
 8001d42:	f004 ffcd 	bl	8006ce0 <MelSpectrogramColumn>
		for (uint32_t j = 0; j < NMELS; j++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	603b      	str	r3, [r7, #0]
 8001d4a:	e010      	b.n	8001d6e <Mel_array+0x9e>
		{
		  	aSpectrogram[j * SPECTROGRAM_COLS + ColIndex] = aColBuffer[j];
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	015a      	lsls	r2, r3, #5
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <Mel_array+0xc8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4413      	add	r3, r2
 8001d56:	4913      	ldr	r1, [pc, #76]	; (8001da4 <Mel_array+0xd4>)
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	0092      	lsls	r2, r2, #2
 8001d5c:	440a      	add	r2, r1
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	4912      	ldr	r1, [pc, #72]	; (8001dac <Mel_array+0xdc>)
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	601a      	str	r2, [r3, #0]
		for (uint32_t j = 0; j < NMELS; j++)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	603b      	str	r3, [r7, #0]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	2b1d      	cmp	r3, #29
 8001d72:	d9eb      	bls.n	8001d4c <Mel_array+0x7c>
	for (ColIndex=0; ColIndex<SPECTROGRAM_COLS; ColIndex++)
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <Mel_array+0xc8>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	4a07      	ldr	r2, [pc, #28]	; (8001d98 <Mel_array+0xc8>)
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <Mel_array+0xc8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b1f      	cmp	r3, #31
 8001d84:	d9ab      	bls.n	8001cde <Mel_array+0xe>
		}
	}
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd90      	pop	{r4, r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	00000000 	.word	0x00000000
 8001d94:	409ffc00 	.word	0x409ffc00
 8001d98:	20001e50 	.word	0x20001e50
 8001d9c:	20020354 	.word	0x20020354
 8001da0:	2003a088 	.word	0x2003a088
 8001da4:	20001d68 	.word	0x20001d68
 8001da8:	20001e48 	.word	0x20001e48
 8001dac:	20000e68 	.word	0x20000e68

08001db0 <Find_max_output_ind>:
////////////////tìm vị trí và giá trị lớn nhất của output////////////////////
void Find_max_output_ind()
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
	//confirm1=confirm2;
	confirm2=max_output_ind;
 8001db6:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <Find_max_output_ind+0x6c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a19      	ldr	r2, [pc, #100]	; (8001e20 <Find_max_output_ind+0x70>)
 8001dbc:	6013      	str	r3, [r2, #0]
	max_output_ind=0;
 8001dbe:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <Find_max_output_ind+0x6c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
	max_output=data_out[0];
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <Find_max_output_ind+0x74>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a17      	ldr	r2, [pc, #92]	; (8001e28 <Find_max_output_ind+0x78>)
 8001dca:	6013      	str	r3, [r2, #0]
	for (int i=1; i<n_label;i++)
 8001dcc:	2301      	movs	r3, #1
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	e01a      	b.n	8001e08 <Find_max_output_ind+0x58>
	{
		if( data_out[i]>max_output)
 8001dd2:	4a14      	ldr	r2, [pc, #80]	; (8001e24 <Find_max_output_ind+0x74>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	ed93 7a00 	vldr	s14, [r3]
 8001dde:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <Find_max_output_ind+0x78>)
 8001de0:	edd3 7a00 	vldr	s15, [r3]
 8001de4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dec:	dd09      	ble.n	8001e02 <Find_max_output_ind+0x52>
		{
			max_output=data_out[i];
 8001dee:	4a0d      	ldr	r2, [pc, #52]	; (8001e24 <Find_max_output_ind+0x74>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a0b      	ldr	r2, [pc, #44]	; (8001e28 <Find_max_output_ind+0x78>)
 8001dfa:	6013      	str	r3, [r2, #0]
			max_output_ind=i;
 8001dfc:	4a07      	ldr	r2, [pc, #28]	; (8001e1c <Find_max_output_ind+0x6c>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6013      	str	r3, [r2, #0]
	for (int i=1; i<n_label;i++)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3301      	adds	r3, #1
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	dde1      	ble.n	8001dd2 <Find_max_output_ind+0x22>
		//{max_output=data_out[2];max_output_ind=2;}
	//if(data_out[3]>max_output)
		//{max_output=data_out[3];max_output_ind=3;}
	//if(data_out[4]>max_output)
		//{max_output=data_out[4];max_output_ind=4;}
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	2000fa14 	.word	0x2000fa14
 8001e20:	200287f0 	.word	0x200287f0
 8001e24:	200287d8 	.word	0x200287d8
 8001e28:	200287ec 	.word	0x200287ec
 8001e2c:	00000000 	.word	0x00000000

08001e30 <Send_Activities_to_NEXTION>:
///////////////////hiển thị hoạt động lên màn hình////////////////////
void Send_Activities_to_NEXTION(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0

	if(max_output>0.95)
 8001e34:	4b42      	ldr	r3, [pc, #264]	; (8001f40 <Send_Activities_to_NEXTION+0x110>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe fc05 	bl	8000648 <__aeabi_f2d>
 8001e3e:	a33e      	add	r3, pc, #248	; (adr r3, 8001f38 <Send_Activities_to_NEXTION+0x108>)
 8001e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e44:	f7fe fee8 	bl	8000c18 <__aeabi_dcmpgt>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d05d      	beq.n	8001f0a <Send_Activities_to_NEXTION+0xda>
	{
		if((confirm2==max_output_ind)/*&&(confirm2==confirm1)*/)
 8001e4e:	4b3d      	ldr	r3, [pc, #244]	; (8001f44 <Send_Activities_to_NEXTION+0x114>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	4b3d      	ldr	r3, [pc, #244]	; (8001f48 <Send_Activities_to_NEXTION+0x118>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d16b      	bne.n	8001f32 <Send_Activities_to_NEXTION+0x102>
		{
			switch (max_output_ind)
 8001e5a:	4b3b      	ldr	r3, [pc, #236]	; (8001f48 <Send_Activities_to_NEXTION+0x118>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d843      	bhi.n	8001eec <Send_Activities_to_NEXTION+0xbc>
 8001e64:	a201      	add	r2, pc, #4	; (adr r2, 8001e6c <Send_Activities_to_NEXTION+0x3c>)
 8001e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6a:	bf00      	nop
 8001e6c:	08001e7d 	.word	0x08001e7d
 8001e70:	08001e99 	.word	0x08001e99
 8001e74:	08001eb5 	.word	0x08001eb5
 8001e78:	08001ed1 	.word	0x08001ed1
			{
			case 1:
					HAL_UART_Transmit(&huart7,(uint8_t *)"output.val=9",12,1000);
 8001e7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e80:	220c      	movs	r2, #12
 8001e82:	4932      	ldr	r1, [pc, #200]	; (8001f4c <Send_Activities_to_NEXTION+0x11c>)
 8001e84:	4832      	ldr	r0, [pc, #200]	; (8001f50 <Send_Activities_to_NEXTION+0x120>)
 8001e86:	f003 ff35 	bl	8005cf4 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart7,Cmd_End,3,100);
 8001e8a:	2364      	movs	r3, #100	; 0x64
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	4931      	ldr	r1, [pc, #196]	; (8001f54 <Send_Activities_to_NEXTION+0x124>)
 8001e90:	482f      	ldr	r0, [pc, #188]	; (8001f50 <Send_Activities_to_NEXTION+0x120>)
 8001e92:	f003 ff2f 	bl	8005cf4 <HAL_UART_Transmit>
					//for(int i=0; i<16896;i=i+20)
					//{
						//printf("%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\r\n",ADC_buffer_sort[i],ADC_buffer_sort[i+1],ADC_buffer_sort[i+2],ADC_buffer_sort[i+3],ADC_buffer_sort[i+4],ADC_buffer_sort[i+5],ADC_buffer_sort[i+6],ADC_buffer_sort[i+7],ADC_buffer_sort[i+8],ADC_buffer_sort[i+9],ADC_buffer_sort[i+10],ADC_buffer_sort[i+11],ADC_buffer_sort[i+12],ADC_buffer_sort[i+13],ADC_buffer_sort[i+14],ADC_buffer_sort[i+15],ADC_buffer_sort[i+16],ADC_buffer_sort[i+17],ADC_buffer_sort[i+18],ADC_buffer_sort[i+19]);

					//}
					break;
 8001e96:	e04d      	b.n	8001f34 <Send_Activities_to_NEXTION+0x104>
			case 2:
					HAL_UART_Transmit(&huart7,(uint8_t *)"output.val=10",13,1000);
 8001e98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e9c:	220d      	movs	r2, #13
 8001e9e:	492e      	ldr	r1, [pc, #184]	; (8001f58 <Send_Activities_to_NEXTION+0x128>)
 8001ea0:	482b      	ldr	r0, [pc, #172]	; (8001f50 <Send_Activities_to_NEXTION+0x120>)
 8001ea2:	f003 ff27 	bl	8005cf4 <HAL_UART_Transmit>
				  	HAL_UART_Transmit(&huart7,Cmd_End,3,100);
 8001ea6:	2364      	movs	r3, #100	; 0x64
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	492a      	ldr	r1, [pc, #168]	; (8001f54 <Send_Activities_to_NEXTION+0x124>)
 8001eac:	4828      	ldr	r0, [pc, #160]	; (8001f50 <Send_Activities_to_NEXTION+0x120>)
 8001eae:	f003 ff21 	bl	8005cf4 <HAL_UART_Transmit>
				  	//for(int i=0; i<16896;i=i+20)
				  	//{
				  		//printf("%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\r\n",ADC_buffer_sort[i],ADC_buffer_sort[i+1],ADC_buffer_sort[i+2],ADC_buffer_sort[i+3],ADC_buffer_sort[i+4],ADC_buffer_sort[i+5],ADC_buffer_sort[i+6],ADC_buffer_sort[i+7],ADC_buffer_sort[i+8],ADC_buffer_sort[i+9],ADC_buffer_sort[i+10],ADC_buffer_sort[i+11],ADC_buffer_sort[i+12],ADC_buffer_sort[i+13],ADC_buffer_sort[i+14],ADC_buffer_sort[i+15],ADC_buffer_sort[i+16],ADC_buffer_sort[i+17],ADC_buffer_sort[i+18],ADC_buffer_sort[i+19]);

				  	//}
				  			break;
 8001eb2:	e03f      	b.n	8001f34 <Send_Activities_to_NEXTION+0x104>
			case 3:
					HAL_UART_Transmit(&huart7,(uint8_t *)"output.val=11",13,1000);
 8001eb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb8:	220d      	movs	r2, #13
 8001eba:	4928      	ldr	r1, [pc, #160]	; (8001f5c <Send_Activities_to_NEXTION+0x12c>)
 8001ebc:	4824      	ldr	r0, [pc, #144]	; (8001f50 <Send_Activities_to_NEXTION+0x120>)
 8001ebe:	f003 ff19 	bl	8005cf4 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart7,Cmd_End,3,100);
 8001ec2:	2364      	movs	r3, #100	; 0x64
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	4923      	ldr	r1, [pc, #140]	; (8001f54 <Send_Activities_to_NEXTION+0x124>)
 8001ec8:	4821      	ldr	r0, [pc, #132]	; (8001f50 <Send_Activities_to_NEXTION+0x120>)
 8001eca:	f003 ff13 	bl	8005cf4 <HAL_UART_Transmit>
					break;
 8001ece:	e031      	b.n	8001f34 <Send_Activities_to_NEXTION+0x104>
			case 4:
					HAL_UART_Transmit(&huart7,(uint8_t *)"output.val=12",13,1000);
 8001ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed4:	220d      	movs	r2, #13
 8001ed6:	4922      	ldr	r1, [pc, #136]	; (8001f60 <Send_Activities_to_NEXTION+0x130>)
 8001ed8:	481d      	ldr	r0, [pc, #116]	; (8001f50 <Send_Activities_to_NEXTION+0x120>)
 8001eda:	f003 ff0b 	bl	8005cf4 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart7,Cmd_End,3,100);
 8001ede:	2364      	movs	r3, #100	; 0x64
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	491c      	ldr	r1, [pc, #112]	; (8001f54 <Send_Activities_to_NEXTION+0x124>)
 8001ee4:	481a      	ldr	r0, [pc, #104]	; (8001f50 <Send_Activities_to_NEXTION+0x120>)
 8001ee6:	f003 ff05 	bl	8005cf4 <HAL_UART_Transmit>
					/*for(int i=0; i<16896;i=i+20)
					{
						printf("%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\r\n",ADC_buffer_FIR[i],ADC_buffer_FIR[i+1],ADC_buffer_FIR[i+2],ADC_buffer_FIR[i+3],ADC_buffer_FIR[i+4],ADC_buffer_FIR[i+5],ADC_buffer_FIR[i+6],ADC_buffer_FIR[i+7],ADC_buffer_FIR[i+8],ADC_buffer_FIR[i+9],ADC_buffer_FIR[i+10],ADC_buffer_FIR[i+11],ADC_buffer_FIR[i+12],ADC_buffer_FIR[i+13],ADC_buffer_FIR[i+14],ADC_buffer_FIR[i+15],ADC_buffer_FIR[i+16],ADC_buffer_FIR[i+17],ADC_buffer_FIR[i+18],ADC_buffer_FIR[i+19]);

					}*/
					break;
 8001eea:	e023      	b.n	8001f34 <Send_Activities_to_NEXTION+0x104>
			default:
		  			HAL_UART_Transmit(&huart7,(uint8_t *)"output.val=8",12,1000);
 8001eec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ef0:	220c      	movs	r2, #12
 8001ef2:	491c      	ldr	r1, [pc, #112]	; (8001f64 <Send_Activities_to_NEXTION+0x134>)
 8001ef4:	4816      	ldr	r0, [pc, #88]	; (8001f50 <Send_Activities_to_NEXTION+0x120>)
 8001ef6:	f003 fefd 	bl	8005cf4 <HAL_UART_Transmit>
		  			HAL_UART_Transmit(&huart7,Cmd_End,3,100);
 8001efa:	2364      	movs	r3, #100	; 0x64
 8001efc:	2203      	movs	r2, #3
 8001efe:	4915      	ldr	r1, [pc, #84]	; (8001f54 <Send_Activities_to_NEXTION+0x124>)
 8001f00:	4813      	ldr	r0, [pc, #76]	; (8001f50 <Send_Activities_to_NEXTION+0x120>)
 8001f02:	f003 fef7 	bl	8005cf4 <HAL_UART_Transmit>
		  			break;
 8001f06:	bf00      	nop
 8001f08:	e014      	b.n	8001f34 <Send_Activities_to_NEXTION+0x104>
			}
		}
	}
	else
	{
		if((confirm2==max_output_ind)/*&&(confirm2==confirm1)*/)
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <Send_Activities_to_NEXTION+0x114>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <Send_Activities_to_NEXTION+0x118>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d10e      	bne.n	8001f34 <Send_Activities_to_NEXTION+0x104>
		{
		HAL_UART_Transmit(&huart7,(uint8_t *)"output.val=7",12,1000);
 8001f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	4912      	ldr	r1, [pc, #72]	; (8001f68 <Send_Activities_to_NEXTION+0x138>)
 8001f1e:	480c      	ldr	r0, [pc, #48]	; (8001f50 <Send_Activities_to_NEXTION+0x120>)
 8001f20:	f003 fee8 	bl	8005cf4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart7,Cmd_End,3,100);
 8001f24:	2364      	movs	r3, #100	; 0x64
 8001f26:	2203      	movs	r2, #3
 8001f28:	490a      	ldr	r1, [pc, #40]	; (8001f54 <Send_Activities_to_NEXTION+0x124>)
 8001f2a:	4809      	ldr	r0, [pc, #36]	; (8001f50 <Send_Activities_to_NEXTION+0x120>)
 8001f2c:	f003 fee2 	bl	8005cf4 <HAL_UART_Transmit>
		}
	}

}
 8001f30:	e000      	b.n	8001f34 <Send_Activities_to_NEXTION+0x104>
		}
 8001f32:	bf00      	nop
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	66666666 	.word	0x66666666
 8001f3c:	3fee6666 	.word	0x3fee6666
 8001f40:	200287ec 	.word	0x200287ec
 8001f44:	200287f0 	.word	0x200287f0
 8001f48:	2000fa14 	.word	0x2000fa14
 8001f4c:	0800d6a4 	.word	0x0800d6a4
 8001f50:	2000f944 	.word	0x2000f944
 8001f54:	20000000 	.word	0x20000000
 8001f58:	0800d6b4 	.word	0x0800d6b4
 8001f5c:	0800d6c4 	.word	0x0800d6c4
 8001f60:	0800d6d4 	.word	0x0800d6d4
 8001f64:	0800d6e4 	.word	0x0800d6e4
 8001f68:	0800d6f4 	.word	0x0800d6f4

08001f6c <Send_Sensor_to_NEXTION>:

////////////////////gửi giá trị các cảm biến lên màn hình//////////////////
void Send_Sensor_to_NEXTION(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
	///cảm biến cuồng độ ánh sáng///
	NEXTION_Send("ill_val",value_lux);
 8001f70:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <Send_Sensor_to_NEXTION+0x74>)
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	4619      	mov	r1, r3
 8001f76:	481b      	ldr	r0, [pc, #108]	; (8001fe4 <Send_Sensor_to_NEXTION+0x78>)
 8001f78:	f000 f844 	bl	8002004 <NEXTION_Send>
	///cảm biến bụi min///
	if (PMS5003.state == PMS5003_RECEIVED)
 8001f7c:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <Send_Sensor_to_NEXTION+0x7c>)
 8001f7e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d114      	bne.n	8001fb0 <Send_Sensor_to_NEXTION+0x44>
	{
		NEXTION_Send("pm1_val",PMS5003.pm1p0_ATM);
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <Send_Sensor_to_NEXTION+0x7c>)
 8001f88:	895b      	ldrh	r3, [r3, #10]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4817      	ldr	r0, [pc, #92]	; (8001fec <Send_Sensor_to_NEXTION+0x80>)
 8001f90:	f000 f838 	bl	8002004 <NEXTION_Send>
		NEXTION_Send("pm25_val",PMS5003.pm2p5_ATM);
 8001f94:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <Send_Sensor_to_NEXTION+0x7c>)
 8001f96:	899b      	ldrh	r3, [r3, #12]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4814      	ldr	r0, [pc, #80]	; (8001ff0 <Send_Sensor_to_NEXTION+0x84>)
 8001f9e:	f000 f831 	bl	8002004 <NEXTION_Send>
		NEXTION_Send("pm10_val",PMS5003.pm10_ATM);
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <Send_Sensor_to_NEXTION+0x7c>)
 8001fa4:	89db      	ldrh	r3, [r3, #14]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4812      	ldr	r0, [pc, #72]	; (8001ff4 <Send_Sensor_to_NEXTION+0x88>)
 8001fac:	f000 f82a 	bl	8002004 <NEXTION_Send>
		printf("    PM2.5    =    %d\r\n", PMS5003.pm2p5_ATM);
		printf("    PM10     =    %d\r\n", PMS5003.pm10_ATM);
		printf("-----------------------------\r\n");*/
	}
	///cảm biến nhiệt độ, độ ẩm///
	if(d.temp!=0)
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <Send_Sensor_to_NEXTION+0x8c>)
 8001fb2:	785b      	ldrb	r3, [r3, #1]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d006      	beq.n	8001fc6 <Send_Sensor_to_NEXTION+0x5a>
	{
		NEXTION_Send("temp_val",d.temp);
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <Send_Sensor_to_NEXTION+0x8c>)
 8001fba:	785b      	ldrb	r3, [r3, #1]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	480e      	ldr	r0, [pc, #56]	; (8001ffc <Send_Sensor_to_NEXTION+0x90>)
 8001fc2:	f000 f81f 	bl	8002004 <NEXTION_Send>
	}
	if(d.hum!=0)
 8001fc6:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <Send_Sensor_to_NEXTION+0x8c>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d006      	beq.n	8001fdc <Send_Sensor_to_NEXTION+0x70>
	{
		NEXTION_Send("hum_val",d.hum);
 8001fce:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <Send_Sensor_to_NEXTION+0x8c>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	480a      	ldr	r0, [pc, #40]	; (8002000 <Send_Sensor_to_NEXTION+0x94>)
 8001fd8:	f000 f814 	bl	8002004 <NEXTION_Send>
	}
	//printf("Temp: %2.1f * С, Hum: %2.1f%%\r\n", d.temp, d.hum);
}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20001e5c 	.word	0x20001e5c
 8001fe4:	0800d704 	.word	0x0800d704
 8001fe8:	2003b08c 	.word	0x2003b08c
 8001fec:	0800d70c 	.word	0x0800d70c
 8001ff0:	0800d714 	.word	0x0800d714
 8001ff4:	0800d720 	.word	0x0800d720
 8001ff8:	200287f8 	.word	0x200287f8
 8001ffc:	0800d72c 	.word	0x0800d72c
 8002000:	0800d738 	.word	0x0800d738

08002004 <NEXTION_Send>:
		}
	}
}
/////////gửi lên màn hình số nguyên
void NEXTION_Send(char * ID, uint16_t num)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b090      	sub	sp, #64	; 0x40
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
	char buf[50];
	int len= sprintf(buf,"%s.txt=\"%d\"",ID,num);
 8002010:	887b      	ldrh	r3, [r7, #2]
 8002012:	f107 0008 	add.w	r0, r7, #8
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	490b      	ldr	r1, [pc, #44]	; (8002048 <NEXTION_Send+0x44>)
 800201a:	f009 fca3 	bl	800b964 <siprintf>
 800201e:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart7,buf,len,1000);
 8002020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002022:	b29a      	uxth	r2, r3
 8002024:	f107 0108 	add.w	r1, r7, #8
 8002028:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800202c:	4807      	ldr	r0, [pc, #28]	; (800204c <NEXTION_Send+0x48>)
 800202e:	f003 fe61 	bl	8005cf4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart7,Cmd_End,3,100);
 8002032:	2364      	movs	r3, #100	; 0x64
 8002034:	2203      	movs	r2, #3
 8002036:	4906      	ldr	r1, [pc, #24]	; (8002050 <NEXTION_Send+0x4c>)
 8002038:	4804      	ldr	r0, [pc, #16]	; (800204c <NEXTION_Send+0x48>)
 800203a:	f003 fe5b 	bl	8005cf4 <HAL_UART_Transmit>
}
 800203e:	bf00      	nop
 8002040:	3740      	adds	r7, #64	; 0x40
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	0800d740 	.word	0x0800d740
 800204c:	2000f944 	.word	0x2000f944
 8002050:	20000000 	.word	0x20000000

08002054 <Preprocessing_Init>:

		return ch;
	}
//Preprocessing Init
static void Preprocessing_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* Init RFFT */
  arm_rfft_fast_init_f32(&S_Rfft, 1024);
 8002058:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800205c:	4817      	ldr	r0, [pc, #92]	; (80020bc <Preprocessing_Init+0x68>)
 800205e:	f005 f96d 	bl	800733c <arm_rfft_fast_init_f32>

  /* Init Spectrogram */
  S_Spectr.pRfft    = &S_Rfft;
 8002062:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <Preprocessing_Init+0x6c>)
 8002064:	4a15      	ldr	r2, [pc, #84]	; (80020bc <Preprocessing_Init+0x68>)
 8002066:	601a      	str	r2, [r3, #0]
  S_Spectr.Type     = SPECTRUM_TYPE_POWER;
 8002068:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <Preprocessing_Init+0x6c>)
 800206a:	2201      	movs	r2, #1
 800206c:	711a      	strb	r2, [r3, #4]
  S_Spectr.pWindow  = (float32_t *) hannWin_1024;
 800206e:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <Preprocessing_Init+0x6c>)
 8002070:	4a14      	ldr	r2, [pc, #80]	; (80020c4 <Preprocessing_Init+0x70>)
 8002072:	609a      	str	r2, [r3, #8]
  S_Spectr.SampRate = 16000;
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <Preprocessing_Init+0x6c>)
 8002076:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800207a:	60da      	str	r2, [r3, #12]
  S_Spectr.FrameLen = 1024;
 800207c:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <Preprocessing_Init+0x6c>)
 800207e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002082:	611a      	str	r2, [r3, #16]
  S_Spectr.FFTLen   = 1024;
 8002084:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <Preprocessing_Init+0x6c>)
 8002086:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800208a:	615a      	str	r2, [r3, #20]
  S_Spectr.pScratch = aWorkingBuffer1;
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <Preprocessing_Init+0x6c>)
 800208e:	4a0e      	ldr	r2, [pc, #56]	; (80020c8 <Preprocessing_Init+0x74>)
 8002090:	619a      	str	r2, [r3, #24]

  /* Init Mel filter */
  S_MelFilter.pStartIndices = (uint32_t *) melFiltersStartIndices_1024_30;
 8002092:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <Preprocessing_Init+0x78>)
 8002094:	4a0e      	ldr	r2, [pc, #56]	; (80020d0 <Preprocessing_Init+0x7c>)
 8002096:	601a      	str	r2, [r3, #0]
  S_MelFilter.pStopIndices  = (uint32_t *) melFiltersStopIndices_1024_30;
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <Preprocessing_Init+0x78>)
 800209a:	4a0e      	ldr	r2, [pc, #56]	; (80020d4 <Preprocessing_Init+0x80>)
 800209c:	605a      	str	r2, [r3, #4]
  S_MelFilter.pCoefficients = (float32_t *) melFilterLut_1024_30;
 800209e:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <Preprocessing_Init+0x78>)
 80020a0:	4a0d      	ldr	r2, [pc, #52]	; (80020d8 <Preprocessing_Init+0x84>)
 80020a2:	609a      	str	r2, [r3, #8]
  S_MelFilter.NumMels       = 30;
 80020a4:	4b09      	ldr	r3, [pc, #36]	; (80020cc <Preprocessing_Init+0x78>)
 80020a6:	221e      	movs	r2, #30
 80020a8:	611a      	str	r2, [r3, #16]

  /* Init MelSpectrogram */
  S_MelSpectr.SpectrogramConf = &S_Spectr;
 80020aa:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <Preprocessing_Init+0x88>)
 80020ac:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <Preprocessing_Init+0x6c>)
 80020ae:	601a      	str	r2, [r3, #0]
  S_MelSpectr.MelFilter       = &S_MelFilter;
 80020b0:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <Preprocessing_Init+0x88>)
 80020b2:	4a06      	ldr	r2, [pc, #24]	; (80020cc <Preprocessing_Init+0x78>)
 80020b4:	605a      	str	r2, [r3, #4]
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20001de4 	.word	0x20001de4
 80020c0:	20001e2c 	.word	0x20001e2c
 80020c4:	0800d780 	.word	0x0800d780
 80020c8:	2002887c 	.word	0x2002887c
 80020cc:	20001dfc 	.word	0x20001dfc
 80020d0:	0800e780 	.word	0x0800e780
 80020d4:	0800e7f8 	.word	0x0800e7f8
 80020d8:	0800e870 	.word	0x0800e870
 80020dc:	20001e48 	.word	0x20001e48

080020e0 <PowerTodB>:
	i++;
	}
}
//Power to db
static void PowerTodB(float32_t *pSpectrogram)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  float32_t max_mel_energy = 0.0f;
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Find MelEnergy Scaling factor */
  for (i = 0; i < NMELS * SPECTROGRAM_COLS; i++) {
 80020ee:	2300      	movs	r3, #0
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	e017      	b.n	8002124 <PowerTodB+0x44>
    max_mel_energy = (max_mel_energy > pSpectrogram[i]) ? max_mel_energy : pSpectrogram[i];
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	4413      	add	r3, r2
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	ed97 7a03 	vldr	s14, [r7, #12]
 8002104:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210c:	dd01      	ble.n	8002112 <PowerTodB+0x32>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	e004      	b.n	800211c <PowerTodB+0x3c>
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < NMELS * SPECTROGRAM_COLS; i++) {
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	3301      	adds	r3, #1
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 800212a:	d3e3      	bcc.n	80020f4 <PowerTodB+0x14>
  }

  /* Scale Mel Energies */
  for (i = 0; i < NMELS * SPECTROGRAM_COLS; i++) {
 800212c:	2300      	movs	r3, #0
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	e012      	b.n	8002158 <PowerTodB+0x78>
    pSpectrogram[i] /= max_mel_energy;
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	edd3 6a00 	vldr	s13, [r3]
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	ed97 7a03 	vldr	s14, [r7, #12]
 800214a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800214e:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < NMELS * SPECTROGRAM_COLS; i++) {
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	3301      	adds	r3, #1
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 800215e:	d3e8      	bcc.n	8002132 <PowerTodB+0x52>
  }

  /* Convert power spectrogram to decibel */
  for (i = 0; i < NMELS * SPECTROGRAM_COLS; i++) {
 8002160:	2300      	movs	r3, #0
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	e018      	b.n	8002198 <PowerTodB+0xb8>
    pSpectrogram[i] = 10.0f * log10f(pSpectrogram[i]);
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	edd3 7a00 	vldr	s15, [r3]
 8002172:	eeb0 0a67 	vmov.f32	s0, s15
 8002176:	f00a ff87 	bl	800d088 <log10f>
 800217a:	eeb0 7a40 	vmov.f32	s14, s0
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800218a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800218e:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < NMELS * SPECTROGRAM_COLS; i++) {
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	3301      	adds	r3, #1
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 800219e:	d3e2      	bcc.n	8002166 <PowerTodB+0x86>
  }

  /* Threshold output to -80.0 dB */
  for (i = 0; i < NMELS * SPECTROGRAM_COLS; i++) {
 80021a0:	2300      	movs	r3, #0
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	e01b      	b.n	80021de <PowerTodB+0xfe>
    pSpectrogram[i] = (pSpectrogram[i] < -80.0f) ? (-80.0f) : (pSpectrogram[i]);
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	edd3 7a00 	vldr	s15, [r3]
 80021b2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80021f0 <PowerTodB+0x110>
 80021b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021be:	d501      	bpl.n	80021c4 <PowerTodB+0xe4>
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <PowerTodB+0x114>)
 80021c2:	e004      	b.n	80021ce <PowerTodB+0xee>
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	4413      	add	r3, r2
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	0092      	lsls	r2, r2, #2
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	440a      	add	r2, r1
 80021d6:	6013      	str	r3, [r2, #0]
  for (i = 0; i < NMELS * SPECTROGRAM_COLS; i++) {
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	3301      	adds	r3, #1
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 80021e4:	d3df      	bcc.n	80021a6 <PowerTodB+0xc6>
  }
}
 80021e6:	bf00      	nop
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	c2a00000 	.word	0xc2a00000
 80021f4:	c2a00000 	.word	0xc2a00000

080021f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <PMS5003_ReceiveStart_IT>:
/**
  * @brief  Start interrupting to receive 1 order
  * @param  handle : UART handle
  * @retval No
  */
void PMS5003_ReceiveStart_IT(UART_HandleTypeDef* handle){
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(handle, PMS5003.uartBuf, 32);
 8002210:	2220      	movs	r2, #32
 8002212:	4904      	ldr	r1, [pc, #16]	; (8002224 <PMS5003_ReceiveStart_IT+0x1c>)
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f003 fdff 	bl	8005e18 <HAL_UART_Receive_IT>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	2003b09d 	.word	0x2003b09d

08002228 <PMS5003_ReceiveData_IT>:
/**
  * @brief  Stop receiving PMS5003 data
  * @param  handle : UART handle
  * @retval No
  */
void PMS5003_ReceiveData_IT(UART_HandleTypeDef* handle){
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
	//First character received: 0x42 
	if (PMS5003.uartBuf[0] == PMS_START_BYTE_1 && PMS5003.uartBuf[1] == PMS_START_BYTE_2){
 8002230:	4b40      	ldr	r3, [pc, #256]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 8002232:	7c5b      	ldrb	r3, [r3, #17]
 8002234:	2b42      	cmp	r3, #66	; 0x42
 8002236:	d170      	bne.n	800231a <PMS5003_ReceiveData_IT+0xf2>
 8002238:	4b3e      	ldr	r3, [pc, #248]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 800223a:	7c9b      	ldrb	r3, [r3, #18]
 800223c:	2b4d      	cmp	r3, #77	; 0x4d
 800223e:	d16c      	bne.n	800231a <PMS5003_ReceiveData_IT+0xf2>
			PMS5003.frame = ((PMS5003.uartBuf[2] << 8) + PMS5003.uartBuf[3]); //get frame
 8002240:	4b3c      	ldr	r3, [pc, #240]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 8002242:	7cdb      	ldrb	r3, [r3, #19]
 8002244:	b29b      	uxth	r3, r3
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	b29a      	uxth	r2, r3
 800224a:	4b3a      	ldr	r3, [pc, #232]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 800224c:	7d1b      	ldrb	r3, [r3, #20]
 800224e:	b29b      	uxth	r3, r3
 8002250:	4413      	add	r3, r2
 8002252:	b29a      	uxth	r2, r3
 8002254:	4b37      	ldr	r3, [pc, #220]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 8002256:	801a      	strh	r2, [r3, #0]
			PMS5003.pm1p0 = ((PMS5003.uartBuf[4] << 8) + PMS5003.uartBuf[5]); //get pms1.0 data
 8002258:	4b36      	ldr	r3, [pc, #216]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 800225a:	7d5b      	ldrb	r3, [r3, #21]
 800225c:	b29b      	uxth	r3, r3
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	b29a      	uxth	r2, r3
 8002262:	4b34      	ldr	r3, [pc, #208]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 8002264:	7d9b      	ldrb	r3, [r3, #22]
 8002266:	b29b      	uxth	r3, r3
 8002268:	4413      	add	r3, r2
 800226a:	b29a      	uxth	r2, r3
 800226c:	4b31      	ldr	r3, [pc, #196]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 800226e:	809a      	strh	r2, [r3, #4]
			PMS5003.pm2p5 = ((PMS5003.uartBuf[6] << 8) + PMS5003.uartBuf[7]); //get pms2.5 data
 8002270:	4b30      	ldr	r3, [pc, #192]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 8002272:	7ddb      	ldrb	r3, [r3, #23]
 8002274:	b29b      	uxth	r3, r3
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	b29a      	uxth	r2, r3
 800227a:	4b2e      	ldr	r3, [pc, #184]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 800227c:	7e1b      	ldrb	r3, [r3, #24]
 800227e:	b29b      	uxth	r3, r3
 8002280:	4413      	add	r3, r2
 8002282:	b29a      	uxth	r2, r3
 8002284:	4b2b      	ldr	r3, [pc, #172]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 8002286:	80da      	strh	r2, [r3, #6]
			PMS5003.pm10 = ((PMS5003.uartBuf[8] << 8) + PMS5003.uartBuf[9]); //get pms10 data
 8002288:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 800228a:	7e5b      	ldrb	r3, [r3, #25]
 800228c:	b29b      	uxth	r3, r3
 800228e:	021b      	lsls	r3, r3, #8
 8002290:	b29a      	uxth	r2, r3
 8002292:	4b28      	ldr	r3, [pc, #160]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 8002294:	7e9b      	ldrb	r3, [r3, #26]
 8002296:	b29b      	uxth	r3, r3
 8002298:	4413      	add	r3, r2
 800229a:	b29a      	uxth	r2, r3
 800229c:	4b25      	ldr	r3, [pc, #148]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 800229e:	811a      	strh	r2, [r3, #8]
			PMS5003.pm1p0_ATM = ((PMS5003.uartBuf[10] << 8) + PMS5003.uartBuf[11]); //get pms1.0 data in atmosphere
 80022a0:	4b24      	ldr	r3, [pc, #144]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 80022a2:	7edb      	ldrb	r3, [r3, #27]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	021b      	lsls	r3, r3, #8
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	4b22      	ldr	r3, [pc, #136]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 80022ac:	7f1b      	ldrb	r3, [r3, #28]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 80022b6:	815a      	strh	r2, [r3, #10]
			PMS5003.pm2p5_ATM = ((PMS5003.uartBuf[12] << 8) + PMS5003.uartBuf[13]); //get pms2.5 data in atmosphere
 80022b8:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 80022ba:	7f5b      	ldrb	r3, [r3, #29]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 80022c4:	7f9b      	ldrb	r3, [r3, #30]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	4413      	add	r3, r2
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	4b19      	ldr	r3, [pc, #100]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 80022ce:	819a      	strh	r2, [r3, #12]
			PMS5003.pm10_ATM = ((PMS5003.uartBuf[14] << 8) + PMS5003.uartBuf[15]); //get pms10 data in atmosphere
 80022d0:	4b18      	ldr	r3, [pc, #96]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 80022d2:	7fdb      	ldrb	r3, [r3, #31]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	b29a      	uxth	r2, r3
 80022da:	4b16      	ldr	r3, [pc, #88]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 80022dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	4413      	add	r3, r2
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	4b13      	ldr	r3, [pc, #76]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 80022e8:	81da      	strh	r2, [r3, #14]
			PMS5003.checksum = ((PMS5003.uartBuf[30] << 8) + PMS5003.uartBuf[31]); //get checksum
 80022ea:	4b12      	ldr	r3, [pc, #72]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 80022ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	021b      	lsls	r3, r3, #8
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 80022f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	4413      	add	r3, r2
 8002300:	b29a      	uxth	r2, r3
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 8002304:	805a      	strh	r2, [r3, #2]
			HAL_UART_Receive_IT(handle, PMS5003.uartBuf,32); //waiting for incoming new data
 8002306:	2220      	movs	r2, #32
 8002308:	490b      	ldr	r1, [pc, #44]	; (8002338 <PMS5003_ReceiveData_IT+0x110>)
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f003 fd84 	bl	8005e18 <HAL_UART_Receive_IT>
			PMS5003.state = PMS5003_RECEIVED; //state of process = RECEIVED
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8002318:	e008      	b.n	800232c <PMS5003_ReceiveData_IT+0x104>
		}
		else{ 
			HAL_UART_Receive_IT(handle, PMS5003.uartBuf, 32); //waiting for incoming new data
 800231a:	2220      	movs	r2, #32
 800231c:	4906      	ldr	r1, [pc, #24]	; (8002338 <PMS5003_ReceiveData_IT+0x110>)
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f003 fd7a 	bl	8005e18 <HAL_UART_Receive_IT>
			PMS5003.state = PMS5003_CRC_ERROR; //state of process = ERROR
 8002324:	4b03      	ldr	r3, [pc, #12]	; (8002334 <PMS5003_ReceiveData_IT+0x10c>)
 8002326:	2204      	movs	r2, #4
 8002328:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		}
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	2003b08c 	.word	0x2003b08c
 8002338:	2003b09d 	.word	0x2003b09d

0800233c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002342:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <HAL_MspInit+0x44>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	4a0e      	ldr	r2, [pc, #56]	; (8002380 <HAL_MspInit+0x44>)
 8002348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234c:	6413      	str	r3, [r2, #64]	; 0x40
 800234e:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <HAL_MspInit+0x44>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	607b      	str	r3, [r7, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235a:	4b09      	ldr	r3, [pc, #36]	; (8002380 <HAL_MspInit+0x44>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4a08      	ldr	r2, [pc, #32]	; (8002380 <HAL_MspInit+0x44>)
 8002360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_MspInit+0x44>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800

08002384 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08a      	sub	sp, #40	; 0x28
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a2e      	ldr	r2, [pc, #184]	; (800245c <HAL_ADC_MspInit+0xd8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d155      	bne.n	8002452 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80023a6:	4b2e      	ldr	r3, [pc, #184]	; (8002460 <HAL_ADC_MspInit+0xdc>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	4a2d      	ldr	r2, [pc, #180]	; (8002460 <HAL_ADC_MspInit+0xdc>)
 80023ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023b0:	6453      	str	r3, [r2, #68]	; 0x44
 80023b2:	4b2b      	ldr	r3, [pc, #172]	; (8002460 <HAL_ADC_MspInit+0xdc>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80023be:	4b28      	ldr	r3, [pc, #160]	; (8002460 <HAL_ADC_MspInit+0xdc>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a27      	ldr	r2, [pc, #156]	; (8002460 <HAL_ADC_MspInit+0xdc>)
 80023c4:	f043 0320 	orr.w	r3, r3, #32
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b25      	ldr	r3, [pc, #148]	; (8002460 <HAL_ADC_MspInit+0xdc>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f003 0320 	and.w	r3, r3, #32
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF10     ------> ADC3_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023dc:	2303      	movs	r3, #3
 80023de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	4619      	mov	r1, r3
 80023ea:	481e      	ldr	r0, [pc, #120]	; (8002464 <HAL_ADC_MspInit+0xe0>)
 80023ec:	f001 fcb2 	bl	8003d54 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 80023f0:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <HAL_ADC_MspInit+0xe4>)
 80023f2:	4a1e      	ldr	r2, [pc, #120]	; (800246c <HAL_ADC_MspInit+0xe8>)
 80023f4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80023f6:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <HAL_ADC_MspInit+0xe4>)
 80023f8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023fc:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023fe:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <HAL_ADC_MspInit+0xe4>)
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002404:	4b18      	ldr	r3, [pc, #96]	; (8002468 <HAL_ADC_MspInit+0xe4>)
 8002406:	2200      	movs	r2, #0
 8002408:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800240a:	4b17      	ldr	r3, [pc, #92]	; (8002468 <HAL_ADC_MspInit+0xe4>)
 800240c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002410:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <HAL_ADC_MspInit+0xe4>)
 8002414:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002418:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800241a:	4b13      	ldr	r3, [pc, #76]	; (8002468 <HAL_ADC_MspInit+0xe4>)
 800241c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002420:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002422:	4b11      	ldr	r3, [pc, #68]	; (8002468 <HAL_ADC_MspInit+0xe4>)
 8002424:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002428:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800242a:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <HAL_ADC_MspInit+0xe4>)
 800242c:	2200      	movs	r2, #0
 800242e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002430:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <HAL_ADC_MspInit+0xe4>)
 8002432:	2200      	movs	r2, #0
 8002434:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002436:	480c      	ldr	r0, [pc, #48]	; (8002468 <HAL_ADC_MspInit+0xe4>)
 8002438:	f001 f8f4 	bl	8003624 <HAL_DMA_Init>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8002442:	f7ff fed9 	bl	80021f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a07      	ldr	r2, [pc, #28]	; (8002468 <HAL_ADC_MspInit+0xe4>)
 800244a:	639a      	str	r2, [r3, #56]	; 0x38
 800244c:	4a06      	ldr	r2, [pc, #24]	; (8002468 <HAL_ADC_MspInit+0xe4>)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002452:	bf00      	nop
 8002454:	3728      	adds	r7, #40	; 0x28
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40012200 	.word	0x40012200
 8002460:	40023800 	.word	0x40023800
 8002464:	40021400 	.word	0x40021400
 8002468:	2000fa40 	.word	0x2000fa40
 800246c:	40026410 	.word	0x40026410

08002470 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <HAL_CRC_MspInit+0x38>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d10b      	bne.n	800249a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <HAL_CRC_MspInit+0x3c>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	4a09      	ldr	r2, [pc, #36]	; (80024ac <HAL_CRC_MspInit+0x3c>)
 8002488:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	4b07      	ldr	r3, [pc, #28]	; (80024ac <HAL_CRC_MspInit+0x3c>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40023000 	.word	0x40023000
 80024ac:	40023800 	.word	0x40023800

080024b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	; 0x28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a17      	ldr	r2, [pc, #92]	; (800252c <HAL_I2C_MspInit+0x7c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d128      	bne.n	8002524 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d2:	4b17      	ldr	r3, [pc, #92]	; (8002530 <HAL_I2C_MspInit+0x80>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a16      	ldr	r2, [pc, #88]	; (8002530 <HAL_I2C_MspInit+0x80>)
 80024d8:	f043 0302 	orr.w	r3, r3, #2
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b14      	ldr	r3, [pc, #80]	; (8002530 <HAL_I2C_MspInit+0x80>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024f0:	2312      	movs	r3, #18
 80024f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024f4:	2301      	movs	r3, #1
 80024f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f8:	2303      	movs	r3, #3
 80024fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024fc:	2304      	movs	r3, #4
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	4619      	mov	r1, r3
 8002506:	480b      	ldr	r0, [pc, #44]	; (8002534 <HAL_I2C_MspInit+0x84>)
 8002508:	f001 fc24 	bl	8003d54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <HAL_I2C_MspInit+0x80>)
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	4a07      	ldr	r2, [pc, #28]	; (8002530 <HAL_I2C_MspInit+0x80>)
 8002512:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002516:	6413      	str	r3, [r2, #64]	; 0x40
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_I2C_MspInit+0x80>)
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002524:	bf00      	nop
 8002526:	3728      	adds	r7, #40	; 0x28
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40005400 	.word	0x40005400
 8002530:	40023800 	.word	0x40023800
 8002534:	40020400 	.word	0x40020400

08002538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b092      	sub	sp, #72	; 0x48
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a81      	ldr	r2, [pc, #516]	; (800275c <HAL_UART_MspInit+0x224>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d145      	bne.n	80025e6 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800255a:	4b81      	ldr	r3, [pc, #516]	; (8002760 <HAL_UART_MspInit+0x228>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	4a80      	ldr	r2, [pc, #512]	; (8002760 <HAL_UART_MspInit+0x228>)
 8002560:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002564:	6413      	str	r3, [r2, #64]	; 0x40
 8002566:	4b7e      	ldr	r3, [pc, #504]	; (8002760 <HAL_UART_MspInit+0x228>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800256e:	633b      	str	r3, [r7, #48]	; 0x30
 8002570:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002572:	4b7b      	ldr	r3, [pc, #492]	; (8002760 <HAL_UART_MspInit+0x228>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a7a      	ldr	r2, [pc, #488]	; (8002760 <HAL_UART_MspInit+0x228>)
 8002578:	f043 0304 	orr.w	r3, r3, #4
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b78      	ldr	r3, [pc, #480]	; (8002760 <HAL_UART_MspInit+0x228>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258a:	4b75      	ldr	r3, [pc, #468]	; (8002760 <HAL_UART_MspInit+0x228>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	4a74      	ldr	r2, [pc, #464]	; (8002760 <HAL_UART_MspInit+0x228>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	6313      	str	r3, [r2, #48]	; 0x30
 8002596:	4b72      	ldr	r3, [pc, #456]	; (8002760 <HAL_UART_MspInit+0x228>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
 80025a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PA0/WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80025a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a8:	2302      	movs	r3, #2
 80025aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b0:	2303      	movs	r3, #3
 80025b2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80025b4:	2308      	movs	r3, #8
 80025b6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025bc:	4619      	mov	r1, r3
 80025be:	4869      	ldr	r0, [pc, #420]	; (8002764 <HAL_UART_MspInit+0x22c>)
 80025c0:	f001 fbc8 	bl	8003d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025c4:	2301      	movs	r3, #1
 80025c6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c8:	2302      	movs	r3, #2
 80025ca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d0:	2303      	movs	r3, #3
 80025d2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80025d4:	2308      	movs	r3, #8
 80025d6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025dc:	4619      	mov	r1, r3
 80025de:	4862      	ldr	r0, [pc, #392]	; (8002768 <HAL_UART_MspInit+0x230>)
 80025e0:	f001 fbb8 	bl	8003d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80025e4:	e0b5      	b.n	8002752 <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==UART7)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a60      	ldr	r2, [pc, #384]	; (800276c <HAL_UART_MspInit+0x234>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d130      	bne.n	8002652 <HAL_UART_MspInit+0x11a>
    __HAL_RCC_UART7_CLK_ENABLE();
 80025f0:	4b5b      	ldr	r3, [pc, #364]	; (8002760 <HAL_UART_MspInit+0x228>)
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	4a5a      	ldr	r2, [pc, #360]	; (8002760 <HAL_UART_MspInit+0x228>)
 80025f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025fa:	6413      	str	r3, [r2, #64]	; 0x40
 80025fc:	4b58      	ldr	r3, [pc, #352]	; (8002760 <HAL_UART_MspInit+0x228>)
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002608:	4b55      	ldr	r3, [pc, #340]	; (8002760 <HAL_UART_MspInit+0x228>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	4a54      	ldr	r2, [pc, #336]	; (8002760 <HAL_UART_MspInit+0x228>)
 800260e:	f043 0320 	orr.w	r3, r3, #32
 8002612:	6313      	str	r3, [r2, #48]	; 0x30
 8002614:	4b52      	ldr	r3, [pc, #328]	; (8002760 <HAL_UART_MspInit+0x228>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	623b      	str	r3, [r7, #32]
 800261e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002620:	23c0      	movs	r3, #192	; 0xc0
 8002622:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002624:	2302      	movs	r3, #2
 8002626:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262c:	2303      	movs	r3, #3
 800262e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002630:	2308      	movs	r3, #8
 8002632:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002634:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002638:	4619      	mov	r1, r3
 800263a:	484d      	ldr	r0, [pc, #308]	; (8002770 <HAL_UART_MspInit+0x238>)
 800263c:	f001 fb8a 	bl	8003d54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8002640:	2200      	movs	r2, #0
 8002642:	2100      	movs	r1, #0
 8002644:	2052      	movs	r0, #82	; 0x52
 8002646:	f000 fecc 	bl	80033e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800264a:	2052      	movs	r0, #82	; 0x52
 800264c:	f000 fee5 	bl	800341a <HAL_NVIC_EnableIRQ>
}
 8002650:	e07f      	b.n	8002752 <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a47      	ldr	r2, [pc, #284]	; (8002774 <HAL_UART_MspInit+0x23c>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d145      	bne.n	80026e8 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART1_CLK_ENABLE();
 800265c:	4b40      	ldr	r3, [pc, #256]	; (8002760 <HAL_UART_MspInit+0x228>)
 800265e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002660:	4a3f      	ldr	r2, [pc, #252]	; (8002760 <HAL_UART_MspInit+0x228>)
 8002662:	f043 0310 	orr.w	r3, r3, #16
 8002666:	6453      	str	r3, [r2, #68]	; 0x44
 8002668:	4b3d      	ldr	r3, [pc, #244]	; (8002760 <HAL_UART_MspInit+0x228>)
 800266a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	61fb      	str	r3, [r7, #28]
 8002672:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002674:	4b3a      	ldr	r3, [pc, #232]	; (8002760 <HAL_UART_MspInit+0x228>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	4a39      	ldr	r2, [pc, #228]	; (8002760 <HAL_UART_MspInit+0x228>)
 800267a:	f043 0302 	orr.w	r3, r3, #2
 800267e:	6313      	str	r3, [r2, #48]	; 0x30
 8002680:	4b37      	ldr	r3, [pc, #220]	; (8002760 <HAL_UART_MspInit+0x228>)
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268c:	4b34      	ldr	r3, [pc, #208]	; (8002760 <HAL_UART_MspInit+0x228>)
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	4a33      	ldr	r2, [pc, #204]	; (8002760 <HAL_UART_MspInit+0x228>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	6313      	str	r3, [r2, #48]	; 0x30
 8002698:	4b31      	ldr	r3, [pc, #196]	; (8002760 <HAL_UART_MspInit+0x228>)
 800269a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b0:	2303      	movs	r3, #3
 80026b2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026b4:	2307      	movs	r3, #7
 80026b6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026bc:	4619      	mov	r1, r3
 80026be:	482e      	ldr	r0, [pc, #184]	; (8002778 <HAL_UART_MspInit+0x240>)
 80026c0:	f001 fb48 	bl	8003d54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ca:	2302      	movs	r3, #2
 80026cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d2:	2303      	movs	r3, #3
 80026d4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026d6:	2307      	movs	r3, #7
 80026d8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026de:	4619      	mov	r1, r3
 80026e0:	4821      	ldr	r0, [pc, #132]	; (8002768 <HAL_UART_MspInit+0x230>)
 80026e2:	f001 fb37 	bl	8003d54 <HAL_GPIO_Init>
}
 80026e6:	e034      	b.n	8002752 <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART6)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a23      	ldr	r2, [pc, #140]	; (800277c <HAL_UART_MspInit+0x244>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d12f      	bne.n	8002752 <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART6_CLK_ENABLE();
 80026f2:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <HAL_UART_MspInit+0x228>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	4a1a      	ldr	r2, [pc, #104]	; (8002760 <HAL_UART_MspInit+0x228>)
 80026f8:	f043 0320 	orr.w	r3, r3, #32
 80026fc:	6453      	str	r3, [r2, #68]	; 0x44
 80026fe:	4b18      	ldr	r3, [pc, #96]	; (8002760 <HAL_UART_MspInit+0x228>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800270a:	4b15      	ldr	r3, [pc, #84]	; (8002760 <HAL_UART_MspInit+0x228>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	4a14      	ldr	r2, [pc, #80]	; (8002760 <HAL_UART_MspInit+0x228>)
 8002710:	f043 0304 	orr.w	r3, r3, #4
 8002714:	6313      	str	r3, [r2, #48]	; 0x30
 8002716:	4b12      	ldr	r3, [pc, #72]	; (8002760 <HAL_UART_MspInit+0x228>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002722:	23c0      	movs	r3, #192	; 0xc0
 8002724:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002726:	2302      	movs	r3, #2
 8002728:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272e:	2303      	movs	r3, #3
 8002730:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002732:	2308      	movs	r3, #8
 8002734:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002736:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800273a:	4619      	mov	r1, r3
 800273c:	4809      	ldr	r0, [pc, #36]	; (8002764 <HAL_UART_MspInit+0x22c>)
 800273e:	f001 fb09 	bl	8003d54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002742:	2200      	movs	r2, #0
 8002744:	2100      	movs	r1, #0
 8002746:	2047      	movs	r0, #71	; 0x47
 8002748:	f000 fe4b 	bl	80033e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800274c:	2047      	movs	r0, #71	; 0x47
 800274e:	f000 fe64 	bl	800341a <HAL_NVIC_EnableIRQ>
}
 8002752:	bf00      	nop
 8002754:	3748      	adds	r7, #72	; 0x48
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40004c00 	.word	0x40004c00
 8002760:	40023800 	.word	0x40023800
 8002764:	40020800 	.word	0x40020800
 8002768:	40020000 	.word	0x40020000
 800276c:	40007800 	.word	0x40007800
 8002770:	40021400 	.word	0x40021400
 8002774:	40011000 	.word	0x40011000
 8002778:	40020400 	.word	0x40020400
 800277c:	40011400 	.word	0x40011400

08002780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800278e:	b480      	push	{r7}
 8002790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002792:	e7fe      	b.n	8002792 <HardFault_Handler+0x4>

08002794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002798:	e7fe      	b.n	8002798 <MemManage_Handler+0x4>

0800279a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800279e:	e7fe      	b.n	800279e <BusFault_Handler+0x4>

080027a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a4:	e7fe      	b.n	80027a4 <UsageFault_Handler+0x4>

080027a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027a6:	b480      	push	{r7}
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027b8:	bf00      	nop
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027d4:	f000 f8d2 	bl	800297c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}

080027dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80027e0:	4802      	ldr	r0, [pc, #8]	; (80027ec <DMA2_Stream0_IRQHandler+0x10>)
 80027e2:	f001 f84f 	bl	8003884 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	2000fa40 	.word	0x2000fa40

080027f0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80027f4:	4802      	ldr	r0, [pc, #8]	; (8002800 <USART6_IRQHandler+0x10>)
 80027f6:	f003 fbb1 	bl	8005f5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200287fc 	.word	0x200287fc

08002804 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002808:	4802      	ldr	r0, [pc, #8]	; (8002814 <UART7_IRQHandler+0x10>)
 800280a:	f003 fba7 	bl	8005f5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	2000f944 	.word	0x2000f944

08002818 <_sbrk>:
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	4a14      	ldr	r2, [pc, #80]	; (8002874 <_sbrk+0x5c>)
 8002822:	4b15      	ldr	r3, [pc, #84]	; (8002878 <_sbrk+0x60>)
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	4b13      	ldr	r3, [pc, #76]	; (800287c <_sbrk+0x64>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d102      	bne.n	800283a <_sbrk+0x22>
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <_sbrk+0x64>)
 8002836:	4a12      	ldr	r2, [pc, #72]	; (8002880 <_sbrk+0x68>)
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <_sbrk+0x64>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	429a      	cmp	r2, r3
 8002846:	d207      	bcs.n	8002858 <_sbrk+0x40>
 8002848:	f008 fafe 	bl	800ae48 <__errno>
 800284c:	4602      	mov	r2, r0
 800284e:	230c      	movs	r3, #12
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	f04f 33ff 	mov.w	r3, #4294967295
 8002856:	e009      	b.n	800286c <_sbrk+0x54>
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <_sbrk+0x64>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <_sbrk+0x64>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	4a05      	ldr	r2, [pc, #20]	; (800287c <_sbrk+0x64>)
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20050000 	.word	0x20050000
 8002878:	00000800 	.word	0x00000800
 800287c:	20001e64 	.word	0x20001e64
 8002880:	2003b0c8 	.word	0x2003b0c8

08002884 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <SystemInit+0x28>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288e:	4a07      	ldr	r2, [pc, #28]	; (80028ac <SystemInit+0x28>)
 8002890:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002894:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <SystemInit+0x28>)
 800289a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800289e:	609a      	str	r2, [r3, #8]
#endif
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <Reset_Handler>:
 80028b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028e8 <LoopFillZerobss+0x14>
 80028b4:	2100      	movs	r1, #0
 80028b6:	e003      	b.n	80028c0 <LoopCopyDataInit>

080028b8 <CopyDataInit>:
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <LoopFillZerobss+0x18>)
 80028ba:	585b      	ldr	r3, [r3, r1]
 80028bc:	5043      	str	r3, [r0, r1]
 80028be:	3104      	adds	r1, #4

080028c0 <LoopCopyDataInit>:
 80028c0:	480b      	ldr	r0, [pc, #44]	; (80028f0 <LoopFillZerobss+0x1c>)
 80028c2:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <LoopFillZerobss+0x20>)
 80028c4:	1842      	adds	r2, r0, r1
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d3f6      	bcc.n	80028b8 <CopyDataInit>
 80028ca:	4a0b      	ldr	r2, [pc, #44]	; (80028f8 <LoopFillZerobss+0x24>)
 80028cc:	e002      	b.n	80028d4 <LoopFillZerobss>

080028ce <FillZerobss>:
 80028ce:	2300      	movs	r3, #0
 80028d0:	f842 3b04 	str.w	r3, [r2], #4

080028d4 <LoopFillZerobss>:
 80028d4:	4b09      	ldr	r3, [pc, #36]	; (80028fc <LoopFillZerobss+0x28>)
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d3f9      	bcc.n	80028ce <FillZerobss>
 80028da:	f7ff ffd3 	bl	8002884 <SystemInit>
 80028de:	f008 fab9 	bl	800ae54 <__libc_init_array>
 80028e2:	f7fe fe95 	bl	8001610 <main>
 80028e6:	4770      	bx	lr
 80028e8:	20050000 	.word	0x20050000
 80028ec:	08033310 	.word	0x08033310
 80028f0:	20000000 	.word	0x20000000
 80028f4:	20000e4c 	.word	0x20000e4c
 80028f8:	20000e4c 	.word	0x20000e4c
 80028fc:	2003b0c8 	.word	0x2003b0c8

08002900 <ADC_IRQHandler>:
 8002900:	e7fe      	b.n	8002900 <ADC_IRQHandler>

08002902 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002906:	2003      	movs	r0, #3
 8002908:	f000 fd60 	bl	80033cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800290c:	2000      	movs	r0, #0
 800290e:	f000 f805 	bl	800291c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002912:	f7ff fd13 	bl	800233c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002924:	4b12      	ldr	r3, [pc, #72]	; (8002970 <HAL_InitTick+0x54>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4b12      	ldr	r3, [pc, #72]	; (8002974 <HAL_InitTick+0x58>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	4619      	mov	r1, r3
 800292e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002932:	fbb3 f3f1 	udiv	r3, r3, r1
 8002936:	fbb2 f3f3 	udiv	r3, r2, r3
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fd7b 	bl	8003436 <HAL_SYSTICK_Config>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e00e      	b.n	8002968 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b0f      	cmp	r3, #15
 800294e:	d80a      	bhi.n	8002966 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002950:	2200      	movs	r2, #0
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	f04f 30ff 	mov.w	r0, #4294967295
 8002958:	f000 fd43 	bl	80033e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800295c:	4a06      	ldr	r2, [pc, #24]	; (8002978 <HAL_InitTick+0x5c>)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	e000      	b.n	8002968 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
}
 8002968:	4618      	mov	r0, r3
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20000004 	.word	0x20000004
 8002974:	2000000c 	.word	0x2000000c
 8002978:	20000008 	.word	0x20000008

0800297c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_IncTick+0x20>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	461a      	mov	r2, r3
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_IncTick+0x24>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4413      	add	r3, r2
 800298c:	4a04      	ldr	r2, [pc, #16]	; (80029a0 <HAL_IncTick+0x24>)
 800298e:	6013      	str	r3, [r2, #0]
}
 8002990:	bf00      	nop
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	2000000c 	.word	0x2000000c
 80029a0:	2003b0c0 	.word	0x2003b0c0

080029a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return uwTick;
 80029a8:	4b03      	ldr	r3, [pc, #12]	; (80029b8 <HAL_GetTick+0x14>)
 80029aa:	681b      	ldr	r3, [r3, #0]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	2003b0c0 	.word	0x2003b0c0

080029bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029c4:	f7ff ffee 	bl	80029a4 <HAL_GetTick>
 80029c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d4:	d005      	beq.n	80029e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029d6:	4b09      	ldr	r3, [pc, #36]	; (80029fc <HAL_Delay+0x40>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4413      	add	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029e2:	bf00      	nop
 80029e4:	f7ff ffde 	bl	80029a4 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d8f7      	bhi.n	80029e4 <HAL_Delay+0x28>
  {
  }
}
 80029f4:	bf00      	nop
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	2000000c 	.word	0x2000000c

08002a00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e031      	b.n	8002a7a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff fcb0 	bl	8002384 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d116      	bne.n	8002a6c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <HAL_ADC_Init+0x84>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	f043 0202 	orr.w	r2, r3, #2
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fa70 	bl	8002f34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f023 0303 	bic.w	r3, r3, #3
 8002a62:	f043 0201 	orr.w	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40
 8002a6a:	e001      	b.n	8002a70 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	ffffeefd 	.word	0xffffeefd

08002a88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_Start_DMA+0x1e>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e0c7      	b.n	8002c36 <HAL_ADC_Start_DMA+0x1ae>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d018      	beq.n	8002aee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002acc:	4b5c      	ldr	r3, [pc, #368]	; (8002c40 <HAL_ADC_Start_DMA+0x1b8>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a5c      	ldr	r2, [pc, #368]	; (8002c44 <HAL_ADC_Start_DMA+0x1bc>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	0c9a      	lsrs	r2, r3, #18
 8002ad8:	4613      	mov	r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4413      	add	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002ae0:	e002      	b.n	8002ae8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f9      	bne.n	8002ae2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	f040 809b 	bne.w	8002c34 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b02:	4b51      	ldr	r3, [pc, #324]	; (8002c48 <HAL_ADC_Start_DMA+0x1c0>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d007      	beq.n	8002b2c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b38:	d106      	bne.n	8002b48 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	f023 0206 	bic.w	r2, r3, #6
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	645a      	str	r2, [r3, #68]	; 0x44
 8002b46:	e002      	b.n	8002b4e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5a:	4a3c      	ldr	r2, [pc, #240]	; (8002c4c <HAL_ADC_Start_DMA+0x1c4>)
 8002b5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b62:	4a3b      	ldr	r2, [pc, #236]	; (8002c50 <HAL_ADC_Start_DMA+0x1c8>)
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6a:	4a3a      	ldr	r2, [pc, #232]	; (8002c54 <HAL_ADC_Start_DMA+0x1cc>)
 8002b6c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b76:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002b86:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b96:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	334c      	adds	r3, #76	; 0x4c
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f000 fdea 	bl	8003780 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002bac:	4b2a      	ldr	r3, [pc, #168]	; (8002c58 <HAL_ADC_Start_DMA+0x1d0>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10f      	bne.n	8002bd8 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d136      	bne.n	8002c34 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bd4:	609a      	str	r2, [r3, #8]
 8002bd6:	e02d      	b.n	8002c34 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a1f      	ldr	r2, [pc, #124]	; (8002c5c <HAL_ADC_Start_DMA+0x1d4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d10e      	bne.n	8002c00 <HAL_ADC_Start_DMA+0x178>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d107      	bne.n	8002c00 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bfe:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002c00:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <HAL_ADC_Start_DMA+0x1d0>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d113      	bne.n	8002c34 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a13      	ldr	r2, [pc, #76]	; (8002c60 <HAL_ADC_Start_DMA+0x1d8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d10e      	bne.n	8002c34 <HAL_ADC_Start_DMA+0x1ac>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d107      	bne.n	8002c34 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c32:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000004 	.word	0x20000004
 8002c44:	431bde83 	.word	0x431bde83
 8002c48:	fffff8fe 	.word	0xfffff8fe
 8002c4c:	08003129 	.word	0x08003129
 8002c50:	080031e3 	.word	0x080031e3
 8002c54:	080031ff 	.word	0x080031ff
 8002c58:	40012300 	.word	0x40012300
 8002c5c:	40012000 	.word	0x40012000
 8002c60:	40012200 	.word	0x40012200

08002c64 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x1c>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e12a      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x272>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b09      	cmp	r3, #9
 8002cca:	d93a      	bls.n	8002d42 <HAL_ADC_ConfigChannel+0xa2>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cd4:	d035      	beq.n	8002d42 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68d9      	ldr	r1, [r3, #12]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	4413      	add	r3, r2
 8002cea:	3b1e      	subs	r3, #30
 8002cec:	2207      	movs	r2, #7
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	400a      	ands	r2, r1
 8002cfa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a87      	ldr	r2, [pc, #540]	; (8002f20 <HAL_ADC_ConfigChannel+0x280>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d10a      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68d9      	ldr	r1, [r3, #12]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	061a      	lsls	r2, r3, #24
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d1a:	e035      	b.n	8002d88 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68d9      	ldr	r1, [r3, #12]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	4603      	mov	r3, r0
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	4403      	add	r3, r0
 8002d34:	3b1e      	subs	r3, #30
 8002d36:	409a      	lsls	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d40:	e022      	b.n	8002d88 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6919      	ldr	r1, [r3, #16]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	461a      	mov	r2, r3
 8002d50:	4613      	mov	r3, r2
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	4413      	add	r3, r2
 8002d56:	2207      	movs	r2, #7
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43da      	mvns	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	400a      	ands	r2, r1
 8002d64:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6919      	ldr	r1, [r3, #16]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	4618      	mov	r0, r3
 8002d78:	4603      	mov	r3, r0
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4403      	add	r3, r0
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b06      	cmp	r3, #6
 8002d8e:	d824      	bhi.n	8002dda <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	3b05      	subs	r3, #5
 8002da2:	221f      	movs	r2, #31
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43da      	mvns	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	400a      	ands	r2, r1
 8002db0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	3b05      	subs	r3, #5
 8002dcc:	fa00 f203 	lsl.w	r2, r0, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	635a      	str	r2, [r3, #52]	; 0x34
 8002dd8:	e04c      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b0c      	cmp	r3, #12
 8002de0:	d824      	bhi.n	8002e2c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	3b23      	subs	r3, #35	; 0x23
 8002df4:	221f      	movs	r2, #31
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43da      	mvns	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	400a      	ands	r2, r1
 8002e02:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	4618      	mov	r0, r3
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3b23      	subs	r3, #35	; 0x23
 8002e1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	631a      	str	r2, [r3, #48]	; 0x30
 8002e2a:	e023      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3b41      	subs	r3, #65	; 0x41
 8002e3e:	221f      	movs	r2, #31
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43da      	mvns	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	400a      	ands	r2, r1
 8002e4c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	3b41      	subs	r3, #65	; 0x41
 8002e68:	fa00 f203 	lsl.w	r2, r0, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a2a      	ldr	r2, [pc, #168]	; (8002f24 <HAL_ADC_ConfigChannel+0x284>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d10a      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x1f4>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e86:	d105      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002e88:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <HAL_ADC_ConfigChannel+0x288>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	4a26      	ldr	r2, [pc, #152]	; (8002f28 <HAL_ADC_ConfigChannel+0x288>)
 8002e8e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002e92:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a22      	ldr	r2, [pc, #136]	; (8002f24 <HAL_ADC_ConfigChannel+0x284>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d109      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x212>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b12      	cmp	r3, #18
 8002ea4:	d105      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002ea6:	4b20      	ldr	r3, [pc, #128]	; (8002f28 <HAL_ADC_ConfigChannel+0x288>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	4a1f      	ldr	r2, [pc, #124]	; (8002f28 <HAL_ADC_ConfigChannel+0x288>)
 8002eac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002eb0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1b      	ldr	r2, [pc, #108]	; (8002f24 <HAL_ADC_ConfigChannel+0x284>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d125      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x268>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a17      	ldr	r2, [pc, #92]	; (8002f20 <HAL_ADC_ConfigChannel+0x280>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d003      	beq.n	8002ece <HAL_ADC_ConfigChannel+0x22e>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b11      	cmp	r3, #17
 8002ecc:	d11c      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002ece:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <HAL_ADC_ConfigChannel+0x288>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4a15      	ldr	r2, [pc, #84]	; (8002f28 <HAL_ADC_ConfigChannel+0x288>)
 8002ed4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ed8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a10      	ldr	r2, [pc, #64]	; (8002f20 <HAL_ADC_ConfigChannel+0x280>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d111      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002ee4:	4b11      	ldr	r3, [pc, #68]	; (8002f2c <HAL_ADC_ConfigChannel+0x28c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a11      	ldr	r2, [pc, #68]	; (8002f30 <HAL_ADC_ConfigChannel+0x290>)
 8002eea:	fba2 2303 	umull	r2, r3, r2, r3
 8002eee:	0c9a      	lsrs	r2, r3, #18
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002efa:	e002      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1f9      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	10000012 	.word	0x10000012
 8002f24:	40012000 	.word	0x40012000
 8002f28:	40012300 	.word	0x40012300
 8002f2c:	20000004 	.word	0x20000004
 8002f30:	431bde83 	.word	0x431bde83

08002f34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002f3c:	4b78      	ldr	r3, [pc, #480]	; (8003120 <ADC_Init+0x1ec>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4a77      	ldr	r2, [pc, #476]	; (8003120 <ADC_Init+0x1ec>)
 8002f42:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002f46:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002f48:	4b75      	ldr	r3, [pc, #468]	; (8003120 <ADC_Init+0x1ec>)
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	4973      	ldr	r1, [pc, #460]	; (8003120 <ADC_Init+0x1ec>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	021a      	lsls	r2, r3, #8
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6859      	ldr	r1, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002faa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6899      	ldr	r1, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	4a58      	ldr	r2, [pc, #352]	; (8003124 <ADC_Init+0x1f0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d022      	beq.n	800300e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6899      	ldr	r1, [r3, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ff8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6899      	ldr	r1, [r3, #8]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	e00f      	b.n	800302e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800301c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800302c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0202 	bic.w	r2, r2, #2
 800303c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6899      	ldr	r1, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	005a      	lsls	r2, r3, #1
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01b      	beq.n	8003094 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800306a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800307a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6859      	ldr	r1, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	3b01      	subs	r3, #1
 8003088:	035a      	lsls	r2, r3, #13
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	e007      	b.n	80030a4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	3b01      	subs	r3, #1
 80030c0:	051a      	lsls	r2, r3, #20
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6899      	ldr	r1, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030e6:	025a      	lsls	r2, r3, #9
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6899      	ldr	r1, [r3, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	029a      	lsls	r2, r3, #10
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	609a      	str	r2, [r3, #8]
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	40012300 	.word	0x40012300
 8003124:	0f000001 	.word	0x0f000001

08003128 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003134:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800313e:	2b00      	cmp	r3, #0
 8003140:	d13c      	bne.n	80031bc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d12b      	bne.n	80031b4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003160:	2b00      	cmp	r3, #0
 8003162:	d127      	bne.n	80031b4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800316e:	2b00      	cmp	r3, #0
 8003170:	d006      	beq.n	8003180 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800317c:	2b00      	cmp	r3, #0
 800317e:	d119      	bne.n	80031b4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0220 	bic.w	r2, r2, #32
 800318e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d105      	bne.n	80031b4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	f043 0201 	orr.w	r2, r3, #1
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f7ff fd55 	bl	8002c64 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031ba:	e00e      	b.n	80031da <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f7ff fd5f 	bl	8002c8c <HAL_ADC_ErrorCallback>
}
 80031ce:	e004      	b.n	80031da <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	4798      	blx	r3
}
 80031da:	bf00      	nop
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7ff fd41 	bl	8002c78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2240      	movs	r2, #64	; 0x40
 8003210:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003216:	f043 0204 	orr.w	r2, r3, #4
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f7ff fd34 	bl	8002c8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <__NVIC_SetPriorityGrouping>:
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800323c:	4b0b      	ldr	r3, [pc, #44]	; (800326c <__NVIC_SetPriorityGrouping+0x40>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003248:	4013      	ands	r3, r2
 800324a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <__NVIC_SetPriorityGrouping+0x44>)
 8003256:	4313      	orrs	r3, r2
 8003258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800325a:	4a04      	ldr	r2, [pc, #16]	; (800326c <__NVIC_SetPriorityGrouping+0x40>)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	60d3      	str	r3, [r2, #12]
}
 8003260:	bf00      	nop
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000ed00 	.word	0xe000ed00
 8003270:	05fa0000 	.word	0x05fa0000

08003274 <__NVIC_GetPriorityGrouping>:
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003278:	4b04      	ldr	r3, [pc, #16]	; (800328c <__NVIC_GetPriorityGrouping+0x18>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	0a1b      	lsrs	r3, r3, #8
 800327e:	f003 0307 	and.w	r3, r3, #7
}
 8003282:	4618      	mov	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <__NVIC_EnableIRQ>:
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	db0b      	blt.n	80032ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032a2:	79fb      	ldrb	r3, [r7, #7]
 80032a4:	f003 021f 	and.w	r2, r3, #31
 80032a8:	4907      	ldr	r1, [pc, #28]	; (80032c8 <__NVIC_EnableIRQ+0x38>)
 80032aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	2001      	movs	r0, #1
 80032b2:	fa00 f202 	lsl.w	r2, r0, r2
 80032b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	e000e100 	.word	0xe000e100

080032cc <__NVIC_SetPriority>:
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	6039      	str	r1, [r7, #0]
 80032d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	db0a      	blt.n	80032f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	490c      	ldr	r1, [pc, #48]	; (8003318 <__NVIC_SetPriority+0x4c>)
 80032e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ea:	0112      	lsls	r2, r2, #4
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	440b      	add	r3, r1
 80032f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80032f4:	e00a      	b.n	800330c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	4908      	ldr	r1, [pc, #32]	; (800331c <__NVIC_SetPriority+0x50>)
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	3b04      	subs	r3, #4
 8003304:	0112      	lsls	r2, r2, #4
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	440b      	add	r3, r1
 800330a:	761a      	strb	r2, [r3, #24]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000e100 	.word	0xe000e100
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <NVIC_EncodePriority>:
{
 8003320:	b480      	push	{r7}
 8003322:	b089      	sub	sp, #36	; 0x24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f1c3 0307 	rsb	r3, r3, #7
 800333a:	2b04      	cmp	r3, #4
 800333c:	bf28      	it	cs
 800333e:	2304      	movcs	r3, #4
 8003340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3304      	adds	r3, #4
 8003346:	2b06      	cmp	r3, #6
 8003348:	d902      	bls.n	8003350 <NVIC_EncodePriority+0x30>
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	3b03      	subs	r3, #3
 800334e:	e000      	b.n	8003352 <NVIC_EncodePriority+0x32>
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003354:	f04f 32ff 	mov.w	r2, #4294967295
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43da      	mvns	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	401a      	ands	r2, r3
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003368:	f04f 31ff 	mov.w	r1, #4294967295
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	fa01 f303 	lsl.w	r3, r1, r3
 8003372:	43d9      	mvns	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003378:	4313      	orrs	r3, r2
}
 800337a:	4618      	mov	r0, r3
 800337c:	3724      	adds	r7, #36	; 0x24
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
	...

08003388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3b01      	subs	r3, #1
 8003394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003398:	d301      	bcc.n	800339e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800339a:	2301      	movs	r3, #1
 800339c:	e00f      	b.n	80033be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800339e:	4a0a      	ldr	r2, [pc, #40]	; (80033c8 <SysTick_Config+0x40>)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033a6:	210f      	movs	r1, #15
 80033a8:	f04f 30ff 	mov.w	r0, #4294967295
 80033ac:	f7ff ff8e 	bl	80032cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033b0:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <SysTick_Config+0x40>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033b6:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <SysTick_Config+0x40>)
 80033b8:	2207      	movs	r2, #7
 80033ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	e000e010 	.word	0xe000e010

080033cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff ff29 	bl	800322c <__NVIC_SetPriorityGrouping>
}
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b086      	sub	sp, #24
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	4603      	mov	r3, r0
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	607a      	str	r2, [r7, #4]
 80033ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033f4:	f7ff ff3e 	bl	8003274 <__NVIC_GetPriorityGrouping>
 80033f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	6978      	ldr	r0, [r7, #20]
 8003400:	f7ff ff8e 	bl	8003320 <NVIC_EncodePriority>
 8003404:	4602      	mov	r2, r0
 8003406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800340a:	4611      	mov	r1, r2
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff ff5d 	bl	80032cc <__NVIC_SetPriority>
}
 8003412:	bf00      	nop
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	4603      	mov	r3, r0
 8003422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff ff31 	bl	8003290 <__NVIC_EnableIRQ>
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff ffa2 	bl	8003388 <SysTick_Config>
 8003444:	4603      	mov	r3, r0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e054      	b.n	800350c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	7f5b      	ldrb	r3, [r3, #29]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d105      	bne.n	8003478 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7fe fffc 	bl	8002470 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	791b      	ldrb	r3, [r3, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10c      	bne.n	80034a0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a22      	ldr	r2, [pc, #136]	; (8003514 <HAL_CRC_Init+0xc4>)
 800348c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0218 	bic.w	r2, r2, #24
 800349c:	609a      	str	r2, [r3, #8]
 800349e:	e00c      	b.n	80034ba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6899      	ldr	r1, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	461a      	mov	r2, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f834 	bl	8003518 <HAL_CRCEx_Polynomial_Set>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e028      	b.n	800350c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	795b      	ldrb	r3, [r3, #5]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d105      	bne.n	80034ce <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f04f 32ff 	mov.w	r2, #4294967295
 80034ca:	611a      	str	r2, [r3, #16]
 80034cc:	e004      	b.n	80034d8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6912      	ldr	r2, [r2, #16]
 80034d6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695a      	ldr	r2, [r3, #20]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699a      	ldr	r2, [r3, #24]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	04c11db7 	.word	0x04c11db7

08003518 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003524:	2300      	movs	r3, #0
 8003526:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003528:	231f      	movs	r3, #31
 800352a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800352c:	bf00      	nop
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1e5a      	subs	r2, r3, #1
 8003532:	613a      	str	r2, [r7, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d009      	beq.n	800354c <HAL_CRCEx_Polynomial_Set+0x34>
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	f003 031f 	and.w	r3, r3, #31
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	fa22 f303 	lsr.w	r3, r2, r3
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0f0      	beq.n	800352e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b18      	cmp	r3, #24
 8003550:	d846      	bhi.n	80035e0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003552:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003558:	080035e7 	.word	0x080035e7
 800355c:	080035e1 	.word	0x080035e1
 8003560:	080035e1 	.word	0x080035e1
 8003564:	080035e1 	.word	0x080035e1
 8003568:	080035e1 	.word	0x080035e1
 800356c:	080035e1 	.word	0x080035e1
 8003570:	080035e1 	.word	0x080035e1
 8003574:	080035e1 	.word	0x080035e1
 8003578:	080035d5 	.word	0x080035d5
 800357c:	080035e1 	.word	0x080035e1
 8003580:	080035e1 	.word	0x080035e1
 8003584:	080035e1 	.word	0x080035e1
 8003588:	080035e1 	.word	0x080035e1
 800358c:	080035e1 	.word	0x080035e1
 8003590:	080035e1 	.word	0x080035e1
 8003594:	080035e1 	.word	0x080035e1
 8003598:	080035c9 	.word	0x080035c9
 800359c:	080035e1 	.word	0x080035e1
 80035a0:	080035e1 	.word	0x080035e1
 80035a4:	080035e1 	.word	0x080035e1
 80035a8:	080035e1 	.word	0x080035e1
 80035ac:	080035e1 	.word	0x080035e1
 80035b0:	080035e1 	.word	0x080035e1
 80035b4:	080035e1 	.word	0x080035e1
 80035b8:	080035bd 	.word	0x080035bd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	2b06      	cmp	r3, #6
 80035c0:	d913      	bls.n	80035ea <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80035c6:	e010      	b.n	80035ea <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	2b07      	cmp	r3, #7
 80035cc:	d90f      	bls.n	80035ee <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80035d2:	e00c      	b.n	80035ee <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	2b0f      	cmp	r3, #15
 80035d8:	d90b      	bls.n	80035f2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80035de:	e008      	b.n	80035f2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	75fb      	strb	r3, [r7, #23]
      break;
 80035e4:	e006      	b.n	80035f4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80035e6:	bf00      	nop
 80035e8:	e004      	b.n	80035f4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80035ea:	bf00      	nop
 80035ec:	e002      	b.n	80035f4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80035ee:	bf00      	nop
 80035f0:	e000      	b.n	80035f4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80035f2:	bf00      	nop
  }
  if (status == HAL_OK)
 80035f4:	7dfb      	ldrb	r3, [r7, #23]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10d      	bne.n	8003616 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f023 0118 	bic.w	r1, r3, #24
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	430a      	orrs	r2, r1
 8003614:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003616:	7dfb      	ldrb	r3, [r7, #23]
}
 8003618:	4618      	mov	r0, r3
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003630:	f7ff f9b8 	bl	80029a4 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e099      	b.n	8003774 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003660:	e00f      	b.n	8003682 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003662:	f7ff f99f 	bl	80029a4 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b05      	cmp	r3, #5
 800366e:	d908      	bls.n	8003682 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2203      	movs	r2, #3
 800367a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e078      	b.n	8003774 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e8      	bne.n	8003662 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	4b38      	ldr	r3, [pc, #224]	; (800377c <HAL_DMA_Init+0x158>)
 800369c:	4013      	ands	r3, r2
 800369e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d107      	bne.n	80036ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	4313      	orrs	r3, r2
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f023 0307 	bic.w	r3, r3, #7
 8003702:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	4313      	orrs	r3, r2
 800370c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	2b04      	cmp	r3, #4
 8003714:	d117      	bne.n	8003746 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4313      	orrs	r3, r2
 800371e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00e      	beq.n	8003746 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 fa99 	bl	8003c60 <DMA_CheckFifoParam>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2240      	movs	r2, #64	; 0x40
 8003738:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003742:	2301      	movs	r3, #1
 8003744:	e016      	b.n	8003774 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fa50 	bl	8003bf4 <DMA_CalcBaseAndBitshift>
 8003754:	4603      	mov	r3, r0
 8003756:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375c:	223f      	movs	r2, #63	; 0x3f
 800375e:	409a      	lsls	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	f010803f 	.word	0xf010803f

08003780 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003796:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_DMA_Start_IT+0x26>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e048      	b.n	8003838 <HAL_DMA_Start_IT+0xb8>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d137      	bne.n	800382a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2202      	movs	r2, #2
 80037be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f9e2 	bl	8003b98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d8:	223f      	movs	r2, #63	; 0x3f
 80037da:	409a      	lsls	r2, r3
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0216 	orr.w	r2, r2, #22
 80037ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695a      	ldr	r2, [r3, #20]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037fe:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	d007      	beq.n	8003818 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0208 	orr.w	r2, r2, #8
 8003816:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	e005      	b.n	8003836 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003832:	2302      	movs	r3, #2
 8003834:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003836:	7dfb      	ldrb	r3, [r7, #23]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d004      	beq.n	800385e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2280      	movs	r2, #128	; 0x80
 8003858:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e00c      	b.n	8003878 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2205      	movs	r2, #5
 8003862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0201 	bic.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800388c:	2300      	movs	r3, #0
 800388e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003890:	4b92      	ldr	r3, [pc, #584]	; (8003adc <HAL_DMA_IRQHandler+0x258>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a92      	ldr	r2, [pc, #584]	; (8003ae0 <HAL_DMA_IRQHandler+0x25c>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	0a9b      	lsrs	r3, r3, #10
 800389c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ae:	2208      	movs	r2, #8
 80038b0:	409a      	lsls	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d01a      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d013      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0204 	bic.w	r2, r2, #4
 80038d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038dc:	2208      	movs	r2, #8
 80038de:	409a      	lsls	r2, r3
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e8:	f043 0201 	orr.w	r2, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f4:	2201      	movs	r2, #1
 80038f6:	409a      	lsls	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d012      	beq.n	8003926 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00b      	beq.n	8003926 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003912:	2201      	movs	r2, #1
 8003914:	409a      	lsls	r2, r3
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391e:	f043 0202 	orr.w	r2, r3, #2
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392a:	2204      	movs	r2, #4
 800392c:	409a      	lsls	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4013      	ands	r3, r2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d012      	beq.n	800395c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00b      	beq.n	800395c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003948:	2204      	movs	r2, #4
 800394a:	409a      	lsls	r2, r3
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003954:	f043 0204 	orr.w	r2, r3, #4
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003960:	2210      	movs	r2, #16
 8003962:	409a      	lsls	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4013      	ands	r3, r2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d043      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d03c      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397e:	2210      	movs	r2, #16
 8003980:	409a      	lsls	r2, r3
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d018      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d108      	bne.n	80039b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d024      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	4798      	blx	r3
 80039b2:	e01f      	b.n	80039f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d01b      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	4798      	blx	r3
 80039c4:	e016      	b.n	80039f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d107      	bne.n	80039e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0208 	bic.w	r2, r2, #8
 80039e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f8:	2220      	movs	r2, #32
 80039fa:	409a      	lsls	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 808e 	beq.w	8003b22 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 8086 	beq.w	8003b22 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	409a      	lsls	r2, r3
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b05      	cmp	r3, #5
 8003a2c:	d136      	bne.n	8003a9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0216 	bic.w	r2, r2, #22
 8003a3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695a      	ldr	r2, [r3, #20]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d103      	bne.n	8003a5e <HAL_DMA_IRQHandler+0x1da>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0208 	bic.w	r2, r2, #8
 8003a6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a72:	223f      	movs	r2, #63	; 0x3f
 8003a74:	409a      	lsls	r2, r3
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d07d      	beq.n	8003b8e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	4798      	blx	r3
        }
        return;
 8003a9a:	e078      	b.n	8003b8e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d01c      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d108      	bne.n	8003aca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d030      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	4798      	blx	r3
 8003ac8:	e02b      	b.n	8003b22 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d027      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	4798      	blx	r3
 8003ada:	e022      	b.n	8003b22 <HAL_DMA_IRQHandler+0x29e>
 8003adc:	20000004 	.word	0x20000004
 8003ae0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10f      	bne.n	8003b12 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0210 	bic.w	r2, r2, #16
 8003b00:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d032      	beq.n	8003b90 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d022      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2205      	movs	r2, #5
 8003b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0201 	bic.w	r2, r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	3301      	adds	r3, #1
 8003b52:	60bb      	str	r3, [r7, #8]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d307      	bcc.n	8003b6a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1f2      	bne.n	8003b4e <HAL_DMA_IRQHandler+0x2ca>
 8003b68:	e000      	b.n	8003b6c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003b6a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d005      	beq.n	8003b90 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	4798      	blx	r3
 8003b8c:	e000      	b.n	8003b90 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003b8e:	bf00      	nop
    }
  }
}
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop

08003b98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
 8003ba4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	2b40      	cmp	r3, #64	; 0x40
 8003bc4:	d108      	bne.n	8003bd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003bd6:	e007      	b.n	8003be8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	60da      	str	r2, [r3, #12]
}
 8003be8:	bf00      	nop
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	3b10      	subs	r3, #16
 8003c04:	4a13      	ldr	r2, [pc, #76]	; (8003c54 <DMA_CalcBaseAndBitshift+0x60>)
 8003c06:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0a:	091b      	lsrs	r3, r3, #4
 8003c0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c0e:	4a12      	ldr	r2, [pc, #72]	; (8003c58 <DMA_CalcBaseAndBitshift+0x64>)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4413      	add	r3, r2
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b03      	cmp	r3, #3
 8003c20:	d908      	bls.n	8003c34 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <DMA_CalcBaseAndBitshift+0x68>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	1d1a      	adds	r2, r3, #4
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	659a      	str	r2, [r3, #88]	; 0x58
 8003c32:	e006      	b.n	8003c42 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <DMA_CalcBaseAndBitshift+0x68>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	aaaaaaab 	.word	0xaaaaaaab
 8003c58:	0800d778 	.word	0x0800d778
 8003c5c:	fffffc00 	.word	0xfffffc00

08003c60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d11f      	bne.n	8003cba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d855      	bhi.n	8003d2c <DMA_CheckFifoParam+0xcc>
 8003c80:	a201      	add	r2, pc, #4	; (adr r2, 8003c88 <DMA_CheckFifoParam+0x28>)
 8003c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c86:	bf00      	nop
 8003c88:	08003c99 	.word	0x08003c99
 8003c8c:	08003cab 	.word	0x08003cab
 8003c90:	08003c99 	.word	0x08003c99
 8003c94:	08003d2d 	.word	0x08003d2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d045      	beq.n	8003d30 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ca8:	e042      	b.n	8003d30 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cb2:	d13f      	bne.n	8003d34 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cb8:	e03c      	b.n	8003d34 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cc2:	d121      	bne.n	8003d08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b03      	cmp	r3, #3
 8003cc8:	d836      	bhi.n	8003d38 <DMA_CheckFifoParam+0xd8>
 8003cca:	a201      	add	r2, pc, #4	; (adr r2, 8003cd0 <DMA_CheckFifoParam+0x70>)
 8003ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd0:	08003ce1 	.word	0x08003ce1
 8003cd4:	08003ce7 	.word	0x08003ce7
 8003cd8:	08003ce1 	.word	0x08003ce1
 8003cdc:	08003cf9 	.word	0x08003cf9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ce4:	e02f      	b.n	8003d46 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d024      	beq.n	8003d3c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf6:	e021      	b.n	8003d3c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d00:	d11e      	bne.n	8003d40 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d06:	e01b      	b.n	8003d40 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d902      	bls.n	8003d14 <DMA_CheckFifoParam+0xb4>
 8003d0e:	2b03      	cmp	r3, #3
 8003d10:	d003      	beq.n	8003d1a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d12:	e018      	b.n	8003d46 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	73fb      	strb	r3, [r7, #15]
      break;
 8003d18:	e015      	b.n	8003d46 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00e      	beq.n	8003d44 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	73fb      	strb	r3, [r7, #15]
      break;
 8003d2a:	e00b      	b.n	8003d44 <DMA_CheckFifoParam+0xe4>
      break;
 8003d2c:	bf00      	nop
 8003d2e:	e00a      	b.n	8003d46 <DMA_CheckFifoParam+0xe6>
      break;
 8003d30:	bf00      	nop
 8003d32:	e008      	b.n	8003d46 <DMA_CheckFifoParam+0xe6>
      break;
 8003d34:	bf00      	nop
 8003d36:	e006      	b.n	8003d46 <DMA_CheckFifoParam+0xe6>
      break;
 8003d38:	bf00      	nop
 8003d3a:	e004      	b.n	8003d46 <DMA_CheckFifoParam+0xe6>
      break;
 8003d3c:	bf00      	nop
 8003d3e:	e002      	b.n	8003d46 <DMA_CheckFifoParam+0xe6>
      break;   
 8003d40:	bf00      	nop
 8003d42:	e000      	b.n	8003d46 <DMA_CheckFifoParam+0xe6>
      break;
 8003d44:	bf00      	nop
    }
  } 
  
  return status; 
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b089      	sub	sp, #36	; 0x24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003d66:	2300      	movs	r3, #0
 8003d68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
 8003d72:	e175      	b.n	8004060 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d74:	2201      	movs	r2, #1
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4013      	ands	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	f040 8164 	bne.w	800405a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d00b      	beq.n	8003db2 <HAL_GPIO_Init+0x5e>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d007      	beq.n	8003db2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003da6:	2b11      	cmp	r3, #17
 8003da8:	d003      	beq.n	8003db2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b12      	cmp	r3, #18
 8003db0:	d130      	bne.n	8003e14 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	2203      	movs	r2, #3
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003de8:	2201      	movs	r2, #1
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	43db      	mvns	r3, r3
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4013      	ands	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	091b      	lsrs	r3, r3, #4
 8003dfe:	f003 0201 	and.w	r2, r3, #1
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	2203      	movs	r2, #3
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	43db      	mvns	r3, r3
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d003      	beq.n	8003e54 <HAL_GPIO_Init+0x100>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b12      	cmp	r3, #18
 8003e52:	d123      	bne.n	8003e9c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	08da      	lsrs	r2, r3, #3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3208      	adds	r2, #8
 8003e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	220f      	movs	r2, #15
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	4013      	ands	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	691a      	ldr	r2, [r3, #16]
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	08da      	lsrs	r2, r3, #3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3208      	adds	r2, #8
 8003e96:	69b9      	ldr	r1, [r7, #24]
 8003e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	43db      	mvns	r3, r3
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 0203 	and.w	r2, r3, #3
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 80be 	beq.w	800405a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ede:	4b65      	ldr	r3, [pc, #404]	; (8004074 <HAL_GPIO_Init+0x320>)
 8003ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee2:	4a64      	ldr	r2, [pc, #400]	; (8004074 <HAL_GPIO_Init+0x320>)
 8003ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8003eea:	4b62      	ldr	r3, [pc, #392]	; (8004074 <HAL_GPIO_Init+0x320>)
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003ef6:	4a60      	ldr	r2, [pc, #384]	; (8004078 <HAL_GPIO_Init+0x324>)
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	089b      	lsrs	r3, r3, #2
 8003efc:	3302      	adds	r3, #2
 8003efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	220f      	movs	r2, #15
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43db      	mvns	r3, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4013      	ands	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a57      	ldr	r2, [pc, #348]	; (800407c <HAL_GPIO_Init+0x328>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d037      	beq.n	8003f92 <HAL_GPIO_Init+0x23e>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a56      	ldr	r2, [pc, #344]	; (8004080 <HAL_GPIO_Init+0x32c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d031      	beq.n	8003f8e <HAL_GPIO_Init+0x23a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a55      	ldr	r2, [pc, #340]	; (8004084 <HAL_GPIO_Init+0x330>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d02b      	beq.n	8003f8a <HAL_GPIO_Init+0x236>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a54      	ldr	r2, [pc, #336]	; (8004088 <HAL_GPIO_Init+0x334>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d025      	beq.n	8003f86 <HAL_GPIO_Init+0x232>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a53      	ldr	r2, [pc, #332]	; (800408c <HAL_GPIO_Init+0x338>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d01f      	beq.n	8003f82 <HAL_GPIO_Init+0x22e>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a52      	ldr	r2, [pc, #328]	; (8004090 <HAL_GPIO_Init+0x33c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d019      	beq.n	8003f7e <HAL_GPIO_Init+0x22a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a51      	ldr	r2, [pc, #324]	; (8004094 <HAL_GPIO_Init+0x340>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d013      	beq.n	8003f7a <HAL_GPIO_Init+0x226>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a50      	ldr	r2, [pc, #320]	; (8004098 <HAL_GPIO_Init+0x344>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00d      	beq.n	8003f76 <HAL_GPIO_Init+0x222>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a4f      	ldr	r2, [pc, #316]	; (800409c <HAL_GPIO_Init+0x348>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d007      	beq.n	8003f72 <HAL_GPIO_Init+0x21e>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a4e      	ldr	r2, [pc, #312]	; (80040a0 <HAL_GPIO_Init+0x34c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d101      	bne.n	8003f6e <HAL_GPIO_Init+0x21a>
 8003f6a:	2309      	movs	r3, #9
 8003f6c:	e012      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f6e:	230a      	movs	r3, #10
 8003f70:	e010      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f72:	2308      	movs	r3, #8
 8003f74:	e00e      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f76:	2307      	movs	r3, #7
 8003f78:	e00c      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f7a:	2306      	movs	r3, #6
 8003f7c:	e00a      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f7e:	2305      	movs	r3, #5
 8003f80:	e008      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f82:	2304      	movs	r3, #4
 8003f84:	e006      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f86:	2303      	movs	r3, #3
 8003f88:	e004      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e002      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f92:	2300      	movs	r3, #0
 8003f94:	69fa      	ldr	r2, [r7, #28]
 8003f96:	f002 0203 	and.w	r2, r2, #3
 8003f9a:	0092      	lsls	r2, r2, #2
 8003f9c:	4093      	lsls	r3, r2
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003fa4:	4934      	ldr	r1, [pc, #208]	; (8004078 <HAL_GPIO_Init+0x324>)
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	089b      	lsrs	r3, r3, #2
 8003faa:	3302      	adds	r3, #2
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fb2:	4b3c      	ldr	r3, [pc, #240]	; (80040a4 <HAL_GPIO_Init+0x350>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fd6:	4a33      	ldr	r2, [pc, #204]	; (80040a4 <HAL_GPIO_Init+0x350>)
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003fdc:	4b31      	ldr	r3, [pc, #196]	; (80040a4 <HAL_GPIO_Init+0x350>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004000:	4a28      	ldr	r2, [pc, #160]	; (80040a4 <HAL_GPIO_Init+0x350>)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004006:	4b27      	ldr	r3, [pc, #156]	; (80040a4 <HAL_GPIO_Init+0x350>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	43db      	mvns	r3, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4013      	ands	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	4313      	orrs	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800402a:	4a1e      	ldr	r2, [pc, #120]	; (80040a4 <HAL_GPIO_Init+0x350>)
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004030:	4b1c      	ldr	r3, [pc, #112]	; (80040a4 <HAL_GPIO_Init+0x350>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	43db      	mvns	r3, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4013      	ands	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004054:	4a13      	ldr	r2, [pc, #76]	; (80040a4 <HAL_GPIO_Init+0x350>)
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	3301      	adds	r3, #1
 800405e:	61fb      	str	r3, [r7, #28]
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	2b0f      	cmp	r3, #15
 8004064:	f67f ae86 	bls.w	8003d74 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004068:	bf00      	nop
 800406a:	3724      	adds	r7, #36	; 0x24
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	40023800 	.word	0x40023800
 8004078:	40013800 	.word	0x40013800
 800407c:	40020000 	.word	0x40020000
 8004080:	40020400 	.word	0x40020400
 8004084:	40020800 	.word	0x40020800
 8004088:	40020c00 	.word	0x40020c00
 800408c:	40021000 	.word	0x40021000
 8004090:	40021400 	.word	0x40021400
 8004094:	40021800 	.word	0x40021800
 8004098:	40021c00 	.word	0x40021c00
 800409c:	40022000 	.word	0x40022000
 80040a0:	40022400 	.word	0x40022400
 80040a4:	40013c00 	.word	0x40013c00

080040a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	887b      	ldrh	r3, [r7, #2]
 80040ba:	4013      	ands	r3, r2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040c0:	2301      	movs	r3, #1
 80040c2:	73fb      	strb	r3, [r7, #15]
 80040c4:	e001      	b.n	80040ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040c6:	2300      	movs	r3, #0
 80040c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	807b      	strh	r3, [r7, #2]
 80040e4:	4613      	mov	r3, r2
 80040e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040e8:	787b      	ldrb	r3, [r7, #1]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040ee:	887a      	ldrh	r2, [r7, #2]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80040f4:	e003      	b.n	80040fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80040f6:	887b      	ldrh	r3, [r7, #2]
 80040f8:	041a      	lsls	r2, r3, #16
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	619a      	str	r2, [r3, #24]
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
	...

0800410c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e07f      	b.n	800421e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d106      	bne.n	8004138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7fe f9bc 	bl	80024b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2224      	movs	r2, #36	; 0x24
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0201 	bic.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800415c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800416c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d107      	bne.n	8004186 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689a      	ldr	r2, [r3, #8]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004182:	609a      	str	r2, [r3, #8]
 8004184:	e006      	b.n	8004194 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004192:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2b02      	cmp	r3, #2
 800419a:	d104      	bne.n	80041a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6859      	ldr	r1, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	4b1d      	ldr	r3, [pc, #116]	; (8004228 <HAL_I2C_Init+0x11c>)
 80041b2:	430b      	orrs	r3, r1
 80041b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	ea42 0103 	orr.w	r1, r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	021a      	lsls	r2, r3, #8
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69d9      	ldr	r1, [r3, #28]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1a      	ldr	r2, [r3, #32]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0201 	orr.w	r2, r2, #1
 80041fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	02008000 	.word	0x02008000

0800422c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b088      	sub	sp, #32
 8004230:	af02      	add	r7, sp, #8
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	607a      	str	r2, [r7, #4]
 8004236:	461a      	mov	r2, r3
 8004238:	460b      	mov	r3, r1
 800423a:	817b      	strh	r3, [r7, #10]
 800423c:	4613      	mov	r3, r2
 800423e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b20      	cmp	r3, #32
 800424a:	f040 80da 	bne.w	8004402 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_I2C_Master_Transmit+0x30>
 8004258:	2302      	movs	r3, #2
 800425a:	e0d3      	b.n	8004404 <HAL_I2C_Master_Transmit+0x1d8>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004264:	f7fe fb9e 	bl	80029a4 <HAL_GetTick>
 8004268:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	2319      	movs	r3, #25
 8004270:	2201      	movs	r2, #1
 8004272:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 f9e6 	bl	8004648 <I2C_WaitOnFlagUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e0be      	b.n	8004404 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2221      	movs	r2, #33	; 0x21
 800428a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2210      	movs	r2, #16
 8004292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	893a      	ldrh	r2, [r7, #8]
 80042a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	2bff      	cmp	r3, #255	; 0xff
 80042b6:	d90e      	bls.n	80042d6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	22ff      	movs	r2, #255	; 0xff
 80042bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	8979      	ldrh	r1, [r7, #10]
 80042c6:	4b51      	ldr	r3, [pc, #324]	; (800440c <HAL_I2C_Master_Transmit+0x1e0>)
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 fb48 	bl	8004964 <I2C_TransferConfig>
 80042d4:	e06c      	b.n	80043b0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	8979      	ldrh	r1, [r7, #10]
 80042e8:	4b48      	ldr	r3, [pc, #288]	; (800440c <HAL_I2C_Master_Transmit+0x1e0>)
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 fb37 	bl	8004964 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80042f6:	e05b      	b.n	80043b0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	6a39      	ldr	r1, [r7, #32]
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 f9e3 	bl	80046c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e07b      	b.n	8004404 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	781a      	ldrb	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d034      	beq.n	80043b0 <HAL_I2C_Master_Transmit+0x184>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434a:	2b00      	cmp	r3, #0
 800434c:	d130      	bne.n	80043b0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	2200      	movs	r2, #0
 8004356:	2180      	movs	r1, #128	; 0x80
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 f975 	bl	8004648 <I2C_WaitOnFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e04d      	b.n	8004404 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	2bff      	cmp	r3, #255	; 0xff
 8004370:	d90e      	bls.n	8004390 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	22ff      	movs	r2, #255	; 0xff
 8004376:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437c:	b2da      	uxtb	r2, r3
 800437e:	8979      	ldrh	r1, [r7, #10]
 8004380:	2300      	movs	r3, #0
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 faeb 	bl	8004964 <I2C_TransferConfig>
 800438e:	e00f      	b.n	80043b0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	8979      	ldrh	r1, [r7, #10]
 80043a2:	2300      	movs	r3, #0
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 fada 	bl	8004964 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d19e      	bne.n	80042f8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	6a39      	ldr	r1, [r7, #32]
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 f9c2 	bl	8004748 <I2C_WaitOnSTOPFlagUntilTimeout>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e01a      	b.n	8004404 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2220      	movs	r2, #32
 80043d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6859      	ldr	r1, [r3, #4]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <HAL_I2C_Master_Transmit+0x1e4>)
 80043e2:	400b      	ands	r3, r1
 80043e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	e000      	b.n	8004404 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004402:	2302      	movs	r3, #2
  }
}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	80002000 	.word	0x80002000
 8004410:	fe00e800 	.word	0xfe00e800

08004414 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b088      	sub	sp, #32
 8004418:	af02      	add	r7, sp, #8
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	607a      	str	r2, [r7, #4]
 800441e:	461a      	mov	r2, r3
 8004420:	460b      	mov	r3, r1
 8004422:	817b      	strh	r3, [r7, #10]
 8004424:	4613      	mov	r3, r2
 8004426:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b20      	cmp	r3, #32
 8004432:	f040 80db 	bne.w	80045ec <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_I2C_Master_Receive+0x30>
 8004440:	2302      	movs	r3, #2
 8004442:	e0d4      	b.n	80045ee <HAL_I2C_Master_Receive+0x1da>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800444c:	f7fe faaa 	bl	80029a4 <HAL_GetTick>
 8004450:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	2319      	movs	r3, #25
 8004458:	2201      	movs	r2, #1
 800445a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 f8f2 	bl	8004648 <I2C_WaitOnFlagUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e0bf      	b.n	80045ee <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2222      	movs	r2, #34	; 0x22
 8004472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2210      	movs	r2, #16
 800447a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	893a      	ldrh	r2, [r7, #8]
 800448e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449a:	b29b      	uxth	r3, r3
 800449c:	2bff      	cmp	r3, #255	; 0xff
 800449e:	d90e      	bls.n	80044be <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	22ff      	movs	r2, #255	; 0xff
 80044a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	8979      	ldrh	r1, [r7, #10]
 80044ae:	4b52      	ldr	r3, [pc, #328]	; (80045f8 <HAL_I2C_Master_Receive+0x1e4>)
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 fa54 	bl	8004964 <I2C_TransferConfig>
 80044bc:	e06d      	b.n	800459a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	8979      	ldrh	r1, [r7, #10]
 80044d0:	4b49      	ldr	r3, [pc, #292]	; (80045f8 <HAL_I2C_Master_Receive+0x1e4>)
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 fa43 	bl	8004964 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80044de:	e05c      	b.n	800459a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	6a39      	ldr	r1, [r7, #32]
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f96b 	bl	80047c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e07c      	b.n	80045ee <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451c:	b29b      	uxth	r3, r3
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d034      	beq.n	800459a <HAL_I2C_Master_Receive+0x186>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004534:	2b00      	cmp	r3, #0
 8004536:	d130      	bne.n	800459a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	2200      	movs	r2, #0
 8004540:	2180      	movs	r1, #128	; 0x80
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f880 	bl	8004648 <I2C_WaitOnFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e04d      	b.n	80045ee <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004556:	b29b      	uxth	r3, r3
 8004558:	2bff      	cmp	r3, #255	; 0xff
 800455a:	d90e      	bls.n	800457a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	22ff      	movs	r2, #255	; 0xff
 8004560:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004566:	b2da      	uxtb	r2, r3
 8004568:	8979      	ldrh	r1, [r7, #10]
 800456a:	2300      	movs	r3, #0
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 f9f6 	bl	8004964 <I2C_TransferConfig>
 8004578:	e00f      	b.n	800459a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457e:	b29a      	uxth	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004588:	b2da      	uxtb	r2, r3
 800458a:	8979      	ldrh	r1, [r7, #10]
 800458c:	2300      	movs	r3, #0
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 f9e5 	bl	8004964 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459e:	b29b      	uxth	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d19d      	bne.n	80044e0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	6a39      	ldr	r1, [r7, #32]
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f8cd 	bl	8004748 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e01a      	b.n	80045ee <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2220      	movs	r2, #32
 80045be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6859      	ldr	r1, [r3, #4]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	4b0c      	ldr	r3, [pc, #48]	; (80045fc <HAL_I2C_Master_Receive+0x1e8>)
 80045cc:	400b      	ands	r3, r1
 80045ce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	e000      	b.n	80045ee <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80045ec:	2302      	movs	r3, #2
  }
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	80002400 	.word	0x80002400
 80045fc:	fe00e800 	.word	0xfe00e800

08004600 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b02      	cmp	r3, #2
 8004614:	d103      	bne.n	800461e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2200      	movs	r2, #0
 800461c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b01      	cmp	r3, #1
 800462a:	d007      	beq.n	800463c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	699a      	ldr	r2, [r3, #24]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0201 	orr.w	r2, r2, #1
 800463a:	619a      	str	r2, [r3, #24]
  }
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	4613      	mov	r3, r2
 8004656:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004658:	e022      	b.n	80046a0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004660:	d01e      	beq.n	80046a0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004662:	f7fe f99f 	bl	80029a4 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	429a      	cmp	r2, r3
 8004670:	d302      	bcc.n	8004678 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d113      	bne.n	80046a0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467c:	f043 0220 	orr.w	r2, r3, #32
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e00f      	b.n	80046c0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699a      	ldr	r2, [r3, #24]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	4013      	ands	r3, r2
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	bf0c      	ite	eq
 80046b0:	2301      	moveq	r3, #1
 80046b2:	2300      	movne	r3, #0
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	461a      	mov	r2, r3
 80046b8:	79fb      	ldrb	r3, [r7, #7]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d0cd      	beq.n	800465a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046d4:	e02c      	b.n	8004730 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	68b9      	ldr	r1, [r7, #8]
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 f8dc 	bl	8004898 <I2C_IsAcknowledgeFailed>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e02a      	b.n	8004740 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f0:	d01e      	beq.n	8004730 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f2:	f7fe f957 	bl	80029a4 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d302      	bcc.n	8004708 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d113      	bne.n	8004730 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470c:	f043 0220 	orr.w	r2, r3, #32
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e007      	b.n	8004740 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b02      	cmp	r3, #2
 800473c:	d1cb      	bne.n	80046d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004754:	e028      	b.n	80047a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 f89c 	bl	8004898 <I2C_IsAcknowledgeFailed>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e026      	b.n	80047b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800476a:	f7fe f91b 	bl	80029a4 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	429a      	cmp	r2, r3
 8004778:	d302      	bcc.n	8004780 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d113      	bne.n	80047a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004784:	f043 0220 	orr.w	r2, r3, #32
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e007      	b.n	80047b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d1cf      	bne.n	8004756 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047cc:	e055      	b.n	800487a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	68b9      	ldr	r1, [r7, #8]
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 f860 	bl	8004898 <I2C_IsAcknowledgeFailed>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e053      	b.n	800488a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	f003 0320 	and.w	r3, r3, #32
 80047ec:	2b20      	cmp	r3, #32
 80047ee:	d129      	bne.n	8004844 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	f003 0304 	and.w	r3, r3, #4
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d105      	bne.n	800480a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	e03f      	b.n	800488a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2220      	movs	r2, #32
 8004810:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6859      	ldr	r1, [r3, #4]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	4b1d      	ldr	r3, [pc, #116]	; (8004894 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800481e:	400b      	ands	r3, r1
 8004820:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e022      	b.n	800488a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004844:	f7fe f8ae 	bl	80029a4 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	429a      	cmp	r2, r3
 8004852:	d302      	bcc.n	800485a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10f      	bne.n	800487a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485e:	f043 0220 	orr.w	r2, r3, #32
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2220      	movs	r2, #32
 800486a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e007      	b.n	800488a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b04      	cmp	r3, #4
 8004886:	d1a2      	bne.n	80047ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	fe00e800 	.word	0xfe00e800

08004898 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	f003 0310 	and.w	r3, r3, #16
 80048ae:	2b10      	cmp	r3, #16
 80048b0:	d151      	bne.n	8004956 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048b2:	e022      	b.n	80048fa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ba:	d01e      	beq.n	80048fa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048bc:	f7fe f872 	bl	80029a4 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d302      	bcc.n	80048d2 <I2C_IsAcknowledgeFailed+0x3a>
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d113      	bne.n	80048fa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d6:	f043 0220 	orr.w	r2, r3, #32
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e02e      	b.n	8004958 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b20      	cmp	r3, #32
 8004906:	d1d5      	bne.n	80048b4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2210      	movs	r2, #16
 800490e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2220      	movs	r2, #32
 8004916:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f7ff fe71 	bl	8004600 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6859      	ldr	r1, [r3, #4]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <I2C_IsAcknowledgeFailed+0xc8>)
 800492a:	400b      	ands	r3, r1
 800492c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004932:	f043 0204 	orr.w	r2, r3, #4
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2220      	movs	r2, #32
 800493e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	fe00e800 	.word	0xfe00e800

08004964 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	607b      	str	r3, [r7, #4]
 800496e:	460b      	mov	r3, r1
 8004970:	817b      	strh	r3, [r7, #10]
 8004972:	4613      	mov	r3, r2
 8004974:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	0d5b      	lsrs	r3, r3, #21
 8004980:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004984:	4b0d      	ldr	r3, [pc, #52]	; (80049bc <I2C_TransferConfig+0x58>)
 8004986:	430b      	orrs	r3, r1
 8004988:	43db      	mvns	r3, r3
 800498a:	ea02 0103 	and.w	r1, r2, r3
 800498e:	897b      	ldrh	r3, [r7, #10]
 8004990:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004994:	7a7b      	ldrb	r3, [r7, #9]
 8004996:	041b      	lsls	r3, r3, #16
 8004998:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	431a      	orrs	r2, r3
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	431a      	orrs	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80049ae:	bf00      	nop
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	03ff63ff 	.word	0x03ff63ff

080049c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b20      	cmp	r3, #32
 80049d4:	d138      	bne.n	8004a48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e032      	b.n	8004a4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2224      	movs	r2, #36	; 0x24
 80049f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0201 	bic.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6819      	ldr	r1, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0201 	orr.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	e000      	b.n	8004a4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a48:	2302      	movs	r3, #2
  }
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b085      	sub	sp, #20
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d139      	bne.n	8004ae0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d101      	bne.n	8004a7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a76:	2302      	movs	r3, #2
 8004a78:	e033      	b.n	8004ae2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2224      	movs	r2, #36	; 0x24
 8004a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0201 	bic.w	r2, r2, #1
 8004a98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004aa8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	021b      	lsls	r3, r3, #8
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0201 	orr.w	r2, r2, #1
 8004aca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	e000      	b.n	8004ae2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ae0:	2302      	movs	r3, #2
  }
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
	...

08004af0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004af6:	2300      	movs	r3, #0
 8004af8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004afa:	4b23      	ldr	r3, [pc, #140]	; (8004b88 <HAL_PWREx_EnableOverDrive+0x98>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	4a22      	ldr	r2, [pc, #136]	; (8004b88 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b04:	6413      	str	r3, [r2, #64]	; 0x40
 8004b06:	4b20      	ldr	r3, [pc, #128]	; (8004b88 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0e:	603b      	str	r3, [r7, #0]
 8004b10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004b12:	4b1e      	ldr	r3, [pc, #120]	; (8004b8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a1d      	ldr	r2, [pc, #116]	; (8004b8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b1c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b1e:	f7fd ff41 	bl	80029a4 <HAL_GetTick>
 8004b22:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b24:	e009      	b.n	8004b3a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b26:	f7fd ff3d 	bl	80029a4 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b34:	d901      	bls.n	8004b3a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e022      	b.n	8004b80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b3a:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b46:	d1ee      	bne.n	8004b26 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004b48:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a0f      	ldr	r2, [pc, #60]	; (8004b8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b52:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b54:	f7fd ff26 	bl	80029a4 <HAL_GetTick>
 8004b58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004b5a:	e009      	b.n	8004b70 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b5c:	f7fd ff22 	bl	80029a4 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b6a:	d901      	bls.n	8004b70 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e007      	b.n	8004b80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004b70:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b7c:	d1ee      	bne.n	8004b5c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	40007000 	.word	0x40007000

08004b90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e291      	b.n	80050ca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 8087 	beq.w	8004cc2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bb4:	4b96      	ldr	r3, [pc, #600]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f003 030c 	and.w	r3, r3, #12
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d00c      	beq.n	8004bda <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bc0:	4b93      	ldr	r3, [pc, #588]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f003 030c 	and.w	r3, r3, #12
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d112      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x62>
 8004bcc:	4b90      	ldr	r3, [pc, #576]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bd8:	d10b      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bda:	4b8d      	ldr	r3, [pc, #564]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d06c      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x130>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d168      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e26b      	b.n	80050ca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bfa:	d106      	bne.n	8004c0a <HAL_RCC_OscConfig+0x7a>
 8004bfc:	4b84      	ldr	r3, [pc, #528]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a83      	ldr	r2, [pc, #524]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	e02e      	b.n	8004c68 <HAL_RCC_OscConfig+0xd8>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10c      	bne.n	8004c2c <HAL_RCC_OscConfig+0x9c>
 8004c12:	4b7f      	ldr	r3, [pc, #508]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a7e      	ldr	r2, [pc, #504]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	4b7c      	ldr	r3, [pc, #496]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a7b      	ldr	r2, [pc, #492]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	e01d      	b.n	8004c68 <HAL_RCC_OscConfig+0xd8>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c34:	d10c      	bne.n	8004c50 <HAL_RCC_OscConfig+0xc0>
 8004c36:	4b76      	ldr	r3, [pc, #472]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a75      	ldr	r2, [pc, #468]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	4b73      	ldr	r3, [pc, #460]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a72      	ldr	r2, [pc, #456]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	e00b      	b.n	8004c68 <HAL_RCC_OscConfig+0xd8>
 8004c50:	4b6f      	ldr	r3, [pc, #444]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a6e      	ldr	r2, [pc, #440]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c5a:	6013      	str	r3, [r2, #0]
 8004c5c:	4b6c      	ldr	r3, [pc, #432]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a6b      	ldr	r2, [pc, #428]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d013      	beq.n	8004c98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c70:	f7fd fe98 	bl	80029a4 <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c76:	e008      	b.n	8004c8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c78:	f7fd fe94 	bl	80029a4 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b64      	cmp	r3, #100	; 0x64
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e21f      	b.n	80050ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c8a:	4b61      	ldr	r3, [pc, #388]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0f0      	beq.n	8004c78 <HAL_RCC_OscConfig+0xe8>
 8004c96:	e014      	b.n	8004cc2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c98:	f7fd fe84 	bl	80029a4 <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ca0:	f7fd fe80 	bl	80029a4 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b64      	cmp	r3, #100	; 0x64
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e20b      	b.n	80050ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cb2:	4b57      	ldr	r3, [pc, #348]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1f0      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x110>
 8004cbe:	e000      	b.n	8004cc2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d069      	beq.n	8004da2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cce:	4b50      	ldr	r3, [pc, #320]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 030c 	and.w	r3, r3, #12
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00b      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cda:	4b4d      	ldr	r3, [pc, #308]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f003 030c 	and.w	r3, r3, #12
 8004ce2:	2b08      	cmp	r3, #8
 8004ce4:	d11c      	bne.n	8004d20 <HAL_RCC_OscConfig+0x190>
 8004ce6:	4b4a      	ldr	r3, [pc, #296]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d116      	bne.n	8004d20 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cf2:	4b47      	ldr	r3, [pc, #284]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d005      	beq.n	8004d0a <HAL_RCC_OscConfig+0x17a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d001      	beq.n	8004d0a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e1df      	b.n	80050ca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d0a:	4b41      	ldr	r3, [pc, #260]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	493d      	ldr	r1, [pc, #244]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d1e:	e040      	b.n	8004da2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d023      	beq.n	8004d70 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d28:	4b39      	ldr	r3, [pc, #228]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a38      	ldr	r2, [pc, #224]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004d2e:	f043 0301 	orr.w	r3, r3, #1
 8004d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d34:	f7fd fe36 	bl	80029a4 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d3c:	f7fd fe32 	bl	80029a4 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e1bd      	b.n	80050ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d4e:	4b30      	ldr	r3, [pc, #192]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0f0      	beq.n	8004d3c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d5a:	4b2d      	ldr	r3, [pc, #180]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	4929      	ldr	r1, [pc, #164]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	600b      	str	r3, [r1, #0]
 8004d6e:	e018      	b.n	8004da2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d70:	4b27      	ldr	r3, [pc, #156]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a26      	ldr	r2, [pc, #152]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004d76:	f023 0301 	bic.w	r3, r3, #1
 8004d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7c:	f7fd fe12 	bl	80029a4 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d84:	f7fd fe0e 	bl	80029a4 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e199      	b.n	80050ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d96:	4b1e      	ldr	r3, [pc, #120]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f0      	bne.n	8004d84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d038      	beq.n	8004e20 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d019      	beq.n	8004dea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004db6:	4b16      	ldr	r3, [pc, #88]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dba:	4a15      	ldr	r2, [pc, #84]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004dbc:	f043 0301 	orr.w	r3, r3, #1
 8004dc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc2:	f7fd fdef 	bl	80029a4 <HAL_GetTick>
 8004dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dc8:	e008      	b.n	8004ddc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dca:	f7fd fdeb 	bl	80029a4 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e176      	b.n	80050ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ddc:	4b0c      	ldr	r3, [pc, #48]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0f0      	beq.n	8004dca <HAL_RCC_OscConfig+0x23a>
 8004de8:	e01a      	b.n	8004e20 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dea:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dee:	4a08      	ldr	r2, [pc, #32]	; (8004e10 <HAL_RCC_OscConfig+0x280>)
 8004df0:	f023 0301 	bic.w	r3, r3, #1
 8004df4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df6:	f7fd fdd5 	bl	80029a4 <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dfc:	e00a      	b.n	8004e14 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dfe:	f7fd fdd1 	bl	80029a4 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d903      	bls.n	8004e14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e15c      	b.n	80050ca <HAL_RCC_OscConfig+0x53a>
 8004e10:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e14:	4b91      	ldr	r3, [pc, #580]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1ee      	bne.n	8004dfe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 80a4 	beq.w	8004f76 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e2e:	4b8b      	ldr	r3, [pc, #556]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10d      	bne.n	8004e56 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e3a:	4b88      	ldr	r3, [pc, #544]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	4a87      	ldr	r2, [pc, #540]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e44:	6413      	str	r3, [r2, #64]	; 0x40
 8004e46:	4b85      	ldr	r3, [pc, #532]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e4e:	60bb      	str	r3, [r7, #8]
 8004e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e52:	2301      	movs	r3, #1
 8004e54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e56:	4b82      	ldr	r3, [pc, #520]	; (8005060 <HAL_RCC_OscConfig+0x4d0>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d118      	bne.n	8004e94 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004e62:	4b7f      	ldr	r3, [pc, #508]	; (8005060 <HAL_RCC_OscConfig+0x4d0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a7e      	ldr	r2, [pc, #504]	; (8005060 <HAL_RCC_OscConfig+0x4d0>)
 8004e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e6e:	f7fd fd99 	bl	80029a4 <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e74:	e008      	b.n	8004e88 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e76:	f7fd fd95 	bl	80029a4 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b64      	cmp	r3, #100	; 0x64
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e120      	b.n	80050ca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e88:	4b75      	ldr	r3, [pc, #468]	; (8005060 <HAL_RCC_OscConfig+0x4d0>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0f0      	beq.n	8004e76 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d106      	bne.n	8004eaa <HAL_RCC_OscConfig+0x31a>
 8004e9c:	4b6f      	ldr	r3, [pc, #444]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea0:	4a6e      	ldr	r2, [pc, #440]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea8:	e02d      	b.n	8004f06 <HAL_RCC_OscConfig+0x376>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10c      	bne.n	8004ecc <HAL_RCC_OscConfig+0x33c>
 8004eb2:	4b6a      	ldr	r3, [pc, #424]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb6:	4a69      	ldr	r2, [pc, #420]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004eb8:	f023 0301 	bic.w	r3, r3, #1
 8004ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ebe:	4b67      	ldr	r3, [pc, #412]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec2:	4a66      	ldr	r2, [pc, #408]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004ec4:	f023 0304 	bic.w	r3, r3, #4
 8004ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8004eca:	e01c      	b.n	8004f06 <HAL_RCC_OscConfig+0x376>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	2b05      	cmp	r3, #5
 8004ed2:	d10c      	bne.n	8004eee <HAL_RCC_OscConfig+0x35e>
 8004ed4:	4b61      	ldr	r3, [pc, #388]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed8:	4a60      	ldr	r2, [pc, #384]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004eda:	f043 0304 	orr.w	r3, r3, #4
 8004ede:	6713      	str	r3, [r2, #112]	; 0x70
 8004ee0:	4b5e      	ldr	r3, [pc, #376]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee4:	4a5d      	ldr	r2, [pc, #372]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004ee6:	f043 0301 	orr.w	r3, r3, #1
 8004eea:	6713      	str	r3, [r2, #112]	; 0x70
 8004eec:	e00b      	b.n	8004f06 <HAL_RCC_OscConfig+0x376>
 8004eee:	4b5b      	ldr	r3, [pc, #364]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef2:	4a5a      	ldr	r2, [pc, #360]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004ef4:	f023 0301 	bic.w	r3, r3, #1
 8004ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8004efa:	4b58      	ldr	r3, [pc, #352]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efe:	4a57      	ldr	r2, [pc, #348]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004f00:	f023 0304 	bic.w	r3, r3, #4
 8004f04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d015      	beq.n	8004f3a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0e:	f7fd fd49 	bl	80029a4 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f14:	e00a      	b.n	8004f2c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f16:	f7fd fd45 	bl	80029a4 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e0ce      	b.n	80050ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f2c:	4b4b      	ldr	r3, [pc, #300]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0ee      	beq.n	8004f16 <HAL_RCC_OscConfig+0x386>
 8004f38:	e014      	b.n	8004f64 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f3a:	f7fd fd33 	bl	80029a4 <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f40:	e00a      	b.n	8004f58 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f42:	f7fd fd2f 	bl	80029a4 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e0b8      	b.n	80050ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f58:	4b40      	ldr	r3, [pc, #256]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1ee      	bne.n	8004f42 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f64:	7dfb      	ldrb	r3, [r7, #23]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d105      	bne.n	8004f76 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f6a:	4b3c      	ldr	r3, [pc, #240]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	4a3b      	ldr	r2, [pc, #236]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 80a4 	beq.w	80050c8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f80:	4b36      	ldr	r3, [pc, #216]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 030c 	and.w	r3, r3, #12
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d06b      	beq.n	8005064 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d149      	bne.n	8005028 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f94:	4b31      	ldr	r3, [pc, #196]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a30      	ldr	r2, [pc, #192]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa0:	f7fd fd00 	bl	80029a4 <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa8:	f7fd fcfc 	bl	80029a4 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e087      	b.n	80050ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fba:	4b28      	ldr	r3, [pc, #160]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1f0      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69da      	ldr	r2, [r3, #28]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	019b      	lsls	r3, r3, #6
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fdc:	085b      	lsrs	r3, r3, #1
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	041b      	lsls	r3, r3, #16
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	061b      	lsls	r3, r3, #24
 8004fea:	4313      	orrs	r3, r2
 8004fec:	4a1b      	ldr	r2, [pc, #108]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004fee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ff2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ff4:	4b19      	ldr	r3, [pc, #100]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a18      	ldr	r2, [pc, #96]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8004ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005000:	f7fd fcd0 	bl	80029a4 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005008:	f7fd fccc 	bl	80029a4 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e057      	b.n	80050ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800501a:	4b10      	ldr	r3, [pc, #64]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0f0      	beq.n	8005008 <HAL_RCC_OscConfig+0x478>
 8005026:	e04f      	b.n	80050c8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005028:	4b0c      	ldr	r3, [pc, #48]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a0b      	ldr	r2, [pc, #44]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 800502e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7fd fcb6 	bl	80029a4 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800503c:	f7fd fcb2 	bl	80029a4 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e03d      	b.n	80050ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504e:	4b03      	ldr	r3, [pc, #12]	; (800505c <HAL_RCC_OscConfig+0x4cc>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1f0      	bne.n	800503c <HAL_RCC_OscConfig+0x4ac>
 800505a:	e035      	b.n	80050c8 <HAL_RCC_OscConfig+0x538>
 800505c:	40023800 	.word	0x40023800
 8005060:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005064:	4b1b      	ldr	r3, [pc, #108]	; (80050d4 <HAL_RCC_OscConfig+0x544>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d028      	beq.n	80050c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800507c:	429a      	cmp	r2, r3
 800507e:	d121      	bne.n	80050c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800508a:	429a      	cmp	r2, r3
 800508c:	d11a      	bne.n	80050c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005094:	4013      	ands	r3, r2
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800509a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800509c:	4293      	cmp	r3, r2
 800509e:	d111      	bne.n	80050c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050aa:	085b      	lsrs	r3, r3, #1
 80050ac:	3b01      	subs	r3, #1
 80050ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d107      	bne.n	80050c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d001      	beq.n	80050c8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e000      	b.n	80050ca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	40023800 	.word	0x40023800

080050d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80050e2:	2300      	movs	r3, #0
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0d0      	b.n	8005292 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050f0:	4b6a      	ldr	r3, [pc, #424]	; (800529c <HAL_RCC_ClockConfig+0x1c4>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d910      	bls.n	8005120 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fe:	4b67      	ldr	r3, [pc, #412]	; (800529c <HAL_RCC_ClockConfig+0x1c4>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f023 020f 	bic.w	r2, r3, #15
 8005106:	4965      	ldr	r1, [pc, #404]	; (800529c <HAL_RCC_ClockConfig+0x1c4>)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	4313      	orrs	r3, r2
 800510c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800510e:	4b63      	ldr	r3, [pc, #396]	; (800529c <HAL_RCC_ClockConfig+0x1c4>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d001      	beq.n	8005120 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e0b8      	b.n	8005292 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d020      	beq.n	800516e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005138:	4b59      	ldr	r3, [pc, #356]	; (80052a0 <HAL_RCC_ClockConfig+0x1c8>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	4a58      	ldr	r2, [pc, #352]	; (80052a0 <HAL_RCC_ClockConfig+0x1c8>)
 800513e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005142:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	2b00      	cmp	r3, #0
 800514e:	d005      	beq.n	800515c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005150:	4b53      	ldr	r3, [pc, #332]	; (80052a0 <HAL_RCC_ClockConfig+0x1c8>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	4a52      	ldr	r2, [pc, #328]	; (80052a0 <HAL_RCC_ClockConfig+0x1c8>)
 8005156:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800515a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800515c:	4b50      	ldr	r3, [pc, #320]	; (80052a0 <HAL_RCC_ClockConfig+0x1c8>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	494d      	ldr	r1, [pc, #308]	; (80052a0 <HAL_RCC_ClockConfig+0x1c8>)
 800516a:	4313      	orrs	r3, r2
 800516c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d040      	beq.n	80051fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d107      	bne.n	8005192 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005182:	4b47      	ldr	r3, [pc, #284]	; (80052a0 <HAL_RCC_ClockConfig+0x1c8>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d115      	bne.n	80051ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e07f      	b.n	8005292 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b02      	cmp	r3, #2
 8005198:	d107      	bne.n	80051aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800519a:	4b41      	ldr	r3, [pc, #260]	; (80052a0 <HAL_RCC_ClockConfig+0x1c8>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d109      	bne.n	80051ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e073      	b.n	8005292 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051aa:	4b3d      	ldr	r3, [pc, #244]	; (80052a0 <HAL_RCC_ClockConfig+0x1c8>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e06b      	b.n	8005292 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051ba:	4b39      	ldr	r3, [pc, #228]	; (80052a0 <HAL_RCC_ClockConfig+0x1c8>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f023 0203 	bic.w	r2, r3, #3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	4936      	ldr	r1, [pc, #216]	; (80052a0 <HAL_RCC_ClockConfig+0x1c8>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051cc:	f7fd fbea 	bl	80029a4 <HAL_GetTick>
 80051d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051d2:	e00a      	b.n	80051ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051d4:	f7fd fbe6 	bl	80029a4 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e053      	b.n	8005292 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ea:	4b2d      	ldr	r3, [pc, #180]	; (80052a0 <HAL_RCC_ClockConfig+0x1c8>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 020c 	and.w	r2, r3, #12
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d1eb      	bne.n	80051d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051fc:	4b27      	ldr	r3, [pc, #156]	; (800529c <HAL_RCC_ClockConfig+0x1c4>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 030f 	and.w	r3, r3, #15
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d210      	bcs.n	800522c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800520a:	4b24      	ldr	r3, [pc, #144]	; (800529c <HAL_RCC_ClockConfig+0x1c4>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f023 020f 	bic.w	r2, r3, #15
 8005212:	4922      	ldr	r1, [pc, #136]	; (800529c <HAL_RCC_ClockConfig+0x1c4>)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	4313      	orrs	r3, r2
 8005218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800521a:	4b20      	ldr	r3, [pc, #128]	; (800529c <HAL_RCC_ClockConfig+0x1c4>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	429a      	cmp	r2, r3
 8005226:	d001      	beq.n	800522c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e032      	b.n	8005292 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d008      	beq.n	800524a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005238:	4b19      	ldr	r3, [pc, #100]	; (80052a0 <HAL_RCC_ClockConfig+0x1c8>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	4916      	ldr	r1, [pc, #88]	; (80052a0 <HAL_RCC_ClockConfig+0x1c8>)
 8005246:	4313      	orrs	r3, r2
 8005248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0308 	and.w	r3, r3, #8
 8005252:	2b00      	cmp	r3, #0
 8005254:	d009      	beq.n	800526a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005256:	4b12      	ldr	r3, [pc, #72]	; (80052a0 <HAL_RCC_ClockConfig+0x1c8>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	490e      	ldr	r1, [pc, #56]	; (80052a0 <HAL_RCC_ClockConfig+0x1c8>)
 8005266:	4313      	orrs	r3, r2
 8005268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800526a:	f000 f821 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 800526e:	4601      	mov	r1, r0
 8005270:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <HAL_RCC_ClockConfig+0x1c8>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	091b      	lsrs	r3, r3, #4
 8005276:	f003 030f 	and.w	r3, r3, #15
 800527a:	4a0a      	ldr	r2, [pc, #40]	; (80052a4 <HAL_RCC_ClockConfig+0x1cc>)
 800527c:	5cd3      	ldrb	r3, [r2, r3]
 800527e:	fa21 f303 	lsr.w	r3, r1, r3
 8005282:	4a09      	ldr	r2, [pc, #36]	; (80052a8 <HAL_RCC_ClockConfig+0x1d0>)
 8005284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005286:	4b09      	ldr	r3, [pc, #36]	; (80052ac <HAL_RCC_ClockConfig+0x1d4>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4618      	mov	r0, r3
 800528c:	f7fd fb46 	bl	800291c <HAL_InitTick>

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	40023c00 	.word	0x40023c00
 80052a0:	40023800 	.word	0x40023800
 80052a4:	0800d760 	.word	0x0800d760
 80052a8:	20000004 	.word	0x20000004
 80052ac:	20000008 	.word	0x20000008

080052b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80052b6:	2300      	movs	r3, #0
 80052b8:	607b      	str	r3, [r7, #4]
 80052ba:	2300      	movs	r3, #0
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	2300      	movs	r3, #0
 80052c0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80052c2:	2300      	movs	r3, #0
 80052c4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052c6:	4b50      	ldr	r3, [pc, #320]	; (8005408 <HAL_RCC_GetSysClockFreq+0x158>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f003 030c 	and.w	r3, r3, #12
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d007      	beq.n	80052e2 <HAL_RCC_GetSysClockFreq+0x32>
 80052d2:	2b08      	cmp	r3, #8
 80052d4:	d008      	beq.n	80052e8 <HAL_RCC_GetSysClockFreq+0x38>
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f040 808d 	bne.w	80053f6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052dc:	4b4b      	ldr	r3, [pc, #300]	; (800540c <HAL_RCC_GetSysClockFreq+0x15c>)
 80052de:	60bb      	str	r3, [r7, #8]
      break;
 80052e0:	e08c      	b.n	80053fc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052e2:	4b4b      	ldr	r3, [pc, #300]	; (8005410 <HAL_RCC_GetSysClockFreq+0x160>)
 80052e4:	60bb      	str	r3, [r7, #8]
      break;
 80052e6:	e089      	b.n	80053fc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052e8:	4b47      	ldr	r3, [pc, #284]	; (8005408 <HAL_RCC_GetSysClockFreq+0x158>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052f0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80052f2:	4b45      	ldr	r3, [pc, #276]	; (8005408 <HAL_RCC_GetSysClockFreq+0x158>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d023      	beq.n	8005346 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052fe:	4b42      	ldr	r3, [pc, #264]	; (8005408 <HAL_RCC_GetSysClockFreq+0x158>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	099b      	lsrs	r3, r3, #6
 8005304:	f04f 0400 	mov.w	r4, #0
 8005308:	f240 11ff 	movw	r1, #511	; 0x1ff
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	ea03 0501 	and.w	r5, r3, r1
 8005314:	ea04 0602 	and.w	r6, r4, r2
 8005318:	4a3d      	ldr	r2, [pc, #244]	; (8005410 <HAL_RCC_GetSysClockFreq+0x160>)
 800531a:	fb02 f106 	mul.w	r1, r2, r6
 800531e:	2200      	movs	r2, #0
 8005320:	fb02 f205 	mul.w	r2, r2, r5
 8005324:	440a      	add	r2, r1
 8005326:	493a      	ldr	r1, [pc, #232]	; (8005410 <HAL_RCC_GetSysClockFreq+0x160>)
 8005328:	fba5 0101 	umull	r0, r1, r5, r1
 800532c:	1853      	adds	r3, r2, r1
 800532e:	4619      	mov	r1, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f04f 0400 	mov.w	r4, #0
 8005336:	461a      	mov	r2, r3
 8005338:	4623      	mov	r3, r4
 800533a:	f7fb fd25 	bl	8000d88 <__aeabi_uldivmod>
 800533e:	4603      	mov	r3, r0
 8005340:	460c      	mov	r4, r1
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	e049      	b.n	80053da <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005346:	4b30      	ldr	r3, [pc, #192]	; (8005408 <HAL_RCC_GetSysClockFreq+0x158>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	099b      	lsrs	r3, r3, #6
 800534c:	f04f 0400 	mov.w	r4, #0
 8005350:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005354:	f04f 0200 	mov.w	r2, #0
 8005358:	ea03 0501 	and.w	r5, r3, r1
 800535c:	ea04 0602 	and.w	r6, r4, r2
 8005360:	4629      	mov	r1, r5
 8005362:	4632      	mov	r2, r6
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	f04f 0400 	mov.w	r4, #0
 800536c:	0154      	lsls	r4, r2, #5
 800536e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005372:	014b      	lsls	r3, r1, #5
 8005374:	4619      	mov	r1, r3
 8005376:	4622      	mov	r2, r4
 8005378:	1b49      	subs	r1, r1, r5
 800537a:	eb62 0206 	sbc.w	r2, r2, r6
 800537e:	f04f 0300 	mov.w	r3, #0
 8005382:	f04f 0400 	mov.w	r4, #0
 8005386:	0194      	lsls	r4, r2, #6
 8005388:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800538c:	018b      	lsls	r3, r1, #6
 800538e:	1a5b      	subs	r3, r3, r1
 8005390:	eb64 0402 	sbc.w	r4, r4, r2
 8005394:	f04f 0100 	mov.w	r1, #0
 8005398:	f04f 0200 	mov.w	r2, #0
 800539c:	00e2      	lsls	r2, r4, #3
 800539e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80053a2:	00d9      	lsls	r1, r3, #3
 80053a4:	460b      	mov	r3, r1
 80053a6:	4614      	mov	r4, r2
 80053a8:	195b      	adds	r3, r3, r5
 80053aa:	eb44 0406 	adc.w	r4, r4, r6
 80053ae:	f04f 0100 	mov.w	r1, #0
 80053b2:	f04f 0200 	mov.w	r2, #0
 80053b6:	02a2      	lsls	r2, r4, #10
 80053b8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80053bc:	0299      	lsls	r1, r3, #10
 80053be:	460b      	mov	r3, r1
 80053c0:	4614      	mov	r4, r2
 80053c2:	4618      	mov	r0, r3
 80053c4:	4621      	mov	r1, r4
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f04f 0400 	mov.w	r4, #0
 80053cc:	461a      	mov	r2, r3
 80053ce:	4623      	mov	r3, r4
 80053d0:	f7fb fcda 	bl	8000d88 <__aeabi_uldivmod>
 80053d4:	4603      	mov	r3, r0
 80053d6:	460c      	mov	r4, r1
 80053d8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80053da:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <HAL_RCC_GetSysClockFreq+0x158>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	0c1b      	lsrs	r3, r3, #16
 80053e0:	f003 0303 	and.w	r3, r3, #3
 80053e4:	3301      	adds	r3, #1
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f2:	60bb      	str	r3, [r7, #8]
      break;
 80053f4:	e002      	b.n	80053fc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053f6:	4b05      	ldr	r3, [pc, #20]	; (800540c <HAL_RCC_GetSysClockFreq+0x15c>)
 80053f8:	60bb      	str	r3, [r7, #8]
      break;
 80053fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053fc:	68bb      	ldr	r3, [r7, #8]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005406:	bf00      	nop
 8005408:	40023800 	.word	0x40023800
 800540c:	00f42400 	.word	0x00f42400
 8005410:	017d7840 	.word	0x017d7840

08005414 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005418:	4b03      	ldr	r3, [pc, #12]	; (8005428 <HAL_RCC_GetHCLKFreq+0x14>)
 800541a:	681b      	ldr	r3, [r3, #0]
}
 800541c:	4618      	mov	r0, r3
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	20000004 	.word	0x20000004

0800542c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005430:	f7ff fff0 	bl	8005414 <HAL_RCC_GetHCLKFreq>
 8005434:	4601      	mov	r1, r0
 8005436:	4b05      	ldr	r3, [pc, #20]	; (800544c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	0a9b      	lsrs	r3, r3, #10
 800543c:	f003 0307 	and.w	r3, r3, #7
 8005440:	4a03      	ldr	r2, [pc, #12]	; (8005450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005442:	5cd3      	ldrb	r3, [r2, r3]
 8005444:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005448:	4618      	mov	r0, r3
 800544a:	bd80      	pop	{r7, pc}
 800544c:	40023800 	.word	0x40023800
 8005450:	0800d770 	.word	0x0800d770

08005454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005458:	f7ff ffdc 	bl	8005414 <HAL_RCC_GetHCLKFreq>
 800545c:	4601      	mov	r1, r0
 800545e:	4b05      	ldr	r3, [pc, #20]	; (8005474 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	0b5b      	lsrs	r3, r3, #13
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	4a03      	ldr	r2, [pc, #12]	; (8005478 <HAL_RCC_GetPCLK2Freq+0x24>)
 800546a:	5cd3      	ldrb	r3, [r2, r3]
 800546c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005470:	4618      	mov	r0, r3
 8005472:	bd80      	pop	{r7, pc}
 8005474:	40023800 	.word	0x40023800
 8005478:	0800d770 	.word	0x0800d770

0800547c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b088      	sub	sp, #32
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005484:	2300      	movs	r3, #0
 8005486:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005488:	2300      	movs	r3, #0
 800548a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800548c:	2300      	movs	r3, #0
 800548e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005490:	2300      	movs	r3, #0
 8005492:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005494:	2300      	movs	r3, #0
 8005496:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d012      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80054a4:	4b69      	ldr	r3, [pc, #420]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	4a68      	ldr	r2, [pc, #416]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80054ae:	6093      	str	r3, [r2, #8]
 80054b0:	4b66      	ldr	r3, [pc, #408]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b8:	4964      	ldr	r1, [pc, #400]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80054c6:	2301      	movs	r3, #1
 80054c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d017      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054d6:	4b5d      	ldr	r3, [pc, #372]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e4:	4959      	ldr	r1, [pc, #356]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054f4:	d101      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80054f6:	2301      	movs	r3, #1
 80054f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005502:	2301      	movs	r3, #1
 8005504:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d017      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005512:	4b4e      	ldr	r3, [pc, #312]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005518:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005520:	494a      	ldr	r1, [pc, #296]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005530:	d101      	bne.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005532:	2301      	movs	r3, #1
 8005534:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800553e:	2301      	movs	r3, #1
 8005540:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800554e:	2301      	movs	r3, #1
 8005550:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0320 	and.w	r3, r3, #32
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 808b 	beq.w	8005676 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005560:	4b3a      	ldr	r3, [pc, #232]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005564:	4a39      	ldr	r2, [pc, #228]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800556a:	6413      	str	r3, [r2, #64]	; 0x40
 800556c:	4b37      	ldr	r3, [pc, #220]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800556e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005574:	60bb      	str	r3, [r7, #8]
 8005576:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005578:	4b35      	ldr	r3, [pc, #212]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a34      	ldr	r2, [pc, #208]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800557e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005582:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005584:	f7fd fa0e 	bl	80029a4 <HAL_GetTick>
 8005588:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800558a:	e008      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800558c:	f7fd fa0a 	bl	80029a4 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b64      	cmp	r3, #100	; 0x64
 8005598:	d901      	bls.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e355      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800559e:	4b2c      	ldr	r3, [pc, #176]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0f0      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055aa:	4b28      	ldr	r3, [pc, #160]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d035      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d02e      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055c8:	4b20      	ldr	r3, [pc, #128]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055d2:	4b1e      	ldr	r3, [pc, #120]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d6:	4a1d      	ldr	r2, [pc, #116]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055de:	4b1b      	ldr	r3, [pc, #108]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e2:	4a1a      	ldr	r2, [pc, #104]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80055ea:	4a18      	ldr	r2, [pc, #96]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055f0:	4b16      	ldr	r3, [pc, #88]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d114      	bne.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fc:	f7fd f9d2 	bl	80029a4 <HAL_GetTick>
 8005600:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005602:	e00a      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005604:	f7fd f9ce 	bl	80029a4 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005612:	4293      	cmp	r3, r2
 8005614:	d901      	bls.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e317      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800561a:	4b0c      	ldr	r3, [pc, #48]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800561c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0ee      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800562e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005632:	d111      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005634:	4b05      	ldr	r3, [pc, #20]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005640:	4b04      	ldr	r3, [pc, #16]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005642:	400b      	ands	r3, r1
 8005644:	4901      	ldr	r1, [pc, #4]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005646:	4313      	orrs	r3, r2
 8005648:	608b      	str	r3, [r1, #8]
 800564a:	e00b      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800564c:	40023800 	.word	0x40023800
 8005650:	40007000 	.word	0x40007000
 8005654:	0ffffcff 	.word	0x0ffffcff
 8005658:	4bb0      	ldr	r3, [pc, #704]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	4aaf      	ldr	r2, [pc, #700]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800565e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005662:	6093      	str	r3, [r2, #8]
 8005664:	4bad      	ldr	r3, [pc, #692]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005666:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005670:	49aa      	ldr	r1, [pc, #680]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005672:	4313      	orrs	r3, r2
 8005674:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0310 	and.w	r3, r3, #16
 800567e:	2b00      	cmp	r3, #0
 8005680:	d010      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005682:	4ba6      	ldr	r3, [pc, #664]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005688:	4aa4      	ldr	r2, [pc, #656]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800568a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800568e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005692:	4ba2      	ldr	r3, [pc, #648]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005694:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569c:	499f      	ldr	r1, [pc, #636]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00a      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056b0:	4b9a      	ldr	r3, [pc, #616]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056be:	4997      	ldr	r1, [pc, #604]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056d2:	4b92      	ldr	r3, [pc, #584]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056e0:	498e      	ldr	r1, [pc, #568]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00a      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056f4:	4b89      	ldr	r3, [pc, #548]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005702:	4986      	ldr	r1, [pc, #536]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005704:	4313      	orrs	r3, r2
 8005706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00a      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005716:	4b81      	ldr	r3, [pc, #516]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005724:	497d      	ldr	r1, [pc, #500]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005726:	4313      	orrs	r3, r2
 8005728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00a      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005738:	4b78      	ldr	r3, [pc, #480]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800573a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573e:	f023 0203 	bic.w	r2, r3, #3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005746:	4975      	ldr	r1, [pc, #468]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005748:	4313      	orrs	r3, r2
 800574a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800575a:	4b70      	ldr	r3, [pc, #448]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800575c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005760:	f023 020c 	bic.w	r2, r3, #12
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005768:	496c      	ldr	r1, [pc, #432]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800576a:	4313      	orrs	r3, r2
 800576c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00a      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800577c:	4b67      	ldr	r3, [pc, #412]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800577e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005782:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578a:	4964      	ldr	r1, [pc, #400]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800578c:	4313      	orrs	r3, r2
 800578e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00a      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800579e:	4b5f      	ldr	r3, [pc, #380]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ac:	495b      	ldr	r1, [pc, #364]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00a      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80057c0:	4b56      	ldr	r3, [pc, #344]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ce:	4953      	ldr	r1, [pc, #332]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00a      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80057e2:	4b4e      	ldr	r3, [pc, #312]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f0:	494a      	ldr	r1, [pc, #296]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00a      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005804:	4b45      	ldr	r3, [pc, #276]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800580a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005812:	4942      	ldr	r1, [pc, #264]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005814:	4313      	orrs	r3, r2
 8005816:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00a      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005826:	4b3d      	ldr	r3, [pc, #244]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005834:	4939      	ldr	r1, [pc, #228]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005836:	4313      	orrs	r3, r2
 8005838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00a      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005848:	4b34      	ldr	r3, [pc, #208]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800584a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005856:	4931      	ldr	r1, [pc, #196]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005858:	4313      	orrs	r3, r2
 800585a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d011      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800586a:	4b2c      	ldr	r3, [pc, #176]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800586c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005870:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005878:	4928      	ldr	r1, [pc, #160]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800587a:	4313      	orrs	r3, r2
 800587c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005884:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005888:	d101      	bne.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800588a:	2301      	movs	r3, #1
 800588c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800589a:	2301      	movs	r3, #1
 800589c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058aa:	4b1c      	ldr	r3, [pc, #112]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058b8:	4918      	ldr	r1, [pc, #96]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00b      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80058cc:	4b13      	ldr	r3, [pc, #76]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058dc:	490f      	ldr	r1, [pc, #60]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d005      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058f2:	f040 80d8 	bne.w	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058f6:	4b09      	ldr	r3, [pc, #36]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a08      	ldr	r2, [pc, #32]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005902:	f7fd f84f 	bl	80029a4 <HAL_GetTick>
 8005906:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005908:	e00a      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800590a:	f7fd f84b 	bl	80029a4 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b64      	cmp	r3, #100	; 0x64
 8005916:	d903      	bls.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e196      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800591c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005920:	4b6c      	ldr	r3, [pc, #432]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1ee      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b00      	cmp	r3, #0
 8005936:	d021      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593c:	2b00      	cmp	r3, #0
 800593e:	d11d      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005940:	4b64      	ldr	r3, [pc, #400]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005946:	0c1b      	lsrs	r3, r3, #16
 8005948:	f003 0303 	and.w	r3, r3, #3
 800594c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800594e:	4b61      	ldr	r3, [pc, #388]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005954:	0e1b      	lsrs	r3, r3, #24
 8005956:	f003 030f 	and.w	r3, r3, #15
 800595a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	019a      	lsls	r2, r3, #6
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	041b      	lsls	r3, r3, #16
 8005966:	431a      	orrs	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	061b      	lsls	r3, r3, #24
 800596c:	431a      	orrs	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	071b      	lsls	r3, r3, #28
 8005974:	4957      	ldr	r1, [pc, #348]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005976:	4313      	orrs	r3, r2
 8005978:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d004      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005990:	d00a      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800599a:	2b00      	cmp	r3, #0
 800599c:	d02e      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059a6:	d129      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80059a8:	4b4a      	ldr	r3, [pc, #296]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80059aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ae:	0c1b      	lsrs	r3, r3, #16
 80059b0:	f003 0303 	and.w	r3, r3, #3
 80059b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059b6:	4b47      	ldr	r3, [pc, #284]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80059b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059bc:	0f1b      	lsrs	r3, r3, #28
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	019a      	lsls	r2, r3, #6
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	041b      	lsls	r3, r3, #16
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	061b      	lsls	r3, r3, #24
 80059d6:	431a      	orrs	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	071b      	lsls	r3, r3, #28
 80059dc:	493d      	ldr	r1, [pc, #244]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80059e4:	4b3b      	ldr	r3, [pc, #236]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80059e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059ea:	f023 021f 	bic.w	r2, r3, #31
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f2:	3b01      	subs	r3, #1
 80059f4:	4937      	ldr	r1, [pc, #220]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d01d      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a08:	4b32      	ldr	r3, [pc, #200]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a0e:	0e1b      	lsrs	r3, r3, #24
 8005a10:	f003 030f 	and.w	r3, r3, #15
 8005a14:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a16:	4b2f      	ldr	r3, [pc, #188]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a1c:	0f1b      	lsrs	r3, r3, #28
 8005a1e:	f003 0307 	and.w	r3, r3, #7
 8005a22:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	019a      	lsls	r2, r3, #6
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	041b      	lsls	r3, r3, #16
 8005a30:	431a      	orrs	r2, r3
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	061b      	lsls	r3, r3, #24
 8005a36:	431a      	orrs	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	071b      	lsls	r3, r3, #28
 8005a3c:	4925      	ldr	r1, [pc, #148]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d011      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	019a      	lsls	r2, r3, #6
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	041b      	lsls	r3, r3, #16
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	061b      	lsls	r3, r3, #24
 8005a64:	431a      	orrs	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	071b      	lsls	r3, r3, #28
 8005a6c:	4919      	ldr	r1, [pc, #100]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a74:	4b17      	ldr	r3, [pc, #92]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a16      	ldr	r2, [pc, #88]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005a7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a80:	f7fc ff90 	bl	80029a4 <HAL_GetTick>
 8005a84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a86:	e008      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a88:	f7fc ff8c 	bl	80029a4 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b64      	cmp	r3, #100	; 0x64
 8005a94:	d901      	bls.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e0d7      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a9a:	4b0e      	ldr	r3, [pc, #56]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d0f0      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	f040 80cd 	bne.w	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005aae:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a08      	ldr	r2, [pc, #32]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ab8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aba:	f7fc ff73 	bl	80029a4 <HAL_GetTick>
 8005abe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ac0:	e00a      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ac2:	f7fc ff6f 	bl	80029a4 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b64      	cmp	r3, #100	; 0x64
 8005ace:	d903      	bls.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e0ba      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005ad4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ad8:	4b5e      	ldr	r3, [pc, #376]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ae4:	d0ed      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d009      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d02e      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d12a      	bne.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b0e:	4b51      	ldr	r3, [pc, #324]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b14:	0c1b      	lsrs	r3, r3, #16
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b1c:	4b4d      	ldr	r3, [pc, #308]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b22:	0f1b      	lsrs	r3, r3, #28
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	019a      	lsls	r2, r3, #6
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	041b      	lsls	r3, r3, #16
 8005b34:	431a      	orrs	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	061b      	lsls	r3, r3, #24
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	071b      	lsls	r3, r3, #28
 8005b42:	4944      	ldr	r1, [pc, #272]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b4a:	4b42      	ldr	r3, [pc, #264]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b50:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	021b      	lsls	r3, r3, #8
 8005b5c:	493d      	ldr	r1, [pc, #244]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d022      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b78:	d11d      	bne.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b7a:	4b36      	ldr	r3, [pc, #216]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b80:	0e1b      	lsrs	r3, r3, #24
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b88:	4b32      	ldr	r3, [pc, #200]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8e:	0f1b      	lsrs	r3, r3, #28
 8005b90:	f003 0307 	and.w	r3, r3, #7
 8005b94:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	019a      	lsls	r2, r3, #6
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	041b      	lsls	r3, r3, #16
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	061b      	lsls	r3, r3, #24
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	071b      	lsls	r3, r3, #28
 8005bae:	4929      	ldr	r1, [pc, #164]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d028      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005bc2:	4b24      	ldr	r3, [pc, #144]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc8:	0e1b      	lsrs	r3, r3, #24
 8005bca:	f003 030f 	and.w	r3, r3, #15
 8005bce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005bd0:	4b20      	ldr	r3, [pc, #128]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd6:	0c1b      	lsrs	r3, r3, #16
 8005bd8:	f003 0303 	and.w	r3, r3, #3
 8005bdc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	019a      	lsls	r2, r3, #6
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	041b      	lsls	r3, r3, #16
 8005be8:	431a      	orrs	r2, r3
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	061b      	lsls	r3, r3, #24
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	071b      	lsls	r3, r3, #28
 8005bf6:	4917      	ldr	r1, [pc, #92]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005bfe:	4b15      	ldr	r3, [pc, #84]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0c:	4911      	ldr	r1, [pc, #68]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005c14:	4b0f      	ldr	r3, [pc, #60]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a0e      	ldr	r2, [pc, #56]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c20:	f7fc fec0 	bl	80029a4 <HAL_GetTick>
 8005c24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c26:	e008      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c28:	f7fc febc 	bl	80029a4 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b64      	cmp	r3, #100	; 0x64
 8005c34:	d901      	bls.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e007      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c3a:	4b06      	ldr	r3, [pc, #24]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c46:	d1ef      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3720      	adds	r7, #32
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	40023800 	.word	0x40023800

08005c58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e040      	b.n	8005cec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7fc fc5c 	bl	8002538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2224      	movs	r2, #36	; 0x24
 8005c84:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0201 	bic.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fab0 	bl	80061fc <UART_SetConfig>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d101      	bne.n	8005ca6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e022      	b.n	8005cec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fd4e 	bl	8006750 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 0201 	orr.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fdd5 	bl	8006894 <UART_CheckIdleState>
 8005cea:	4603      	mov	r3, r0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08a      	sub	sp, #40	; 0x28
 8005cf8:	af02      	add	r7, sp, #8
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	603b      	str	r3, [r7, #0]
 8005d00:	4613      	mov	r3, r2
 8005d02:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d08:	2b20      	cmp	r3, #32
 8005d0a:	d17f      	bne.n	8005e0c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d002      	beq.n	8005d18 <HAL_UART_Transmit+0x24>
 8005d12:	88fb      	ldrh	r3, [r7, #6]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d101      	bne.n	8005d1c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e078      	b.n	8005e0e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d101      	bne.n	8005d2a <HAL_UART_Transmit+0x36>
 8005d26:	2302      	movs	r3, #2
 8005d28:	e071      	b.n	8005e0e <HAL_UART_Transmit+0x11a>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2221      	movs	r2, #33	; 0x21
 8005d3c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005d3e:	f7fc fe31 	bl	80029a4 <HAL_GetTick>
 8005d42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	88fa      	ldrh	r2, [r7, #6]
 8005d48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	88fa      	ldrh	r2, [r7, #6]
 8005d50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d5c:	d108      	bne.n	8005d70 <HAL_UART_Transmit+0x7c>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d104      	bne.n	8005d70 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	61bb      	str	r3, [r7, #24]
 8005d6e:	e003      	b.n	8005d78 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d74:	2300      	movs	r3, #0
 8005d76:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005d80:	e02c      	b.n	8005ddc <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2180      	movs	r1, #128	; 0x80
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 fdb0 	bl	80068f2 <UART_WaitOnFlagUntilTimeout>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e038      	b.n	8005e0e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10b      	bne.n	8005dba <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005db0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	3302      	adds	r3, #2
 8005db6:	61bb      	str	r3, [r7, #24]
 8005db8:	e007      	b.n	8005dca <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	781a      	ldrb	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1cc      	bne.n	8005d82 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	2200      	movs	r2, #0
 8005df0:	2140      	movs	r1, #64	; 0x40
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 fd7d 	bl	80068f2 <UART_WaitOnFlagUntilTimeout>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e005      	b.n	8005e0e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2220      	movs	r2, #32
 8005e06:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	e000      	b.n	8005e0e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8005e0c:	2302      	movs	r3, #2
  }
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3720      	adds	r7, #32
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
	...

08005e18 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	4613      	mov	r3, r2
 8005e24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e2a:	2b20      	cmp	r3, #32
 8005e2c:	f040 808a 	bne.w	8005f44 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <HAL_UART_Receive_IT+0x24>
 8005e36:	88fb      	ldrh	r3, [r7, #6]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e082      	b.n	8005f46 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d101      	bne.n	8005e4e <HAL_UART_Receive_IT+0x36>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	e07b      	b.n	8005f46 <HAL_UART_Receive_IT+0x12e>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	88fa      	ldrh	r2, [r7, #6]
 8005e60:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	88fa      	ldrh	r2, [r7, #6]
 8005e68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7a:	d10e      	bne.n	8005e9a <HAL_UART_Receive_IT+0x82>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d105      	bne.n	8005e90 <HAL_UART_Receive_IT+0x78>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005e8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e8e:	e02d      	b.n	8005eec <HAL_UART_Receive_IT+0xd4>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	22ff      	movs	r2, #255	; 0xff
 8005e94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e98:	e028      	b.n	8005eec <HAL_UART_Receive_IT+0xd4>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10d      	bne.n	8005ebe <HAL_UART_Receive_IT+0xa6>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d104      	bne.n	8005eb4 <HAL_UART_Receive_IT+0x9c>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	22ff      	movs	r2, #255	; 0xff
 8005eae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005eb2:	e01b      	b.n	8005eec <HAL_UART_Receive_IT+0xd4>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	227f      	movs	r2, #127	; 0x7f
 8005eb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ebc:	e016      	b.n	8005eec <HAL_UART_Receive_IT+0xd4>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ec6:	d10d      	bne.n	8005ee4 <HAL_UART_Receive_IT+0xcc>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d104      	bne.n	8005eda <HAL_UART_Receive_IT+0xc2>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	227f      	movs	r2, #127	; 0x7f
 8005ed4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ed8:	e008      	b.n	8005eec <HAL_UART_Receive_IT+0xd4>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	223f      	movs	r2, #63	; 0x3f
 8005ede:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ee2:	e003      	b.n	8005eec <HAL_UART_Receive_IT+0xd4>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2222      	movs	r2, #34	; 0x22
 8005ef6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0201 	orr.w	r2, r2, #1
 8005f06:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f10:	d107      	bne.n	8005f22 <HAL_UART_Receive_IT+0x10a>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d103      	bne.n	8005f22 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4a0d      	ldr	r2, [pc, #52]	; (8005f54 <HAL_UART_Receive_IT+0x13c>)
 8005f1e:	661a      	str	r2, [r3, #96]	; 0x60
 8005f20:	e002      	b.n	8005f28 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4a0c      	ldr	r2, [pc, #48]	; (8005f58 <HAL_UART_Receive_IT+0x140>)
 8005f26:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005f3e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	e000      	b.n	8005f46 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8005f44:	2302      	movs	r3, #2
  }
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	08006b2d 	.word	0x08006b2d
 8005f58:	08006a87 	.word	0x08006a87

08005f5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b088      	sub	sp, #32
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005f82:	4013      	ands	r3, r2
 8005f84:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d113      	bne.n	8005fb4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00e      	beq.n	8005fb4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	f003 0320 	and.w	r3, r3, #32
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d009      	beq.n	8005fb4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 8100 	beq.w	80061aa <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	4798      	blx	r3
      }
      return;
 8005fb2:	e0fa      	b.n	80061aa <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f000 80d5 	beq.w	8006166 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d105      	bne.n	8005fd2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 80ca 	beq.w	8006166 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00e      	beq.n	8005ffa <HAL_UART_IRQHandler+0x9e>
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d009      	beq.n	8005ffa <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2201      	movs	r2, #1
 8005fec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ff2:	f043 0201 	orr.w	r2, r3, #1
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00e      	beq.n	8006022 <HAL_UART_IRQHandler+0xc6>
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b00      	cmp	r3, #0
 800600c:	d009      	beq.n	8006022 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2202      	movs	r2, #2
 8006014:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800601a:	f043 0204 	orr.w	r2, r3, #4
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00e      	beq.n	800604a <HAL_UART_IRQHandler+0xee>
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d009      	beq.n	800604a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2204      	movs	r2, #4
 800603c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006042:	f043 0202 	orr.w	r2, r3, #2
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	f003 0308 	and.w	r3, r3, #8
 8006050:	2b00      	cmp	r3, #0
 8006052:	d013      	beq.n	800607c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	f003 0320 	and.w	r3, r3, #32
 800605a:	2b00      	cmp	r3, #0
 800605c:	d104      	bne.n	8006068 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006064:	2b00      	cmp	r3, #0
 8006066:	d009      	beq.n	800607c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2208      	movs	r2, #8
 800606e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006074:	f043 0208 	orr.w	r2, r3, #8
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00f      	beq.n	80060a6 <HAL_UART_IRQHandler+0x14a>
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00a      	beq.n	80060a6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006098:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800609e:	f043 0220 	orr.w	r2, r3, #32
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d07f      	beq.n	80061ae <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	f003 0320 	and.w	r3, r3, #32
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00c      	beq.n	80060d2 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	f003 0320 	and.w	r3, r3, #32
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d007      	beq.n	80060d2 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060d6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e2:	2b40      	cmp	r3, #64	; 0x40
 80060e4:	d004      	beq.n	80060f0 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d031      	beq.n	8006154 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fc79 	bl	80069e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006100:	2b40      	cmp	r3, #64	; 0x40
 8006102:	d123      	bne.n	800614c <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689a      	ldr	r2, [r3, #8]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006112:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006118:	2b00      	cmp	r3, #0
 800611a:	d013      	beq.n	8006144 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006120:	4a26      	ldr	r2, [pc, #152]	; (80061bc <HAL_UART_IRQHandler+0x260>)
 8006122:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006128:	4618      	mov	r0, r3
 800612a:	f7fd fb89 	bl	8003840 <HAL_DMA_Abort_IT>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d016      	beq.n	8006162 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800613e:	4610      	mov	r0, r2
 8006140:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006142:	e00e      	b.n	8006162 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f84f 	bl	80061e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800614a:	e00a      	b.n	8006162 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f84b 	bl	80061e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006152:	e006      	b.n	8006162 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f847 	bl	80061e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006160:	e025      	b.n	80061ae <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006162:	bf00      	nop
    return;
 8006164:	e023      	b.n	80061ae <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00d      	beq.n	800618c <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006176:	2b00      	cmp	r3, #0
 8006178:	d008      	beq.n	800618c <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800617e:	2b00      	cmp	r3, #0
 8006180:	d017      	beq.n	80061b2 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	4798      	blx	r3
    }
    return;
 800618a:	e012      	b.n	80061b2 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00e      	beq.n	80061b4 <HAL_UART_IRQHandler+0x258>
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619c:	2b00      	cmp	r3, #0
 800619e:	d009      	beq.n	80061b4 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fc57 	bl	8006a54 <UART_EndTransmit_IT>
    return;
 80061a6:	bf00      	nop
 80061a8:	e004      	b.n	80061b4 <HAL_UART_IRQHandler+0x258>
      return;
 80061aa:	bf00      	nop
 80061ac:	e002      	b.n	80061b4 <HAL_UART_IRQHandler+0x258>
    return;
 80061ae:	bf00      	nop
 80061b0:	e000      	b.n	80061b4 <HAL_UART_IRQHandler+0x258>
    return;
 80061b2:	bf00      	nop
  }

}
 80061b4:	3720      	adds	r7, #32
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	08006a29 	.word	0x08006a29

080061c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b088      	sub	sp, #32
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006204:	2300      	movs	r3, #0
 8006206:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006208:	2300      	movs	r3, #0
 800620a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	431a      	orrs	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	431a      	orrs	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	69db      	ldr	r3, [r3, #28]
 8006220:	4313      	orrs	r3, r2
 8006222:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	4bb1      	ldr	r3, [pc, #708]	; (80064f0 <UART_SetConfig+0x2f4>)
 800622c:	4013      	ands	r3, r2
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	6812      	ldr	r2, [r2, #0]
 8006232:	6939      	ldr	r1, [r7, #16]
 8006234:	430b      	orrs	r3, r1
 8006236:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	4313      	orrs	r3, r2
 800625c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	430a      	orrs	r2, r1
 8006270:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a9f      	ldr	r2, [pc, #636]	; (80064f4 <UART_SetConfig+0x2f8>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d121      	bne.n	80062c0 <UART_SetConfig+0xc4>
 800627c:	4b9e      	ldr	r3, [pc, #632]	; (80064f8 <UART_SetConfig+0x2fc>)
 800627e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006282:	f003 0303 	and.w	r3, r3, #3
 8006286:	2b03      	cmp	r3, #3
 8006288:	d816      	bhi.n	80062b8 <UART_SetConfig+0xbc>
 800628a:	a201      	add	r2, pc, #4	; (adr r2, 8006290 <UART_SetConfig+0x94>)
 800628c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006290:	080062a1 	.word	0x080062a1
 8006294:	080062ad 	.word	0x080062ad
 8006298:	080062a7 	.word	0x080062a7
 800629c:	080062b3 	.word	0x080062b3
 80062a0:	2301      	movs	r3, #1
 80062a2:	77fb      	strb	r3, [r7, #31]
 80062a4:	e151      	b.n	800654a <UART_SetConfig+0x34e>
 80062a6:	2302      	movs	r3, #2
 80062a8:	77fb      	strb	r3, [r7, #31]
 80062aa:	e14e      	b.n	800654a <UART_SetConfig+0x34e>
 80062ac:	2304      	movs	r3, #4
 80062ae:	77fb      	strb	r3, [r7, #31]
 80062b0:	e14b      	b.n	800654a <UART_SetConfig+0x34e>
 80062b2:	2308      	movs	r3, #8
 80062b4:	77fb      	strb	r3, [r7, #31]
 80062b6:	e148      	b.n	800654a <UART_SetConfig+0x34e>
 80062b8:	2310      	movs	r3, #16
 80062ba:	77fb      	strb	r3, [r7, #31]
 80062bc:	bf00      	nop
 80062be:	e144      	b.n	800654a <UART_SetConfig+0x34e>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a8d      	ldr	r2, [pc, #564]	; (80064fc <UART_SetConfig+0x300>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d134      	bne.n	8006334 <UART_SetConfig+0x138>
 80062ca:	4b8b      	ldr	r3, [pc, #556]	; (80064f8 <UART_SetConfig+0x2fc>)
 80062cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d0:	f003 030c 	and.w	r3, r3, #12
 80062d4:	2b0c      	cmp	r3, #12
 80062d6:	d829      	bhi.n	800632c <UART_SetConfig+0x130>
 80062d8:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <UART_SetConfig+0xe4>)
 80062da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062de:	bf00      	nop
 80062e0:	08006315 	.word	0x08006315
 80062e4:	0800632d 	.word	0x0800632d
 80062e8:	0800632d 	.word	0x0800632d
 80062ec:	0800632d 	.word	0x0800632d
 80062f0:	08006321 	.word	0x08006321
 80062f4:	0800632d 	.word	0x0800632d
 80062f8:	0800632d 	.word	0x0800632d
 80062fc:	0800632d 	.word	0x0800632d
 8006300:	0800631b 	.word	0x0800631b
 8006304:	0800632d 	.word	0x0800632d
 8006308:	0800632d 	.word	0x0800632d
 800630c:	0800632d 	.word	0x0800632d
 8006310:	08006327 	.word	0x08006327
 8006314:	2300      	movs	r3, #0
 8006316:	77fb      	strb	r3, [r7, #31]
 8006318:	e117      	b.n	800654a <UART_SetConfig+0x34e>
 800631a:	2302      	movs	r3, #2
 800631c:	77fb      	strb	r3, [r7, #31]
 800631e:	e114      	b.n	800654a <UART_SetConfig+0x34e>
 8006320:	2304      	movs	r3, #4
 8006322:	77fb      	strb	r3, [r7, #31]
 8006324:	e111      	b.n	800654a <UART_SetConfig+0x34e>
 8006326:	2308      	movs	r3, #8
 8006328:	77fb      	strb	r3, [r7, #31]
 800632a:	e10e      	b.n	800654a <UART_SetConfig+0x34e>
 800632c:	2310      	movs	r3, #16
 800632e:	77fb      	strb	r3, [r7, #31]
 8006330:	bf00      	nop
 8006332:	e10a      	b.n	800654a <UART_SetConfig+0x34e>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a71      	ldr	r2, [pc, #452]	; (8006500 <UART_SetConfig+0x304>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d120      	bne.n	8006380 <UART_SetConfig+0x184>
 800633e:	4b6e      	ldr	r3, [pc, #440]	; (80064f8 <UART_SetConfig+0x2fc>)
 8006340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006344:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006348:	2b10      	cmp	r3, #16
 800634a:	d00f      	beq.n	800636c <UART_SetConfig+0x170>
 800634c:	2b10      	cmp	r3, #16
 800634e:	d802      	bhi.n	8006356 <UART_SetConfig+0x15a>
 8006350:	2b00      	cmp	r3, #0
 8006352:	d005      	beq.n	8006360 <UART_SetConfig+0x164>
 8006354:	e010      	b.n	8006378 <UART_SetConfig+0x17c>
 8006356:	2b20      	cmp	r3, #32
 8006358:	d005      	beq.n	8006366 <UART_SetConfig+0x16a>
 800635a:	2b30      	cmp	r3, #48	; 0x30
 800635c:	d009      	beq.n	8006372 <UART_SetConfig+0x176>
 800635e:	e00b      	b.n	8006378 <UART_SetConfig+0x17c>
 8006360:	2300      	movs	r3, #0
 8006362:	77fb      	strb	r3, [r7, #31]
 8006364:	e0f1      	b.n	800654a <UART_SetConfig+0x34e>
 8006366:	2302      	movs	r3, #2
 8006368:	77fb      	strb	r3, [r7, #31]
 800636a:	e0ee      	b.n	800654a <UART_SetConfig+0x34e>
 800636c:	2304      	movs	r3, #4
 800636e:	77fb      	strb	r3, [r7, #31]
 8006370:	e0eb      	b.n	800654a <UART_SetConfig+0x34e>
 8006372:	2308      	movs	r3, #8
 8006374:	77fb      	strb	r3, [r7, #31]
 8006376:	e0e8      	b.n	800654a <UART_SetConfig+0x34e>
 8006378:	2310      	movs	r3, #16
 800637a:	77fb      	strb	r3, [r7, #31]
 800637c:	bf00      	nop
 800637e:	e0e4      	b.n	800654a <UART_SetConfig+0x34e>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a5f      	ldr	r2, [pc, #380]	; (8006504 <UART_SetConfig+0x308>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d120      	bne.n	80063cc <UART_SetConfig+0x1d0>
 800638a:	4b5b      	ldr	r3, [pc, #364]	; (80064f8 <UART_SetConfig+0x2fc>)
 800638c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006390:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006394:	2b40      	cmp	r3, #64	; 0x40
 8006396:	d00f      	beq.n	80063b8 <UART_SetConfig+0x1bc>
 8006398:	2b40      	cmp	r3, #64	; 0x40
 800639a:	d802      	bhi.n	80063a2 <UART_SetConfig+0x1a6>
 800639c:	2b00      	cmp	r3, #0
 800639e:	d005      	beq.n	80063ac <UART_SetConfig+0x1b0>
 80063a0:	e010      	b.n	80063c4 <UART_SetConfig+0x1c8>
 80063a2:	2b80      	cmp	r3, #128	; 0x80
 80063a4:	d005      	beq.n	80063b2 <UART_SetConfig+0x1b6>
 80063a6:	2bc0      	cmp	r3, #192	; 0xc0
 80063a8:	d009      	beq.n	80063be <UART_SetConfig+0x1c2>
 80063aa:	e00b      	b.n	80063c4 <UART_SetConfig+0x1c8>
 80063ac:	2300      	movs	r3, #0
 80063ae:	77fb      	strb	r3, [r7, #31]
 80063b0:	e0cb      	b.n	800654a <UART_SetConfig+0x34e>
 80063b2:	2302      	movs	r3, #2
 80063b4:	77fb      	strb	r3, [r7, #31]
 80063b6:	e0c8      	b.n	800654a <UART_SetConfig+0x34e>
 80063b8:	2304      	movs	r3, #4
 80063ba:	77fb      	strb	r3, [r7, #31]
 80063bc:	e0c5      	b.n	800654a <UART_SetConfig+0x34e>
 80063be:	2308      	movs	r3, #8
 80063c0:	77fb      	strb	r3, [r7, #31]
 80063c2:	e0c2      	b.n	800654a <UART_SetConfig+0x34e>
 80063c4:	2310      	movs	r3, #16
 80063c6:	77fb      	strb	r3, [r7, #31]
 80063c8:	bf00      	nop
 80063ca:	e0be      	b.n	800654a <UART_SetConfig+0x34e>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a4d      	ldr	r2, [pc, #308]	; (8006508 <UART_SetConfig+0x30c>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d124      	bne.n	8006420 <UART_SetConfig+0x224>
 80063d6:	4b48      	ldr	r3, [pc, #288]	; (80064f8 <UART_SetConfig+0x2fc>)
 80063d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063e4:	d012      	beq.n	800640c <UART_SetConfig+0x210>
 80063e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ea:	d802      	bhi.n	80063f2 <UART_SetConfig+0x1f6>
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d007      	beq.n	8006400 <UART_SetConfig+0x204>
 80063f0:	e012      	b.n	8006418 <UART_SetConfig+0x21c>
 80063f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063f6:	d006      	beq.n	8006406 <UART_SetConfig+0x20a>
 80063f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063fc:	d009      	beq.n	8006412 <UART_SetConfig+0x216>
 80063fe:	e00b      	b.n	8006418 <UART_SetConfig+0x21c>
 8006400:	2300      	movs	r3, #0
 8006402:	77fb      	strb	r3, [r7, #31]
 8006404:	e0a1      	b.n	800654a <UART_SetConfig+0x34e>
 8006406:	2302      	movs	r3, #2
 8006408:	77fb      	strb	r3, [r7, #31]
 800640a:	e09e      	b.n	800654a <UART_SetConfig+0x34e>
 800640c:	2304      	movs	r3, #4
 800640e:	77fb      	strb	r3, [r7, #31]
 8006410:	e09b      	b.n	800654a <UART_SetConfig+0x34e>
 8006412:	2308      	movs	r3, #8
 8006414:	77fb      	strb	r3, [r7, #31]
 8006416:	e098      	b.n	800654a <UART_SetConfig+0x34e>
 8006418:	2310      	movs	r3, #16
 800641a:	77fb      	strb	r3, [r7, #31]
 800641c:	bf00      	nop
 800641e:	e094      	b.n	800654a <UART_SetConfig+0x34e>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a39      	ldr	r2, [pc, #228]	; (800650c <UART_SetConfig+0x310>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d124      	bne.n	8006474 <UART_SetConfig+0x278>
 800642a:	4b33      	ldr	r3, [pc, #204]	; (80064f8 <UART_SetConfig+0x2fc>)
 800642c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006430:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006438:	d012      	beq.n	8006460 <UART_SetConfig+0x264>
 800643a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800643e:	d802      	bhi.n	8006446 <UART_SetConfig+0x24a>
 8006440:	2b00      	cmp	r3, #0
 8006442:	d007      	beq.n	8006454 <UART_SetConfig+0x258>
 8006444:	e012      	b.n	800646c <UART_SetConfig+0x270>
 8006446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800644a:	d006      	beq.n	800645a <UART_SetConfig+0x25e>
 800644c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006450:	d009      	beq.n	8006466 <UART_SetConfig+0x26a>
 8006452:	e00b      	b.n	800646c <UART_SetConfig+0x270>
 8006454:	2301      	movs	r3, #1
 8006456:	77fb      	strb	r3, [r7, #31]
 8006458:	e077      	b.n	800654a <UART_SetConfig+0x34e>
 800645a:	2302      	movs	r3, #2
 800645c:	77fb      	strb	r3, [r7, #31]
 800645e:	e074      	b.n	800654a <UART_SetConfig+0x34e>
 8006460:	2304      	movs	r3, #4
 8006462:	77fb      	strb	r3, [r7, #31]
 8006464:	e071      	b.n	800654a <UART_SetConfig+0x34e>
 8006466:	2308      	movs	r3, #8
 8006468:	77fb      	strb	r3, [r7, #31]
 800646a:	e06e      	b.n	800654a <UART_SetConfig+0x34e>
 800646c:	2310      	movs	r3, #16
 800646e:	77fb      	strb	r3, [r7, #31]
 8006470:	bf00      	nop
 8006472:	e06a      	b.n	800654a <UART_SetConfig+0x34e>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a25      	ldr	r2, [pc, #148]	; (8006510 <UART_SetConfig+0x314>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d124      	bne.n	80064c8 <UART_SetConfig+0x2cc>
 800647e:	4b1e      	ldr	r3, [pc, #120]	; (80064f8 <UART_SetConfig+0x2fc>)
 8006480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006484:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800648c:	d012      	beq.n	80064b4 <UART_SetConfig+0x2b8>
 800648e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006492:	d802      	bhi.n	800649a <UART_SetConfig+0x29e>
 8006494:	2b00      	cmp	r3, #0
 8006496:	d007      	beq.n	80064a8 <UART_SetConfig+0x2ac>
 8006498:	e012      	b.n	80064c0 <UART_SetConfig+0x2c4>
 800649a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800649e:	d006      	beq.n	80064ae <UART_SetConfig+0x2b2>
 80064a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064a4:	d009      	beq.n	80064ba <UART_SetConfig+0x2be>
 80064a6:	e00b      	b.n	80064c0 <UART_SetConfig+0x2c4>
 80064a8:	2300      	movs	r3, #0
 80064aa:	77fb      	strb	r3, [r7, #31]
 80064ac:	e04d      	b.n	800654a <UART_SetConfig+0x34e>
 80064ae:	2302      	movs	r3, #2
 80064b0:	77fb      	strb	r3, [r7, #31]
 80064b2:	e04a      	b.n	800654a <UART_SetConfig+0x34e>
 80064b4:	2304      	movs	r3, #4
 80064b6:	77fb      	strb	r3, [r7, #31]
 80064b8:	e047      	b.n	800654a <UART_SetConfig+0x34e>
 80064ba:	2308      	movs	r3, #8
 80064bc:	77fb      	strb	r3, [r7, #31]
 80064be:	e044      	b.n	800654a <UART_SetConfig+0x34e>
 80064c0:	2310      	movs	r3, #16
 80064c2:	77fb      	strb	r3, [r7, #31]
 80064c4:	bf00      	nop
 80064c6:	e040      	b.n	800654a <UART_SetConfig+0x34e>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a11      	ldr	r2, [pc, #68]	; (8006514 <UART_SetConfig+0x318>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d139      	bne.n	8006546 <UART_SetConfig+0x34a>
 80064d2:	4b09      	ldr	r3, [pc, #36]	; (80064f8 <UART_SetConfig+0x2fc>)
 80064d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80064dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064e0:	d027      	beq.n	8006532 <UART_SetConfig+0x336>
 80064e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064e6:	d817      	bhi.n	8006518 <UART_SetConfig+0x31c>
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d01c      	beq.n	8006526 <UART_SetConfig+0x32a>
 80064ec:	e027      	b.n	800653e <UART_SetConfig+0x342>
 80064ee:	bf00      	nop
 80064f0:	efff69f3 	.word	0xefff69f3
 80064f4:	40011000 	.word	0x40011000
 80064f8:	40023800 	.word	0x40023800
 80064fc:	40004400 	.word	0x40004400
 8006500:	40004800 	.word	0x40004800
 8006504:	40004c00 	.word	0x40004c00
 8006508:	40005000 	.word	0x40005000
 800650c:	40011400 	.word	0x40011400
 8006510:	40007800 	.word	0x40007800
 8006514:	40007c00 	.word	0x40007c00
 8006518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800651c:	d006      	beq.n	800652c <UART_SetConfig+0x330>
 800651e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006522:	d009      	beq.n	8006538 <UART_SetConfig+0x33c>
 8006524:	e00b      	b.n	800653e <UART_SetConfig+0x342>
 8006526:	2300      	movs	r3, #0
 8006528:	77fb      	strb	r3, [r7, #31]
 800652a:	e00e      	b.n	800654a <UART_SetConfig+0x34e>
 800652c:	2302      	movs	r3, #2
 800652e:	77fb      	strb	r3, [r7, #31]
 8006530:	e00b      	b.n	800654a <UART_SetConfig+0x34e>
 8006532:	2304      	movs	r3, #4
 8006534:	77fb      	strb	r3, [r7, #31]
 8006536:	e008      	b.n	800654a <UART_SetConfig+0x34e>
 8006538:	2308      	movs	r3, #8
 800653a:	77fb      	strb	r3, [r7, #31]
 800653c:	e005      	b.n	800654a <UART_SetConfig+0x34e>
 800653e:	2310      	movs	r3, #16
 8006540:	77fb      	strb	r3, [r7, #31]
 8006542:	bf00      	nop
 8006544:	e001      	b.n	800654a <UART_SetConfig+0x34e>
 8006546:	2310      	movs	r3, #16
 8006548:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006552:	d17f      	bne.n	8006654 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006554:	7ffb      	ldrb	r3, [r7, #31]
 8006556:	2b08      	cmp	r3, #8
 8006558:	d85c      	bhi.n	8006614 <UART_SetConfig+0x418>
 800655a:	a201      	add	r2, pc, #4	; (adr r2, 8006560 <UART_SetConfig+0x364>)
 800655c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006560:	08006585 	.word	0x08006585
 8006564:	080065a5 	.word	0x080065a5
 8006568:	080065c5 	.word	0x080065c5
 800656c:	08006615 	.word	0x08006615
 8006570:	080065dd 	.word	0x080065dd
 8006574:	08006615 	.word	0x08006615
 8006578:	08006615 	.word	0x08006615
 800657c:	08006615 	.word	0x08006615
 8006580:	080065fd 	.word	0x080065fd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006584:	f7fe ff52 	bl	800542c <HAL_RCC_GetPCLK1Freq>
 8006588:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	005a      	lsls	r2, r3, #1
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	085b      	lsrs	r3, r3, #1
 8006594:	441a      	add	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	fbb2 f3f3 	udiv	r3, r2, r3
 800659e:	b29b      	uxth	r3, r3
 80065a0:	61bb      	str	r3, [r7, #24]
        break;
 80065a2:	e03a      	b.n	800661a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065a4:	f7fe ff56 	bl	8005454 <HAL_RCC_GetPCLK2Freq>
 80065a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	005a      	lsls	r2, r3, #1
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	085b      	lsrs	r3, r3, #1
 80065b4:	441a      	add	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80065be:	b29b      	uxth	r3, r3
 80065c0:	61bb      	str	r3, [r7, #24]
        break;
 80065c2:	e02a      	b.n	800661a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	085a      	lsrs	r2, r3, #1
 80065ca:	4b5f      	ldr	r3, [pc, #380]	; (8006748 <UART_SetConfig+0x54c>)
 80065cc:	4413      	add	r3, r2
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	6852      	ldr	r2, [r2, #4]
 80065d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	61bb      	str	r3, [r7, #24]
        break;
 80065da:	e01e      	b.n	800661a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065dc:	f7fe fe68 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 80065e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	005a      	lsls	r2, r3, #1
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	085b      	lsrs	r3, r3, #1
 80065ec:	441a      	add	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	61bb      	str	r3, [r7, #24]
        break;
 80065fa:	e00e      	b.n	800661a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	085b      	lsrs	r3, r3, #1
 8006602:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	fbb2 f3f3 	udiv	r3, r2, r3
 800660e:	b29b      	uxth	r3, r3
 8006610:	61bb      	str	r3, [r7, #24]
        break;
 8006612:	e002      	b.n	800661a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	75fb      	strb	r3, [r7, #23]
        break;
 8006618:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	2b0f      	cmp	r3, #15
 800661e:	d916      	bls.n	800664e <UART_SetConfig+0x452>
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006626:	d212      	bcs.n	800664e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	b29b      	uxth	r3, r3
 800662c:	f023 030f 	bic.w	r3, r3, #15
 8006630:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	085b      	lsrs	r3, r3, #1
 8006636:	b29b      	uxth	r3, r3
 8006638:	f003 0307 	and.w	r3, r3, #7
 800663c:	b29a      	uxth	r2, r3
 800663e:	897b      	ldrh	r3, [r7, #10]
 8006640:	4313      	orrs	r3, r2
 8006642:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	897a      	ldrh	r2, [r7, #10]
 800664a:	60da      	str	r2, [r3, #12]
 800664c:	e070      	b.n	8006730 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	75fb      	strb	r3, [r7, #23]
 8006652:	e06d      	b.n	8006730 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006654:	7ffb      	ldrb	r3, [r7, #31]
 8006656:	2b08      	cmp	r3, #8
 8006658:	d859      	bhi.n	800670e <UART_SetConfig+0x512>
 800665a:	a201      	add	r2, pc, #4	; (adr r2, 8006660 <UART_SetConfig+0x464>)
 800665c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006660:	08006685 	.word	0x08006685
 8006664:	080066a3 	.word	0x080066a3
 8006668:	080066c1 	.word	0x080066c1
 800666c:	0800670f 	.word	0x0800670f
 8006670:	080066d9 	.word	0x080066d9
 8006674:	0800670f 	.word	0x0800670f
 8006678:	0800670f 	.word	0x0800670f
 800667c:	0800670f 	.word	0x0800670f
 8006680:	080066f7 	.word	0x080066f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006684:	f7fe fed2 	bl	800542c <HAL_RCC_GetPCLK1Freq>
 8006688:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	085a      	lsrs	r2, r3, #1
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	441a      	add	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	fbb2 f3f3 	udiv	r3, r2, r3
 800669c:	b29b      	uxth	r3, r3
 800669e:	61bb      	str	r3, [r7, #24]
        break;
 80066a0:	e038      	b.n	8006714 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066a2:	f7fe fed7 	bl	8005454 <HAL_RCC_GetPCLK2Freq>
 80066a6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	085a      	lsrs	r2, r3, #1
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	441a      	add	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	61bb      	str	r3, [r7, #24]
        break;
 80066be:	e029      	b.n	8006714 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	085a      	lsrs	r2, r3, #1
 80066c6:	4b21      	ldr	r3, [pc, #132]	; (800674c <UART_SetConfig+0x550>)
 80066c8:	4413      	add	r3, r2
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	6852      	ldr	r2, [r2, #4]
 80066ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	61bb      	str	r3, [r7, #24]
        break;
 80066d6:	e01d      	b.n	8006714 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066d8:	f7fe fdea 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 80066dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	085a      	lsrs	r2, r3, #1
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	441a      	add	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	61bb      	str	r3, [r7, #24]
        break;
 80066f4:	e00e      	b.n	8006714 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	085b      	lsrs	r3, r3, #1
 80066fc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	fbb2 f3f3 	udiv	r3, r2, r3
 8006708:	b29b      	uxth	r3, r3
 800670a:	61bb      	str	r3, [r7, #24]
        break;
 800670c:	e002      	b.n	8006714 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	75fb      	strb	r3, [r7, #23]
        break;
 8006712:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	2b0f      	cmp	r3, #15
 8006718:	d908      	bls.n	800672c <UART_SetConfig+0x530>
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006720:	d204      	bcs.n	800672c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	60da      	str	r2, [r3, #12]
 800672a:	e001      	b.n	8006730 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800673c:	7dfb      	ldrb	r3, [r7, #23]
}
 800673e:	4618      	mov	r0, r3
 8006740:	3720      	adds	r7, #32
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	01e84800 	.word	0x01e84800
 800674c:	00f42400 	.word	0x00f42400

08006750 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00a      	beq.n	800677a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	430a      	orrs	r2, r1
 800679a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a0:	f003 0304 	and.w	r3, r3, #4
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00a      	beq.n	80067be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	430a      	orrs	r2, r1
 80067bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	f003 0308 	and.w	r3, r3, #8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	430a      	orrs	r2, r1
 80067de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e4:	f003 0310 	and.w	r3, r3, #16
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00a      	beq.n	8006802 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006806:	f003 0320 	and.w	r3, r3, #32
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	430a      	orrs	r2, r1
 8006822:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682c:	2b00      	cmp	r3, #0
 800682e:	d01a      	beq.n	8006866 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800684e:	d10a      	bne.n	8006866 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	430a      	orrs	r2, r1
 8006864:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00a      	beq.n	8006888 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	430a      	orrs	r2, r1
 8006886:	605a      	str	r2, [r3, #4]
  }
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af02      	add	r7, sp, #8
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80068a2:	f7fc f87f 	bl	80029a4 <HAL_GetTick>
 80068a6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0308 	and.w	r3, r3, #8
 80068b2:	2b08      	cmp	r3, #8
 80068b4:	d10e      	bne.n	80068d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f814 	bl	80068f2 <UART_WaitOnFlagUntilTimeout>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e00a      	b.n	80068ea <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2220      	movs	r2, #32
 80068de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	60f8      	str	r0, [r7, #12]
 80068fa:	60b9      	str	r1, [r7, #8]
 80068fc:	603b      	str	r3, [r7, #0]
 80068fe:	4613      	mov	r3, r2
 8006900:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006902:	e05d      	b.n	80069c0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690a:	d059      	beq.n	80069c0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800690c:	f7fc f84a 	bl	80029a4 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	69ba      	ldr	r2, [r7, #24]
 8006918:	429a      	cmp	r2, r3
 800691a:	d302      	bcc.n	8006922 <UART_WaitOnFlagUntilTimeout+0x30>
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d11b      	bne.n	800695a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006930:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689a      	ldr	r2, [r3, #8]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f022 0201 	bic.w	r2, r2, #1
 8006940:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2220      	movs	r2, #32
 8006946:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2220      	movs	r2, #32
 800694c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e042      	b.n	80069e0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0304 	and.w	r3, r3, #4
 8006964:	2b00      	cmp	r3, #0
 8006966:	d02b      	beq.n	80069c0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006976:	d123      	bne.n	80069c0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006980:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006990:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 0201 	bic.w	r2, r2, #1
 80069a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2220      	movs	r2, #32
 80069a6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2220      	movs	r2, #32
 80069ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2220      	movs	r2, #32
 80069b2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e00f      	b.n	80069e0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	69da      	ldr	r2, [r3, #28]
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	4013      	ands	r3, r2
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	bf0c      	ite	eq
 80069d0:	2301      	moveq	r3, #1
 80069d2:	2300      	movne	r3, #0
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	461a      	mov	r2, r3
 80069d8:	79fb      	ldrb	r3, [r7, #7]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d092      	beq.n	8006904 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80069fe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689a      	ldr	r2, [r3, #8]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0201 	bic.w	r2, r2, #1
 8006a0e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2220      	movs	r2, #32
 8006a14:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f7ff fbce 	bl	80061e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a4c:	bf00      	nop
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a6a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f7ff fba1 	bl	80061c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a7e:	bf00      	nop
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a94:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a9a:	2b22      	cmp	r3, #34	; 0x22
 8006a9c:	d13a      	bne.n	8006b14 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006aa6:	89bb      	ldrh	r3, [r7, #12]
 8006aa8:	b2d9      	uxtb	r1, r3
 8006aaa:	89fb      	ldrh	r3, [r7, #14]
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab2:	400a      	ands	r2, r1
 8006ab4:	b2d2      	uxtb	r2, r2
 8006ab6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006abc:	1c5a      	adds	r2, r3, #1
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	3b01      	subs	r3, #1
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d121      	bne.n	8006b24 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006aee:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689a      	ldr	r2, [r3, #8]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f022 0201 	bic.w	r2, r2, #1
 8006afe:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2220      	movs	r2, #32
 8006b04:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7ff fb61 	bl	80061d4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b12:	e007      	b.n	8006b24 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	699a      	ldr	r2, [r3, #24]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f042 0208 	orr.w	r2, r2, #8
 8006b22:	619a      	str	r2, [r3, #24]
}
 8006b24:	bf00      	nop
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b3a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b40:	2b22      	cmp	r3, #34	; 0x22
 8006b42:	d13a      	bne.n	8006bba <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b50:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b52:	89ba      	ldrh	r2, [r7, #12]
 8006b54:	89fb      	ldrh	r3, [r7, #14]
 8006b56:	4013      	ands	r3, r2
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b62:	1c9a      	adds	r2, r3, #2
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	3b01      	subs	r3, #1
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d121      	bne.n	8006bca <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b94:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 0201 	bic.w	r2, r2, #1
 8006ba4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7ff fb0e 	bl	80061d4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006bb8:	e007      	b.n	8006bca <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	699a      	ldr	r2, [r3, #24]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f042 0208 	orr.w	r2, r2, #8
 8006bc8:	619a      	str	r2, [r3, #24]
}
 8006bca:	bf00      	nop
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <SpectrogramColumn>:
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b08c      	sub	sp, #48	; 0x30
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	60f8      	str	r0, [r7, #12]
 8006bda:	60b9      	str	r1, [r7, #8]
 8006bdc:	607a      	str	r2, [r7, #4]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	623b      	str	r3, [r7, #32]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6899      	ldr	r1, [r3, #8]
 8006bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	68b8      	ldr	r0, [r7, #8]
 8006bfa:	f001 f90f 	bl	8007e1c <arm_mult_f32>
 8006bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	18d0      	adds	r0, r2, r3
 8006c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	2100      	movs	r1, #0
 8006c10:	f004 f957 	bl	800aec2 <memset>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6818      	ldr	r0, [r3, #0]
 8006c18:	2300      	movs	r3, #0
 8006c1a:	6a3a      	ldr	r2, [r7, #32]
 8006c1c:	68b9      	ldr	r1, [r7, #8]
 8006c1e:	f000 fc3f 	bl	80074a0 <arm_rfft_fast_f32>
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	ed93 7a00 	vldr	s14, [r3]
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	edd3 7a00 	vldr	s15, [r3]
 8006c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c32:	edc7 7a07 	vstr	s15, [r7, #28]
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	3304      	adds	r3, #4
 8006c3a:	ed93 7a00 	vldr	s14, [r3]
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	3304      	adds	r3, #4
 8006c42:	edd3 7a00 	vldr	s15, [r3]
 8006c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c4a:	edc7 7a06 	vstr	s15, [r7, #24]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	69fa      	ldr	r2, [r7, #28]
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	f103 0008 	add.w	r0, r3, #8
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	1d19      	adds	r1, r3, #4
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	085b      	lsrs	r3, r3, #1
 8006c62:	3b01      	subs	r3, #1
 8006c64:	461a      	mov	r2, r3
 8006c66:	f001 f881 	bl	8007d6c <arm_cmplx_mag_squared_f32>
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	085b      	lsrs	r3, r3, #1
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	4413      	add	r3, r2
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	791b      	ldrb	r3, [r3, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d12b      	bne.n	8006cd8 <SpectrogramColumn+0x106>
 8006c80:	2300      	movs	r3, #0
 8006c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c84:	e022      	b.n	8006ccc <SpectrogramColumn+0xfa>
 8006c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	6879      	ldr	r1, [r7, #4]
 8006c96:	440b      	add	r3, r1
 8006c98:	617a      	str	r2, [r7, #20]
 8006c9a:	613b      	str	r3, [r7, #16]
 8006c9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ca0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ca8:	db09      	blt.n	8006cbe <SpectrogramColumn+0xec>
 8006caa:	ed97 0a05 	vldr	s0, [r7, #20]
 8006cae:	f006 fa61 	bl	800d174 <sqrtf>
 8006cb2:	eef0 7a40 	vmov.f32	s15, s0
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	edc3 7a00 	vstr	s15, [r3]
 8006cbc:	e003      	b.n	8006cc6 <SpectrogramColumn+0xf4>
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	f04f 0200 	mov.w	r2, #0
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc8:	3301      	adds	r3, #1
 8006cca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	085b      	lsrs	r3, r3, #1
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d3d6      	bcc.n	8006c86 <SpectrogramColumn+0xb4>
 8006cd8:	bf00      	nop
 8006cda:	3730      	adds	r7, #48	; 0x30
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <MelSpectrogramColumn>:
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	68b9      	ldr	r1, [r7, #8]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7ff ff68 	bl	8006bd2 <SpectrogramColumn>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	6979      	ldr	r1, [r7, #20]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 f804 	bl	8006d18 <MelFilterbank>
 8006d10:	bf00      	nop
 8006d12:	3718      	adds	r7, #24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <MelFilterbank>:
 8006d18:	b480      	push	{r7}
 8006d1a:	b08d      	sub	sp, #52	; 0x34
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	61fb      	str	r3, [r7, #28]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	61bb      	str	r3, [r7, #24]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	617b      	str	r3, [r7, #20]
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d40:	e034      	b.n	8006dac <MelFilterbank+0x94>
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	69fa      	ldr	r2, [r7, #28]
 8006d48:	4413      	add	r3, r2
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	827b      	strh	r3, [r7, #18]
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	69ba      	ldr	r2, [r7, #24]
 8006d54:	4413      	add	r3, r2
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	823b      	strh	r3, [r7, #16]
 8006d5a:	f04f 0300 	mov.w	r3, #0
 8006d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d60:	8a7b      	ldrh	r3, [r7, #18]
 8006d62:	623b      	str	r3, [r7, #32]
 8006d64:	e015      	b.n	8006d92 <MelFilterbank+0x7a>
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	ed93 7a00 	vldr	s14, [r3]
 8006d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d74:	1d1a      	adds	r2, r3, #4
 8006d76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d78:	edd3 7a00 	vldr	s15, [r3]
 8006d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d80:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006d84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d88:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8006d8c:	6a3b      	ldr	r3, [r7, #32]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	623b      	str	r3, [r7, #32]
 8006d92:	8a3b      	ldrh	r3, [r7, #16]
 8006d94:	6a3a      	ldr	r2, [r7, #32]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d9e5      	bls.n	8006d66 <MelFilterbank+0x4e>
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	4413      	add	r3, r2
 8006da2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006da4:	601a      	str	r2, [r3, #0]
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	3301      	adds	r3, #1
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24
 8006dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d3c6      	bcc.n	8006d42 <MelFilterbank+0x2a>
 8006db4:	bf00      	nop
 8006db6:	3734      	adds	r7, #52	; 0x34
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <aiInit>:

/*
 * Init function to create and initialize a NN.
 */
int aiInit(const ai_u8* activations)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b090      	sub	sp, #64	; 0x40
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
    ai_error err;

    /* 1 - Specific AI data structure to provide the references of the
     * activation/working memory chunk and the weights/bias parameters */
    const ai_network_params params = {
 8006dc8:	4b28      	ldr	r3, [pc, #160]	; (8006e6c <aiInit+0xac>)
 8006dca:	60fb      	str	r3, [r7, #12]
 8006dcc:	2301      	movs	r3, #1
 8006dce:	823b      	strh	r3, [r7, #16]
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	827b      	strh	r3, [r7, #18]
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	82bb      	strh	r3, [r7, #20]
 8006dd8:	4b25      	ldr	r3, [pc, #148]	; (8006e70 <aiInit+0xb0>)
 8006dda:	61bb      	str	r3, [r7, #24]
            AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8006ddc:	f000 faa4 	bl	8007328 <ai_network_data_weights_get>
 8006de0:	4603      	mov	r3, r0
    const ai_network_params params = {
 8006de2:	61fb      	str	r3, [r7, #28]
 8006de4:	2300      	movs	r3, #0
 8006de6:	623b      	str	r3, [r7, #32]
 8006de8:	4b22      	ldr	r3, [pc, #136]	; (8006e74 <aiInit+0xb4>)
 8006dea:	627b      	str	r3, [r7, #36]	; 0x24
 8006dec:	2301      	movs	r3, #1
 8006dee:	853b      	strh	r3, [r7, #40]	; 0x28
 8006df0:	2301      	movs	r3, #1
 8006df2:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006df4:	2301      	movs	r3, #1
 8006df6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006df8:	f64d 1340 	movw	r3, #55616	; 0xd940
 8006dfc:	633b      	str	r3, [r7, #48]	; 0x30
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	637b      	str	r3, [r7, #52]	; 0x34
 8006e02:	2300      	movs	r3, #0
 8006e04:	63bb      	str	r3, [r7, #56]	; 0x38
            AI_NETWORK_DATA_ACTIVATIONS(activations)
    };

    /* 2 - Create an instance of the NN */
    err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8006e06:	2100      	movs	r1, #0
 8006e08:	481b      	ldr	r0, [pc, #108]	; (8006e78 <aiInit+0xb8>)
 8006e0a:	f000 fa1b 	bl	8007244 <ai_network_create>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (err.type != AI_ERROR_NONE) {
 8006e12:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d002      	beq.n	8006e20 <aiInit+0x60>
	    return -1;
 8006e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e1e:	e020      	b.n	8006e62 <aiInit+0xa2>
    }

    /* 3 - Initialize the NN - Ready to be used */
    if (!ai_network_init(network, &params)) {
 8006e20:	4b15      	ldr	r3, [pc, #84]	; (8006e78 <aiInit+0xb8>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f107 020c 	add.w	r2, r7, #12
 8006e28:	4611      	mov	r1, r2
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 fa2c 	bl	8007288 <ai_network_init>
 8006e30:	4603      	mov	r3, r0
 8006e32:	f083 0301 	eor.w	r3, r3, #1
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d011      	beq.n	8006e60 <aiInit+0xa0>
        err = ai_network_get_error(network);
 8006e3c:	4b0e      	ldr	r3, [pc, #56]	; (8006e78 <aiInit+0xb8>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 f9f3 	bl	800722c <ai_network_get_error>
 8006e46:	4603      	mov	r3, r0
 8006e48:	63fb      	str	r3, [r7, #60]	; 0x3c
        ai_network_destroy(network);
 8006e4a:	4b0b      	ldr	r3, [pc, #44]	; (8006e78 <aiInit+0xb8>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 fa0e 	bl	8007270 <ai_network_destroy>
        network = AI_HANDLE_NULL;
 8006e54:	4b08      	ldr	r3, [pc, #32]	; (8006e78 <aiInit+0xb8>)
 8006e56:	2200      	movs	r2, #0
 8006e58:	601a      	str	r2, [r3, #0]
	    return -2;
 8006e5a:	f06f 0301 	mvn.w	r3, #1
 8006e5e:	e000      	b.n	8006e62 <aiInit+0xa2>
    }

    return 0;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3740      	adds	r7, #64	; 0x40
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	40040440 	.word	0x40040440
 8006e70:	000103d4 	.word	0x000103d4
 8006e74:	00040440 	.word	0x00040440
 8006e78:	20001e68 	.word	0x20001e68

08006e7c <aiRun>:

/*
 * Run function to execute an inference.
 */
int aiRun(const void *in_data, void *out_data)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
    ai_i32 nbatch;
    ai_error err;

    /* Parameters checking */
    if (!in_data || !out_data || !network)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d006      	beq.n	8006e9a <aiRun+0x1e>
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <aiRun+0x1e>
 8006e92:	4b17      	ldr	r3, [pc, #92]	; (8006ef0 <aiRun+0x74>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d102      	bne.n	8006ea0 <aiRun+0x24>
        return -1;
 8006e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e9e:	e022      	b.n	8006ee6 <aiRun+0x6a>

    /* Initialize input/output buffer handlers */
    ai_input[0].n_batches = 1;
 8006ea0:	4b14      	ldr	r3, [pc, #80]	; (8006ef4 <aiRun+0x78>)
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	809a      	strh	r2, [r3, #4]
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 8006ea6:	4a13      	ldr	r2, [pc, #76]	; (8006ef4 <aiRun+0x78>)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6113      	str	r3, [r2, #16]
    ai_output[0].n_batches = 1;
 8006eac:	4b12      	ldr	r3, [pc, #72]	; (8006ef8 <aiRun+0x7c>)
 8006eae:	2201      	movs	r2, #1
 8006eb0:	809a      	strh	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 8006eb2:	4a11      	ldr	r2, [pc, #68]	; (8006ef8 <aiRun+0x7c>)
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	6113      	str	r3, [r2, #16]

    /* 2 - Perform the inference */
    nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8006eb8:	4b0d      	ldr	r3, [pc, #52]	; (8006ef0 <aiRun+0x74>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a0e      	ldr	r2, [pc, #56]	; (8006ef8 <aiRun+0x7c>)
 8006ebe:	490d      	ldr	r1, [pc, #52]	; (8006ef4 <aiRun+0x78>)
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f000 fa20 	bl	8007306 <ai_network_run>
 8006ec6:	60f8      	str	r0, [r7, #12]
    if (nbatch != 1) {
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d00a      	beq.n	8006ee4 <aiRun+0x68>
        err = ai_network_get_error(network);
 8006ece:	4b08      	ldr	r3, [pc, #32]	; (8006ef0 <aiRun+0x74>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 f9aa 	bl	800722c <ai_network_get_error>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	60bb      	str	r3, [r7, #8]
        // ...
        return err.code;
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8006ee2:	e000      	b.n	8006ee6 <aiRun+0x6a>
    }

    return 0;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	20001e68 	.word	0x20001e68
 8006ef4:	20000010 	.word	0x20000010
 8006ef8:	20000028 	.word	0x20000028

08006efc <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	af00      	add	r7, sp, #0
    /* Activation/working buffer is allocated as a static memory chunk
     * (bss section) */
    AI_ALIGNED(4)
    static ai_u8 activations[AI_NETWORK_DATA_ACTIVATIONS_SIZE];

    aiInit(activations);
 8006f00:	4802      	ldr	r0, [pc, #8]	; (8006f0c <MX_X_CUBE_AI_Init+0x10>)
 8006f02:	f7ff ff5d 	bl	8006dc0 <aiInit>
    /* USER CODE END 0 */
}
 8006f06:	bf00      	nop
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	20001e6c 	.word	0x20001e6c

08006f10 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	3303      	adds	r3, #3
 8006f20:	f023 0303 	bic.w	r3, r3, #3
 8006f24:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 8006f26:	4b2b      	ldr	r3, [pc, #172]	; (8006fd4 <network_configure_activations+0xc4>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 8006f2c:	4b29      	ldr	r3, [pc, #164]	; (8006fd4 <network_configure_activations+0xc4>)
 8006f2e:	2200      	movs	r2, #0
 8006f30:	60da      	str	r2, [r3, #12]
    conv2d_output_array.data = AI_PTR(activations + 1856);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8006f38:	4a27      	ldr	r2, [pc, #156]	; (8006fd8 <network_configure_activations+0xc8>)
 8006f3a:	6093      	str	r3, [r2, #8]
    conv2d_output_array.data_start = AI_PTR(activations + 1856);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8006f42:	4a25      	ldr	r2, [pc, #148]	; (8006fd8 <network_configure_activations+0xc8>)
 8006f44:	60d3      	str	r3, [r2, #12]
    conv2d_1_output_array.data = AI_PTR(activations + 0);
 8006f46:	4a25      	ldr	r2, [pc, #148]	; (8006fdc <network_configure_activations+0xcc>)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(activations + 0);
 8006f4c:	4a23      	ldr	r2, [pc, #140]	; (8006fdc <network_configure_activations+0xcc>)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	60d3      	str	r3, [r2, #12]
    batch_normalization_1_output_array.data = AI_PTR(activations + 0);
 8006f52:	4a23      	ldr	r2, [pc, #140]	; (8006fe0 <network_configure_activations+0xd0>)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6093      	str	r3, [r2, #8]
    batch_normalization_1_output_array.data_start = AI_PTR(activations + 0);
 8006f58:	4a21      	ldr	r2, [pc, #132]	; (8006fe0 <network_configure_activations+0xd0>)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	60d3      	str	r3, [r2, #12]
    max_pooling2d_output_array.data = AI_PTR(activations + 0);
 8006f5e:	4a21      	ldr	r2, [pc, #132]	; (8006fe4 <network_configure_activations+0xd4>)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6093      	str	r3, [r2, #8]
    max_pooling2d_output_array.data_start = AI_PTR(activations + 0);
 8006f64:	4a1f      	ldr	r2, [pc, #124]	; (8006fe4 <network_configure_activations+0xd4>)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	60d3      	str	r3, [r2, #12]
    conv2d_2_output_array.data = AI_PTR(activations + 11648);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f503 5336 	add.w	r3, r3, #11648	; 0x2d80
 8006f70:	4a1d      	ldr	r2, [pc, #116]	; (8006fe8 <network_configure_activations+0xd8>)
 8006f72:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(activations + 11648);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f503 5336 	add.w	r3, r3, #11648	; 0x2d80
 8006f7a:	4a1b      	ldr	r2, [pc, #108]	; (8006fe8 <network_configure_activations+0xd8>)
 8006f7c:	60d3      	str	r3, [r2, #12]
    conv2d_3_output_array.data = AI_PTR(activations + 0);
 8006f7e:	4a1b      	ldr	r2, [pc, #108]	; (8006fec <network_configure_activations+0xdc>)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6093      	str	r3, [r2, #8]
    conv2d_3_output_array.data_start = AI_PTR(activations + 0);
 8006f84:	4a19      	ldr	r2, [pc, #100]	; (8006fec <network_configure_activations+0xdc>)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	60d3      	str	r3, [r2, #12]
    batch_normalization_3_output_array.data = AI_PTR(activations + 11520);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f503 5334 	add.w	r3, r3, #11520	; 0x2d00
 8006f90:	4a17      	ldr	r2, [pc, #92]	; (8006ff0 <network_configure_activations+0xe0>)
 8006f92:	6093      	str	r3, [r2, #8]
    batch_normalization_3_output_array.data_start = AI_PTR(activations + 11520);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f503 5334 	add.w	r3, r3, #11520	; 0x2d00
 8006f9a:	4a15      	ldr	r2, [pc, #84]	; (8006ff0 <network_configure_activations+0xe0>)
 8006f9c:	60d3      	str	r3, [r2, #12]
    global_max_pooling2d_output_array.data = AI_PTR(activations + 0);
 8006f9e:	4a15      	ldr	r2, [pc, #84]	; (8006ff4 <network_configure_activations+0xe4>)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6093      	str	r3, [r2, #8]
    global_max_pooling2d_output_array.data_start = AI_PTR(activations + 0);
 8006fa4:	4a13      	ldr	r2, [pc, #76]	; (8006ff4 <network_configure_activations+0xe4>)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(activations + 128);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	3380      	adds	r3, #128	; 0x80
 8006fae:	4a12      	ldr	r2, [pc, #72]	; (8006ff8 <network_configure_activations+0xe8>)
 8006fb0:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(activations + 128);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	3380      	adds	r3, #128	; 0x80
 8006fb6:	4a10      	ldr	r2, [pc, #64]	; (8006ff8 <network_configure_activations+0xe8>)
 8006fb8:	60d3      	str	r3, [r2, #12]
    dense_nl_output_array.data = AI_PTR(NULL);
 8006fba:	4b10      	ldr	r3, [pc, #64]	; (8006ffc <network_configure_activations+0xec>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	609a      	str	r2, [r3, #8]
    dense_nl_output_array.data_start = AI_PTR(NULL);
 8006fc0:	4b0e      	ldr	r3, [pc, #56]	; (8006ffc <network_configure_activations+0xec>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8006fc6:	2301      	movs	r3, #1
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	20000180 	.word	0x20000180
 8006fd8:	20000190 	.word	0x20000190
 8006fdc:	200001a0 	.word	0x200001a0
 8006fe0:	200001b0 	.word	0x200001b0
 8006fe4:	200001c0 	.word	0x200001c0
 8006fe8:	200001d0 	.word	0x200001d0
 8006fec:	200001e0 	.word	0x200001e0
 8006ff0:	200001f0 	.word	0x200001f0
 8006ff4:	20000200 	.word	0x20000200
 8006ff8:	20000210 	.word	0x20000210
 8006ffc:	20000220 	.word	0x20000220

08007000 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8007010:	4b74      	ldr	r3, [pc, #464]	; (80071e4 <network_configure_weights+0x1e4>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007018:	4a72      	ldr	r2, [pc, #456]	; (80071e4 <network_configure_weights+0x1e4>)
 800701a:	6013      	str	r3, [r2, #0]
    dense_bias_array.data = AI_PTR(weights + 66496);
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	4b72      	ldr	r3, [pc, #456]	; (80071e8 <network_configure_weights+0x1e8>)
 8007020:	4413      	add	r3, r2
 8007022:	4a70      	ldr	r2, [pc, #448]	; (80071e4 <network_configure_weights+0x1e4>)
 8007024:	6093      	str	r3, [r2, #8]
    dense_bias_array.data_start = AI_PTR(weights + 66496);
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	4b6f      	ldr	r3, [pc, #444]	; (80071e8 <network_configure_weights+0x1e8>)
 800702a:	4413      	add	r3, r2
 800702c:	4a6d      	ldr	r2, [pc, #436]	; (80071e4 <network_configure_weights+0x1e4>)
 800702e:	60d3      	str	r3, [r2, #12]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8007030:	4b6e      	ldr	r3, [pc, #440]	; (80071ec <network_configure_weights+0x1ec>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007038:	4a6c      	ldr	r2, [pc, #432]	; (80071ec <network_configure_weights+0x1ec>)
 800703a:	6013      	str	r3, [r2, #0]
    dense_weights_array.data = AI_PTR(weights + 65856);
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4b6c      	ldr	r3, [pc, #432]	; (80071f0 <network_configure_weights+0x1f0>)
 8007040:	4413      	add	r3, r2
 8007042:	4a6a      	ldr	r2, [pc, #424]	; (80071ec <network_configure_weights+0x1ec>)
 8007044:	6093      	str	r3, [r2, #8]
    dense_weights_array.data_start = AI_PTR(weights + 65856);
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	4b69      	ldr	r3, [pc, #420]	; (80071f0 <network_configure_weights+0x1f0>)
 800704a:	4413      	add	r3, r2
 800704c:	4a67      	ldr	r2, [pc, #412]	; (80071ec <network_configure_weights+0x1ec>)
 800704e:	60d3      	str	r3, [r2, #12]
    batch_normalization_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8007050:	4b68      	ldr	r3, [pc, #416]	; (80071f4 <network_configure_weights+0x1f4>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007058:	4a66      	ldr	r2, [pc, #408]	; (80071f4 <network_configure_weights+0x1f4>)
 800705a:	6013      	str	r3, [r2, #0]
    batch_normalization_3_bias_array.data = AI_PTR(weights + 65728);
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	4b66      	ldr	r3, [pc, #408]	; (80071f8 <network_configure_weights+0x1f8>)
 8007060:	4413      	add	r3, r2
 8007062:	4a64      	ldr	r2, [pc, #400]	; (80071f4 <network_configure_weights+0x1f4>)
 8007064:	6093      	str	r3, [r2, #8]
    batch_normalization_3_bias_array.data_start = AI_PTR(weights + 65728);
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	4b63      	ldr	r3, [pc, #396]	; (80071f8 <network_configure_weights+0x1f8>)
 800706a:	4413      	add	r3, r2
 800706c:	4a61      	ldr	r2, [pc, #388]	; (80071f4 <network_configure_weights+0x1f4>)
 800706e:	60d3      	str	r3, [r2, #12]
    batch_normalization_3_scale_array.format |= AI_FMT_FLAG_CONST;
 8007070:	4b62      	ldr	r3, [pc, #392]	; (80071fc <network_configure_weights+0x1fc>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007078:	4a60      	ldr	r2, [pc, #384]	; (80071fc <network_configure_weights+0x1fc>)
 800707a:	6013      	str	r3, [r2, #0]
    batch_normalization_3_scale_array.data = AI_PTR(weights + 65600);
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	4b60      	ldr	r3, [pc, #384]	; (8007200 <network_configure_weights+0x200>)
 8007080:	4413      	add	r3, r2
 8007082:	4a5e      	ldr	r2, [pc, #376]	; (80071fc <network_configure_weights+0x1fc>)
 8007084:	6093      	str	r3, [r2, #8]
    batch_normalization_3_scale_array.data_start = AI_PTR(weights + 65600);
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	4b5d      	ldr	r3, [pc, #372]	; (8007200 <network_configure_weights+0x200>)
 800708a:	4413      	add	r3, r2
 800708c:	4a5b      	ldr	r2, [pc, #364]	; (80071fc <network_configure_weights+0x1fc>)
 800708e:	60d3      	str	r3, [r2, #12]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8007090:	4b5c      	ldr	r3, [pc, #368]	; (8007204 <network_configure_weights+0x204>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007098:	4a5a      	ldr	r2, [pc, #360]	; (8007204 <network_configure_weights+0x204>)
 800709a:	6013      	str	r3, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(weights + 65472);
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80070a2:	4413      	add	r3, r2
 80070a4:	4a57      	ldr	r2, [pc, #348]	; (8007204 <network_configure_weights+0x204>)
 80070a6:	6093      	str	r3, [r2, #8]
    conv2d_3_bias_array.data_start = AI_PTR(weights + 65472);
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80070ae:	4413      	add	r3, r2
 80070b0:	4a54      	ldr	r2, [pc, #336]	; (8007204 <network_configure_weights+0x204>)
 80070b2:	60d3      	str	r3, [r2, #12]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 80070b4:	4b54      	ldr	r3, [pc, #336]	; (8007208 <network_configure_weights+0x208>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070bc:	4a52      	ldr	r2, [pc, #328]	; (8007208 <network_configure_weights+0x208>)
 80070be:	6013      	str	r3, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(weights + 28608);
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	f646 73c0 	movw	r3, #28608	; 0x6fc0
 80070c6:	4413      	add	r3, r2
 80070c8:	4a4f      	ldr	r2, [pc, #316]	; (8007208 <network_configure_weights+0x208>)
 80070ca:	6093      	str	r3, [r2, #8]
    conv2d_3_weights_array.data_start = AI_PTR(weights + 28608);
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	f646 73c0 	movw	r3, #28608	; 0x6fc0
 80070d2:	4413      	add	r3, r2
 80070d4:	4a4c      	ldr	r2, [pc, #304]	; (8007208 <network_configure_weights+0x208>)
 80070d6:	60d3      	str	r3, [r2, #12]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80070d8:	4b4c      	ldr	r3, [pc, #304]	; (800720c <network_configure_weights+0x20c>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070e0:	4a4a      	ldr	r2, [pc, #296]	; (800720c <network_configure_weights+0x20c>)
 80070e2:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(weights + 28480);
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	f646 7340 	movw	r3, #28480	; 0x6f40
 80070ea:	4413      	add	r3, r2
 80070ec:	4a47      	ldr	r2, [pc, #284]	; (800720c <network_configure_weights+0x20c>)
 80070ee:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(weights + 28480);
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	f646 7340 	movw	r3, #28480	; 0x6f40
 80070f6:	4413      	add	r3, r2
 80070f8:	4a44      	ldr	r2, [pc, #272]	; (800720c <network_configure_weights+0x20c>)
 80070fa:	60d3      	str	r3, [r2, #12]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80070fc:	4b44      	ldr	r3, [pc, #272]	; (8007210 <network_configure_weights+0x210>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007104:	4a42      	ldr	r2, [pc, #264]	; (8007210 <network_configure_weights+0x210>)
 8007106:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(weights + 10048);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f503 531d 	add.w	r3, r3, #10048	; 0x2740
 800710e:	4a40      	ldr	r2, [pc, #256]	; (8007210 <network_configure_weights+0x210>)
 8007110:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(weights + 10048);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f503 531d 	add.w	r3, r3, #10048	; 0x2740
 8007118:	4a3d      	ldr	r2, [pc, #244]	; (8007210 <network_configure_weights+0x210>)
 800711a:	60d3      	str	r3, [r2, #12]
    batch_normalization_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800711c:	4b3d      	ldr	r3, [pc, #244]	; (8007214 <network_configure_weights+0x214>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007124:	4a3b      	ldr	r2, [pc, #236]	; (8007214 <network_configure_weights+0x214>)
 8007126:	6013      	str	r3, [r2, #0]
    batch_normalization_1_bias_array.data = AI_PTR(weights + 9984);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800712e:	4a39      	ldr	r2, [pc, #228]	; (8007214 <network_configure_weights+0x214>)
 8007130:	6093      	str	r3, [r2, #8]
    batch_normalization_1_bias_array.data_start = AI_PTR(weights + 9984);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8007138:	4a36      	ldr	r2, [pc, #216]	; (8007214 <network_configure_weights+0x214>)
 800713a:	60d3      	str	r3, [r2, #12]
    batch_normalization_1_scale_array.format |= AI_FMT_FLAG_CONST;
 800713c:	4b36      	ldr	r3, [pc, #216]	; (8007218 <network_configure_weights+0x218>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007144:	4a34      	ldr	r2, [pc, #208]	; (8007218 <network_configure_weights+0x218>)
 8007146:	6013      	str	r3, [r2, #0]
    batch_normalization_1_scale_array.data = AI_PTR(weights + 9920);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f503 531b 	add.w	r3, r3, #9920	; 0x26c0
 800714e:	4a32      	ldr	r2, [pc, #200]	; (8007218 <network_configure_weights+0x218>)
 8007150:	6093      	str	r3, [r2, #8]
    batch_normalization_1_scale_array.data_start = AI_PTR(weights + 9920);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f503 531b 	add.w	r3, r3, #9920	; 0x26c0
 8007158:	4a2f      	ldr	r2, [pc, #188]	; (8007218 <network_configure_weights+0x218>)
 800715a:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800715c:	4b2f      	ldr	r3, [pc, #188]	; (800721c <network_configure_weights+0x21c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007164:	4a2d      	ldr	r2, [pc, #180]	; (800721c <network_configure_weights+0x21c>)
 8007166:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(weights + 9856);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f503 531a 	add.w	r3, r3, #9856	; 0x2680
 800716e:	4a2b      	ldr	r2, [pc, #172]	; (800721c <network_configure_weights+0x21c>)
 8007170:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(weights + 9856);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f503 531a 	add.w	r3, r3, #9856	; 0x2680
 8007178:	4a28      	ldr	r2, [pc, #160]	; (800721c <network_configure_weights+0x21c>)
 800717a:	60d3      	str	r3, [r2, #12]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800717c:	4b28      	ldr	r3, [pc, #160]	; (8007220 <network_configure_weights+0x220>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007184:	4a26      	ldr	r2, [pc, #152]	; (8007220 <network_configure_weights+0x220>)
 8007186:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(weights + 640);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800718e:	4a24      	ldr	r2, [pc, #144]	; (8007220 <network_configure_weights+0x220>)
 8007190:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(weights + 640);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007198:	4a21      	ldr	r2, [pc, #132]	; (8007220 <network_configure_weights+0x220>)
 800719a:	60d3      	str	r3, [r2, #12]
    conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800719c:	4b21      	ldr	r3, [pc, #132]	; (8007224 <network_configure_weights+0x224>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071a4:	4a1f      	ldr	r2, [pc, #124]	; (8007224 <network_configure_weights+0x224>)
 80071a6:	6013      	str	r3, [r2, #0]
    conv2d_bias_array.data = AI_PTR(weights + 576);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80071ae:	4a1d      	ldr	r2, [pc, #116]	; (8007224 <network_configure_weights+0x224>)
 80071b0:	6093      	str	r3, [r2, #8]
    conv2d_bias_array.data_start = AI_PTR(weights + 576);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80071b8:	4a1a      	ldr	r2, [pc, #104]	; (8007224 <network_configure_weights+0x224>)
 80071ba:	60d3      	str	r3, [r2, #12]
    conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80071bc:	4b1a      	ldr	r3, [pc, #104]	; (8007228 <network_configure_weights+0x228>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071c4:	4a18      	ldr	r2, [pc, #96]	; (8007228 <network_configure_weights+0x228>)
 80071c6:	6013      	str	r3, [r2, #0]
    conv2d_weights_array.data = AI_PTR(weights + 0);
 80071c8:	4a17      	ldr	r2, [pc, #92]	; (8007228 <network_configure_weights+0x228>)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6093      	str	r3, [r2, #8]
    conv2d_weights_array.data_start = AI_PTR(weights + 0);
 80071ce:	4a16      	ldr	r2, [pc, #88]	; (8007228 <network_configure_weights+0x228>)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	60d3      	str	r3, [r2, #12]
  }

  return true;
 80071d4:	2301      	movs	r3, #1
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	200000a0 	.word	0x200000a0
 80071e8:	000103c0 	.word	0x000103c0
 80071ec:	200000b0 	.word	0x200000b0
 80071f0:	00010140 	.word	0x00010140
 80071f4:	200000c0 	.word	0x200000c0
 80071f8:	000100c0 	.word	0x000100c0
 80071fc:	200000d0 	.word	0x200000d0
 8007200:	00010040 	.word	0x00010040
 8007204:	200000e0 	.word	0x200000e0
 8007208:	200000f0 	.word	0x200000f0
 800720c:	20000100 	.word	0x20000100
 8007210:	20000110 	.word	0x20000110
 8007214:	20000120 	.word	0x20000120
 8007218:	20000130 	.word	0x20000130
 800721c:	20000140 	.word	0x20000140
 8007220:	20000150 	.word	0x20000150
 8007224:	20000160 	.word	0x20000160
 8007228:	20000170 	.word	0x20000170

0800722c <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f001 f917 	bl	8008468 <ai_platform_network_get_error>
 800723a:	4603      	mov	r3, r0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af02      	add	r7, sp, #8
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800724e:	2300      	movs	r3, #0
 8007250:	9301      	str	r3, [sp, #4]
 8007252:	2303      	movs	r3, #3
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	2301      	movs	r3, #1
 8007258:	4a04      	ldr	r2, [pc, #16]	; (800726c <ai_network_create+0x28>)
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f001 f991 	bl	8008584 <ai_platform_network_create>
 8007262:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8007264:	4618      	mov	r0, r3
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	20000040 	.word	0x20000040

08007270 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f001 fa07 	bl	800868c <ai_platform_network_destroy>
 800727e:	4603      	mov	r3, r0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8007292:	6839      	ldr	r1, [r7, #0]
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f001 fa83 	bl	80087a0 <ai_platform_network_init>
 800729a:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d101      	bne.n	80072a6 <ai_network_init+0x1e>
 80072a2:	2300      	movs	r3, #0
 80072a4:	e02b      	b.n	80072fe <ai_network_init+0x76>

  ai_bool ok = true;
 80072a6:	2301      	movs	r3, #1
 80072a8:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	4619      	mov	r1, r3
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f7ff fea6 	bl	8007000 <network_configure_weights>
 80072b4:	4603      	mov	r3, r0
 80072b6:	461a      	mov	r2, r3
 80072b8:	7afb      	ldrb	r3, [r7, #11]
 80072ba:	4013      	ands	r3, r2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	bf14      	ite	ne
 80072c0:	2301      	movne	r3, #1
 80072c2:	2300      	moveq	r3, #0
 80072c4:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	3318      	adds	r3, #24
 80072ca:	4619      	mov	r1, r3
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f7ff fe1f 	bl	8006f10 <network_configure_activations>
 80072d2:	4603      	mov	r3, r0
 80072d4:	461a      	mov	r2, r3
 80072d6:	7afb      	ldrb	r3, [r7, #11]
 80072d8:	4013      	ands	r3, r2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	bf14      	ite	ne
 80072de:	2301      	movne	r3, #1
 80072e0:	2300      	moveq	r3, #0
 80072e2:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f001 fb43 	bl	8008970 <ai_platform_network_post_init>
 80072ea:	4603      	mov	r3, r0
 80072ec:	461a      	mov	r2, r3
 80072ee:	7afb      	ldrb	r3, [r7, #11]
 80072f0:	4013      	ands	r3, r2
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	bf14      	ite	ne
 80072f6:	2301      	movne	r3, #1
 80072f8:	2300      	moveq	r3, #0
 80072fa:	72fb      	strb	r3, [r7, #11]

  return ok;
 80072fc:	7afb      	ldrb	r3, [r7, #11]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b084      	sub	sp, #16
 800730a:	af00      	add	r7, sp, #0
 800730c:	60f8      	str	r0, [r7, #12]
 800730e:	60b9      	str	r1, [r7, #8]
 8007310:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	68b9      	ldr	r1, [r7, #8]
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f001 fbd6 	bl	8008ac8 <ai_platform_network_process>
 800731c:	4603      	mov	r3, r0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 8007328:	b480      	push	{r7}
 800732a:	af00      	add	r7, sp, #0
    0x40, 0x2c, 0x3c, 0xeb, 0x91, 0xcc, 0xbe, 0xc4, 0xda,
    0x62, 0x3d, 0x3e, 0x58, 0xf9, 0x3b, 0x54, 0x0a, 0xad,
    0xbc, 0x08, 0x15, 0x39, 0x3d, 0x04, 0x9a, 0xaa, 0xbd
  };

  return AI_HANDLE_PTR(s_network_weights);
 800732c:	4b02      	ldr	r3, [pc, #8]	; (8007338 <ai_network_data_weights_get+0x10>)

}
 800732e:	4618      	mov	r0, r3
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	0800f850 	.word	0x0800f850

0800733c <arm_rfft_fast_init_f32>:
 800733c:	084b      	lsrs	r3, r1, #1
 800733e:	2b80      	cmp	r3, #128	; 0x80
 8007340:	b430      	push	{r4, r5}
 8007342:	8201      	strh	r1, [r0, #16]
 8007344:	8003      	strh	r3, [r0, #0]
 8007346:	d06f      	beq.n	8007428 <arm_rfft_fast_init_f32+0xec>
 8007348:	d916      	bls.n	8007378 <arm_rfft_fast_init_f32+0x3c>
 800734a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800734e:	d05e      	beq.n	800740e <arm_rfft_fast_init_f32+0xd2>
 8007350:	d935      	bls.n	80073be <arm_rfft_fast_init_f32+0x82>
 8007352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007356:	d025      	beq.n	80073a4 <arm_rfft_fast_init_f32+0x68>
 8007358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800735c:	d112      	bne.n	8007384 <arm_rfft_fast_init_f32+0x48>
 800735e:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 8007362:	4c37      	ldr	r4, [pc, #220]	; (8007440 <arm_rfft_fast_init_f32+0x104>)
 8007364:	4937      	ldr	r1, [pc, #220]	; (8007444 <arm_rfft_fast_init_f32+0x108>)
 8007366:	2300      	movs	r3, #0
 8007368:	4a37      	ldr	r2, [pc, #220]	; (8007448 <arm_rfft_fast_init_f32+0x10c>)
 800736a:	8185      	strh	r5, [r0, #12]
 800736c:	6084      	str	r4, [r0, #8]
 800736e:	6041      	str	r1, [r0, #4]
 8007370:	6142      	str	r2, [r0, #20]
 8007372:	b258      	sxtb	r0, r3
 8007374:	bc30      	pop	{r4, r5}
 8007376:	4770      	bx	lr
 8007378:	2b20      	cmp	r3, #32
 800737a:	d030      	beq.n	80073de <arm_rfft_fast_init_f32+0xa2>
 800737c:	2b40      	cmp	r3, #64	; 0x40
 800737e:	d005      	beq.n	800738c <arm_rfft_fast_init_f32+0x50>
 8007380:	2b10      	cmp	r3, #16
 8007382:	d038      	beq.n	80073f6 <arm_rfft_fast_init_f32+0xba>
 8007384:	23ff      	movs	r3, #255	; 0xff
 8007386:	bc30      	pop	{r4, r5}
 8007388:	b258      	sxtb	r0, r3
 800738a:	4770      	bx	lr
 800738c:	2538      	movs	r5, #56	; 0x38
 800738e:	4c2f      	ldr	r4, [pc, #188]	; (800744c <arm_rfft_fast_init_f32+0x110>)
 8007390:	492f      	ldr	r1, [pc, #188]	; (8007450 <arm_rfft_fast_init_f32+0x114>)
 8007392:	2300      	movs	r3, #0
 8007394:	4a2f      	ldr	r2, [pc, #188]	; (8007454 <arm_rfft_fast_init_f32+0x118>)
 8007396:	8185      	strh	r5, [r0, #12]
 8007398:	6084      	str	r4, [r0, #8]
 800739a:	6041      	str	r1, [r0, #4]
 800739c:	6142      	str	r2, [r0, #20]
 800739e:	b258      	sxtb	r0, r3
 80073a0:	bc30      	pop	{r4, r5}
 80073a2:	4770      	bx	lr
 80073a4:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 80073a8:	4c2b      	ldr	r4, [pc, #172]	; (8007458 <arm_rfft_fast_init_f32+0x11c>)
 80073aa:	492c      	ldr	r1, [pc, #176]	; (800745c <arm_rfft_fast_init_f32+0x120>)
 80073ac:	2300      	movs	r3, #0
 80073ae:	4a2c      	ldr	r2, [pc, #176]	; (8007460 <arm_rfft_fast_init_f32+0x124>)
 80073b0:	8185      	strh	r5, [r0, #12]
 80073b2:	6084      	str	r4, [r0, #8]
 80073b4:	6041      	str	r1, [r0, #4]
 80073b6:	6142      	str	r2, [r0, #20]
 80073b8:	b258      	sxtb	r0, r3
 80073ba:	bc30      	pop	{r4, r5}
 80073bc:	4770      	bx	lr
 80073be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073c2:	d1df      	bne.n	8007384 <arm_rfft_fast_init_f32+0x48>
 80073c4:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 80073c8:	4c26      	ldr	r4, [pc, #152]	; (8007464 <arm_rfft_fast_init_f32+0x128>)
 80073ca:	4927      	ldr	r1, [pc, #156]	; (8007468 <arm_rfft_fast_init_f32+0x12c>)
 80073cc:	2300      	movs	r3, #0
 80073ce:	4a27      	ldr	r2, [pc, #156]	; (800746c <arm_rfft_fast_init_f32+0x130>)
 80073d0:	8185      	strh	r5, [r0, #12]
 80073d2:	6084      	str	r4, [r0, #8]
 80073d4:	6041      	str	r1, [r0, #4]
 80073d6:	6142      	str	r2, [r0, #20]
 80073d8:	b258      	sxtb	r0, r3
 80073da:	bc30      	pop	{r4, r5}
 80073dc:	4770      	bx	lr
 80073de:	2530      	movs	r5, #48	; 0x30
 80073e0:	4c23      	ldr	r4, [pc, #140]	; (8007470 <arm_rfft_fast_init_f32+0x134>)
 80073e2:	4924      	ldr	r1, [pc, #144]	; (8007474 <arm_rfft_fast_init_f32+0x138>)
 80073e4:	2300      	movs	r3, #0
 80073e6:	4a24      	ldr	r2, [pc, #144]	; (8007478 <arm_rfft_fast_init_f32+0x13c>)
 80073e8:	8185      	strh	r5, [r0, #12]
 80073ea:	6084      	str	r4, [r0, #8]
 80073ec:	6041      	str	r1, [r0, #4]
 80073ee:	6142      	str	r2, [r0, #20]
 80073f0:	b258      	sxtb	r0, r3
 80073f2:	bc30      	pop	{r4, r5}
 80073f4:	4770      	bx	lr
 80073f6:	2514      	movs	r5, #20
 80073f8:	4c20      	ldr	r4, [pc, #128]	; (800747c <arm_rfft_fast_init_f32+0x140>)
 80073fa:	4921      	ldr	r1, [pc, #132]	; (8007480 <arm_rfft_fast_init_f32+0x144>)
 80073fc:	2300      	movs	r3, #0
 80073fe:	4a21      	ldr	r2, [pc, #132]	; (8007484 <arm_rfft_fast_init_f32+0x148>)
 8007400:	8185      	strh	r5, [r0, #12]
 8007402:	6084      	str	r4, [r0, #8]
 8007404:	6041      	str	r1, [r0, #4]
 8007406:	6142      	str	r2, [r0, #20]
 8007408:	b258      	sxtb	r0, r3
 800740a:	bc30      	pop	{r4, r5}
 800740c:	4770      	bx	lr
 800740e:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 8007412:	4c1d      	ldr	r4, [pc, #116]	; (8007488 <arm_rfft_fast_init_f32+0x14c>)
 8007414:	491d      	ldr	r1, [pc, #116]	; (800748c <arm_rfft_fast_init_f32+0x150>)
 8007416:	2300      	movs	r3, #0
 8007418:	4a1d      	ldr	r2, [pc, #116]	; (8007490 <arm_rfft_fast_init_f32+0x154>)
 800741a:	8185      	strh	r5, [r0, #12]
 800741c:	6084      	str	r4, [r0, #8]
 800741e:	6041      	str	r1, [r0, #4]
 8007420:	6142      	str	r2, [r0, #20]
 8007422:	b258      	sxtb	r0, r3
 8007424:	bc30      	pop	{r4, r5}
 8007426:	4770      	bx	lr
 8007428:	25d0      	movs	r5, #208	; 0xd0
 800742a:	4c1a      	ldr	r4, [pc, #104]	; (8007494 <arm_rfft_fast_init_f32+0x158>)
 800742c:	491a      	ldr	r1, [pc, #104]	; (8007498 <arm_rfft_fast_init_f32+0x15c>)
 800742e:	2300      	movs	r3, #0
 8007430:	4a1a      	ldr	r2, [pc, #104]	; (800749c <arm_rfft_fast_init_f32+0x160>)
 8007432:	8185      	strh	r5, [r0, #12]
 8007434:	6084      	str	r4, [r0, #8]
 8007436:	6041      	str	r1, [r0, #4]
 8007438:	6142      	str	r2, [r0, #20]
 800743a:	b258      	sxtb	r0, r3
 800743c:	bc30      	pop	{r4, r5}
 800743e:	4770      	bx	lr
 8007440:	0802ea2c 	.word	0x0802ea2c
 8007444:	0801fc24 	.word	0x0801fc24
 8007448:	08025d94 	.word	0x08025d94
 800744c:	08023d24 	.word	0x08023d24
 8007450:	080307ec 	.word	0x080307ec
 8007454:	08032cdc 	.word	0x08032cdc
 8007458:	0802c714 	.word	0x0802c714
 800745c:	0802a614 	.word	0x0802a614
 8007460:	08023d94 	.word	0x08023d94
 8007464:	0803296c 	.word	0x0803296c
 8007468:	08029d94 	.word	0x08029d94
 800746c:	080309ec 	.word	0x080309ec
 8007470:	0802d5cc 	.word	0x0802d5cc
 8007474:	0802c614 	.word	0x0802c614
 8007478:	08023c24 	.word	0x08023c24
 800747c:	0802d524 	.word	0x0802d524
 8007480:	0802a594 	.word	0x0802a594
 8007484:	0802d54c 	.word	0x0802d54c
 8007488:	080311ec 	.word	0x080311ec
 800748c:	0802da2c 	.word	0x0802da2c
 8007490:	0803156c 	.word	0x0803156c
 8007494:	08032edc 	.word	0x08032edc
 8007498:	0802d62c 	.word	0x0802d62c
 800749c:	0803256c 	.word	0x0803256c

080074a0 <arm_rfft_fast_f32>:
 80074a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074a4:	8a05      	ldrh	r5, [r0, #16]
 80074a6:	4606      	mov	r6, r0
 80074a8:	4690      	mov	r8, r2
 80074aa:	460c      	mov	r4, r1
 80074ac:	086d      	lsrs	r5, r5, #1
 80074ae:	8005      	strh	r5, [r0, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d15e      	bne.n	8007572 <arm_rfft_fast_f32+0xd2>
 80074b4:	461a      	mov	r2, r3
 80074b6:	2301      	movs	r3, #1
 80074b8:	f000 fbe0 	bl	8007c7c <arm_cfft_f32>
 80074bc:	edd4 7a00 	vldr	s15, [r4]
 80074c0:	ed94 7a01 	vldr	s14, [r4, #4]
 80074c4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80074c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80074cc:	8837      	ldrh	r7, [r6, #0]
 80074ce:	ee37 7a07 	vadd.f32	s14, s14, s14
 80074d2:	6975      	ldr	r5, [r6, #20]
 80074d4:	3f01      	subs	r7, #1
 80074d6:	eef0 3a46 	vmov.f32	s7, s12
 80074da:	3510      	adds	r5, #16
 80074dc:	f108 0610 	add.w	r6, r8, #16
 80074e0:	ee77 6a87 	vadd.f32	s13, s15, s14
 80074e4:	eb04 00c7 	add.w	r0, r4, r7, lsl #3
 80074e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80074ec:	f104 0310 	add.w	r3, r4, #16
 80074f0:	3808      	subs	r0, #8
 80074f2:	ee26 7a86 	vmul.f32	s14, s13, s12
 80074f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80074fa:	ed88 7a00 	vstr	s14, [r8]
 80074fe:	edc8 7a01 	vstr	s15, [r8, #4]
 8007502:	edd0 6a02 	vldr	s13, [r0, #8]
 8007506:	3f01      	subs	r7, #1
 8007508:	ed13 5a02 	vldr	s10, [r3, #-8]
 800750c:	f1a0 0008 	sub.w	r0, r0, #8
 8007510:	ed13 7a01 	vldr	s14, [r3, #-4]
 8007514:	f105 0508 	add.w	r5, r5, #8
 8007518:	ee76 7ac5 	vsub.f32	s15, s13, s10
 800751c:	ed15 6a04 	vldr	s12, [r5, #-16]
 8007520:	edd0 5a05 	vldr	s11, [r0, #20]
 8007524:	ee36 5a85 	vadd.f32	s10, s13, s10
 8007528:	ed55 6a03 	vldr	s13, [r5, #-12]
 800752c:	f103 0308 	add.w	r3, r3, #8
 8007530:	ee35 4a87 	vadd.f32	s8, s11, s14
 8007534:	f106 0608 	add.w	r6, r6, #8
 8007538:	ee66 4a27 	vmul.f32	s9, s12, s15
 800753c:	ee77 5a65 	vsub.f32	s11, s14, s11
 8007540:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8007544:	ee34 5a85 	vadd.f32	s10, s9, s10
 8007548:	ee26 6a04 	vmul.f32	s12, s12, s8
 800754c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8007550:	ee77 7a25 	vadd.f32	s15, s14, s11
 8007554:	ee76 6a85 	vadd.f32	s13, s13, s10
 8007558:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800755c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8007560:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8007564:	ed46 6a04 	vstr	s13, [r6, #-16]
 8007568:	ed46 7a03 	vstr	s15, [r6, #-12]
 800756c:	d1c9      	bne.n	8007502 <arm_rfft_fast_f32+0x62>
 800756e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007572:	edd1 7a00 	vldr	s15, [r1]
 8007576:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800757a:	edd1 6a01 	vldr	s13, [r1, #4]
 800757e:	1e68      	subs	r0, r5, #1
 8007580:	6975      	ldr	r5, [r6, #20]
 8007582:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007586:	00c1      	lsls	r1, r0, #3
 8007588:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800758c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8007590:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8007594:	ed82 7a00 	vstr	s14, [r2]
 8007598:	edc2 7a01 	vstr	s15, [r2, #4]
 800759c:	b3e0      	cbz	r0, 8007618 <arm_rfft_fast_f32+0x178>
 800759e:	3908      	subs	r1, #8
 80075a0:	f104 0210 	add.w	r2, r4, #16
 80075a4:	3510      	adds	r5, #16
 80075a6:	440c      	add	r4, r1
 80075a8:	f108 0110 	add.w	r1, r8, #16
 80075ac:	ed94 7a02 	vldr	s14, [r4, #8]
 80075b0:	3801      	subs	r0, #1
 80075b2:	ed52 6a02 	vldr	s13, [r2, #-8]
 80075b6:	f1a4 0408 	sub.w	r4, r4, #8
 80075ba:	ed15 6a02 	vldr	s12, [r5, #-8]
 80075be:	f102 0208 	add.w	r2, r2, #8
 80075c2:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80075c6:	ed94 4a05 	vldr	s8, [r4, #20]
 80075ca:	ed12 5a03 	vldr	s10, [r2, #-12]
 80075ce:	ee77 6a26 	vadd.f32	s13, s14, s13
 80075d2:	ed55 5a01 	vldr	s11, [r5, #-4]
 80075d6:	f101 0108 	add.w	r1, r1, #8
 80075da:	ee26 3a27 	vmul.f32	s6, s12, s15
 80075de:	f105 0508 	add.w	r5, r5, #8
 80075e2:	ee74 4a05 	vadd.f32	s9, s8, s10
 80075e6:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80075ea:	ee35 5a44 	vsub.f32	s10, s10, s8
 80075ee:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80075f2:	ee26 6a24 	vmul.f32	s12, s12, s9
 80075f6:	ee77 7a05 	vadd.f32	s15, s14, s10
 80075fa:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80075fe:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007602:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8007606:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800760a:	ee27 7a23 	vmul.f32	s14, s14, s7
 800760e:	ed41 7a03 	vstr	s15, [r1, #-12]
 8007612:	ed01 7a04 	vstr	s14, [r1, #-16]
 8007616:	d1c9      	bne.n	80075ac <arm_rfft_fast_f32+0x10c>
 8007618:	4630      	mov	r0, r6
 800761a:	4641      	mov	r1, r8
 800761c:	461a      	mov	r2, r3
 800761e:	2301      	movs	r3, #1
 8007620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007624:	f000 bb2a 	b.w	8007c7c <arm_cfft_f32>

08007628 <arm_cfft_radix8by2_f32>:
 8007628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800762c:	ed2d 8b06 	vpush	{d8-d10}
 8007630:	f8b0 e000 	ldrh.w	lr, [r0]
 8007634:	4607      	mov	r7, r0
 8007636:	6842      	ldr	r2, [r0, #4]
 8007638:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 800763c:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8007640:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8007644:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8007648:	f000 80af 	beq.w	80077aa <arm_cfft_radix8by2_f32+0x182>
 800764c:	3310      	adds	r3, #16
 800764e:	3210      	adds	r2, #16
 8007650:	f101 0610 	add.w	r6, r1, #16
 8007654:	f108 0510 	add.w	r5, r8, #16
 8007658:	18cc      	adds	r4, r1, r3
 800765a:	4443      	add	r3, r8
 800765c:	ed55 6a04 	vldr	s13, [r5, #-16]
 8007660:	f1be 0e01 	subs.w	lr, lr, #1
 8007664:	ed56 4a04 	vldr	s9, [r6, #-16]
 8007668:	f104 0410 	add.w	r4, r4, #16
 800766c:	ed55 7a02 	vldr	s15, [r5, #-8]
 8007670:	f106 0610 	add.w	r6, r6, #16
 8007674:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8007678:	ed53 0a04 	vldr	s1, [r3, #-16]
 800767c:	ed13 5a03 	vldr	s10, [r3, #-12]
 8007680:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8007684:	ed13 3a02 	vldr	s6, [r3, #-8]
 8007688:	f102 0210 	add.w	r2, r2, #16
 800768c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8007690:	f103 0310 	add.w	r3, r3, #16
 8007694:	ed55 2a01 	vldr	s5, [r5, #-4]
 8007698:	f105 0510 	add.w	r5, r5, #16
 800769c:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 80076a0:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 80076a4:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 80076a8:	ee33 8a83 	vadd.f32	s16, s7, s6
 80076ac:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 80076b0:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 80076b4:	ee34 0a06 	vadd.f32	s0, s8, s12
 80076b8:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 80076bc:	ee76 aa87 	vadd.f32	s21, s13, s14
 80076c0:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 80076c4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80076c8:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 80076cc:	ee35 9aa0 	vadd.f32	s18, s11, s1
 80076d0:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 80076d4:	ee71 8a05 	vadd.f32	s17, s2, s10
 80076d8:	ee31 aaa7 	vadd.f32	s20, s3, s15
 80076dc:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 80076e0:	ee72 9a22 	vadd.f32	s19, s4, s5
 80076e4:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80076e8:	ee35 5a41 	vsub.f32	s10, s10, s2
 80076ec:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 80076f0:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 80076f4:	ee36 6a44 	vsub.f32	s12, s12, s8
 80076f8:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 80076fc:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8007700:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 8007704:	ee72 7a62 	vsub.f32	s15, s4, s5
 8007708:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 800770c:	ee73 2a63 	vsub.f32	s5, s6, s7
 8007710:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 8007714:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 8007718:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800771c:	ee24 3a84 	vmul.f32	s6, s9, s8
 8007720:	ee27 2a26 	vmul.f32	s4, s14, s13
 8007724:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8007728:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800772c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007730:	ee65 5a84 	vmul.f32	s11, s11, s8
 8007734:	ee65 6a26 	vmul.f32	s13, s10, s13
 8007738:	ee25 5a04 	vmul.f32	s10, s10, s8
 800773c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8007740:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8007744:	ee33 4a02 	vadd.f32	s8, s6, s4
 8007748:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800774c:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 8007750:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 8007754:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8007758:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 800775c:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 8007760:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8007764:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8007768:	ee27 4a87 	vmul.f32	s8, s15, s14
 800776c:	ee61 5a87 	vmul.f32	s11, s3, s14
 8007770:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007774:	ee22 5a87 	vmul.f32	s10, s5, s14
 8007778:	ee26 7a07 	vmul.f32	s14, s12, s14
 800777c:	ee26 6a26 	vmul.f32	s12, s12, s13
 8007780:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8007784:	ee74 4a84 	vadd.f32	s9, s9, s8
 8007788:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800778c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007790:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007794:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 8007798:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 800779c:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 80077a0:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 80077a4:	f47f af5a 	bne.w	800765c <arm_cfft_radix8by2_f32+0x34>
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	fa1f f48c 	uxth.w	r4, ip
 80077ae:	4608      	mov	r0, r1
 80077b0:	2302      	movs	r3, #2
 80077b2:	4621      	mov	r1, r4
 80077b4:	f000 fb78 	bl	8007ea8 <arm_radix8_butterfly_f32>
 80077b8:	4640      	mov	r0, r8
 80077ba:	4621      	mov	r1, r4
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	2302      	movs	r3, #2
 80077c0:	ecbd 8b06 	vpop	{d8-d10}
 80077c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077c8:	f000 bb6e 	b.w	8007ea8 <arm_radix8_butterfly_f32>

080077cc <arm_cfft_radix8by4_f32>:
 80077cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d0:	ed2d 8b06 	vpush	{d8-d10}
 80077d4:	8804      	ldrh	r4, [r0, #0]
 80077d6:	b08f      	sub	sp, #60	; 0x3c
 80077d8:	ed91 6a00 	vldr	s12, [r1]
 80077dc:	460a      	mov	r2, r1
 80077de:	0864      	lsrs	r4, r4, #1
 80077e0:	ed91 7a01 	vldr	s14, [r1, #4]
 80077e4:	9101      	str	r1, [sp, #4]
 80077e6:	00a3      	lsls	r3, r4, #2
 80077e8:	9104      	str	r1, [sp, #16]
 80077ea:	0864      	lsrs	r4, r4, #1
 80077ec:	6841      	ldr	r1, [r0, #4]
 80077ee:	900c      	str	r0, [sp, #48]	; 0x30
 80077f0:	4625      	mov	r5, r4
 80077f2:	940b      	str	r4, [sp, #44]	; 0x2c
 80077f4:	f101 0408 	add.w	r4, r1, #8
 80077f8:	f101 0610 	add.w	r6, r1, #16
 80077fc:	9406      	str	r4, [sp, #24]
 80077fe:	18d4      	adds	r4, r2, r3
 8007800:	1eaa      	subs	r2, r5, #2
 8007802:	f101 0518 	add.w	r5, r1, #24
 8007806:	18e0      	adds	r0, r4, r3
 8007808:	ed94 4a00 	vldr	s8, [r4]
 800780c:	edd4 3a01 	vldr	s7, [r4, #4]
 8007810:	46a6      	mov	lr, r4
 8007812:	edd0 6a00 	vldr	s13, [r0]
 8007816:	18c7      	adds	r7, r0, r3
 8007818:	edd0 7a01 	vldr	s15, [r0, #4]
 800781c:	46a0      	mov	r8, r4
 800781e:	ee76 5a26 	vadd.f32	s11, s12, s13
 8007822:	edd7 4a00 	vldr	s9, [r7]
 8007826:	9402      	str	r4, [sp, #8]
 8007828:	4604      	mov	r4, r0
 800782a:	9507      	str	r5, [sp, #28]
 800782c:	4605      	mov	r5, r0
 800782e:	ee75 2a84 	vadd.f32	s5, s11, s8
 8007832:	900a      	str	r0, [sp, #40]	; 0x28
 8007834:	9801      	ldr	r0, [sp, #4]
 8007836:	ee76 6a66 	vsub.f32	s13, s12, s13
 800783a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800783e:	ed97 5a01 	vldr	s10, [r7, #4]
 8007842:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8007846:	46bc      	mov	ip, r7
 8007848:	ee77 7a67 	vsub.f32	s15, s14, s15
 800784c:	9605      	str	r6, [sp, #20]
 800784e:	ee36 7a63 	vsub.f32	s14, s12, s7
 8007852:	9703      	str	r7, [sp, #12]
 8007854:	ee12 9a90 	vmov	r9, s5
 8007858:	ee33 3aa6 	vadd.f32	s6, s7, s13
 800785c:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8007860:	1f3e      	subs	r6, r7, #4
 8007862:	f840 9b08 	str.w	r9, [r0], #8
 8007866:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800786a:	edde 2a01 	vldr	s5, [lr, #4]
 800786e:	ee77 3ac4 	vsub.f32	s7, s15, s8
 8007872:	ee77 7a84 	vadd.f32	s15, s15, s8
 8007876:	ed9c 4a01 	vldr	s8, [ip, #4]
 800787a:	ee36 6a22 	vadd.f32	s12, s12, s5
 800787e:	9001      	str	r0, [sp, #4]
 8007880:	ee37 7a45 	vsub.f32	s14, s14, s10
 8007884:	9804      	ldr	r0, [sp, #16]
 8007886:	ee75 6a26 	vadd.f32	s13, s10, s13
 800788a:	f1ae 0704 	sub.w	r7, lr, #4
 800788e:	ee36 6a04 	vadd.f32	s12, s12, s8
 8007892:	ee33 4a45 	vsub.f32	s8, s6, s10
 8007896:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800789a:	ee33 5aa4 	vadd.f32	s10, s7, s9
 800789e:	ed80 6a01 	vstr	s12, [r0, #4]
 80078a2:	ee14 9a10 	vmov	r9, s8
 80078a6:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80078aa:	f848 9b08 	str.w	r9, [r8], #8
 80078ae:	ed8e 5a01 	vstr	s10, [lr, #4]
 80078b2:	ee15 ea90 	vmov	lr, s11
 80078b6:	f844 eb08 	str.w	lr, [r4], #8
 80078ba:	ee16 ea90 	vmov	lr, s13
 80078be:	9408      	str	r4, [sp, #32]
 80078c0:	462c      	mov	r4, r5
 80078c2:	ed85 7a01 	vstr	s14, [r5, #4]
 80078c6:	9d03      	ldr	r5, [sp, #12]
 80078c8:	f84c eb08 	str.w	lr, [ip], #8
 80078cc:	edc5 7a01 	vstr	s15, [r5, #4]
 80078d0:	0855      	lsrs	r5, r2, #1
 80078d2:	9509      	str	r5, [sp, #36]	; 0x24
 80078d4:	f000 8130 	beq.w	8007b38 <arm_cfft_radix8by4_f32+0x36c>
 80078d8:	9804      	ldr	r0, [sp, #16]
 80078da:	3b08      	subs	r3, #8
 80078dc:	46ab      	mov	fp, r5
 80078de:	f1a4 020c 	sub.w	r2, r4, #12
 80078e2:	f100 0510 	add.w	r5, r0, #16
 80078e6:	f101 0920 	add.w	r9, r1, #32
 80078ea:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 80078ee:	f8dd a014 	ldr.w	sl, [sp, #20]
 80078f2:	4433      	add	r3, r6
 80078f4:	3410      	adds	r4, #16
 80078f6:	4660      	mov	r0, ip
 80078f8:	4641      	mov	r1, r8
 80078fa:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 80078fe:	ed54 6a02 	vldr	s13, [r4, #-8]
 8007902:	f1bb 0b01 	subs.w	fp, fp, #1
 8007906:	ed55 5a02 	vldr	s11, [r5, #-8]
 800790a:	f10a 0a08 	add.w	sl, sl, #8
 800790e:	edd1 7a00 	vldr	s15, [r1]
 8007912:	f105 0508 	add.w	r5, r5, #8
 8007916:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800791a:	edd0 2a00 	vldr	s5, [r0]
 800791e:	ed14 7a01 	vldr	s14, [r4, #-4]
 8007922:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8007926:	ed55 6a03 	vldr	s13, [r5, #-12]
 800792a:	f1a2 0208 	sub.w	r2, r2, #8
 800792e:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8007932:	ed90 2a01 	vldr	s4, [r0, #4]
 8007936:	ee36 5a87 	vadd.f32	s10, s13, s14
 800793a:	ed91 6a01 	vldr	s12, [r1, #4]
 800793e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007942:	f109 0910 	add.w	r9, r9, #16
 8007946:	ee72 6aa4 	vadd.f32	s13, s5, s9
 800794a:	f104 0408 	add.w	r4, r4, #8
 800794e:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8007952:	f10e 0e18 	add.w	lr, lr, #24
 8007956:	ee37 3a67 	vsub.f32	s6, s14, s15
 800795a:	f1a3 0308 	sub.w	r3, r3, #8
 800795e:	ed45 6a04 	vstr	s13, [r5, #-16]
 8007962:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007966:	edd1 6a01 	vldr	s13, [r1, #4]
 800796a:	ee76 1a25 	vadd.f32	s3, s12, s11
 800796e:	edd0 4a01 	vldr	s9, [r0, #4]
 8007972:	ee33 3a22 	vadd.f32	s6, s6, s5
 8007976:	ee75 6a26 	vadd.f32	s13, s10, s13
 800797a:	ee35 5a46 	vsub.f32	s10, s10, s12
 800797e:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8007982:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007986:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800798a:	ee35 5a42 	vsub.f32	s10, s10, s4
 800798e:	ed45 6a03 	vstr	s13, [r5, #-12]
 8007992:	ee32 2a06 	vadd.f32	s4, s4, s12
 8007996:	edd6 7a00 	vldr	s15, [r6]
 800799a:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800799e:	ed97 1a00 	vldr	s2, [r7]
 80079a2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80079a6:	ed92 8a04 	vldr	s16, [r2, #16]
 80079aa:	ee71 8a27 	vadd.f32	s17, s2, s15
 80079ae:	ed93 aa04 	vldr	s20, [r3, #16]
 80079b2:	ed16 7a01 	vldr	s14, [r6, #-4]
 80079b6:	ee71 7a67 	vsub.f32	s15, s2, s15
 80079ba:	ed57 0a01 	vldr	s1, [r7, #-4]
 80079be:	ee38 1a4a 	vsub.f32	s2, s16, s20
 80079c2:	ee38 6a88 	vadd.f32	s12, s17, s16
 80079c6:	edd3 9a03 	vldr	s19, [r3, #12]
 80079ca:	ee30 0a87 	vadd.f32	s0, s1, s14
 80079ce:	ed92 9a03 	vldr	s18, [r2, #12]
 80079d2:	ee78 5ac8 	vsub.f32	s11, s17, s16
 80079d6:	ee3a 6a06 	vadd.f32	s12, s20, s12
 80079da:	ee30 7ac7 	vsub.f32	s14, s1, s14
 80079de:	ee37 4ac9 	vsub.f32	s8, s15, s18
 80079e2:	ee16 ca10 	vmov	ip, s12
 80079e6:	ee30 6a49 	vsub.f32	s12, s0, s18
 80079ea:	ee71 4a07 	vadd.f32	s9, s2, s14
 80079ee:	f847 c908 	str.w	ip, [r7], #-8
 80079f2:	ee34 4a29 	vadd.f32	s8, s8, s19
 80079f6:	edd2 8a03 	vldr	s17, [r2, #12]
 80079fa:	ee39 9ac9 	vsub.f32	s18, s19, s18
 80079fe:	ed93 8a03 	vldr	s16, [r3, #12]
 8007a02:	ee71 0a47 	vsub.f32	s1, s2, s14
 8007a06:	ee30 0a28 	vadd.f32	s0, s0, s17
 8007a0a:	ee39 1a67 	vsub.f32	s2, s18, s15
 8007a0e:	ee36 6a69 	vsub.f32	s12, s12, s19
 8007a12:	ee30 0a08 	vadd.f32	s0, s0, s16
 8007a16:	ee75 5aca 	vsub.f32	s11, s11, s20
 8007a1a:	ed87 0a01 	vstr	s0, [r7, #4]
 8007a1e:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8007a22:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8007a26:	ee21 8a80 	vmul.f32	s16, s3, s0
 8007a2a:	ee23 7a26 	vmul.f32	s14, s6, s13
 8007a2e:	ee64 7a26 	vmul.f32	s15, s8, s13
 8007a32:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8007a36:	ee24 4a00 	vmul.f32	s8, s8, s0
 8007a3a:	ee23 3a00 	vmul.f32	s6, s6, s0
 8007a3e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8007a42:	ee24 0a80 	vmul.f32	s0, s9, s0
 8007a46:	ee38 7a07 	vadd.f32	s14, s16, s14
 8007a4a:	ee76 6a84 	vadd.f32	s13, s13, s8
 8007a4e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007a52:	ee33 3a61 	vsub.f32	s6, s6, s3
 8007a56:	ee17 ca10 	vmov	ip, s14
 8007a5a:	f841 cb08 	str.w	ip, [r1], #8
 8007a5e:	ed01 3a01 	vstr	s6, [r1, #-4]
 8007a62:	ed82 0a04 	vstr	s0, [r2, #16]
 8007a66:	edc2 6a03 	vstr	s13, [r2, #12]
 8007a6a:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 8007a6e:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 8007a72:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8007a76:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8007a7a:	ee65 4a27 	vmul.f32	s9, s10, s15
 8007a7e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8007a82:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8007a86:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007a8a:	ee25 5a26 	vmul.f32	s10, s10, s13
 8007a8e:	ee66 6a26 	vmul.f32	s13, s12, s13
 8007a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a96:	ee34 6a24 	vadd.f32	s12, s8, s9
 8007a9a:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8007a9e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8007aa2:	ee17 ca90 	vmov	ip, s15
 8007aa6:	ed04 6a04 	vstr	s12, [r4, #-16]
 8007aaa:	ed04 5a03 	vstr	s10, [r4, #-12]
 8007aae:	f846 c908 	str.w	ip, [r6], #-8
 8007ab2:	edc6 6a01 	vstr	s13, [r6, #4]
 8007ab6:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 8007aba:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 8007abe:	ee62 5a27 	vmul.f32	s11, s4, s15
 8007ac2:	ee22 6a87 	vmul.f32	s12, s5, s14
 8007ac6:	ee22 2a07 	vmul.f32	s4, s4, s14
 8007aca:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8007ace:	ee61 6a07 	vmul.f32	s13, s2, s14
 8007ad2:	ee20 7a87 	vmul.f32	s14, s1, s14
 8007ad6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8007ada:	ee61 7a27 	vmul.f32	s15, s2, s15
 8007ade:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007ae2:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8007ae6:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8007aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007aee:	ee16 ca10 	vmov	ip, s12
 8007af2:	f840 cb08 	str.w	ip, [r0], #8
 8007af6:	ed40 2a01 	vstr	s5, [r0, #-4]
 8007afa:	edc3 0a04 	vstr	s1, [r3, #16]
 8007afe:	edc3 7a03 	vstr	s15, [r3, #12]
 8007b02:	f47f aefc 	bne.w	80078fe <arm_cfft_radix8by4_f32+0x132>
 8007b06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b08:	9805      	ldr	r0, [sp, #20]
 8007b0a:	00cb      	lsls	r3, r1, #3
 8007b0c:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8007b10:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8007b14:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8007b18:	4498      	add	r8, r3
 8007b1a:	449c      	add	ip, r3
 8007b1c:	9105      	str	r1, [sp, #20]
 8007b1e:	9901      	ldr	r1, [sp, #4]
 8007b20:	4419      	add	r1, r3
 8007b22:	9101      	str	r1, [sp, #4]
 8007b24:	9906      	ldr	r1, [sp, #24]
 8007b26:	4419      	add	r1, r3
 8007b28:	9106      	str	r1, [sp, #24]
 8007b2a:	9908      	ldr	r1, [sp, #32]
 8007b2c:	4419      	add	r1, r3
 8007b2e:	9b07      	ldr	r3, [sp, #28]
 8007b30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b34:	9108      	str	r1, [sp, #32]
 8007b36:	9307      	str	r3, [sp, #28]
 8007b38:	9a01      	ldr	r2, [sp, #4]
 8007b3a:	2304      	movs	r3, #4
 8007b3c:	9e08      	ldr	r6, [sp, #32]
 8007b3e:	edd2 6a00 	vldr	s13, [r2]
 8007b42:	ed96 4a00 	vldr	s8, [r6]
 8007b46:	edd8 7a00 	vldr	s15, [r8]
 8007b4a:	ee36 6a84 	vadd.f32	s12, s13, s8
 8007b4e:	eddc 2a00 	vldr	s5, [ip]
 8007b52:	ed96 7a01 	vldr	s14, [r6, #4]
 8007b56:	ee36 4ac4 	vsub.f32	s8, s13, s8
 8007b5a:	edd2 6a01 	vldr	s13, [r2, #4]
 8007b5e:	ee76 4a27 	vadd.f32	s9, s12, s15
 8007b62:	ed98 2a01 	vldr	s4, [r8, #4]
 8007b66:	ee76 5a87 	vadd.f32	s11, s13, s14
 8007b6a:	ed9c 5a01 	vldr	s10, [ip, #4]
 8007b6e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007b72:	9d05      	ldr	r5, [sp, #20]
 8007b74:	ee72 6aa4 	vadd.f32	s13, s5, s9
 8007b78:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8007b7c:	ee72 3a04 	vadd.f32	s7, s4, s8
 8007b80:	9804      	ldr	r0, [sp, #16]
 8007b82:	ee77 4a67 	vsub.f32	s9, s14, s15
 8007b86:	4621      	mov	r1, r4
 8007b88:	edc2 6a00 	vstr	s13, [r2]
 8007b8c:	ee76 6a67 	vsub.f32	s13, s12, s15
 8007b90:	ed98 3a01 	vldr	s6, [r8, #4]
 8007b94:	ee35 6ac2 	vsub.f32	s12, s11, s4
 8007b98:	eddc 1a01 	vldr	s3, [ip, #4]
 8007b9c:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8007ba0:	ee35 3a83 	vadd.f32	s6, s11, s6
 8007ba4:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007ba8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8007bac:	ee73 5a21 	vadd.f32	s11, s6, s3
 8007bb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007bb4:	ee36 6a45 	vsub.f32	s12, s12, s10
 8007bb8:	edc2 5a01 	vstr	s11, [r2, #4]
 8007bbc:	ee35 5a04 	vadd.f32	s10, s10, s8
 8007bc0:	9a06      	ldr	r2, [sp, #24]
 8007bc2:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8007bc6:	edd2 7a00 	vldr	s15, [r2]
 8007bca:	edd2 5a01 	vldr	s11, [r2, #4]
 8007bce:	ee23 4aa7 	vmul.f32	s8, s7, s15
 8007bd2:	ee63 3aa5 	vmul.f32	s7, s7, s11
 8007bd6:	ee64 5aa5 	vmul.f32	s11, s9, s11
 8007bda:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8007bde:	ee77 7a62 	vsub.f32	s15, s14, s5
 8007be2:	ee74 5a25 	vadd.f32	s11, s8, s11
 8007be6:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8007bea:	edc8 5a00 	vstr	s11, [r8]
 8007bee:	edc8 4a01 	vstr	s9, [r8, #4]
 8007bf2:	edd5 4a01 	vldr	s9, [r5, #4]
 8007bf6:	ed95 7a00 	vldr	s14, [r5]
 8007bfa:	9d07      	ldr	r5, [sp, #28]
 8007bfc:	ee66 5a87 	vmul.f32	s11, s13, s14
 8007c00:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8007c04:	ee26 7a07 	vmul.f32	s14, s12, s14
 8007c08:	ee26 6a24 	vmul.f32	s12, s12, s9
 8007c0c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8007c10:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007c14:	edc6 6a01 	vstr	s13, [r6, #4]
 8007c18:	ed86 6a00 	vstr	s12, [r6]
 8007c1c:	ed95 6a01 	vldr	s12, [r5, #4]
 8007c20:	ed95 7a00 	vldr	s14, [r5]
 8007c24:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007c26:	ee65 6a07 	vmul.f32	s13, s10, s14
 8007c2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007c2e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8007c32:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007c36:	ee37 5a45 	vsub.f32	s10, s14, s10
 8007c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c3e:	ed8c 5a01 	vstr	s10, [ip, #4]
 8007c42:	edcc 7a00 	vstr	s15, [ip]
 8007c46:	6872      	ldr	r2, [r6, #4]
 8007c48:	f000 f92e 	bl	8007ea8 <arm_radix8_butterfly_f32>
 8007c4c:	9802      	ldr	r0, [sp, #8]
 8007c4e:	4621      	mov	r1, r4
 8007c50:	6872      	ldr	r2, [r6, #4]
 8007c52:	2304      	movs	r3, #4
 8007c54:	f000 f928 	bl	8007ea8 <arm_radix8_butterfly_f32>
 8007c58:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007c5a:	4621      	mov	r1, r4
 8007c5c:	6872      	ldr	r2, [r6, #4]
 8007c5e:	2304      	movs	r3, #4
 8007c60:	f000 f922 	bl	8007ea8 <arm_radix8_butterfly_f32>
 8007c64:	9803      	ldr	r0, [sp, #12]
 8007c66:	4621      	mov	r1, r4
 8007c68:	6872      	ldr	r2, [r6, #4]
 8007c6a:	2304      	movs	r3, #4
 8007c6c:	b00f      	add	sp, #60	; 0x3c
 8007c6e:	ecbd 8b06 	vpop	{d8-d10}
 8007c72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c76:	f000 b917 	b.w	8007ea8 <arm_radix8_butterfly_f32>
 8007c7a:	bf00      	nop

08007c7c <arm_cfft_f32>:
 8007c7c:	2a01      	cmp	r2, #1
 8007c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c82:	4606      	mov	r6, r0
 8007c84:	4617      	mov	r7, r2
 8007c86:	460c      	mov	r4, r1
 8007c88:	4698      	mov	r8, r3
 8007c8a:	8805      	ldrh	r5, [r0, #0]
 8007c8c:	d053      	beq.n	8007d36 <arm_cfft_f32+0xba>
 8007c8e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8007c92:	d04b      	beq.n	8007d2c <arm_cfft_f32+0xb0>
 8007c94:	d916      	bls.n	8007cc4 <arm_cfft_f32+0x48>
 8007c96:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8007c9a:	d01a      	beq.n	8007cd2 <arm_cfft_f32+0x56>
 8007c9c:	d95a      	bls.n	8007d54 <arm_cfft_f32+0xd8>
 8007c9e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8007ca2:	d043      	beq.n	8007d2c <arm_cfft_f32+0xb0>
 8007ca4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8007ca8:	d105      	bne.n	8007cb6 <arm_cfft_f32+0x3a>
 8007caa:	4620      	mov	r0, r4
 8007cac:	4629      	mov	r1, r5
 8007cae:	6872      	ldr	r2, [r6, #4]
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	f000 f8f9 	bl	8007ea8 <arm_radix8_butterfly_f32>
 8007cb6:	f1b8 0f00 	cmp.w	r8, #0
 8007cba:	d111      	bne.n	8007ce0 <arm_cfft_f32+0x64>
 8007cbc:	2f01      	cmp	r7, #1
 8007cbe:	d016      	beq.n	8007cee <arm_cfft_f32+0x72>
 8007cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cc4:	2d20      	cmp	r5, #32
 8007cc6:	d031      	beq.n	8007d2c <arm_cfft_f32+0xb0>
 8007cc8:	d948      	bls.n	8007d5c <arm_cfft_f32+0xe0>
 8007cca:	2d40      	cmp	r5, #64	; 0x40
 8007ccc:	d0ed      	beq.n	8007caa <arm_cfft_f32+0x2e>
 8007cce:	2d80      	cmp	r5, #128	; 0x80
 8007cd0:	d1f1      	bne.n	8007cb6 <arm_cfft_f32+0x3a>
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	f7ff fca7 	bl	8007628 <arm_cfft_radix8by2_f32>
 8007cda:	f1b8 0f00 	cmp.w	r8, #0
 8007cde:	d0ed      	beq.n	8007cbc <arm_cfft_f32+0x40>
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	89b1      	ldrh	r1, [r6, #12]
 8007ce4:	68b2      	ldr	r2, [r6, #8]
 8007ce6:	f7f8 fa93 	bl	8000210 <arm_bitreversal_32>
 8007cea:	2f01      	cmp	r7, #1
 8007cec:	d1e8      	bne.n	8007cc0 <arm_cfft_f32+0x44>
 8007cee:	ee07 5a90 	vmov	s15, r5
 8007cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cf6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007cfa:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8007cfe:	2d00      	cmp	r5, #0
 8007d00:	d0de      	beq.n	8007cc0 <arm_cfft_f32+0x44>
 8007d02:	f104 0108 	add.w	r1, r4, #8
 8007d06:	2300      	movs	r3, #0
 8007d08:	ed11 7a02 	vldr	s14, [r1, #-8]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8007d12:	3108      	adds	r1, #8
 8007d14:	429d      	cmp	r5, r3
 8007d16:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007d1a:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007d1e:	ed01 7a04 	vstr	s14, [r1, #-16]
 8007d22:	ed41 7a03 	vstr	s15, [r1, #-12]
 8007d26:	d1ef      	bne.n	8007d08 <arm_cfft_f32+0x8c>
 8007d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	4621      	mov	r1, r4
 8007d30:	f7ff fd4c 	bl	80077cc <arm_cfft_radix8by4_f32>
 8007d34:	e7bf      	b.n	8007cb6 <arm_cfft_f32+0x3a>
 8007d36:	b1a5      	cbz	r5, 8007d62 <arm_cfft_f32+0xe6>
 8007d38:	f101 030c 	add.w	r3, r1, #12
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	ed53 7a02 	vldr	s15, [r3, #-8]
 8007d42:	3201      	adds	r2, #1
 8007d44:	3308      	adds	r3, #8
 8007d46:	eef1 7a67 	vneg.f32	s15, s15
 8007d4a:	4295      	cmp	r5, r2
 8007d4c:	ed43 7a04 	vstr	s15, [r3, #-16]
 8007d50:	d1f5      	bne.n	8007d3e <arm_cfft_f32+0xc2>
 8007d52:	e79c      	b.n	8007c8e <arm_cfft_f32+0x12>
 8007d54:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8007d58:	d0a7      	beq.n	8007caa <arm_cfft_f32+0x2e>
 8007d5a:	e7ac      	b.n	8007cb6 <arm_cfft_f32+0x3a>
 8007d5c:	2d10      	cmp	r5, #16
 8007d5e:	d0b8      	beq.n	8007cd2 <arm_cfft_f32+0x56>
 8007d60:	e7a9      	b.n	8007cb6 <arm_cfft_f32+0x3a>
 8007d62:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8007d66:	d896      	bhi.n	8007c96 <arm_cfft_f32+0x1a>
 8007d68:	e7ac      	b.n	8007cc4 <arm_cfft_f32+0x48>
 8007d6a:	bf00      	nop

08007d6c <arm_cmplx_mag_squared_f32>:
 8007d6c:	b470      	push	{r4, r5, r6}
 8007d6e:	0896      	lsrs	r6, r2, #2
 8007d70:	d03e      	beq.n	8007df0 <arm_cmplx_mag_squared_f32+0x84>
 8007d72:	f100 0320 	add.w	r3, r0, #32
 8007d76:	f101 0410 	add.w	r4, r1, #16
 8007d7a:	4635      	mov	r5, r6
 8007d7c:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8007d80:	3d01      	subs	r5, #1
 8007d82:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 8007d86:	f104 0410 	add.w	r4, r4, #16
 8007d8a:	ed53 5a07 	vldr	s11, [r3, #-28]	; 0xffffffe4
 8007d8e:	ee27 5a07 	vmul.f32	s10, s14, s14
 8007d92:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 8007d96:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007d9a:	ed13 7a04 	vldr	s14, [r3, #-16]
 8007d9e:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8007da2:	ed13 4a03 	vldr	s8, [r3, #-12]
 8007da6:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8007daa:	ed53 7a02 	vldr	s15, [r3, #-8]
 8007dae:	ee27 7a07 	vmul.f32	s14, s14, s14
 8007db2:	ed53 4a01 	vldr	s9, [r3, #-4]
 8007db6:	ee24 4a04 	vmul.f32	s8, s8, s8
 8007dba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007dbe:	f103 0320 	add.w	r3, r3, #32
 8007dc2:	ee64 4aa4 	vmul.f32	s9, s9, s9
 8007dc6:	ee75 5a25 	vadd.f32	s11, s10, s11
 8007dca:	ee76 6a26 	vadd.f32	s13, s12, s13
 8007dce:	ee37 7a04 	vadd.f32	s14, s14, s8
 8007dd2:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8007dd6:	ed44 5a08 	vstr	s11, [r4, #-32]	; 0xffffffe0
 8007dda:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 8007dde:	ed04 7a06 	vstr	s14, [r4, #-24]	; 0xffffffe8
 8007de2:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8007de6:	d1c9      	bne.n	8007d7c <arm_cmplx_mag_squared_f32+0x10>
 8007de8:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8007dec:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8007df0:	f012 0203 	ands.w	r2, r2, #3
 8007df4:	d010      	beq.n	8007e18 <arm_cmplx_mag_squared_f32+0xac>
 8007df6:	3008      	adds	r0, #8
 8007df8:	ed50 7a02 	vldr	s15, [r0, #-8]
 8007dfc:	3a01      	subs	r2, #1
 8007dfe:	ed10 7a01 	vldr	s14, [r0, #-4]
 8007e02:	f100 0008 	add.w	r0, r0, #8
 8007e06:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007e0a:	ee27 7a07 	vmul.f32	s14, s14, s14
 8007e0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e12:	ece1 7a01 	vstmia	r1!, {s15}
 8007e16:	d1ef      	bne.n	8007df8 <arm_cmplx_mag_squared_f32+0x8c>
 8007e18:	bc70      	pop	{r4, r5, r6}
 8007e1a:	4770      	bx	lr

08007e1c <arm_mult_f32>:
 8007e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e1e:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8007e22:	d033      	beq.n	8007e8c <arm_mult_f32+0x70>
 8007e24:	f100 0610 	add.w	r6, r0, #16
 8007e28:	f101 0510 	add.w	r5, r1, #16
 8007e2c:	f102 0410 	add.w	r4, r2, #16
 8007e30:	4677      	mov	r7, lr
 8007e32:	ed16 7a04 	vldr	s14, [r6, #-16]
 8007e36:	3f01      	subs	r7, #1
 8007e38:	ed15 6a04 	vldr	s12, [r5, #-16]
 8007e3c:	f106 0610 	add.w	r6, r6, #16
 8007e40:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8007e44:	f105 0510 	add.w	r5, r5, #16
 8007e48:	ee27 6a06 	vmul.f32	s12, s14, s12
 8007e4c:	ed55 6a06 	vldr	s13, [r5, #-24]	; 0xffffffe8
 8007e50:	ed16 7a07 	vldr	s14, [r6, #-28]	; 0xffffffe4
 8007e54:	f104 0410 	add.w	r4, r4, #16
 8007e58:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 8007e5c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007e60:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8007e64:	ed04 6a08 	vstr	s12, [r4, #-32]	; 0xffffffe0
 8007e68:	ee27 7a25 	vmul.f32	s14, s14, s11
 8007e6c:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8007e70:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 8007e74:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007e78:	ed04 7a07 	vstr	s14, [r4, #-28]	; 0xffffffe4
 8007e7c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8007e80:	d1d7      	bne.n	8007e32 <arm_mult_f32+0x16>
 8007e82:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8007e86:	4420      	add	r0, r4
 8007e88:	4421      	add	r1, r4
 8007e8a:	4422      	add	r2, r4
 8007e8c:	f013 0303 	ands.w	r3, r3, #3
 8007e90:	d009      	beq.n	8007ea6 <arm_mult_f32+0x8a>
 8007e92:	ecf0 7a01 	vldmia	r0!, {s15}
 8007e96:	3b01      	subs	r3, #1
 8007e98:	ecb1 7a01 	vldmia	r1!, {s14}
 8007e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007ea0:	ece2 7a01 	vstmia	r2!, {s15}
 8007ea4:	d1f5      	bne.n	8007e92 <arm_mult_f32+0x76>
 8007ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ea8 <arm_radix8_butterfly_f32>:
 8007ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eac:	469e      	mov	lr, r3
 8007eae:	1d03      	adds	r3, r0, #4
 8007eb0:	4683      	mov	fp, r0
 8007eb2:	468a      	mov	sl, r1
 8007eb4:	4688      	mov	r8, r1
 8007eb6:	469c      	mov	ip, r3
 8007eb8:	ed2d 8b10 	vpush	{d8-d15}
 8007ebc:	ed9f 9ac4 	vldr	s18, [pc, #784]	; 80081d0 <arm_radix8_butterfly_f32+0x328>
 8007ec0:	b09f      	sub	sp, #124	; 0x7c
 8007ec2:	921c      	str	r2, [sp, #112]	; 0x70
 8007ec4:	931d      	str	r3, [sp, #116]	; 0x74
 8007ec6:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 8007eca:	f04f 0900 	mov.w	r9, #0
 8007ece:	461a      	mov	r2, r3
 8007ed0:	930e      	str	r3, [sp, #56]	; 0x38
 8007ed2:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8007ed6:	0051      	lsls	r1, r2, #1
 8007ed8:	4608      	mov	r0, r1
 8007eda:	9103      	str	r1, [sp, #12]
 8007edc:	00d1      	lsls	r1, r2, #3
 8007ede:	1885      	adds	r5, r0, r2
 8007ee0:	0110      	lsls	r0, r2, #4
 8007ee2:	eb0b 0601 	add.w	r6, fp, r1
 8007ee6:	9101      	str	r1, [sp, #4]
 8007ee8:	18ac      	adds	r4, r5, r2
 8007eea:	9002      	str	r0, [sp, #8]
 8007eec:	1877      	adds	r7, r6, r1
 8007eee:	4611      	mov	r1, r2
 8007ef0:	4422      	add	r2, r4
 8007ef2:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8007ef6:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8007efa:	1850      	adds	r0, r2, r1
 8007efc:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8007f00:	4401      	add	r1, r0
 8007f02:	3204      	adds	r2, #4
 8007f04:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 8007f08:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 8007f0c:	3104      	adds	r1, #4
 8007f0e:	ed1c 7a01 	vldr	s14, [ip, #-4]
 8007f12:	44c1      	add	r9, r8
 8007f14:	edd4 6a00 	vldr	s13, [r4]
 8007f18:	ed97 6a00 	vldr	s12, [r7]
 8007f1c:	45ca      	cmp	sl, r9
 8007f1e:	edd0 7a00 	vldr	s15, [r0]
 8007f22:	ee37 5a66 	vsub.f32	s10, s14, s13
 8007f26:	edd6 5a00 	vldr	s11, [r6]
 8007f2a:	ee37 2a26 	vadd.f32	s4, s14, s13
 8007f2e:	ee76 2a67 	vsub.f32	s5, s12, s15
 8007f32:	edd5 6a00 	vldr	s13, [r5]
 8007f36:	ed12 7a01 	vldr	s14, [r2, #-4]
 8007f3a:	ee76 4a27 	vadd.f32	s9, s12, s15
 8007f3e:	ed11 6a01 	vldr	s12, [r1, #-4]
 8007f42:	ee75 1a87 	vadd.f32	s3, s11, s14
 8007f46:	ee36 4a86 	vadd.f32	s8, s13, s12
 8007f4a:	ee72 7a24 	vadd.f32	s15, s4, s9
 8007f4e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8007f52:	ee76 5ac6 	vsub.f32	s11, s13, s12
 8007f56:	ee31 6a84 	vadd.f32	s12, s3, s8
 8007f5a:	ee32 2a64 	vsub.f32	s4, s4, s9
 8007f5e:	ee77 6a65 	vsub.f32	s13, s14, s11
 8007f62:	ee77 4a86 	vadd.f32	s9, s15, s12
 8007f66:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007f6a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007f6e:	ed4c 4a01 	vstr	s9, [ip, #-4]
 8007f72:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8007f76:	edc4 7a00 	vstr	s15, [r4]
 8007f7a:	ee66 6a89 	vmul.f32	s13, s13, s18
 8007f7e:	edd6 5a01 	vldr	s11, [r6, #4]
 8007f82:	ee27 6a09 	vmul.f32	s12, s14, s18
 8007f86:	edd5 3a01 	vldr	s7, [r5, #4]
 8007f8a:	ed92 4a00 	vldr	s8, [r2]
 8007f8e:	ee35 1a26 	vadd.f32	s2, s10, s13
 8007f92:	edd1 4a00 	vldr	s9, [r1]
 8007f96:	ee75 6a66 	vsub.f32	s13, s10, s13
 8007f9a:	ee35 3ac4 	vsub.f32	s6, s11, s8
 8007f9e:	ed94 0a01 	vldr	s0, [r4, #4]
 8007fa2:	ee73 7ae4 	vsub.f32	s15, s7, s9
 8007fa6:	ed9c 7a00 	vldr	s14, [ip]
 8007faa:	edd0 0a01 	vldr	s1, [r0, #4]
 8007fae:	ee35 4a84 	vadd.f32	s8, s11, s8
 8007fb2:	ed97 5a01 	vldr	s10, [r7, #4]
 8007fb6:	ee73 4aa4 	vadd.f32	s9, s7, s9
 8007fba:	ee73 5a27 	vadd.f32	s11, s6, s15
 8007fbe:	ee77 3a00 	vadd.f32	s7, s14, s0
 8007fc2:	ee33 3a67 	vsub.f32	s6, s6, s15
 8007fc6:	ee37 7a40 	vsub.f32	s14, s14, s0
 8007fca:	ee35 0a20 	vadd.f32	s0, s10, s1
 8007fce:	ee63 7a09 	vmul.f32	s15, s6, s18
 8007fd2:	ee35 5a60 	vsub.f32	s10, s10, s1
 8007fd6:	ee33 3a80 	vadd.f32	s6, s7, s0
 8007fda:	ee74 0a24 	vadd.f32	s1, s8, s9
 8007fde:	ee65 5a89 	vmul.f32	s11, s11, s18
 8007fe2:	ee74 4a64 	vsub.f32	s9, s8, s9
 8007fe6:	ee33 4ac0 	vsub.f32	s8, s7, s0
 8007fea:	ee75 3a25 	vadd.f32	s7, s10, s11
 8007fee:	ee75 5a65 	vsub.f32	s11, s10, s11
 8007ff2:	ee37 5a27 	vadd.f32	s10, s14, s15
 8007ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ffa:	ee32 7a86 	vadd.f32	s14, s5, s12
 8007ffe:	ee32 6ac6 	vsub.f32	s12, s5, s12
 8008002:	ee73 2a20 	vadd.f32	s5, s6, s1
 8008006:	ee33 3a60 	vsub.f32	s6, s6, s1
 800800a:	ee72 0a24 	vadd.f32	s1, s4, s9
 800800e:	edcc 2a00 	vstr	s5, [ip]
 8008012:	ee72 4a64 	vsub.f32	s9, s4, s9
 8008016:	ed84 3a01 	vstr	s6, [r4, #4]
 800801a:	ee74 2a61 	vsub.f32	s5, s8, s3
 800801e:	ee31 3a23 	vadd.f32	s6, s2, s7
 8008022:	edc7 0a00 	vstr	s1, [r7]
 8008026:	ee31 1a63 	vsub.f32	s2, s2, s7
 800802a:	edc0 4a00 	vstr	s9, [r0]
 800802e:	ee76 3aa5 	vadd.f32	s7, s13, s11
 8008032:	edc7 2a01 	vstr	s5, [r7, #4]
 8008036:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800803a:	441c      	add	r4, r3
 800803c:	ee75 5a47 	vsub.f32	s11, s10, s14
 8008040:	449c      	add	ip, r3
 8008042:	ee35 5a07 	vadd.f32	s10, s10, s14
 8008046:	441f      	add	r7, r3
 8008048:	ee37 7ac6 	vsub.f32	s14, s15, s12
 800804c:	ee34 4a21 	vadd.f32	s8, s8, s3
 8008050:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008054:	ed80 4a01 	vstr	s8, [r0, #4]
 8008058:	4418      	add	r0, r3
 800805a:	ed86 3a00 	vstr	s6, [r6]
 800805e:	ed01 1a01 	vstr	s2, [r1, #-4]
 8008062:	ed42 3a01 	vstr	s7, [r2, #-4]
 8008066:	edc5 6a00 	vstr	s13, [r5]
 800806a:	edc6 5a01 	vstr	s11, [r6, #4]
 800806e:	441e      	add	r6, r3
 8008070:	ed81 5a00 	vstr	s10, [r1]
 8008074:	4419      	add	r1, r3
 8008076:	ed82 7a00 	vstr	s14, [r2]
 800807a:	441a      	add	r2, r3
 800807c:	edc5 7a01 	vstr	s15, [r5, #4]
 8008080:	441d      	add	r5, r3
 8008082:	f63f af44 	bhi.w	8007f0e <arm_radix8_butterfly_f32+0x66>
 8008086:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008088:	2f07      	cmp	r7, #7
 800808a:	f240 81e8 	bls.w	800845e <arm_radix8_butterfly_f32+0x5b6>
 800808e:	9903      	ldr	r1, [sp, #12]
 8008090:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 8008094:	9e01      	ldr	r6, [sp, #4]
 8008096:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 800809a:	19ca      	adds	r2, r1, r7
 800809c:	1c4c      	adds	r4, r1, #1
 800809e:	eb05 010e 	add.w	r1, r5, lr
 80080a2:	00ed      	lsls	r5, r5, #3
 80080a4:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 80080a8:	3608      	adds	r6, #8
 80080aa:	950f      	str	r5, [sp, #60]	; 0x3c
 80080ac:	eb01 050e 	add.w	r5, r1, lr
 80080b0:	00c9      	lsls	r1, r1, #3
 80080b2:	443c      	add	r4, r7
 80080b4:	9618      	str	r6, [sp, #96]	; 0x60
 80080b6:	00ee      	lsls	r6, r5, #3
 80080b8:	460f      	mov	r7, r1
 80080ba:	9114      	str	r1, [sp, #80]	; 0x50
 80080bc:	9902      	ldr	r1, [sp, #8]
 80080be:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 80080c2:	9611      	str	r6, [sp, #68]	; 0x44
 80080c4:	00c0      	lsls	r0, r0, #3
 80080c6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80080c8:	3108      	adds	r1, #8
 80080ca:	3404      	adds	r4, #4
 80080cc:	f04f 0901 	mov.w	r9, #1
 80080d0:	9119      	str	r1, [sp, #100]	; 0x64
 80080d2:	eb05 010e 	add.w	r1, r5, lr
 80080d6:	4635      	mov	r5, r6
 80080d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80080da:	9301      	str	r3, [sp, #4]
 80080dc:	443d      	add	r5, r7
 80080de:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80080e0:	9507      	str	r5, [sp, #28]
 80080e2:	eb01 050e 	add.w	r5, r1, lr
 80080e6:	00c9      	lsls	r1, r1, #3
 80080e8:	19f7      	adds	r7, r6, r7
 80080ea:	00ed      	lsls	r5, r5, #3
 80080ec:	9110      	str	r1, [sp, #64]	; 0x40
 80080ee:	00d1      	lsls	r1, r2, #3
 80080f0:	970a      	str	r7, [sp, #40]	; 0x28
 80080f2:	462f      	mov	r7, r5
 80080f4:	9515      	str	r5, [sp, #84]	; 0x54
 80080f6:	0112      	lsls	r2, r2, #4
 80080f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80080fa:	19f4      	adds	r4, r6, r7
 80080fc:	320c      	adds	r2, #12
 80080fe:	3108      	adds	r1, #8
 8008100:	1975      	adds	r5, r6, r5
 8008102:	9408      	str	r4, [sp, #32]
 8008104:	9217      	str	r2, [sp, #92]	; 0x5c
 8008106:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800810a:	9509      	str	r5, [sp, #36]	; 0x24
 800810c:	f100 020c 	add.w	r2, r0, #12
 8008110:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008112:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008114:	1975      	adds	r5, r6, r5
 8008116:	9216      	str	r2, [sp, #88]	; 0x58
 8008118:	1932      	adds	r2, r6, r4
 800811a:	911b      	str	r1, [sp, #108]	; 0x6c
 800811c:	9505      	str	r5, [sp, #20]
 800811e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8008122:	0179      	lsls	r1, r7, #5
 8008124:	9204      	str	r2, [sp, #16]
 8008126:	1972      	adds	r2, r6, r5
 8008128:	9412      	str	r4, [sp, #72]	; 0x48
 800812a:	9513      	str	r5, [sp, #76]	; 0x4c
 800812c:	9206      	str	r2, [sp, #24]
 800812e:	f101 0208 	add.w	r2, r1, #8
 8008132:	921a      	str	r2, [sp, #104]	; 0x68
 8008134:	2200      	movs	r2, #0
 8008136:	f102 0108 	add.w	r1, r2, #8
 800813a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800813c:	46cc      	mov	ip, r9
 800813e:	460f      	mov	r7, r1
 8008140:	910c      	str	r1, [sp, #48]	; 0x30
 8008142:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008144:	eb0b 0e07 	add.w	lr, fp, r7
 8008148:	9f04      	ldr	r7, [sp, #16]
 800814a:	188e      	adds	r6, r1, r2
 800814c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800814e:	edd7 fa00 	vldr	s31, [r7]
 8008152:	9f06      	ldr	r7, [sp, #24]
 8008154:	188d      	adds	r5, r1, r2
 8008156:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008158:	445e      	add	r6, fp
 800815a:	ed97 fa00 	vldr	s30, [r7]
 800815e:	445d      	add	r5, fp
 8008160:	9f05      	ldr	r7, [sp, #20]
 8008162:	188c      	adds	r4, r1, r2
 8008164:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8008166:	edd7 ea00 	vldr	s29, [r7]
 800816a:	445c      	add	r4, fp
 800816c:	9f07      	ldr	r7, [sp, #28]
 800816e:	1888      	adds	r0, r1, r2
 8008170:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008172:	ed97 ea00 	vldr	s28, [r7]
 8008176:	4458      	add	r0, fp
 8008178:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800817a:	4411      	add	r1, r2
 800817c:	441a      	add	r2, r3
 800817e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008180:	edd7 da00 	vldr	s27, [r7]
 8008184:	4459      	add	r1, fp
 8008186:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008188:	445a      	add	r2, fp
 800818a:	930d      	str	r3, [sp, #52]	; 0x34
 800818c:	ed97 da00 	vldr	s26, [r7]
 8008190:	9f08      	ldr	r7, [sp, #32]
 8008192:	edd7 ca00 	vldr	s25, [r7]
 8008196:	9f04      	ldr	r7, [sp, #16]
 8008198:	ed97 ca01 	vldr	s24, [r7, #4]
 800819c:	9f06      	ldr	r7, [sp, #24]
 800819e:	edd7 ba01 	vldr	s23, [r7, #4]
 80081a2:	9f05      	ldr	r7, [sp, #20]
 80081a4:	ed97 ba01 	vldr	s22, [r7, #4]
 80081a8:	9f07      	ldr	r7, [sp, #28]
 80081aa:	edd7 aa01 	vldr	s21, [r7, #4]
 80081ae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80081b0:	ed97 aa01 	vldr	s20, [r7, #4]
 80081b4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80081b6:	9b01      	ldr	r3, [sp, #4]
 80081b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80081bc:	9f08      	ldr	r7, [sp, #32]
 80081be:	edcd 7a02 	vstr	s15, [sp, #8]
 80081c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80081c6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80081c8:	edcd 7a03 	vstr	s15, [sp, #12]
 80081cc:	e002      	b.n	80081d4 <arm_radix8_butterfly_f32+0x32c>
 80081ce:	bf00      	nop
 80081d0:	3f3504f3 	.word	0x3f3504f3
 80081d4:	ed90 2a00 	vldr	s4, [r0]
 80081d8:	44c4      	add	ip, r8
 80081da:	ed96 7a00 	vldr	s14, [r6]
 80081de:	ed94 8a00 	vldr	s16, [r4]
 80081e2:	45e2      	cmp	sl, ip
 80081e4:	ed52 7a01 	vldr	s15, [r2, #-4]
 80081e8:	ed95 5a00 	vldr	s10, [r5]
 80081ec:	ed51 5a01 	vldr	s11, [r1, #-4]
 80081f0:	ee38 6a27 	vadd.f32	s12, s16, s15
 80081f4:	ed9e 1a00 	vldr	s2, [lr]
 80081f8:	ee78 2a67 	vsub.f32	s5, s16, s15
 80081fc:	ed17 4a01 	vldr	s8, [r7, #-4]
 8008200:	ee75 3a25 	vadd.f32	s7, s10, s11
 8008204:	ee31 3a07 	vadd.f32	s6, s2, s14
 8008208:	edde 4a01 	vldr	s9, [lr, #4]
 800820c:	ee72 6a04 	vadd.f32	s13, s4, s8
 8008210:	ee75 5a65 	vsub.f32	s11, s10, s11
 8008214:	ee73 1a06 	vadd.f32	s3, s6, s12
 8008218:	ee33 5aa6 	vadd.f32	s10, s7, s13
 800821c:	ee32 4a44 	vsub.f32	s8, s4, s8
 8008220:	ee31 1a47 	vsub.f32	s2, s2, s14
 8008224:	ee31 7a85 	vadd.f32	s14, s3, s10
 8008228:	ee75 7a84 	vadd.f32	s15, s11, s8
 800822c:	ee33 3a46 	vsub.f32	s6, s6, s12
 8008230:	ed8e 7a00 	vstr	s14, [lr]
 8008234:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8008238:	ee67 7a89 	vmul.f32	s15, s15, s18
 800823c:	ed90 2a01 	vldr	s4, [r0, #4]
 8008240:	ed95 7a01 	vldr	s14, [r5, #4]
 8008244:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8008248:	ed91 6a00 	vldr	s12, [r1]
 800824c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8008250:	edd7 8a00 	vldr	s17, [r7]
 8008254:	ee32 8ae7 	vsub.f32	s16, s5, s15
 8008258:	ee72 5aa7 	vadd.f32	s11, s5, s15
 800825c:	edd2 0a00 	vldr	s1, [r2]
 8008260:	ee72 6a68 	vsub.f32	s13, s4, s17
 8008264:	edd6 7a01 	vldr	s15, [r6, #4]
 8008268:	ee77 2a46 	vsub.f32	s5, s14, s12
 800826c:	ee37 0a06 	vadd.f32	s0, s14, s12
 8008270:	ed94 7a01 	vldr	s14, [r4, #4]
 8008274:	ee32 6a28 	vadd.f32	s12, s4, s17
 8008278:	ee72 9ae6 	vsub.f32	s19, s5, s13
 800827c:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8008280:	ee72 2aa6 	vadd.f32	s5, s5, s13
 8008284:	ee77 6a20 	vadd.f32	s13, s14, s1
 8008288:	ee74 4ae7 	vsub.f32	s9, s9, s15
 800828c:	ee37 7a60 	vsub.f32	s14, s14, s1
 8008290:	ee24 4a09 	vmul.f32	s8, s8, s18
 8008294:	ee70 0a06 	vadd.f32	s1, s0, s12
 8008298:	ee69 7a89 	vmul.f32	s15, s19, s18
 800829c:	ee62 2a89 	vmul.f32	s5, s5, s18
 80082a0:	ee30 6a46 	vsub.f32	s12, s0, s12
 80082a4:	ee32 0a26 	vadd.f32	s0, s4, s13
 80082a8:	ee72 6a66 	vsub.f32	s13, s4, s13
 80082ac:	ee77 8a62 	vsub.f32	s17, s14, s5
 80082b0:	ee34 2aa7 	vadd.f32	s4, s9, s15
 80082b4:	ee74 7ae7 	vsub.f32	s15, s9, s15
 80082b8:	ee77 4a22 	vadd.f32	s9, s14, s5
 80082bc:	ee71 2a04 	vadd.f32	s5, s2, s8
 80082c0:	ee31 7a44 	vsub.f32	s14, s2, s8
 80082c4:	ee30 1a60 	vsub.f32	s2, s0, s1
 80082c8:	ee73 1a06 	vadd.f32	s3, s6, s12
 80082cc:	ee33 6a46 	vsub.f32	s12, s6, s12
 80082d0:	ee36 3ae3 	vsub.f32	s6, s13, s7
 80082d4:	ee37 4ac8 	vsub.f32	s8, s15, s16
 80082d8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80082dc:	ee77 7a88 	vadd.f32	s15, s15, s16
 80082e0:	ee72 3a65 	vsub.f32	s7, s4, s11
 80082e4:	ee2a 8a81 	vmul.f32	s16, s21, s2
 80082e8:	ee72 5a25 	vadd.f32	s11, s4, s11
 80082ec:	ee2e 1a01 	vmul.f32	s2, s28, s2
 80082f0:	ee32 2aa4 	vadd.f32	s4, s5, s9
 80082f4:	ee72 4ae4 	vsub.f32	s9, s5, s9
 80082f8:	ee77 2a28 	vadd.f32	s5, s14, s17
 80082fc:	ee37 7a68 	vsub.f32	s14, s14, s17
 8008300:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8008304:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8008308:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800830c:	ee70 0a20 	vadd.f32	s1, s0, s1
 8008310:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8008314:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8008318:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800831c:	edce 0a01 	vstr	s1, [lr, #4]
 8008320:	ee38 8a88 	vadd.f32	s16, s17, s16
 8008324:	449e      	add	lr, r3
 8008326:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800832a:	ee31 5a45 	vsub.f32	s10, s2, s10
 800832e:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8008332:	ed86 8a00 	vstr	s16, [r6]
 8008336:	ee39 0a80 	vadd.f32	s0, s19, s0
 800833a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800833e:	ed86 5a01 	vstr	s10, [r6, #4]
 8008342:	ee6f 0a82 	vmul.f32	s1, s31, s4
 8008346:	edcd 3a01 	vstr	s7, [sp, #4]
 800834a:	ed9d 5a03 	vldr	s10, [sp, #12]
 800834e:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8008352:	eddd 3a02 	vldr	s7, [sp, #8]
 8008356:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800835a:	ed84 0a00 	vstr	s0, [r4]
 800835e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8008362:	ed84 3a01 	vstr	s6, [r4, #4]
 8008366:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800836a:	ee23 6a86 	vmul.f32	s12, s7, s12
 800836e:	eddd 3a01 	vldr	s7, [sp, #4]
 8008372:	ee25 5a25 	vmul.f32	s10, s10, s11
 8008376:	441e      	add	r6, r3
 8008378:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800837c:	441c      	add	r4, r3
 800837e:	ee6a 1a04 	vmul.f32	s3, s20, s8
 8008382:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8008386:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800838a:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800838e:	ee2c 2a02 	vmul.f32	s4, s24, s4
 8008392:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8008396:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800839a:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800839e:	ee2d 4a84 	vmul.f32	s8, s27, s8
 80083a2:	ee2b 7a07 	vmul.f32	s14, s22, s14
 80083a6:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 80083aa:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80083ae:	ee38 8a01 	vadd.f32	s16, s16, s2
 80083b2:	ee36 6ac6 	vsub.f32	s12, s13, s12
 80083b6:	ee39 5a85 	vadd.f32	s10, s19, s10
 80083ba:	ee75 4ae4 	vsub.f32	s9, s11, s9
 80083be:	ed02 8a01 	vstr	s16, [r2, #-4]
 80083c2:	ee30 0a21 	vadd.f32	s0, s0, s3
 80083c6:	ed82 6a00 	vstr	s12, [r2]
 80083ca:	ee74 2a62 	vsub.f32	s5, s8, s5
 80083ce:	edc5 0a00 	vstr	s1, [r5]
 80083d2:	ee33 3a28 	vadd.f32	s6, s6, s17
 80083d6:	edc5 3a01 	vstr	s7, [r5, #4]
 80083da:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80083de:	ed07 5a01 	vstr	s10, [r7, #-4]
 80083e2:	edc7 4a00 	vstr	s9, [r7]
 80083e6:	441d      	add	r5, r3
 80083e8:	ed01 0a01 	vstr	s0, [r1, #-4]
 80083ec:	441a      	add	r2, r3
 80083ee:	edc1 2a00 	vstr	s5, [r1]
 80083f2:	441f      	add	r7, r3
 80083f4:	ed80 3a00 	vstr	s6, [r0]
 80083f8:	4419      	add	r1, r3
 80083fa:	ed80 7a01 	vstr	s14, [r0, #4]
 80083fe:	4418      	add	r0, r3
 8008400:	f63f aee8 	bhi.w	80081d4 <arm_radix8_butterfly_f32+0x32c>
 8008404:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008406:	f109 0901 	add.w	r9, r9, #1
 800840a:	9301      	str	r3, [sp, #4]
 800840c:	9b04      	ldr	r3, [sp, #16]
 800840e:	4413      	add	r3, r2
 8008410:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008412:	9304      	str	r3, [sp, #16]
 8008414:	9b06      	ldr	r3, [sp, #24]
 8008416:	4413      	add	r3, r2
 8008418:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800841a:	9306      	str	r3, [sp, #24]
 800841c:	9b05      	ldr	r3, [sp, #20]
 800841e:	4413      	add	r3, r2
 8008420:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008422:	9305      	str	r3, [sp, #20]
 8008424:	9b07      	ldr	r3, [sp, #28]
 8008426:	4413      	add	r3, r2
 8008428:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800842a:	9307      	str	r3, [sp, #28]
 800842c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800842e:	4413      	add	r3, r2
 8008430:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008432:	930a      	str	r3, [sp, #40]	; 0x28
 8008434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008436:	4413      	add	r3, r2
 8008438:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800843a:	9309      	str	r3, [sp, #36]	; 0x24
 800843c:	9b08      	ldr	r3, [sp, #32]
 800843e:	4413      	add	r3, r2
 8008440:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008442:	9308      	str	r3, [sp, #32]
 8008444:	3208      	adds	r2, #8
 8008446:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008448:	920b      	str	r2, [sp, #44]	; 0x2c
 800844a:	4599      	cmp	r9, r3
 800844c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800844e:	f47f ae72 	bne.w	8008136 <arm_radix8_butterfly_f32+0x28e>
 8008452:	f8bd e048 	ldrh.w	lr, [sp, #72]	; 0x48
 8008456:	46c8      	mov	r8, r9
 8008458:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
 800845c:	e533      	b.n	8007ec6 <arm_radix8_butterfly_f32+0x1e>
 800845e:	b01f      	add	sp, #124	; 0x7c
 8008460:	ecbd 8b10 	vpop	{d8-d15}
 8008464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008468 <ai_platform_network_get_error>:
 8008468:	b118      	cbz	r0, 8008472 <ai_platform_network_get_error+0xa>
 800846a:	4b3c      	ldr	r3, [pc, #240]	; (800855c <ai_platform_network_get_error+0xf4>)
 800846c:	6802      	ldr	r2, [r0, #0]
 800846e:	429a      	cmp	r2, r3
 8008470:	d02a      	beq.n	80084c8 <ai_platform_network_get_error+0x60>
 8008472:	4a3b      	ldr	r2, [pc, #236]	; (8008560 <ai_platform_network_get_error+0xf8>)
 8008474:	493b      	ldr	r1, [pc, #236]	; (8008564 <ai_platform_network_get_error+0xfc>)
 8008476:	6813      	ldr	r3, [r2, #0]
 8008478:	f023 0301 	bic.w	r3, r3, #1
 800847c:	6013      	str	r3, [r2, #0]
 800847e:	680b      	ldr	r3, [r1, #0]
 8008480:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8008484:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008488:	185a      	adds	r2, r3, r1
 800848a:	2a01      	cmp	r2, #1
 800848c:	d90d      	bls.n	80084aa <ai_platform_network_get_error+0x42>
 800848e:	f240 4249 	movw	r2, #1097	; 0x449
 8008492:	4293      	cmp	r3, r2
 8008494:	d009      	beq.n	80084aa <ai_platform_network_get_error+0x42>
 8008496:	4b34      	ldr	r3, [pc, #208]	; (8008568 <ai_platform_network_get_error+0x100>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800849e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80084a2:	d02d      	beq.n	8008500 <ai_platform_network_get_error+0x98>
 80084a4:	f241 0010 	movw	r0, #4112	; 0x1010
 80084a8:	4770      	bx	lr
 80084aa:	4b30      	ldr	r3, [pc, #192]	; (800856c <ai_platform_network_get_error+0x104>)
 80084ac:	2201      	movs	r2, #1
 80084ae:	4619      	mov	r1, r3
 80084b0:	601a      	str	r2, [r3, #0]
 80084b2:	680b      	ldr	r3, [r1, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1fc      	bne.n	80084b2 <ai_platform_network_get_error+0x4a>
 80084b8:	4b2d      	ldr	r3, [pc, #180]	; (8008570 <ai_platform_network_get_error+0x108>)
 80084ba:	492e      	ldr	r1, [pc, #184]	; (8008574 <ai_platform_network_get_error+0x10c>)
 80084bc:	4a2e      	ldr	r2, [pc, #184]	; (8008578 <ai_platform_network_get_error+0x110>)
 80084be:	6019      	str	r1, [r3, #0]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d0ee      	beq.n	80084a4 <ai_platform_network_get_error+0x3c>
 80084c6:	e7fe      	b.n	80084c6 <ai_platform_network_get_error+0x5e>
 80084c8:	4a25      	ldr	r2, [pc, #148]	; (8008560 <ai_platform_network_get_error+0xf8>)
 80084ca:	4926      	ldr	r1, [pc, #152]	; (8008564 <ai_platform_network_get_error+0xfc>)
 80084cc:	6813      	ldr	r3, [r2, #0]
 80084ce:	f023 0301 	bic.w	r3, r3, #1
 80084d2:	6013      	str	r3, [r2, #0]
 80084d4:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80084d8:	680b      	ldr	r3, [r1, #0]
 80084da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084de:	189a      	adds	r2, r3, r2
 80084e0:	2a01      	cmp	r2, #1
 80084e2:	d92b      	bls.n	800853c <ai_platform_network_get_error+0xd4>
 80084e4:	f240 4249 	movw	r2, #1097	; 0x449
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d027      	beq.n	800853c <ai_platform_network_get_error+0xd4>
 80084ec:	4b1e      	ldr	r3, [pc, #120]	; (8008568 <ai_platform_network_get_error+0x100>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084f4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80084f8:	d011      	beq.n	800851e <ai_platform_network_get_error+0xb6>
 80084fa:	3010      	adds	r0, #16
 80084fc:	f000 bd96 	b.w	800902c <core_get_error>
 8008500:	4b1e      	ldr	r3, [pc, #120]	; (800857c <ai_platform_network_get_error+0x114>)
 8008502:	2201      	movs	r2, #1
 8008504:	4619      	mov	r1, r3
 8008506:	601a      	str	r2, [r3, #0]
 8008508:	680b      	ldr	r3, [r1, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1fc      	bne.n	8008508 <ai_platform_network_get_error+0xa0>
 800850e:	4b1c      	ldr	r3, [pc, #112]	; (8008580 <ai_platform_network_get_error+0x118>)
 8008510:	4918      	ldr	r1, [pc, #96]	; (8008574 <ai_platform_network_get_error+0x10c>)
 8008512:	4a19      	ldr	r2, [pc, #100]	; (8008578 <ai_platform_network_get_error+0x110>)
 8008514:	6019      	str	r1, [r3, #0]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4293      	cmp	r3, r2
 800851a:	d0c3      	beq.n	80084a4 <ai_platform_network_get_error+0x3c>
 800851c:	e7fe      	b.n	800851c <ai_platform_network_get_error+0xb4>
 800851e:	4b17      	ldr	r3, [pc, #92]	; (800857c <ai_platform_network_get_error+0x114>)
 8008520:	2201      	movs	r2, #1
 8008522:	4619      	mov	r1, r3
 8008524:	601a      	str	r2, [r3, #0]
 8008526:	680b      	ldr	r3, [r1, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1fc      	bne.n	8008526 <ai_platform_network_get_error+0xbe>
 800852c:	4b14      	ldr	r3, [pc, #80]	; (8008580 <ai_platform_network_get_error+0x118>)
 800852e:	4911      	ldr	r1, [pc, #68]	; (8008574 <ai_platform_network_get_error+0x10c>)
 8008530:	4a11      	ldr	r2, [pc, #68]	; (8008578 <ai_platform_network_get_error+0x110>)
 8008532:	6019      	str	r1, [r3, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4293      	cmp	r3, r2
 8008538:	d0df      	beq.n	80084fa <ai_platform_network_get_error+0x92>
 800853a:	e7fe      	b.n	800853a <ai_platform_network_get_error+0xd2>
 800853c:	4b0b      	ldr	r3, [pc, #44]	; (800856c <ai_platform_network_get_error+0x104>)
 800853e:	2201      	movs	r2, #1
 8008540:	4619      	mov	r1, r3
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	680b      	ldr	r3, [r1, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1fc      	bne.n	8008544 <ai_platform_network_get_error+0xdc>
 800854a:	4b09      	ldr	r3, [pc, #36]	; (8008570 <ai_platform_network_get_error+0x108>)
 800854c:	4909      	ldr	r1, [pc, #36]	; (8008574 <ai_platform_network_get_error+0x10c>)
 800854e:	4a0a      	ldr	r2, [pc, #40]	; (8008578 <ai_platform_network_get_error+0x110>)
 8008550:	6019      	str	r1, [r3, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4293      	cmp	r3, r2
 8008556:	d0d0      	beq.n	80084fa <ai_platform_network_get_error+0x92>
 8008558:	e7fe      	b.n	8008558 <ai_platform_network_get_error+0xf0>
 800855a:	bf00      	nop
 800855c:	a1c00100 	.word	0xa1c00100
 8008560:	e0002000 	.word	0xe0002000
 8008564:	e0042000 	.word	0xe0042000
 8008568:	5c001000 	.word	0x5c001000
 800856c:	40023008 	.word	0x40023008
 8008570:	40023000 	.word	0x40023000
 8008574:	f407a5c2 	.word	0xf407a5c2
 8008578:	b5e8b5cd 	.word	0xb5e8b5cd
 800857c:	58024c08 	.word	0x58024c08
 8008580:	58024c00 	.word	0x58024c00

08008584 <ai_platform_network_create>:
 8008584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008586:	4d36      	ldr	r5, [pc, #216]	; (8008660 <ai_platform_network_create+0xdc>)
 8008588:	b083      	sub	sp, #12
 800858a:	4e36      	ldr	r6, [pc, #216]	; (8008664 <ai_platform_network_create+0xe0>)
 800858c:	6829      	ldr	r1, [r5, #0]
 800858e:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8008592:	f021 0101 	bic.w	r1, r1, #1
 8008596:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800859a:	6029      	str	r1, [r5, #0]
 800859c:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 80085a0:	6831      	ldr	r1, [r6, #0]
 80085a2:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80085a6:	194d      	adds	r5, r1, r5
 80085a8:	2d01      	cmp	r5, #1
 80085aa:	d92f      	bls.n	800860c <ai_platform_network_create+0x88>
 80085ac:	f240 4549 	movw	r5, #1097	; 0x449
 80085b0:	42a9      	cmp	r1, r5
 80085b2:	d02b      	beq.n	800860c <ai_platform_network_create+0x88>
 80085b4:	492c      	ldr	r1, [pc, #176]	; (8008668 <ai_platform_network_create+0xe4>)
 80085b6:	6809      	ldr	r1, [r1, #0]
 80085b8:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80085bc:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 80085c0:	d015      	beq.n	80085ee <ai_platform_network_create+0x6a>
 80085c2:	2800      	cmp	r0, #0
 80085c4:	d031      	beq.n	800862a <ai_platform_network_create+0xa6>
 80085c6:	461e      	mov	r6, r3
 80085c8:	4613      	mov	r3, r2
 80085ca:	4a28      	ldr	r2, [pc, #160]	; (800866c <ai_platform_network_create+0xe8>)
 80085cc:	4605      	mov	r5, r0
 80085ce:	601a      	str	r2, [r3, #0]
 80085d0:	6003      	str	r3, [r0, #0]
 80085d2:	f000 fd29 	bl	8009028 <core_init>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d02b      	beq.n	8008632 <ai_platform_network_create+0xae>
 80085da:	0223      	lsls	r3, r4, #8
 80085dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80085e0:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 80085e4:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 80085e8:	d92e      	bls.n	8008648 <ai_platform_network_create+0xc4>
 80085ea:	2301      	movs	r3, #1
 80085ec:	e022      	b.n	8008634 <ai_platform_network_create+0xb0>
 80085ee:	4920      	ldr	r1, [pc, #128]	; (8008670 <ai_platform_network_create+0xec>)
 80085f0:	2501      	movs	r5, #1
 80085f2:	460e      	mov	r6, r1
 80085f4:	600d      	str	r5, [r1, #0]
 80085f6:	6831      	ldr	r1, [r6, #0]
 80085f8:	2900      	cmp	r1, #0
 80085fa:	d1fc      	bne.n	80085f6 <ai_platform_network_create+0x72>
 80085fc:	491d      	ldr	r1, [pc, #116]	; (8008674 <ai_platform_network_create+0xf0>)
 80085fe:	4e1e      	ldr	r6, [pc, #120]	; (8008678 <ai_platform_network_create+0xf4>)
 8008600:	4d1e      	ldr	r5, [pc, #120]	; (800867c <ai_platform_network_create+0xf8>)
 8008602:	600e      	str	r6, [r1, #0]
 8008604:	6809      	ldr	r1, [r1, #0]
 8008606:	42a9      	cmp	r1, r5
 8008608:	d0db      	beq.n	80085c2 <ai_platform_network_create+0x3e>
 800860a:	e7fe      	b.n	800860a <ai_platform_network_create+0x86>
 800860c:	491c      	ldr	r1, [pc, #112]	; (8008680 <ai_platform_network_create+0xfc>)
 800860e:	2501      	movs	r5, #1
 8008610:	460e      	mov	r6, r1
 8008612:	600d      	str	r5, [r1, #0]
 8008614:	6831      	ldr	r1, [r6, #0]
 8008616:	2900      	cmp	r1, #0
 8008618:	d1fc      	bne.n	8008614 <ai_platform_network_create+0x90>
 800861a:	491a      	ldr	r1, [pc, #104]	; (8008684 <ai_platform_network_create+0x100>)
 800861c:	4e16      	ldr	r6, [pc, #88]	; (8008678 <ai_platform_network_create+0xf4>)
 800861e:	4d17      	ldr	r5, [pc, #92]	; (800867c <ai_platform_network_create+0xf8>)
 8008620:	600e      	str	r6, [r1, #0]
 8008622:	6809      	ldr	r1, [r1, #0]
 8008624:	42a9      	cmp	r1, r5
 8008626:	d0cc      	beq.n	80085c2 <ai_platform_network_create+0x3e>
 8008628:	e7fe      	b.n	8008628 <ai_platform_network_create+0xa4>
 800862a:	f241 0010 	movw	r0, #4112	; 0x1010
 800862e:	b003      	add	sp, #12
 8008630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008632:	2330      	movs	r3, #48	; 0x30
 8008634:	2100      	movs	r1, #0
 8008636:	2210      	movs	r2, #16
 8008638:	6029      	str	r1, [r5, #0]
 800863a:	2000      	movs	r0, #0
 800863c:	f363 0007 	bfi	r0, r3, #0, #8
 8008640:	f362 201f 	bfi	r0, r2, #8, #24
 8008644:	b003      	add	sp, #12
 8008646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008648:	4b0f      	ldr	r3, [pc, #60]	; (8008688 <ai_platform_network_create+0x104>)
 800864a:	a802      	add	r0, sp, #8
 800864c:	f840 3d04 	str.w	r3, [r0, #-4]!
 8008650:	f002 fb22 	bl	800ac98 <ai_check_custom_types>
 8008654:	b110      	cbz	r0, 800865c <ai_platform_network_create+0xd8>
 8008656:	2200      	movs	r2, #0
 8008658:	4613      	mov	r3, r2
 800865a:	e7ee      	b.n	800863a <ai_platform_network_create+0xb6>
 800865c:	2302      	movs	r3, #2
 800865e:	e7e9      	b.n	8008634 <ai_platform_network_create+0xb0>
 8008660:	e0002000 	.word	0xe0002000
 8008664:	e0042000 	.word	0xe0042000
 8008668:	5c001000 	.word	0x5c001000
 800866c:	a1c00100 	.word	0xa1c00100
 8008670:	58024c08 	.word	0x58024c08
 8008674:	58024c00 	.word	0x58024c00
 8008678:	f407a5c2 	.word	0xf407a5c2
 800867c:	b5e8b5cd 	.word	0xb5e8b5cd
 8008680:	40023008 	.word	0x40023008
 8008684:	40023000 	.word	0x40023000
 8008688:	84048403 	.word	0x84048403

0800868c <ai_platform_network_destroy>:
 800868c:	b118      	cbz	r0, 8008696 <ai_platform_network_destroy+0xa>
 800868e:	4b3a      	ldr	r3, [pc, #232]	; (8008778 <ai_platform_network_destroy+0xec>)
 8008690:	6802      	ldr	r2, [r0, #0]
 8008692:	429a      	cmp	r2, r3
 8008694:	d037      	beq.n	8008706 <ai_platform_network_destroy+0x7a>
 8008696:	4a39      	ldr	r2, [pc, #228]	; (800877c <ai_platform_network_destroy+0xf0>)
 8008698:	4939      	ldr	r1, [pc, #228]	; (8008780 <ai_platform_network_destroy+0xf4>)
 800869a:	6813      	ldr	r3, [r2, #0]
 800869c:	f023 0301 	bic.w	r3, r3, #1
 80086a0:	6013      	str	r3, [r2, #0]
 80086a2:	680b      	ldr	r3, [r1, #0]
 80086a4:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80086a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086ac:	185a      	adds	r2, r3, r1
 80086ae:	2a01      	cmp	r2, #1
 80086b0:	d90b      	bls.n	80086ca <ai_platform_network_destroy+0x3e>
 80086b2:	f240 4249 	movw	r2, #1097	; 0x449
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d007      	beq.n	80086ca <ai_platform_network_destroy+0x3e>
 80086ba:	4b32      	ldr	r3, [pc, #200]	; (8008784 <ai_platform_network_destroy+0xf8>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086c2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80086c6:	d00f      	beq.n	80086e8 <ai_platform_network_destroy+0x5c>
 80086c8:	4770      	bx	lr
 80086ca:	4b2f      	ldr	r3, [pc, #188]	; (8008788 <ai_platform_network_destroy+0xfc>)
 80086cc:	2201      	movs	r2, #1
 80086ce:	4619      	mov	r1, r3
 80086d0:	601a      	str	r2, [r3, #0]
 80086d2:	680b      	ldr	r3, [r1, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d1fc      	bne.n	80086d2 <ai_platform_network_destroy+0x46>
 80086d8:	4b2c      	ldr	r3, [pc, #176]	; (800878c <ai_platform_network_destroy+0x100>)
 80086da:	492d      	ldr	r1, [pc, #180]	; (8008790 <ai_platform_network_destroy+0x104>)
 80086dc:	4a2d      	ldr	r2, [pc, #180]	; (8008794 <ai_platform_network_destroy+0x108>)
 80086de:	6019      	str	r1, [r3, #0]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d0f0      	beq.n	80086c8 <ai_platform_network_destroy+0x3c>
 80086e6:	e7fe      	b.n	80086e6 <ai_platform_network_destroy+0x5a>
 80086e8:	4b2b      	ldr	r3, [pc, #172]	; (8008798 <ai_platform_network_destroy+0x10c>)
 80086ea:	2201      	movs	r2, #1
 80086ec:	4619      	mov	r1, r3
 80086ee:	601a      	str	r2, [r3, #0]
 80086f0:	680b      	ldr	r3, [r1, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1fc      	bne.n	80086f0 <ai_platform_network_destroy+0x64>
 80086f6:	4b29      	ldr	r3, [pc, #164]	; (800879c <ai_platform_network_destroy+0x110>)
 80086f8:	4925      	ldr	r1, [pc, #148]	; (8008790 <ai_platform_network_destroy+0x104>)
 80086fa:	4a26      	ldr	r2, [pc, #152]	; (8008794 <ai_platform_network_destroy+0x108>)
 80086fc:	6019      	str	r1, [r3, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4293      	cmp	r3, r2
 8008702:	d0e1      	beq.n	80086c8 <ai_platform_network_destroy+0x3c>
 8008704:	e7fe      	b.n	8008704 <ai_platform_network_destroy+0x78>
 8008706:	4a1d      	ldr	r2, [pc, #116]	; (800877c <ai_platform_network_destroy+0xf0>)
 8008708:	491d      	ldr	r1, [pc, #116]	; (8008780 <ai_platform_network_destroy+0xf4>)
 800870a:	6813      	ldr	r3, [r2, #0]
 800870c:	f023 0301 	bic.w	r3, r3, #1
 8008710:	6013      	str	r3, [r2, #0]
 8008712:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8008716:	680b      	ldr	r3, [r1, #0]
 8008718:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800871c:	189a      	adds	r2, r3, r2
 800871e:	2a01      	cmp	r2, #1
 8008720:	d90c      	bls.n	800873c <ai_platform_network_destroy+0xb0>
 8008722:	f240 4249 	movw	r2, #1097	; 0x449
 8008726:	4293      	cmp	r3, r2
 8008728:	d008      	beq.n	800873c <ai_platform_network_destroy+0xb0>
 800872a:	4b16      	ldr	r3, [pc, #88]	; (8008784 <ai_platform_network_destroy+0xf8>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008732:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008736:	d010      	beq.n	800875a <ai_platform_network_destroy+0xce>
 8008738:	2000      	movs	r0, #0
 800873a:	4770      	bx	lr
 800873c:	4b12      	ldr	r3, [pc, #72]	; (8008788 <ai_platform_network_destroy+0xfc>)
 800873e:	2201      	movs	r2, #1
 8008740:	4619      	mov	r1, r3
 8008742:	601a      	str	r2, [r3, #0]
 8008744:	680b      	ldr	r3, [r1, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d1fc      	bne.n	8008744 <ai_platform_network_destroy+0xb8>
 800874a:	4b10      	ldr	r3, [pc, #64]	; (800878c <ai_platform_network_destroy+0x100>)
 800874c:	4910      	ldr	r1, [pc, #64]	; (8008790 <ai_platform_network_destroy+0x104>)
 800874e:	4a11      	ldr	r2, [pc, #68]	; (8008794 <ai_platform_network_destroy+0x108>)
 8008750:	6019      	str	r1, [r3, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4293      	cmp	r3, r2
 8008756:	d0ef      	beq.n	8008738 <ai_platform_network_destroy+0xac>
 8008758:	e7fe      	b.n	8008758 <ai_platform_network_destroy+0xcc>
 800875a:	4b0f      	ldr	r3, [pc, #60]	; (8008798 <ai_platform_network_destroy+0x10c>)
 800875c:	2201      	movs	r2, #1
 800875e:	4619      	mov	r1, r3
 8008760:	601a      	str	r2, [r3, #0]
 8008762:	680b      	ldr	r3, [r1, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1fc      	bne.n	8008762 <ai_platform_network_destroy+0xd6>
 8008768:	4b0c      	ldr	r3, [pc, #48]	; (800879c <ai_platform_network_destroy+0x110>)
 800876a:	4909      	ldr	r1, [pc, #36]	; (8008790 <ai_platform_network_destroy+0x104>)
 800876c:	4a09      	ldr	r2, [pc, #36]	; (8008794 <ai_platform_network_destroy+0x108>)
 800876e:	6019      	str	r1, [r3, #0]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4293      	cmp	r3, r2
 8008774:	d0e0      	beq.n	8008738 <ai_platform_network_destroy+0xac>
 8008776:	e7fe      	b.n	8008776 <ai_platform_network_destroy+0xea>
 8008778:	a1c00100 	.word	0xa1c00100
 800877c:	e0002000 	.word	0xe0002000
 8008780:	e0042000 	.word	0xe0042000
 8008784:	5c001000 	.word	0x5c001000
 8008788:	40023008 	.word	0x40023008
 800878c:	40023000 	.word	0x40023000
 8008790:	f407a5c2 	.word	0xf407a5c2
 8008794:	b5e8b5cd 	.word	0xb5e8b5cd
 8008798:	58024c08 	.word	0x58024c08
 800879c:	58024c00 	.word	0x58024c00

080087a0 <ai_platform_network_init>:
 80087a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d05e      	beq.n	8008864 <ai_platform_network_init+0xc4>
 80087a6:	4b68      	ldr	r3, [pc, #416]	; (8008948 <ai_platform_network_init+0x1a8>)
 80087a8:	6802      	ldr	r2, [r0, #0]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d15a      	bne.n	8008864 <ai_platform_network_init+0xc4>
 80087ae:	4a67      	ldr	r2, [pc, #412]	; (800894c <ai_platform_network_init+0x1ac>)
 80087b0:	4c67      	ldr	r4, [pc, #412]	; (8008950 <ai_platform_network_init+0x1b0>)
 80087b2:	6813      	ldr	r3, [r2, #0]
 80087b4:	f023 0301 	bic.w	r3, r3, #1
 80087b8:	6013      	str	r3, [r2, #0]
 80087ba:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80087c4:	189a      	adds	r2, r3, r2
 80087c6:	2a01      	cmp	r2, #1
 80087c8:	d93d      	bls.n	8008846 <ai_platform_network_init+0xa6>
 80087ca:	f240 4249 	movw	r2, #1097	; 0x449
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d039      	beq.n	8008846 <ai_platform_network_init+0xa6>
 80087d2:	4b60      	ldr	r3, [pc, #384]	; (8008954 <ai_platform_network_init+0x1b4>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80087da:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80087de:	d06b      	beq.n	80088b8 <ai_platform_network_init+0x118>
 80087e0:	4605      	mov	r5, r0
 80087e2:	460c      	mov	r4, r1
 80087e4:	2900      	cmp	r1, #0
 80087e6:	f000 80a8 	beq.w	800893a <ai_platform_network_init+0x19a>
 80087ea:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 80087ec:	690e      	ldr	r6, [r1, #16]
 80087ee:	2f00      	cmp	r7, #0
 80087f0:	f000 8092 	beq.w	8008918 <ai_platform_network_init+0x178>
 80087f4:	2e00      	cmp	r6, #0
 80087f6:	d07d      	beq.n	80088f4 <ai_platform_network_init+0x154>
 80087f8:	f104 0718 	add.w	r7, r4, #24
 80087fc:	f105 0c18 	add.w	ip, r5, #24
 8008800:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8008804:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008806:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800880a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800880e:	2403      	movs	r4, #3
 8008810:	e88c 0003 	stmia.w	ip, {r0, r1}
 8008814:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008816:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008818:	e897 0003 	ldmia.w	r7, {r0, r1}
 800881c:	e886 0003 	stmia.w	r6, {r0, r1}
 8008820:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8008822:	60ec      	str	r4, [r5, #12]
 8008824:	b16a      	cbz	r2, 8008842 <ai_platform_network_init+0xa2>
 8008826:	68d3      	ldr	r3, [r2, #12]
 8008828:	6095      	str	r5, [r2, #8]
 800882a:	b153      	cbz	r3, 8008842 <ai_platform_network_init+0xa2>
 800882c:	429a      	cmp	r2, r3
 800882e:	d104      	bne.n	800883a <ai_platform_network_init+0x9a>
 8008830:	e007      	b.n	8008842 <ai_platform_network_init+0xa2>
 8008832:	429a      	cmp	r2, r3
 8008834:	4613      	mov	r3, r2
 8008836:	d004      	beq.n	8008842 <ai_platform_network_init+0xa2>
 8008838:	b11a      	cbz	r2, 8008842 <ai_platform_network_init+0xa2>
 800883a:	68da      	ldr	r2, [r3, #12]
 800883c:	609d      	str	r5, [r3, #8]
 800883e:	2a00      	cmp	r2, #0
 8008840:	d1f7      	bne.n	8008832 <ai_platform_network_init+0x92>
 8008842:	4628      	mov	r0, r5
 8008844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008846:	4b44      	ldr	r3, [pc, #272]	; (8008958 <ai_platform_network_init+0x1b8>)
 8008848:	2201      	movs	r2, #1
 800884a:	461c      	mov	r4, r3
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	6823      	ldr	r3, [r4, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1fc      	bne.n	800884e <ai_platform_network_init+0xae>
 8008854:	4b41      	ldr	r3, [pc, #260]	; (800895c <ai_platform_network_init+0x1bc>)
 8008856:	4c42      	ldr	r4, [pc, #264]	; (8008960 <ai_platform_network_init+0x1c0>)
 8008858:	4a42      	ldr	r2, [pc, #264]	; (8008964 <ai_platform_network_init+0x1c4>)
 800885a:	601c      	str	r4, [r3, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4293      	cmp	r3, r2
 8008860:	d0be      	beq.n	80087e0 <ai_platform_network_init+0x40>
 8008862:	e7fe      	b.n	8008862 <ai_platform_network_init+0xc2>
 8008864:	4a39      	ldr	r2, [pc, #228]	; (800894c <ai_platform_network_init+0x1ac>)
 8008866:	493a      	ldr	r1, [pc, #232]	; (8008950 <ai_platform_network_init+0x1b0>)
 8008868:	6813      	ldr	r3, [r2, #0]
 800886a:	f023 0301 	bic.w	r3, r3, #1
 800886e:	6013      	str	r3, [r2, #0]
 8008870:	680b      	ldr	r3, [r1, #0]
 8008872:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8008876:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800887a:	185a      	adds	r2, r3, r1
 800887c:	2a01      	cmp	r2, #1
 800887e:	d90c      	bls.n	800889a <ai_platform_network_init+0xfa>
 8008880:	f240 4249 	movw	r2, #1097	; 0x449
 8008884:	4293      	cmp	r3, r2
 8008886:	d008      	beq.n	800889a <ai_platform_network_init+0xfa>
 8008888:	4b32      	ldr	r3, [pc, #200]	; (8008954 <ai_platform_network_init+0x1b4>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008890:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008894:	d01f      	beq.n	80088d6 <ai_platform_network_init+0x136>
 8008896:	2000      	movs	r0, #0
 8008898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800889a:	4b2f      	ldr	r3, [pc, #188]	; (8008958 <ai_platform_network_init+0x1b8>)
 800889c:	2201      	movs	r2, #1
 800889e:	4619      	mov	r1, r3
 80088a0:	601a      	str	r2, [r3, #0]
 80088a2:	680b      	ldr	r3, [r1, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1fc      	bne.n	80088a2 <ai_platform_network_init+0x102>
 80088a8:	4b2c      	ldr	r3, [pc, #176]	; (800895c <ai_platform_network_init+0x1bc>)
 80088aa:	492d      	ldr	r1, [pc, #180]	; (8008960 <ai_platform_network_init+0x1c0>)
 80088ac:	4a2d      	ldr	r2, [pc, #180]	; (8008964 <ai_platform_network_init+0x1c4>)
 80088ae:	6019      	str	r1, [r3, #0]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d0ef      	beq.n	8008896 <ai_platform_network_init+0xf6>
 80088b6:	e7fe      	b.n	80088b6 <ai_platform_network_init+0x116>
 80088b8:	4b2b      	ldr	r3, [pc, #172]	; (8008968 <ai_platform_network_init+0x1c8>)
 80088ba:	2201      	movs	r2, #1
 80088bc:	461c      	mov	r4, r3
 80088be:	601a      	str	r2, [r3, #0]
 80088c0:	6823      	ldr	r3, [r4, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1fc      	bne.n	80088c0 <ai_platform_network_init+0x120>
 80088c6:	4b29      	ldr	r3, [pc, #164]	; (800896c <ai_platform_network_init+0x1cc>)
 80088c8:	4c25      	ldr	r4, [pc, #148]	; (8008960 <ai_platform_network_init+0x1c0>)
 80088ca:	4a26      	ldr	r2, [pc, #152]	; (8008964 <ai_platform_network_init+0x1c4>)
 80088cc:	601c      	str	r4, [r3, #0]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d085      	beq.n	80087e0 <ai_platform_network_init+0x40>
 80088d4:	e7fe      	b.n	80088d4 <ai_platform_network_init+0x134>
 80088d6:	4b24      	ldr	r3, [pc, #144]	; (8008968 <ai_platform_network_init+0x1c8>)
 80088d8:	2201      	movs	r2, #1
 80088da:	4619      	mov	r1, r3
 80088dc:	601a      	str	r2, [r3, #0]
 80088de:	680b      	ldr	r3, [r1, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1fc      	bne.n	80088de <ai_platform_network_init+0x13e>
 80088e4:	4b21      	ldr	r3, [pc, #132]	; (800896c <ai_platform_network_init+0x1cc>)
 80088e6:	491e      	ldr	r1, [pc, #120]	; (8008960 <ai_platform_network_init+0x1c0>)
 80088e8:	4a1e      	ldr	r2, [pc, #120]	; (8008964 <ai_platform_network_init+0x1c4>)
 80088ea:	6019      	str	r1, [r3, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d0d1      	beq.n	8008896 <ai_platform_network_init+0xf6>
 80088f2:	e7fe      	b.n	80088f2 <ai_platform_network_init+0x152>
 80088f4:	8921      	ldrh	r1, [r4, #8]
 80088f6:	88e2      	ldrh	r2, [r4, #6]
 80088f8:	68e3      	ldr	r3, [r4, #12]
 80088fa:	fb02 f201 	mul.w	r2, r2, r1
 80088fe:	fb03 f302 	mul.w	r3, r3, r2
 8008902:	2b00      	cmp	r3, #0
 8008904:	f43f af78 	beq.w	80087f8 <ai_platform_network_init+0x58>
 8008908:	f105 0010 	add.w	r0, r5, #16
 800890c:	2212      	movs	r2, #18
 800890e:	2110      	movs	r1, #16
 8008910:	f000 fb92 	bl	8009038 <core_set_error>
 8008914:	4630      	mov	r0, r6
 8008916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008918:	8c09      	ldrh	r1, [r1, #32]
 800891a:	8be2      	ldrh	r2, [r4, #30]
 800891c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800891e:	fb02 f201 	mul.w	r2, r2, r1
 8008922:	fb03 f302 	mul.w	r3, r3, r2
 8008926:	2b00      	cmp	r3, #0
 8008928:	f43f af64 	beq.w	80087f4 <ai_platform_network_init+0x54>
 800892c:	2213      	movs	r2, #19
 800892e:	2110      	movs	r1, #16
 8008930:	3010      	adds	r0, #16
 8008932:	f000 fb81 	bl	8009038 <core_set_error>
 8008936:	4638      	mov	r0, r7
 8008938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800893a:	2211      	movs	r2, #17
 800893c:	2110      	movs	r1, #16
 800893e:	3010      	adds	r0, #16
 8008940:	f000 fb7a 	bl	8009038 <core_set_error>
 8008944:	4620      	mov	r0, r4
 8008946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008948:	a1c00100 	.word	0xa1c00100
 800894c:	e0002000 	.word	0xe0002000
 8008950:	e0042000 	.word	0xe0042000
 8008954:	5c001000 	.word	0x5c001000
 8008958:	40023008 	.word	0x40023008
 800895c:	40023000 	.word	0x40023000
 8008960:	f407a5c2 	.word	0xf407a5c2
 8008964:	b5e8b5cd 	.word	0xb5e8b5cd
 8008968:	58024c08 	.word	0x58024c08
 800896c:	58024c00 	.word	0x58024c00

08008970 <ai_platform_network_post_init>:
 8008970:	b538      	push	{r3, r4, r5, lr}
 8008972:	b118      	cbz	r0, 800897c <ai_platform_network_post_init+0xc>
 8008974:	4b4a      	ldr	r3, [pc, #296]	; (8008aa0 <ai_platform_network_post_init+0x130>)
 8008976:	6802      	ldr	r2, [r0, #0]
 8008978:	429a      	cmp	r2, r3
 800897a:	d029      	beq.n	80089d0 <ai_platform_network_post_init+0x60>
 800897c:	4a49      	ldr	r2, [pc, #292]	; (8008aa4 <ai_platform_network_post_init+0x134>)
 800897e:	494a      	ldr	r1, [pc, #296]	; (8008aa8 <ai_platform_network_post_init+0x138>)
 8008980:	6813      	ldr	r3, [r2, #0]
 8008982:	f023 0301 	bic.w	r3, r3, #1
 8008986:	6013      	str	r3, [r2, #0]
 8008988:	680b      	ldr	r3, [r1, #0]
 800898a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800898e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008992:	185a      	adds	r2, r3, r1
 8008994:	2a01      	cmp	r2, #1
 8008996:	d90c      	bls.n	80089b2 <ai_platform_network_post_init+0x42>
 8008998:	f240 4249 	movw	r2, #1097	; 0x449
 800899c:	4293      	cmp	r3, r2
 800899e:	d008      	beq.n	80089b2 <ai_platform_network_post_init+0x42>
 80089a0:	4b42      	ldr	r3, [pc, #264]	; (8008aac <ai_platform_network_post_init+0x13c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089a8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80089ac:	d044      	beq.n	8008a38 <ai_platform_network_post_init+0xc8>
 80089ae:	2000      	movs	r0, #0
 80089b0:	bd38      	pop	{r3, r4, r5, pc}
 80089b2:	4b3f      	ldr	r3, [pc, #252]	; (8008ab0 <ai_platform_network_post_init+0x140>)
 80089b4:	2201      	movs	r2, #1
 80089b6:	4619      	mov	r1, r3
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	680b      	ldr	r3, [r1, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d1fc      	bne.n	80089ba <ai_platform_network_post_init+0x4a>
 80089c0:	4b3c      	ldr	r3, [pc, #240]	; (8008ab4 <ai_platform_network_post_init+0x144>)
 80089c2:	493d      	ldr	r1, [pc, #244]	; (8008ab8 <ai_platform_network_post_init+0x148>)
 80089c4:	4a3d      	ldr	r2, [pc, #244]	; (8008abc <ai_platform_network_post_init+0x14c>)
 80089c6:	6019      	str	r1, [r3, #0]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d0ef      	beq.n	80089ae <ai_platform_network_post_init+0x3e>
 80089ce:	e7fe      	b.n	80089ce <ai_platform_network_post_init+0x5e>
 80089d0:	4a34      	ldr	r2, [pc, #208]	; (8008aa4 <ai_platform_network_post_init+0x134>)
 80089d2:	4935      	ldr	r1, [pc, #212]	; (8008aa8 <ai_platform_network_post_init+0x138>)
 80089d4:	6813      	ldr	r3, [r2, #0]
 80089d6:	f023 0301 	bic.w	r3, r3, #1
 80089da:	6013      	str	r3, [r2, #0]
 80089dc:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80089e0:	680b      	ldr	r3, [r1, #0]
 80089e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089e6:	189a      	adds	r2, r3, r2
 80089e8:	2a01      	cmp	r2, #1
 80089ea:	d94a      	bls.n	8008a82 <ai_platform_network_post_init+0x112>
 80089ec:	f240 4249 	movw	r2, #1097	; 0x449
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d046      	beq.n	8008a82 <ai_platform_network_post_init+0x112>
 80089f4:	4b2d      	ldr	r3, [pc, #180]	; (8008aac <ai_platform_network_post_init+0x13c>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089fc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008a00:	d030      	beq.n	8008a64 <ai_platform_network_post_init+0xf4>
 8008a02:	68c3      	ldr	r3, [r0, #12]
 8008a04:	4604      	mov	r4, r0
 8008a06:	f013 0502 	ands.w	r5, r3, #2
 8008a0a:	d024      	beq.n	8008a56 <ai_platform_network_post_init+0xe6>
 8008a0c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8008a0e:	b18b      	cbz	r3, 8008a34 <ai_platform_network_post_init+0xc4>
 8008a10:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8008a12:	b90d      	cbnz	r5, 8008a18 <ai_platform_network_post_init+0xa8>
 8008a14:	e00e      	b.n	8008a34 <ai_platform_network_post_init+0xc4>
 8008a16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a18:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	4798      	blx	r3
 8008a20:	68ea      	ldr	r2, [r5, #12]
 8008a22:	1b53      	subs	r3, r2, r5
 8008a24:	4615      	mov	r5, r2
 8008a26:	bf18      	it	ne
 8008a28:	2301      	movne	r3, #1
 8008a2a:	2a00      	cmp	r2, #0
 8008a2c:	bf08      	it	eq
 8008a2e:	2300      	moveq	r3, #0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d1f0      	bne.n	8008a16 <ai_platform_network_post_init+0xa6>
 8008a34:	2001      	movs	r0, #1
 8008a36:	bd38      	pop	{r3, r4, r5, pc}
 8008a38:	4b21      	ldr	r3, [pc, #132]	; (8008ac0 <ai_platform_network_post_init+0x150>)
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	601a      	str	r2, [r3, #0]
 8008a40:	680b      	ldr	r3, [r1, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1fc      	bne.n	8008a40 <ai_platform_network_post_init+0xd0>
 8008a46:	4b1f      	ldr	r3, [pc, #124]	; (8008ac4 <ai_platform_network_post_init+0x154>)
 8008a48:	491b      	ldr	r1, [pc, #108]	; (8008ab8 <ai_platform_network_post_init+0x148>)
 8008a4a:	4a1c      	ldr	r2, [pc, #112]	; (8008abc <ai_platform_network_post_init+0x14c>)
 8008a4c:	6019      	str	r1, [r3, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d0ac      	beq.n	80089ae <ai_platform_network_post_init+0x3e>
 8008a54:	e7fe      	b.n	8008a54 <ai_platform_network_post_init+0xe4>
 8008a56:	2210      	movs	r2, #16
 8008a58:	2111      	movs	r1, #17
 8008a5a:	3010      	adds	r0, #16
 8008a5c:	f000 faec 	bl	8009038 <core_set_error>
 8008a60:	4628      	mov	r0, r5
 8008a62:	bd38      	pop	{r3, r4, r5, pc}
 8008a64:	4b16      	ldr	r3, [pc, #88]	; (8008ac0 <ai_platform_network_post_init+0x150>)
 8008a66:	2201      	movs	r2, #1
 8008a68:	4619      	mov	r1, r3
 8008a6a:	601a      	str	r2, [r3, #0]
 8008a6c:	680b      	ldr	r3, [r1, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1fc      	bne.n	8008a6c <ai_platform_network_post_init+0xfc>
 8008a72:	4b14      	ldr	r3, [pc, #80]	; (8008ac4 <ai_platform_network_post_init+0x154>)
 8008a74:	4910      	ldr	r1, [pc, #64]	; (8008ab8 <ai_platform_network_post_init+0x148>)
 8008a76:	4a11      	ldr	r2, [pc, #68]	; (8008abc <ai_platform_network_post_init+0x14c>)
 8008a78:	6019      	str	r1, [r3, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d0c0      	beq.n	8008a02 <ai_platform_network_post_init+0x92>
 8008a80:	e7fe      	b.n	8008a80 <ai_platform_network_post_init+0x110>
 8008a82:	4b0b      	ldr	r3, [pc, #44]	; (8008ab0 <ai_platform_network_post_init+0x140>)
 8008a84:	2201      	movs	r2, #1
 8008a86:	4619      	mov	r1, r3
 8008a88:	601a      	str	r2, [r3, #0]
 8008a8a:	680b      	ldr	r3, [r1, #0]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1fc      	bne.n	8008a8a <ai_platform_network_post_init+0x11a>
 8008a90:	4b08      	ldr	r3, [pc, #32]	; (8008ab4 <ai_platform_network_post_init+0x144>)
 8008a92:	4909      	ldr	r1, [pc, #36]	; (8008ab8 <ai_platform_network_post_init+0x148>)
 8008a94:	4a09      	ldr	r2, [pc, #36]	; (8008abc <ai_platform_network_post_init+0x14c>)
 8008a96:	6019      	str	r1, [r3, #0]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d0b1      	beq.n	8008a02 <ai_platform_network_post_init+0x92>
 8008a9e:	e7fe      	b.n	8008a9e <ai_platform_network_post_init+0x12e>
 8008aa0:	a1c00100 	.word	0xa1c00100
 8008aa4:	e0002000 	.word	0xe0002000
 8008aa8:	e0042000 	.word	0xe0042000
 8008aac:	5c001000 	.word	0x5c001000
 8008ab0:	40023008 	.word	0x40023008
 8008ab4:	40023000 	.word	0x40023000
 8008ab8:	f407a5c2 	.word	0xf407a5c2
 8008abc:	b5e8b5cd 	.word	0xb5e8b5cd
 8008ac0:	58024c08 	.word	0x58024c08
 8008ac4:	58024c00 	.word	0x58024c00

08008ac8 <ai_platform_network_process>:
 8008ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008acc:	4692      	mov	sl, r2
 8008ace:	b083      	sub	sp, #12
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	b120      	cbz	r0, 8008ade <ai_platform_network_process+0x16>
 8008ad4:	4b86      	ldr	r3, [pc, #536]	; (8008cf0 <ai_platform_network_process+0x228>)
 8008ad6:	6802      	ldr	r2, [r0, #0]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	bf18      	it	ne
 8008adc:	2400      	movne	r4, #0
 8008ade:	4a85      	ldr	r2, [pc, #532]	; (8008cf4 <ai_platform_network_process+0x22c>)
 8008ae0:	4885      	ldr	r0, [pc, #532]	; (8008cf8 <ai_platform_network_process+0x230>)
 8008ae2:	6813      	ldr	r3, [r2, #0]
 8008ae4:	f023 0301 	bic.w	r3, r3, #1
 8008ae8:	6013      	str	r3, [r2, #0]
 8008aea:	6803      	ldr	r3, [r0, #0]
 8008aec:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 8008af0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008af4:	181a      	adds	r2, r3, r0
 8008af6:	2a01      	cmp	r2, #1
 8008af8:	f240 80c6 	bls.w	8008c88 <ai_platform_network_process+0x1c0>
 8008afc:	f240 4249 	movw	r2, #1097	; 0x449
 8008b00:	4293      	cmp	r3, r2
 8008b02:	f000 80c1 	beq.w	8008c88 <ai_platform_network_process+0x1c0>
 8008b06:	4b7d      	ldr	r3, [pc, #500]	; (8008cfc <ai_platform_network_process+0x234>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b0e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008b12:	f000 80a9 	beq.w	8008c68 <ai_platform_network_process+0x1a0>
 8008b16:	2c00      	cmp	r4, #0
 8008b18:	f000 80db 	beq.w	8008cd2 <ai_platform_network_process+0x20a>
 8008b1c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8008b20:	68e0      	ldr	r0, [r4, #12]
 8008b22:	461a      	mov	r2, r3
 8008b24:	f000 0003 	and.w	r0, r0, #3
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f000 80bd 	beq.w	8008ca8 <ai_platform_network_process+0x1e0>
 8008b2e:	2600      	movs	r6, #0
 8008b30:	2803      	cmp	r0, #3
 8008b32:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008b34:	6166      	str	r6, [r4, #20]
 8008b36:	f040 80c6 	bne.w	8008cc6 <ai_platform_network_process+0x1fe>
 8008b3a:	2900      	cmp	r1, #0
 8008b3c:	f000 80b7 	beq.w	8008cae <ai_platform_network_process+0x1e6>
 8008b40:	fab5 f085 	clz	r0, r5
 8008b44:	0940      	lsrs	r0, r0, #5
 8008b46:	2800      	cmp	r0, #0
 8008b48:	f040 80b1 	bne.w	8008cae <ai_platform_network_process+0x1e6>
 8008b4c:	882e      	ldrh	r6, [r5, #0]
 8008b4e:	2e00      	cmp	r6, #0
 8008b50:	f000 80ad 	beq.w	8008cae <ai_platform_network_process+0x1e6>
 8008b54:	888f      	ldrh	r7, [r1, #4]
 8008b56:	686e      	ldr	r6, [r5, #4]
 8008b58:	9701      	str	r7, [sp, #4]
 8008b5a:	2e00      	cmp	r6, #0
 8008b5c:	f000 825f 	beq.w	800901e <ai_platform_network_process+0x556>
 8008b60:	6836      	ldr	r6, [r6, #0]
 8008b62:	2e00      	cmp	r6, #0
 8008b64:	f000 825b 	beq.w	800901e <ai_platform_network_process+0x556>
 8008b68:	68ab      	ldr	r3, [r5, #8]
 8008b6a:	f8d3 9000 	ldr.w	r9, [r3]
 8008b6e:	f1b9 0f00 	cmp.w	r9, #0
 8008b72:	f000 809c 	beq.w	8008cae <ai_platform_network_process+0x1e6>
 8008b76:	460f      	mov	r7, r1
 8008b78:	4680      	mov	r8, r0
 8008b7a:	e05e      	b.n	8008c3a <ai_platform_network_process+0x172>
 8008b7c:	68f3      	ldr	r3, [r6, #12]
 8008b7e:	68da      	ldr	r2, [r3, #12]
 8008b80:	455a      	cmp	r2, fp
 8008b82:	d168      	bne.n	8008c56 <ai_platform_network_process+0x18e>
 8008b84:	689a      	ldr	r2, [r3, #8]
 8008b86:	4572      	cmp	r2, lr
 8008b88:	d165      	bne.n	8008c56 <ai_platform_network_process+0x18e>
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	459c      	cmp	ip, r3
 8008b8e:	d162      	bne.n	8008c56 <ai_platform_network_process+0x18e>
 8008b90:	6800      	ldr	r0, [r0, #0]
 8008b92:	f002 f931 	bl	800adf8 <ai_array_get_byte_size>
 8008b96:	68f2      	ldr	r2, [r6, #12]
 8008b98:	6973      	ldr	r3, [r6, #20]
 8008b9a:	68d2      	ldr	r2, [r2, #12]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	fb03 f302 	mul.w	r3, r3, r2
 8008ba2:	4298      	cmp	r0, r3
 8008ba4:	d357      	bcc.n	8008c56 <ai_platform_network_process+0x18e>
 8008ba6:	69b3      	ldr	r3, [r6, #24]
 8008ba8:	6818      	ldr	r0, [r3, #0]
 8008baa:	f002 f8d9 	bl	800ad60 <ai_array_to_buffer_fmt>
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	4043      	eors	r3, r0
 8008bb2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8008bb6:	f040 8229 	bne.w	800900c <ai_platform_network_process+0x544>
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 821d 	beq.w	8008ffc <ai_platform_network_process+0x534>
 8008bc2:	88bb      	ldrh	r3, [r7, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f000 808a 	beq.w	8008cde <ai_platform_network_process+0x216>
 8008bca:	9a01      	ldr	r2, [sp, #4]
 8008bcc:	68f1      	ldr	r1, [r6, #12]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	68c9      	ldr	r1, [r1, #12]
 8008bd2:	bf38      	it	cc
 8008bd4:	461a      	movcc	r2, r3
 8008bd6:	9201      	str	r2, [sp, #4]
 8008bd8:	6972      	ldr	r2, [r6, #20]
 8008bda:	68d3      	ldr	r3, [r2, #12]
 8008bdc:	fb03 f301 	mul.w	r3, r3, r1
 8008be0:	f8c9 3008 	str.w	r3, [r9, #8]
 8008be4:	88ba      	ldrh	r2, [r7, #4]
 8008be6:	fb03 f302 	mul.w	r3, r3, r2
 8008bea:	f8c9 300c 	str.w	r3, [r9, #12]
 8008bee:	6939      	ldr	r1, [r7, #16]
 8008bf0:	f8c9 1004 	str.w	r1, [r9, #4]
 8008bf4:	693a      	ldr	r2, [r7, #16]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f8c9 3000 	str.w	r3, [r9]
 8008bfc:	69b0      	ldr	r0, [r6, #24]
 8008bfe:	6803      	ldr	r3, [r0, #0]
 8008c00:	009a      	lsls	r2, r3, #2
 8008c02:	d408      	bmi.n	8008c16 <ai_platform_network_process+0x14e>
 8008c04:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8008c08:	1a9b      	subs	r3, r3, r2
 8008c0a:	4419      	add	r1, r3
 8008c0c:	6081      	str	r1, [r0, #8]
 8008c0e:	69b3      	ldr	r3, [r6, #24]
 8008c10:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8008c14:	60da      	str	r2, [r3, #12]
 8008c16:	f108 0801 	add.w	r8, r8, #1
 8008c1a:	882b      	ldrh	r3, [r5, #0]
 8008c1c:	4598      	cmp	r8, r3
 8008c1e:	d27b      	bcs.n	8008d18 <ai_platform_network_process+0x250>
 8008c20:	686b      	ldr	r3, [r5, #4]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d078      	beq.n	8008d18 <ai_platform_network_process+0x250>
 8008c26:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8008c2a:	2e00      	cmp	r6, #0
 8008c2c:	d074      	beq.n	8008d18 <ai_platform_network_process+0x250>
 8008c2e:	68ab      	ldr	r3, [r5, #8]
 8008c30:	3718      	adds	r7, #24
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 8008c38:	d039      	beq.n	8008cae <ai_platform_network_process+0x1e6>
 8008c3a:	f8b7 e008 	ldrh.w	lr, [r7, #8]
 8008c3e:	f8b7 b006 	ldrh.w	fp, [r7, #6]
 8008c42:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 8008c46:	fb0b f30e 	mul.w	r3, fp, lr
 8008c4a:	69b0      	ldr	r0, [r6, #24]
 8008c4c:	fb0c f303 	mul.w	r3, ip, r3
 8008c50:	6841      	ldr	r1, [r0, #4]
 8008c52:	4299      	cmp	r1, r3
 8008c54:	d292      	bcs.n	8008b7c <ai_platform_network_process+0xb4>
 8008c56:	f104 0010 	add.w	r0, r4, #16
 8008c5a:	2218      	movs	r2, #24
 8008c5c:	2112      	movs	r1, #18
 8008c5e:	f04f 0b00 	mov.w	fp, #0
 8008c62:	f000 f9e9 	bl	8009038 <core_set_error>
 8008c66:	e02a      	b.n	8008cbe <ai_platform_network_process+0x1f6>
 8008c68:	4b25      	ldr	r3, [pc, #148]	; (8008d00 <ai_platform_network_process+0x238>)
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	601a      	str	r2, [r3, #0]
 8008c70:	6803      	ldr	r3, [r0, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1fc      	bne.n	8008c70 <ai_platform_network_process+0x1a8>
 8008c76:	4b23      	ldr	r3, [pc, #140]	; (8008d04 <ai_platform_network_process+0x23c>)
 8008c78:	4823      	ldr	r0, [pc, #140]	; (8008d08 <ai_platform_network_process+0x240>)
 8008c7a:	4a24      	ldr	r2, [pc, #144]	; (8008d0c <ai_platform_network_process+0x244>)
 8008c7c:	6018      	str	r0, [r3, #0]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4293      	cmp	r3, r2
 8008c82:	f43f af48 	beq.w	8008b16 <ai_platform_network_process+0x4e>
 8008c86:	e7fe      	b.n	8008c86 <ai_platform_network_process+0x1be>
 8008c88:	4b21      	ldr	r3, [pc, #132]	; (8008d10 <ai_platform_network_process+0x248>)
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	601a      	str	r2, [r3, #0]
 8008c90:	6803      	ldr	r3, [r0, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1fc      	bne.n	8008c90 <ai_platform_network_process+0x1c8>
 8008c96:	4b1f      	ldr	r3, [pc, #124]	; (8008d14 <ai_platform_network_process+0x24c>)
 8008c98:	481b      	ldr	r0, [pc, #108]	; (8008d08 <ai_platform_network_process+0x240>)
 8008c9a:	4a1c      	ldr	r2, [pc, #112]	; (8008d0c <ai_platform_network_process+0x244>)
 8008c9c:	6018      	str	r0, [r3, #0]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	f43f af38 	beq.w	8008b16 <ai_platform_network_process+0x4e>
 8008ca6:	e7fe      	b.n	8008ca6 <ai_platform_network_process+0x1de>
 8008ca8:	2803      	cmp	r0, #3
 8008caa:	6163      	str	r3, [r4, #20]
 8008cac:	d10b      	bne.n	8008cc6 <ai_platform_network_process+0x1fe>
 8008cae:	f04f 0b00 	mov.w	fp, #0
 8008cb2:	f104 0010 	add.w	r0, r4, #16
 8008cb6:	2217      	movs	r2, #23
 8008cb8:	2112      	movs	r1, #18
 8008cba:	f000 f9bd 	bl	8009038 <core_set_error>
 8008cbe:	4658      	mov	r0, fp
 8008cc0:	b003      	add	sp, #12
 8008cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc6:	f104 0010 	add.w	r0, r4, #16
 8008cca:	2230      	movs	r2, #48	; 0x30
 8008ccc:	2111      	movs	r1, #17
 8008cce:	f000 f9b3 	bl	8009038 <core_set_error>
 8008cd2:	f04f 0b00 	mov.w	fp, #0
 8008cd6:	4658      	mov	r0, fp
 8008cd8:	b003      	add	sp, #12
 8008cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cde:	f104 0010 	add.w	r0, r4, #16
 8008ce2:	2221      	movs	r2, #33	; 0x21
 8008ce4:	2112      	movs	r1, #18
 8008ce6:	469b      	mov	fp, r3
 8008ce8:	f000 f9a6 	bl	8009038 <core_set_error>
 8008cec:	e7e7      	b.n	8008cbe <ai_platform_network_process+0x1f6>
 8008cee:	bf00      	nop
 8008cf0:	a1c00100 	.word	0xa1c00100
 8008cf4:	e0002000 	.word	0xe0002000
 8008cf8:	e0042000 	.word	0xe0042000
 8008cfc:	5c001000 	.word	0x5c001000
 8008d00:	58024c08 	.word	0x58024c08
 8008d04:	58024c00 	.word	0x58024c00
 8008d08:	f407a5c2 	.word	0xf407a5c2
 8008d0c:	b5e8b5cd 	.word	0xb5e8b5cd
 8008d10:	40023008 	.word	0x40023008
 8008d14:	40023000 	.word	0x40023000
 8008d18:	f1ba 0f00 	cmp.w	sl, #0
 8008d1c:	f000 808c 	beq.w	8008e38 <ai_platform_network_process+0x370>
 8008d20:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	f240 813b 	bls.w	8008fa0 <ai_platform_network_process+0x4d8>
 8008d2a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008d2c:	f115 0f0c 	cmn.w	r5, #12
 8008d30:	f000 8136 	beq.w	8008fa0 <ai_platform_network_process+0x4d8>
 8008d34:	89ab      	ldrh	r3, [r5, #12]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f000 8132 	beq.w	8008fa0 <ai_platform_network_process+0x4d8>
 8008d3c:	4656      	mov	r6, sl
 8008d3e:	f04f 0900 	mov.w	r9, #0
 8008d42:	9400      	str	r4, [sp, #0]
 8008d44:	4599      	cmp	r9, r3
 8008d46:	d274      	bcs.n	8008e32 <ai_platform_network_process+0x36a>
 8008d48:	692b      	ldr	r3, [r5, #16]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d071      	beq.n	8008e32 <ai_platform_network_process+0x36a>
 8008d4e:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
 8008d52:	2f00      	cmp	r7, #0
 8008d54:	d06d      	beq.n	8008e32 <ai_platform_network_process+0x36a>
 8008d56:	696b      	ldr	r3, [r5, #20]
 8008d58:	ea4f 1409 	mov.w	r4, r9, lsl #4
 8008d5c:	f8d3 8000 	ldr.w	r8, [r3]
 8008d60:	eb18 0a04 	adds.w	sl, r8, r4
 8008d64:	f000 8125 	beq.w	8008fb2 <ai_platform_network_process+0x4ea>
 8008d68:	f8b6 e008 	ldrh.w	lr, [r6, #8]
 8008d6c:	f8b6 b006 	ldrh.w	fp, [r6, #6]
 8008d70:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8008d74:	fb0b f30e 	mul.w	r3, fp, lr
 8008d78:	69b8      	ldr	r0, [r7, #24]
 8008d7a:	fb0c f303 	mul.w	r3, ip, r3
 8008d7e:	6841      	ldr	r1, [r0, #4]
 8008d80:	4299      	cmp	r1, r3
 8008d82:	f0c0 810c 	bcc.w	8008f9e <ai_platform_network_process+0x4d6>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	68da      	ldr	r2, [r3, #12]
 8008d8a:	455a      	cmp	r2, fp
 8008d8c:	f040 8107 	bne.w	8008f9e <ai_platform_network_process+0x4d6>
 8008d90:	689a      	ldr	r2, [r3, #8]
 8008d92:	4572      	cmp	r2, lr
 8008d94:	f040 8103 	bne.w	8008f9e <ai_platform_network_process+0x4d6>
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	459c      	cmp	ip, r3
 8008d9c:	f040 80ff 	bne.w	8008f9e <ai_platform_network_process+0x4d6>
 8008da0:	6800      	ldr	r0, [r0, #0]
 8008da2:	f002 f829 	bl	800adf8 <ai_array_get_byte_size>
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	68d2      	ldr	r2, [r2, #12]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	fb03 f302 	mul.w	r3, r3, r2
 8008db2:	4298      	cmp	r0, r3
 8008db4:	f0c0 80f3 	bcc.w	8008f9e <ai_platform_network_process+0x4d6>
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	6818      	ldr	r0, [r3, #0]
 8008dbc:	f001 ffd0 	bl	800ad60 <ai_array_to_buffer_fmt>
 8008dc0:	6833      	ldr	r3, [r6, #0]
 8008dc2:	4043      	eors	r3, r0
 8008dc4:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8008dc8:	f040 810e 	bne.w	8008fe8 <ai_platform_network_process+0x520>
 8008dcc:	6933      	ldr	r3, [r6, #16]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f000 8101 	beq.w	8008fd6 <ai_platform_network_process+0x50e>
 8008dd4:	88b3      	ldrh	r3, [r6, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	f000 80f4 	beq.w	8008fc4 <ai_platform_network_process+0x4fc>
 8008ddc:	9a01      	ldr	r2, [sp, #4]
 8008dde:	68f9      	ldr	r1, [r7, #12]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	68c9      	ldr	r1, [r1, #12]
 8008de4:	bf38      	it	cc
 8008de6:	461a      	movcc	r2, r3
 8008de8:	9201      	str	r2, [sp, #4]
 8008dea:	697a      	ldr	r2, [r7, #20]
 8008dec:	68d3      	ldr	r3, [r2, #12]
 8008dee:	fb03 f301 	mul.w	r3, r3, r1
 8008df2:	f8ca 3008 	str.w	r3, [sl, #8]
 8008df6:	88b2      	ldrh	r2, [r6, #4]
 8008df8:	fb03 f302 	mul.w	r3, r3, r2
 8008dfc:	f8ca 300c 	str.w	r3, [sl, #12]
 8008e00:	6931      	ldr	r1, [r6, #16]
 8008e02:	f8ca 1004 	str.w	r1, [sl, #4]
 8008e06:	6932      	ldr	r2, [r6, #16]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f848 3004 	str.w	r3, [r8, r4]
 8008e0e:	69b8      	ldr	r0, [r7, #24]
 8008e10:	6803      	ldr	r3, [r0, #0]
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	d408      	bmi.n	8008e28 <ai_platform_network_process+0x360>
 8008e16:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8008e1a:	1a9b      	subs	r3, r3, r2
 8008e1c:	4419      	add	r1, r3
 8008e1e:	6081      	str	r1, [r0, #8]
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	f8da 2004 	ldr.w	r2, [sl, #4]
 8008e26:	60da      	str	r2, [r3, #12]
 8008e28:	f109 0901 	add.w	r9, r9, #1
 8008e2c:	3618      	adds	r6, #24
 8008e2e:	89ab      	ldrh	r3, [r5, #12]
 8008e30:	e788      	b.n	8008d44 <ai_platform_network_process+0x27c>
 8008e32:	e9dd 4300 	ldrd	r4, r3, [sp]
 8008e36:	82a3      	strh	r3, [r4, #20]
 8008e38:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8008e3c:	2a00      	cmp	r2, #0
 8008e3e:	f000 80a9 	beq.w	8008f94 <ai_platform_network_process+0x4cc>
 8008e42:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008e44:	2a01      	cmp	r2, #1
 8008e46:	f240 80a8 	bls.w	8008f9a <ai_platform_network_process+0x4d2>
 8008e4a:	f105 060c 	add.w	r6, r5, #12
 8008e4e:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 8008e52:	8aa3      	ldrh	r3, [r4, #20]
 8008e54:	455b      	cmp	r3, fp
 8008e56:	f67f af32 	bls.w	8008cbe <ai_platform_network_process+0x1f6>
 8008e5a:	9400      	str	r4, [sp, #0]
 8008e5c:	2d00      	cmp	r5, #0
 8008e5e:	d037      	beq.n	8008ed0 <ai_platform_network_process+0x408>
 8008e60:	882b      	ldrh	r3, [r5, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d034      	beq.n	8008ed0 <ai_platform_network_process+0x408>
 8008e66:	686b      	ldr	r3, [r5, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d031      	beq.n	8008ed0 <ai_platform_network_process+0x408>
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d02e      	beq.n	8008ed0 <ai_platform_network_process+0x408>
 8008e72:	f04f 0800 	mov.w	r8, #0
 8008e76:	e01a      	b.n	8008eae <ai_platform_network_process+0x3e6>
 8008e78:	68d4      	ldr	r4, [r2, #12]
 8008e7a:	1b00      	subs	r0, r0, r4
 8008e7c:	4401      	add	r1, r0
 8008e7e:	6091      	str	r1, [r2, #8]
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	699b      	ldr	r3, [r3, #24]
 8008e84:	60da      	str	r2, [r3, #12]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f108 0801 	add.w	r8, r8, #1
 8008e8c:	68b9      	ldr	r1, [r7, #8]
 8008e8e:	f85a 2009 	ldr.w	r2, [sl, r9]
 8008e92:	440b      	add	r3, r1
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d301      	bcc.n	8008e9c <ai_platform_network_process+0x3d4>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	1ad3      	subs	r3, r2, r3
 8008e9c:	607b      	str	r3, [r7, #4]
 8008e9e:	882b      	ldrh	r3, [r5, #0]
 8008ea0:	4598      	cmp	r8, r3
 8008ea2:	d215      	bcs.n	8008ed0 <ai_platform_network_process+0x408>
 8008ea4:	686b      	ldr	r3, [r5, #4]
 8008ea6:	b19b      	cbz	r3, 8008ed0 <ai_platform_network_process+0x408>
 8008ea8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8008eac:	b183      	cbz	r3, 8008ed0 <ai_platform_network_process+0x408>
 8008eae:	68a9      	ldr	r1, [r5, #8]
 8008eb0:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8008eb4:	699a      	ldr	r2, [r3, #24]
 8008eb6:	f8d1 a000 	ldr.w	sl, [r1]
 8008eba:	6814      	ldr	r4, [r2, #0]
 8008ebc:	eb0a 0709 	add.w	r7, sl, r9
 8008ec0:	6890      	ldr	r0, [r2, #8]
 8008ec2:	00a4      	lsls	r4, r4, #2
 8008ec4:	6879      	ldr	r1, [r7, #4]
 8008ec6:	d5d7      	bpl.n	8008e78 <ai_platform_network_process+0x3b0>
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	f001 ffef 	bl	800aeac <memcpy>
 8008ece:	e7da      	b.n	8008e86 <ai_platform_network_process+0x3be>
 8008ed0:	9800      	ldr	r0, [sp, #0]
 8008ed2:	f001 ff0b 	bl	800acec <ai_layers_forward_all>
 8008ed6:	2e00      	cmp	r6, #0
 8008ed8:	d04a      	beq.n	8008f70 <ai_platform_network_process+0x4a8>
 8008eda:	8833      	ldrh	r3, [r6, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d047      	beq.n	8008f70 <ai_platform_network_process+0x4a8>
 8008ee0:	6873      	ldr	r3, [r6, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d044      	beq.n	8008f70 <ai_platform_network_process+0x4a8>
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d041      	beq.n	8008f70 <ai_platform_network_process+0x4a8>
 8008eec:	f04f 0800 	mov.w	r8, #0
 8008ef0:	e019      	b.n	8008f26 <ai_platform_network_process+0x45e>
 8008ef2:	f85a 2009 	ldr.w	r2, [sl, r9]
 8008ef6:	4291      	cmp	r1, r2
 8008ef8:	d301      	bcc.n	8008efe <ai_platform_network_process+0x436>
 8008efa:	68f9      	ldr	r1, [r7, #12]
 8008efc:	1a51      	subs	r1, r2, r1
 8008efe:	6079      	str	r1, [r7, #4]
 8008f00:	f108 0801 	add.w	r8, r8, #1
 8008f04:	6998      	ldr	r0, [r3, #24]
 8008f06:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 8008f0a:	1b12      	subs	r2, r2, r4
 8008f0c:	440a      	add	r2, r1
 8008f0e:	6082      	str	r2, [r0, #8]
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	60da      	str	r2, [r3, #12]
 8008f16:	8833      	ldrh	r3, [r6, #0]
 8008f18:	4598      	cmp	r8, r3
 8008f1a:	d229      	bcs.n	8008f70 <ai_platform_network_process+0x4a8>
 8008f1c:	6873      	ldr	r3, [r6, #4]
 8008f1e:	b33b      	cbz	r3, 8008f70 <ai_platform_network_process+0x4a8>
 8008f20:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8008f24:	b323      	cbz	r3, 8008f70 <ai_platform_network_process+0x4a8>
 8008f26:	68b2      	ldr	r2, [r6, #8]
 8008f28:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8008f2c:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8008f30:	f8d2 a000 	ldr.w	sl, [r2]
 8008f34:	f8de 1000 	ldr.w	r1, [lr]
 8008f38:	eb0a 0709 	add.w	r7, sl, r9
 8008f3c:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 8008f40:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 8008f44:	eb00 0102 	add.w	r1, r0, r2
 8008f48:	d0d3      	beq.n	8008ef2 <ai_platform_network_process+0x42a>
 8008f4a:	f8de 1008 	ldr.w	r1, [lr, #8]
 8008f4e:	f001 ffad 	bl	800aeac <memcpy>
 8008f52:	f85a 2009 	ldr.w	r2, [sl, r9]
 8008f56:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 8008f5a:	440b      	add	r3, r1
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d301      	bcc.n	8008f64 <ai_platform_network_process+0x49c>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	1ad3      	subs	r3, r2, r3
 8008f64:	607b      	str	r3, [r7, #4]
 8008f66:	f108 0801 	add.w	r8, r8, #1
 8008f6a:	8833      	ldrh	r3, [r6, #0]
 8008f6c:	4598      	cmp	r8, r3
 8008f6e:	d3d5      	bcc.n	8008f1c <ai_platform_network_process+0x454>
 8008f70:	9b00      	ldr	r3, [sp, #0]
 8008f72:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 8008f76:	461a      	mov	r2, r3
 8008f78:	8a9b      	ldrh	r3, [r3, #20]
 8008f7a:	f10b 0b01 	add.w	fp, fp, #1
 8008f7e:	fa1f fb8b 	uxth.w	fp, fp
 8008f82:	455b      	cmp	r3, fp
 8008f84:	f8a2 b016 	strh.w	fp, [r2, #22]
 8008f88:	f63f af68 	bhi.w	8008e5c <ai_platform_network_process+0x394>
 8008f8c:	4658      	mov	r0, fp
 8008f8e:	b003      	add	sp, #12
 8008f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f94:	4615      	mov	r5, r2
 8008f96:	4616      	mov	r6, r2
 8008f98:	e759      	b.n	8008e4e <ai_platform_network_process+0x386>
 8008f9a:	2600      	movs	r6, #0
 8008f9c:	e757      	b.n	8008e4e <ai_platform_network_process+0x386>
 8008f9e:	9c00      	ldr	r4, [sp, #0]
 8008fa0:	f104 0010 	add.w	r0, r4, #16
 8008fa4:	2218      	movs	r2, #24
 8008fa6:	2113      	movs	r1, #19
 8008fa8:	f04f 0b00 	mov.w	fp, #0
 8008fac:	f000 f844 	bl	8009038 <core_set_error>
 8008fb0:	e685      	b.n	8008cbe <ai_platform_network_process+0x1f6>
 8008fb2:	9c00      	ldr	r4, [sp, #0]
 8008fb4:	2217      	movs	r2, #23
 8008fb6:	2113      	movs	r1, #19
 8008fb8:	46d3      	mov	fp, sl
 8008fba:	f104 0010 	add.w	r0, r4, #16
 8008fbe:	f000 f83b 	bl	8009038 <core_set_error>
 8008fc2:	e67c      	b.n	8008cbe <ai_platform_network_process+0x1f6>
 8008fc4:	9c00      	ldr	r4, [sp, #0]
 8008fc6:	2221      	movs	r2, #33	; 0x21
 8008fc8:	2113      	movs	r1, #19
 8008fca:	469b      	mov	fp, r3
 8008fcc:	f104 0010 	add.w	r0, r4, #16
 8008fd0:	f000 f832 	bl	8009038 <core_set_error>
 8008fd4:	e673      	b.n	8008cbe <ai_platform_network_process+0x1f6>
 8008fd6:	9c00      	ldr	r4, [sp, #0]
 8008fd8:	2217      	movs	r2, #23
 8008fda:	2113      	movs	r1, #19
 8008fdc:	469b      	mov	fp, r3
 8008fde:	f104 0010 	add.w	r0, r4, #16
 8008fe2:	f000 f829 	bl	8009038 <core_set_error>
 8008fe6:	e66a      	b.n	8008cbe <ai_platform_network_process+0x1f6>
 8008fe8:	9c00      	ldr	r4, [sp, #0]
 8008fea:	2219      	movs	r2, #25
 8008fec:	2113      	movs	r1, #19
 8008fee:	f04f 0b00 	mov.w	fp, #0
 8008ff2:	f104 0010 	add.w	r0, r4, #16
 8008ff6:	f000 f81f 	bl	8009038 <core_set_error>
 8008ffa:	e660      	b.n	8008cbe <ai_platform_network_process+0x1f6>
 8008ffc:	f104 0010 	add.w	r0, r4, #16
 8009000:	2217      	movs	r2, #23
 8009002:	2112      	movs	r1, #18
 8009004:	469b      	mov	fp, r3
 8009006:	f000 f817 	bl	8009038 <core_set_error>
 800900a:	e658      	b.n	8008cbe <ai_platform_network_process+0x1f6>
 800900c:	f104 0010 	add.w	r0, r4, #16
 8009010:	2219      	movs	r2, #25
 8009012:	2112      	movs	r1, #18
 8009014:	f04f 0b00 	mov.w	fp, #0
 8009018:	f000 f80e 	bl	8009038 <core_set_error>
 800901c:	e64f      	b.n	8008cbe <ai_platform_network_process+0x1f6>
 800901e:	f1ba 0f00 	cmp.w	sl, #0
 8009022:	f47f ae7f 	bne.w	8008d24 <ai_platform_network_process+0x25c>
 8009026:	e70d      	b.n	8008e44 <ai_platform_network_process+0x37c>

08009028 <core_init>:
 8009028:	2001      	movs	r0, #1
 800902a:	4770      	bx	lr

0800902c <core_get_error>:
 800902c:	4603      	mov	r3, r0
 800902e:	2200      	movs	r2, #0
 8009030:	6800      	ldr	r0, [r0, #0]
 8009032:	601a      	str	r2, [r3, #0]
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop

08009038 <core_set_error>:
 8009038:	4603      	mov	r3, r0
 800903a:	7800      	ldrb	r0, [r0, #0]
 800903c:	b930      	cbnz	r0, 800904c <core_set_error+0x14>
 800903e:	7019      	strb	r1, [r3, #0]
 8009040:	2001      	movs	r0, #1
 8009042:	6819      	ldr	r1, [r3, #0]
 8009044:	f362 211f 	bfi	r1, r2, #8, #24
 8009048:	6019      	str	r1, [r3, #0]
 800904a:	4770      	bx	lr
 800904c:	2000      	movs	r0, #0
 800904e:	4770      	bx	lr

08009050 <func_dummy>:
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop

08009054 <ai_dict8_dot_array_f32>:
 8009054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009058:	9d06      	ldr	r5, [sp, #24]
 800905a:	4c88      	ldr	r4, [pc, #544]	; (800927c <ai_dict8_dot_array_f32+0x228>)
 800905c:	2d07      	cmp	r5, #7
 800905e:	442c      	add	r4, r5
 8009060:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009064:	f104 0620 	add.w	r6, r4, #32
 8009068:	d817      	bhi.n	800909a <ai_dict8_dot_array_f32+0x46>
 800906a:	42b3      	cmp	r3, r6
 800906c:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8009280 <ai_dict8_dot_array_f32+0x22c>
 8009070:	d20b      	bcs.n	800908a <ai_dict8_dot_array_f32+0x36>
 8009072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009076:	ecf3 7a01 	vldmia	r3!, {s15}
 800907a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800907e:	42b3      	cmp	r3, r6
 8009080:	edd4 6a00 	vldr	s13, [r4]
 8009084:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009088:	d3f3      	bcc.n	8009072 <ai_dict8_dot_array_f32+0x1e>
 800908a:	edd0 7a00 	vldr	s15, [r0]
 800908e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009092:	ed80 7a00 	vstr	s14, [r0]
 8009096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800909a:	f001 0503 	and.w	r5, r1, #3
 800909e:	2d02      	cmp	r5, #2
 80090a0:	f000 80f0 	beq.w	8009284 <ai_dict8_dot_array_f32+0x230>
 80090a4:	2d03      	cmp	r5, #3
 80090a6:	f000 81ff 	beq.w	80094a8 <ai_dict8_dot_array_f32+0x454>
 80090aa:	2d01      	cmp	r5, #1
 80090ac:	f000 81f0 	beq.w	8009490 <ai_dict8_dot_array_f32+0x43c>
 80090b0:	42a3      	cmp	r3, r4
 80090b2:	f200 81fc 	bhi.w	80094ae <ai_dict8_dot_array_f32+0x45a>
 80090b6:	1ae4      	subs	r4, r4, r3
 80090b8:	f101 0810 	add.w	r8, r1, #16
 80090bc:	f101 0508 	add.w	r5, r1, #8
 80090c0:	f103 0720 	add.w	r7, r3, #32
 80090c4:	0964      	lsrs	r4, r4, #5
 80090c6:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8009280 <ai_dict8_dot_array_f32+0x22c>
 80090ca:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 80090ce:	f815 ec07 	ldrb.w	lr, [r5, #-7]
 80090d2:	3508      	adds	r5, #8
 80090d4:	f815 cc10 	ldrb.w	ip, [r5, #-16]
 80090d8:	3720      	adds	r7, #32
 80090da:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 80090de:	ed57 5a0f 	vldr	s11, [r7, #-60]	; 0xffffffc4
 80090e2:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80090e6:	ed17 6a10 	vldr	s12, [r7, #-64]	; 0xffffffc0
 80090ea:	edde 7a00 	vldr	s15, [lr]
 80090ee:	ed57 6a0e 	vldr	s13, [r7, #-56]	; 0xffffffc8
 80090f2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80090f6:	eddc 5a00 	vldr	s11, [ip]
 80090fa:	f815 cc0e 	ldrb.w	ip, [r5, #-14]
 80090fe:	ed17 5a0d 	vldr	s10, [r7, #-52]	; 0xffffffcc
 8009102:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009106:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800910a:	f815 ec0c 	ldrb.w	lr, [r5, #-12]
 800910e:	ed9c 4a00 	vldr	s8, [ip]
 8009112:	f815 cc0d 	ldrb.w	ip, [r5, #-13]
 8009116:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800911a:	ed17 6a0c 	vldr	s12, [r7, #-48]	; 0xffffffd0
 800911e:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8009122:	ed57 4a0b 	vldr	s9, [r7, #-44]	; 0xffffffd4
 8009126:	eee4 7a26 	vfma.f32	s15, s8, s13
 800912a:	ed57 5a0a 	vldr	s11, [r7, #-40]	; 0xffffffd8
 800912e:	ed9c 4a00 	vldr	s8, [ip]
 8009132:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
 8009136:	ed57 6a09 	vldr	s13, [r7, #-36]	; 0xffffffdc
 800913a:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800913e:	eee4 7a05 	vfma.f32	s15, s8, s10
 8009142:	ed9e 5a00 	vldr	s10, [lr]
 8009146:	ed9c 4a00 	vldr	s8, [ip]
 800914a:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
 800914e:	f815 cc09 	ldrb.w	ip, [r5, #-9]
 8009152:	4545      	cmp	r5, r8
 8009154:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8009158:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800915c:	eee5 7a06 	vfma.f32	s15, s10, s12
 8009160:	ed9e 5a00 	vldr	s10, [lr]
 8009164:	ed9c 6a00 	vldr	s12, [ip]
 8009168:	eee4 7a24 	vfma.f32	s15, s8, s9
 800916c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009170:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009174:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009178:	d1a9      	bne.n	80090ce <ai_dict8_dot_array_f32+0x7a>
 800917a:	3401      	adds	r4, #1
 800917c:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8009180:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8009184:	42b3      	cmp	r3, r6
 8009186:	d280      	bcs.n	800908a <ai_dict8_dot_array_f32+0x36>
 8009188:	461c      	mov	r4, r3
 800918a:	780d      	ldrb	r5, [r1, #0]
 800918c:	ecf4 6a01 	vldmia	r4!, {s13}
 8009190:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009194:	42a6      	cmp	r6, r4
 8009196:	edd5 7a00 	vldr	s15, [r5]
 800919a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800919e:	f67f af74 	bls.w	800908a <ai_dict8_dot_array_f32+0x36>
 80091a2:	784d      	ldrb	r5, [r1, #1]
 80091a4:	f103 0408 	add.w	r4, r3, #8
 80091a8:	edd3 6a01 	vldr	s13, [r3, #4]
 80091ac:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80091b0:	42a6      	cmp	r6, r4
 80091b2:	edd5 7a00 	vldr	s15, [r5]
 80091b6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80091ba:	f67f af66 	bls.w	800908a <ai_dict8_dot_array_f32+0x36>
 80091be:	788d      	ldrb	r5, [r1, #2]
 80091c0:	f103 040c 	add.w	r4, r3, #12
 80091c4:	edd3 6a02 	vldr	s13, [r3, #8]
 80091c8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80091cc:	42a6      	cmp	r6, r4
 80091ce:	edd5 7a00 	vldr	s15, [r5]
 80091d2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80091d6:	f67f af58 	bls.w	800908a <ai_dict8_dot_array_f32+0x36>
 80091da:	78cd      	ldrb	r5, [r1, #3]
 80091dc:	f103 0410 	add.w	r4, r3, #16
 80091e0:	edd3 6a03 	vldr	s13, [r3, #12]
 80091e4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80091e8:	42a6      	cmp	r6, r4
 80091ea:	edd5 7a00 	vldr	s15, [r5]
 80091ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80091f2:	f67f af4a 	bls.w	800908a <ai_dict8_dot_array_f32+0x36>
 80091f6:	790d      	ldrb	r5, [r1, #4]
 80091f8:	f103 0414 	add.w	r4, r3, #20
 80091fc:	edd3 6a04 	vldr	s13, [r3, #16]
 8009200:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009204:	42a6      	cmp	r6, r4
 8009206:	edd5 7a00 	vldr	s15, [r5]
 800920a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800920e:	f67f af3c 	bls.w	800908a <ai_dict8_dot_array_f32+0x36>
 8009212:	794d      	ldrb	r5, [r1, #5]
 8009214:	f103 0418 	add.w	r4, r3, #24
 8009218:	edd3 6a05 	vldr	s13, [r3, #20]
 800921c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009220:	42a6      	cmp	r6, r4
 8009222:	edd5 7a00 	vldr	s15, [r5]
 8009226:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800922a:	f67f af2e 	bls.w	800908a <ai_dict8_dot_array_f32+0x36>
 800922e:	798d      	ldrb	r5, [r1, #6]
 8009230:	f103 041c 	add.w	r4, r3, #28
 8009234:	edd3 6a06 	vldr	s13, [r3, #24]
 8009238:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800923c:	42a6      	cmp	r6, r4
 800923e:	edd5 7a00 	vldr	s15, [r5]
 8009242:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009246:	f67f af20 	bls.w	800908a <ai_dict8_dot_array_f32+0x36>
 800924a:	79cd      	ldrb	r5, [r1, #7]
 800924c:	f103 0420 	add.w	r4, r3, #32
 8009250:	edd3 6a07 	vldr	s13, [r3, #28]
 8009254:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009258:	42a6      	cmp	r6, r4
 800925a:	edd5 7a00 	vldr	s15, [r5]
 800925e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009262:	f67f af12 	bls.w	800908a <ai_dict8_dot_array_f32+0x36>
 8009266:	7a09      	ldrb	r1, [r1, #8]
 8009268:	edd3 7a08 	vldr	s15, [r3, #32]
 800926c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8009270:	edd2 6a00 	vldr	s13, [r2]
 8009274:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009278:	e707      	b.n	800908a <ai_dict8_dot_array_f32+0x36>
 800927a:	bf00      	nop
 800927c:	3ffffff8 	.word	0x3ffffff8
 8009280:	00000000 	.word	0x00000000
 8009284:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8009280 <ai_dict8_dot_array_f32+0x22c>
 8009288:	780d      	ldrb	r5, [r1, #0]
 800928a:	3304      	adds	r3, #4
 800928c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009290:	3101      	adds	r1, #1
 8009292:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009296:	edd5 6a00 	vldr	s13, [r5]
 800929a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800929e:	780d      	ldrb	r5, [r1, #0]
 80092a0:	1d1f      	adds	r7, r3, #4
 80092a2:	edd3 7a00 	vldr	s15, [r3]
 80092a6:	f101 0c01 	add.w	ip, r1, #1
 80092aa:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80092ae:	42bc      	cmp	r4, r7
 80092b0:	edd5 6a00 	vldr	s13, [r5]
 80092b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80092b8:	d365      	bcc.n	8009386 <ai_dict8_dot_array_f32+0x332>
 80092ba:	3324      	adds	r3, #36	; 0x24
 80092bc:	f101 0e11 	add.w	lr, r1, #17
 80092c0:	3109      	adds	r1, #9
 80092c2:	eba6 0803 	sub.w	r8, r6, r3
 80092c6:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80092ca:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
 80092ce:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 80092d2:	3108      	adds	r1, #8
 80092d4:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 80092d8:	3320      	adds	r3, #32
 80092da:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80092de:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 80092e2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80092e6:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 80092ea:	edd5 7a00 	vldr	s15, [r5]
 80092ee:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 80092f2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80092f6:	edd4 5a00 	vldr	s11, [r4]
 80092fa:	f811 4c0e 	ldrb.w	r4, [r1, #-14]
 80092fe:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 8009302:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009306:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800930a:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800930e:	ed94 4a00 	vldr	s8, [r4]
 8009312:	f811 4c0d 	ldrb.w	r4, [r1, #-13]
 8009316:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800931a:	ed13 6a0c 	vldr	s12, [r3, #-48]	; 0xffffffd0
 800931e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009322:	ed53 4a0b 	vldr	s9, [r3, #-44]	; 0xffffffd4
 8009326:	eee4 7a26 	vfma.f32	s15, s8, s13
 800932a:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 800932e:	ed94 4a00 	vldr	s8, [r4]
 8009332:	f811 4c0b 	ldrb.w	r4, [r1, #-11]
 8009336:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 800933a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800933e:	eee4 7a05 	vfma.f32	s15, s8, s10
 8009342:	ed95 5a00 	vldr	s10, [r5]
 8009346:	ed94 4a00 	vldr	s8, [r4]
 800934a:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800934e:	f811 4c09 	ldrb.w	r4, [r1, #-9]
 8009352:	458e      	cmp	lr, r1
 8009354:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009358:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800935c:	eee5 7a06 	vfma.f32	s15, s10, s12
 8009360:	ed95 5a00 	vldr	s10, [r5]
 8009364:	ed94 6a00 	vldr	s12, [r4]
 8009368:	eee4 7a24 	vfma.f32	s15, s8, s9
 800936c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009370:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009374:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009378:	d1a9      	bne.n	80092ce <ai_dict8_dot_array_f32+0x27a>
 800937a:	f108 0801 	add.w	r8, r8, #1
 800937e:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 8009382:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 8009386:	42b7      	cmp	r7, r6
 8009388:	f4bf ae7f 	bcs.w	800908a <ai_dict8_dot_array_f32+0x36>
 800938c:	463b      	mov	r3, r7
 800938e:	f89c 1000 	ldrb.w	r1, [ip]
 8009392:	ecf3 6a01 	vldmia	r3!, {s13}
 8009396:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800939a:	429e      	cmp	r6, r3
 800939c:	edd1 7a00 	vldr	s15, [r1]
 80093a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80093a4:	f67f ae71 	bls.w	800908a <ai_dict8_dot_array_f32+0x36>
 80093a8:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80093ac:	f107 0308 	add.w	r3, r7, #8
 80093b0:	edd7 6a01 	vldr	s13, [r7, #4]
 80093b4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80093b8:	429e      	cmp	r6, r3
 80093ba:	edd1 7a00 	vldr	s15, [r1]
 80093be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80093c2:	f67f ae62 	bls.w	800908a <ai_dict8_dot_array_f32+0x36>
 80093c6:	f89c 1002 	ldrb.w	r1, [ip, #2]
 80093ca:	f107 030c 	add.w	r3, r7, #12
 80093ce:	edd7 6a02 	vldr	s13, [r7, #8]
 80093d2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80093d6:	429e      	cmp	r6, r3
 80093d8:	edd1 7a00 	vldr	s15, [r1]
 80093dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80093e0:	f67f ae53 	bls.w	800908a <ai_dict8_dot_array_f32+0x36>
 80093e4:	f89c 1003 	ldrb.w	r1, [ip, #3]
 80093e8:	f107 0310 	add.w	r3, r7, #16
 80093ec:	edd7 6a03 	vldr	s13, [r7, #12]
 80093f0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80093f4:	429e      	cmp	r6, r3
 80093f6:	edd1 7a00 	vldr	s15, [r1]
 80093fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80093fe:	f67f ae44 	bls.w	800908a <ai_dict8_dot_array_f32+0x36>
 8009402:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8009406:	f107 0314 	add.w	r3, r7, #20
 800940a:	edd7 6a04 	vldr	s13, [r7, #16]
 800940e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8009412:	429e      	cmp	r6, r3
 8009414:	edd1 7a00 	vldr	s15, [r1]
 8009418:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800941c:	f67f ae35 	bls.w	800908a <ai_dict8_dot_array_f32+0x36>
 8009420:	f89c 1005 	ldrb.w	r1, [ip, #5]
 8009424:	f107 0318 	add.w	r3, r7, #24
 8009428:	edd7 6a05 	vldr	s13, [r7, #20]
 800942c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8009430:	429e      	cmp	r6, r3
 8009432:	edd1 7a00 	vldr	s15, [r1]
 8009436:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800943a:	f67f ae26 	bls.w	800908a <ai_dict8_dot_array_f32+0x36>
 800943e:	f89c 1006 	ldrb.w	r1, [ip, #6]
 8009442:	f107 031c 	add.w	r3, r7, #28
 8009446:	edd7 6a06 	vldr	s13, [r7, #24]
 800944a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800944e:	429e      	cmp	r6, r3
 8009450:	edd1 7a00 	vldr	s15, [r1]
 8009454:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009458:	f67f ae17 	bls.w	800908a <ai_dict8_dot_array_f32+0x36>
 800945c:	f89c 1007 	ldrb.w	r1, [ip, #7]
 8009460:	f107 0320 	add.w	r3, r7, #32
 8009464:	edd7 6a07 	vldr	s13, [r7, #28]
 8009468:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800946c:	429e      	cmp	r6, r3
 800946e:	edd1 7a00 	vldr	s15, [r1]
 8009472:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009476:	f67f ae08 	bls.w	800908a <ai_dict8_dot_array_f32+0x36>
 800947a:	f89c 3008 	ldrb.w	r3, [ip, #8]
 800947e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009482:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009486:	edd2 6a00 	vldr	s13, [r2]
 800948a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800948e:	e5fc      	b.n	800908a <ai_dict8_dot_array_f32+0x36>
 8009490:	780d      	ldrb	r5, [r1, #0]
 8009492:	3304      	adds	r3, #4
 8009494:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009498:	3101      	adds	r1, #1
 800949a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800949e:	ed95 7a00 	vldr	s14, [r5]
 80094a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80094a6:	e6ef      	b.n	8009288 <ai_dict8_dot_array_f32+0x234>
 80094a8:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 8009280 <ai_dict8_dot_array_f32+0x22c>
 80094ac:	e6f7      	b.n	800929e <ai_dict8_dot_array_f32+0x24a>
 80094ae:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 8009280 <ai_dict8_dot_array_f32+0x22c>
 80094b2:	e667      	b.n	8009184 <ai_dict8_dot_array_f32+0x130>

080094b4 <ai_dict4_dot_array_f32>:
 80094b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80094ba:	f027 0c01 	bic.w	ip, r7, #1
 80094be:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 80094c2:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80094c6:	f000 80ad 	beq.w	8009624 <ai_dict4_dot_array_f32+0x170>
 80094ca:	1d0d      	adds	r5, r1, #4
 80094cc:	ea4f 0988 	mov.w	r9, r8, lsl #2
 80094d0:	f103 0420 	add.w	r4, r3, #32
 80094d4:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800962c <ai_dict4_dot_array_f32+0x178>
 80094d8:	eb05 0e09 	add.w	lr, r5, r9
 80094dc:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 80094e0:	3504      	adds	r5, #4
 80094e2:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
 80094e6:	3420      	adds	r4, #32
 80094e8:	f006 0a0f 	and.w	sl, r6, #15
 80094ec:	0936      	lsrs	r6, r6, #4
 80094ee:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 80094f2:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80094f6:	ed14 4a0e 	vldr	s8, [r4, #-56]	; 0xffffffc8
 80094fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80094fe:	ed14 6a0d 	vldr	s12, [r4, #-52]	; 0xffffffcc
 8009502:	edda 7a00 	vldr	s15, [sl]
 8009506:	edd6 5a00 	vldr	s11, [r6]
 800950a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800950e:	f815 6c07 	ldrb.w	r6, [r5, #-7]
 8009512:	ed54 3a0c 	vldr	s7, [r4, #-48]	; 0xffffffd0
 8009516:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800951a:	f006 060f 	and.w	r6, r6, #15
 800951e:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8009522:	ed54 4a0b 	vldr	s9, [r4, #-44]	; 0xffffffd4
 8009526:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800952a:	ed54 5a0a 	vldr	s11, [r4, #-40]	; 0xffffffd8
 800952e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009532:	ed54 6a09 	vldr	s13, [r4, #-36]	; 0xffffffdc
 8009536:	ed9a 3a00 	vldr	s6, [sl]
 800953a:	ed96 5a00 	vldr	s10, [r6]
 800953e:	f815 ac06 	ldrb.w	sl, [r5, #-6]
 8009542:	eee3 7a04 	vfma.f32	s15, s6, s8
 8009546:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 800954a:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 800954e:	f00a 0a0f 	and.w	sl, sl, #15
 8009552:	45ae      	cmp	lr, r5
 8009554:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8009558:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800955c:	ed9b 3a00 	vldr	s6, [fp]
 8009560:	ea4f 1b16 	mov.w	fp, r6, lsr #4
 8009564:	eee5 7a06 	vfma.f32	s15, s10, s12
 8009568:	ed9a 4a00 	vldr	s8, [sl]
 800956c:	eb02 0a8b 	add.w	sl, r2, fp, lsl #2
 8009570:	f006 060f 	and.w	r6, r6, #15
 8009574:	ed9a 5a00 	vldr	s10, [sl]
 8009578:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800957c:	ed96 6a00 	vldr	s12, [r6]
 8009580:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009584:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009588:	eee5 7a25 	vfma.f32	s15, s10, s11
 800958c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009590:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009594:	d1a2      	bne.n	80094dc <ai_dict4_dot_array_f32+0x28>
 8009596:	4449      	add	r1, r9
 8009598:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800959c:	459c      	cmp	ip, r3
 800959e:	d92d      	bls.n	80095fc <ai_dict4_dot_array_f32+0x148>
 80095a0:	f10c 0c07 	add.w	ip, ip, #7
 80095a4:	f103 0508 	add.w	r5, r3, #8
 80095a8:	f103 0810 	add.w	r8, r3, #16
 80095ac:	f101 3eff 	add.w	lr, r1, #4294967295
 80095b0:	ebac 0c05 	sub.w	ip, ip, r5
 80095b4:	f02c 0407 	bic.w	r4, ip, #7
 80095b8:	44a0      	add	r8, r4
 80095ba:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 80095be:	3508      	adds	r5, #8
 80095c0:	ed55 5a03 	vldr	s11, [r5, #-12]
 80095c4:	f004 060f 	and.w	r6, r4, #15
 80095c8:	0924      	lsrs	r4, r4, #4
 80095ca:	ed55 6a04 	vldr	s13, [r5, #-16]
 80095ce:	45a8      	cmp	r8, r5
 80095d0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80095d4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80095d8:	edd6 7a00 	vldr	s15, [r6]
 80095dc:	ed94 6a00 	vldr	s12, [r4]
 80095e0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80095e4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80095e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80095ec:	d1e5      	bne.n	80095ba <ai_dict4_dot_array_f32+0x106>
 80095ee:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80095f2:	f10c 0c01 	add.w	ip, ip, #1
 80095f6:	4461      	add	r1, ip
 80095f8:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 80095fc:	07fc      	lsls	r4, r7, #31
 80095fe:	d509      	bpl.n	8009614 <ai_dict4_dot_array_f32+0x160>
 8009600:	7809      	ldrb	r1, [r1, #0]
 8009602:	edd3 7a00 	vldr	s15, [r3]
 8009606:	090b      	lsrs	r3, r1, #4
 8009608:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800960c:	edd2 6a00 	vldr	s13, [r2]
 8009610:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009614:	edd0 7a00 	vldr	s15, [r0]
 8009618:	ee37 7a87 	vadd.f32	s14, s15, s14
 800961c:	ed80 7a00 	vstr	s14, [r0]
 8009620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009624:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800962c <ai_dict4_dot_array_f32+0x178>
 8009628:	e7b8      	b.n	800959c <ai_dict4_dot_array_f32+0xe8>
 800962a:	bf00      	nop
 800962c:	00000000 	.word	0x00000000

08009630 <ai_dict_decompress_f32>:
 8009630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009634:	9f08      	ldr	r7, [sp, #32]
 8009636:	2b04      	cmp	r3, #4
 8009638:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800963c:	d00e      	beq.n	800965c <ai_dict_decompress_f32+0x2c>
 800963e:	2b08      	cmp	r3, #8
 8009640:	d10a      	bne.n	8009658 <ai_dict_decompress_f32+0x28>
 8009642:	42b8      	cmp	r0, r7
 8009644:	d208      	bcs.n	8009658 <ai_dict_decompress_f32+0x28>
 8009646:	f811 3b01 	ldrb.w	r3, [r1], #1
 800964a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f840 3b04 	str.w	r3, [r0], #4
 8009654:	4287      	cmp	r7, r0
 8009656:	d8f6      	bhi.n	8009646 <ai_dict_decompress_f32+0x16>
 8009658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800965c:	9b07      	ldr	r3, [sp, #28]
 800965e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8009662:	f003 0e01 	and.w	lr, r3, #1
 8009666:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 800966a:	f10c 38ff 	add.w	r8, ip, #4294967295
 800966e:	42b8      	cmp	r0, r7
 8009670:	d2f2      	bcs.n	8009658 <ai_dict_decompress_f32+0x28>
 8009672:	f1bc 0f00 	cmp.w	ip, #0
 8009676:	d019      	beq.n	80096ac <ai_dict_decompress_f32+0x7c>
 8009678:	f100 0508 	add.w	r5, r0, #8
 800967c:	1e4c      	subs	r4, r1, #1
 800967e:	eb01 0608 	add.w	r6, r1, r8
 8009682:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009686:	3508      	adds	r5, #8
 8009688:	091b      	lsrs	r3, r3, #4
 800968a:	42a6      	cmp	r6, r4
 800968c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f845 3c10 	str.w	r3, [r5, #-16]
 8009696:	7823      	ldrb	r3, [r4, #0]
 8009698:	f003 030f 	and.w	r3, r3, #15
 800969c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f845 3c0c 	str.w	r3, [r5, #-12]
 80096a6:	d1ec      	bne.n	8009682 <ai_dict_decompress_f32+0x52>
 80096a8:	4461      	add	r1, ip
 80096aa:	4448      	add	r0, r9
 80096ac:	f1be 0f00 	cmp.w	lr, #0
 80096b0:	d103      	bne.n	80096ba <ai_dict_decompress_f32+0x8a>
 80096b2:	4287      	cmp	r7, r0
 80096b4:	d8dd      	bhi.n	8009672 <ai_dict_decompress_f32+0x42>
 80096b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096ba:	780b      	ldrb	r3, [r1, #0]
 80096bc:	3004      	adds	r0, #4
 80096be:	3101      	adds	r1, #1
 80096c0:	091b      	lsrs	r3, r3, #4
 80096c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f840 3c04 	str.w	r3, [r0, #-4]
 80096cc:	e7cf      	b.n	800966e <ai_dict_decompress_f32+0x3e>
 80096ce:	bf00      	nop

080096d0 <forward_conv2d>:
 80096d0:	6942      	ldr	r2, [r0, #20]
 80096d2:	8813      	ldrh	r3, [r2, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f000 8639 	beq.w	800a34c <forward_conv2d+0xc7c>
 80096da:	6852      	ldr	r2, [r2, #4]
 80096dc:	6851      	ldr	r1, [r2, #4]
 80096de:	b101      	cbz	r1, 80096e2 <forward_conv2d+0x12>
 80096e0:	6809      	ldr	r1, [r1, #0]
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	f240 862f 	bls.w	800a346 <forward_conv2d+0xc76>
 80096e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ec:	ed2d 8b08 	vpush	{d8-d11}
 80096f0:	b0c9      	sub	sp, #292	; 0x124
 80096f2:	6914      	ldr	r4, [r2, #16]
 80096f4:	af02      	add	r7, sp, #8
 80096f6:	2c00      	cmp	r4, #0
 80096f8:	f000 8621 	beq.w	800a33e <forward_conv2d+0xc6e>
 80096fc:	6824      	ldr	r4, [r4, #0]
 80096fe:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 8009702:	2b02      	cmp	r3, #2
 8009704:	f000 8616 	beq.w	800a334 <forward_conv2d+0xc64>
 8009708:	69d5      	ldr	r5, [r2, #28]
 800970a:	2d00      	cmp	r5, #0
 800970c:	f000 860b 	beq.w	800a326 <forward_conv2d+0xc56>
 8009710:	f112 0318 	adds.w	r3, r2, #24
 8009714:	682c      	ldr	r4, [r5, #0]
 8009716:	d004      	beq.n	8009722 <forward_conv2d+0x52>
 8009718:	8b13      	ldrh	r3, [r2, #24]
 800971a:	2b01      	cmp	r3, #1
 800971c:	f240 8618 	bls.w	800a350 <forward_conv2d+0xc80>
 8009720:	686b      	ldr	r3, [r5, #4]
 8009722:	68aa      	ldr	r2, [r5, #8]
 8009724:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8009728:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800972c:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8009730:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8009734:	68ce      	ldr	r6, [r1, #12]
 8009736:	69a1      	ldr	r1, [r4, #24]
 8009738:	6b85      	ldr	r5, [r0, #56]	; 0x38
 800973a:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 800973e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8009742:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8009746:	f8de 1004 	ldr.w	r1, [lr, #4]
 800974a:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800974e:	f8de 100c 	ldr.w	r1, [lr, #12]
 8009752:	64f9      	str	r1, [r7, #76]	; 0x4c
 8009754:	f8de 1008 	ldr.w	r1, [lr, #8]
 8009758:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 800975c:	6871      	ldr	r1, [r6, #4]
 800975e:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8009762:	68f1      	ldr	r1, [r6, #12]
 8009764:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8009768:	68b1      	ldr	r1, [r6, #8]
 800976a:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 800976e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8009772:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8009776:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800977a:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800977e:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8009782:	6889      	ldr	r1, [r1, #8]
 8009784:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8009788:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800978a:	e9d5 ab00 	ldrd	sl, fp, [r5]
 800978e:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8009792:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009794:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8009798:	6981      	ldr	r1, [r0, #24]
 800979a:	e9d0 890b 	ldrd	r8, r9, [r0, #44]	; 0x2c
 800979e:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f000 85b0 	beq.w	800a308 <forward_conv2d+0xc38>
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80097b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097b4:	4606      	mov	r6, r0
 80097b6:	69c0      	ldr	r0, [r0, #28]
 80097b8:	699b      	ldr	r3, [r3, #24]
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80097c0:	2a00      	cmp	r2, #0
 80097c2:	f000 8594 	beq.w	800a2ee <forward_conv2d+0xc1e>
 80097c6:	e9d2 2305 	ldrd	r2, r3, [r2, #20]
 80097ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80097ce:	6892      	ldr	r2, [r2, #8]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80097d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80097da:	f001 fb0d 	bl	800adf8 <ai_array_get_byte_size>
 80097de:	69a3      	ldr	r3, [r4, #24]
 80097e0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 80097e4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80097e8:	681c      	ldr	r4, [r3, #0]
 80097ea:	fa1f f289 	uxth.w	r2, r9
 80097ee:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80097f2:	fa1f f388 	uxth.w	r3, r8
 80097f6:	f3c4 15c6 	ubfx	r5, r4, #7, #7
 80097fa:	f3c4 5041 	ubfx	r0, r4, #21, #2
 80097fe:	f101 3eff 	add.w	lr, r1, #4294967295
 8009802:	f3c4 4c43 	ubfx	ip, r4, #17, #4
 8009806:	3a01      	subs	r2, #1
 8009808:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 800980c:	fa45 f000 	asr.w	r0, r5, r0
 8009810:	6a35      	ldr	r5, [r6, #32]
 8009812:	fb0e 1202 	mla	r2, lr, r2, r1
 8009816:	3b01      	subs	r3, #1
 8009818:	3c01      	subs	r4, #1
 800981a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800981e:	f8c7 50b0 	str.w	r5, [r7, #176]	; 0xb0
 8009822:	b285      	uxth	r5, r0
 8009824:	fb04 1103 	mla	r1, r4, r3, r1
 8009828:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800982c:	64ba      	str	r2, [r7, #72]	; 0x48
 800982e:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8009832:	4619      	mov	r1, r3
 8009834:	4ad1      	ldr	r2, [pc, #836]	; (8009b7c <forward_conv2d+0x4ac>)
 8009836:	2b00      	cmp	r3, #0
 8009838:	bf08      	it	eq
 800983a:	4611      	moveq	r1, r2
 800983c:	f1bc 0f04 	cmp.w	ip, #4
 8009840:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8009844:	f000 852a 	beq.w	800a29c <forward_conv2d+0xbcc>
 8009848:	f1bc 0f08 	cmp.w	ip, #8
 800984c:	f000 8526 	beq.w	800a29c <forward_conv2d+0xbcc>
 8009850:	fa1f f38a 	uxth.w	r3, sl
 8009854:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009858:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800985c:	425b      	negs	r3, r3
 800985e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009862:	2a00      	cmp	r2, #0
 8009864:	f000 8222 	beq.w	8009cac <forward_conv2d+0x5dc>
 8009868:	fa1f f48b 	uxth.w	r4, fp
 800986c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8009870:	f8b7 c0f0 	ldrh.w	ip, [r7, #240]	; 0xf0
 8009874:	fa0f f588 	sxth.w	r5, r8
 8009878:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800987c:	fa0f f689 	sxth.w	r6, r9
 8009880:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 8009884:	4264      	negs	r4, r4
 8009886:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800988a:	fb02 f200 	mul.w	r2, r2, r0
 800988e:	f8c7 c064 	str.w	ip, [r7, #100]	; 0x64
 8009892:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8009896:	f8b7 c100 	ldrh.w	ip, [r7, #256]	; 0x100
 800989a:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 800989e:	0084      	lsls	r4, r0, #2
 80098a0:	fb01 f300 	mul.w	r3, r1, r0
 80098a4:	ed9f 8ab6 	vldr	s16, [pc, #728]	; 8009b80 <forward_conv2d+0x4b0>
 80098a8:	fb00 f202 	mul.w	r2, r0, r2
 80098ac:	f8c7 c0b4 	str.w	ip, [r7, #180]	; 0xb4
 80098b0:	f8c7 50ac 	str.w	r5, [r7, #172]	; 0xac
 80098b4:	fb06 fc05 	mul.w	ip, r6, r5
 80098b8:	fb05 f500 	mul.w	r5, r5, r0
 80098bc:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80098c0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80098c4:	460a      	mov	r2, r1
 80098c6:	637d      	str	r5, [r7, #52]	; 0x34
 80098c8:	4605      	mov	r5, r0
 80098ca:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80098ce:	fb04 f505 	mul.w	r5, r4, r5
 80098d2:	653e      	str	r6, [r7, #80]	; 0x50
 80098d4:	66fc      	str	r4, [r7, #108]	; 0x6c
 80098d6:	fb01 f606 	mul.w	r6, r1, r6
 80098da:	4621      	mov	r1, r4
 80098dc:	607d      	str	r5, [r7, #4]
 80098de:	0085      	lsls	r5, r0, #2
 80098e0:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 80098e4:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
 80098e8:	4625      	mov	r5, r4
 80098ea:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 80098ec:	63be      	str	r6, [r7, #56]	; 0x38
 80098ee:	fb01 f505 	mul.w	r5, r1, r5
 80098f2:	f8d7 60f8 	ldr.w	r6, [r7, #248]	; 0xf8
 80098f6:	fb04 f402 	mul.w	r4, r4, r2
 80098fa:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80098fe:	00b6      	lsls	r6, r6, #2
 8009900:	62bd      	str	r5, [r7, #40]	; 0x28
 8009902:	fb00 f001 	mul.w	r0, r0, r1
 8009906:	009d      	lsls	r5, r3, #2
 8009908:	61bc      	str	r4, [r7, #24]
 800990a:	0094      	lsls	r4, r2, #2
 800990c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009910:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 8009914:	f8c7 60cc 	str.w	r6, [r7, #204]	; 0xcc
 8009918:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800991c:	62fd      	str	r5, [r7, #44]	; 0x2c
 800991e:	633c      	str	r4, [r7, #48]	; 0x30
 8009920:	6238      	str	r0, [r7, #32]
 8009922:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8009926:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800992a:	fb06 f000 	mul.w	r0, r6, r0
 800992e:	fb02 f201 	mul.w	r2, r2, r1
 8009932:	61f8      	str	r0, [r7, #28]
 8009934:	0118      	lsls	r0, r3, #4
 8009936:	00db      	lsls	r3, r3, #3
 8009938:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800993c:	60b8      	str	r0, [r7, #8]
 800993e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009942:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009946:	66bb      	str	r3, [r7, #104]	; 0x68
 8009948:	2300      	movs	r3, #0
 800994a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800994e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8009952:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009958:	2900      	cmp	r1, #0
 800995a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800995c:	4413      	add	r3, r2
 800995e:	bfb4      	ite	lt
 8009960:	2100      	movlt	r1, #0
 8009962:	2200      	movge	r2, #0
 8009964:	4283      	cmp	r3, r0
 8009966:	bf28      	it	cs
 8009968:	4603      	movcs	r3, r0
 800996a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800996e:	2801      	cmp	r0, #1
 8009970:	f000 82f9 	beq.w	8009f66 <forward_conv2d+0x896>
 8009974:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8009978:	4281      	cmp	r1, r0
 800997a:	f000 81b5 	beq.w	8009ce8 <forward_conv2d+0x618>
 800997e:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8009982:	2900      	cmp	r1, #0
 8009984:	f000 8171 	beq.w	8009c6a <forward_conv2d+0x59a>
 8009988:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800998a:	1a9b      	subs	r3, r3, r2
 800998c:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 8009990:	1815      	adds	r5, r2, r0
 8009992:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 8009996:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 800999a:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 800999e:	3d01      	subs	r5, #1
 80099a0:	fb92 f1f0 	sdiv	r1, r2, r0
 80099a4:	fb00 2111 	mls	r1, r0, r1, r2
 80099a8:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 80099ac:	2400      	movs	r4, #0
 80099ae:	1a41      	subs	r1, r0, r1
 80099b0:	67bc      	str	r4, [r7, #120]	; 0x78
 80099b2:	4604      	mov	r4, r0
 80099b4:	fb91 f0f0 	sdiv	r0, r1, r0
 80099b8:	fb04 1110 	mls	r1, r4, r0, r1
 80099bc:	4620      	mov	r0, r4
 80099be:	1a5b      	subs	r3, r3, r1
 80099c0:	4411      	add	r1, r2
 80099c2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80099c6:	4423      	add	r3, r4
 80099c8:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 80099cc:	fb02 f201 	mul.w	r2, r2, r1
 80099d0:	677a      	str	r2, [r7, #116]	; 0x74
 80099d2:	1e5a      	subs	r2, r3, #1
 80099d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80099d8:	fb92 f8f0 	sdiv	r8, r2, r0
 80099dc:	4619      	mov	r1, r3
 80099de:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80099e2:	46c2      	mov	sl, r8
 80099e4:	fbb1 f3f4 	udiv	r3, r1, r4
 80099e8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80099ec:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 80099f0:	fb95 f5f0 	sdiv	r5, r5, r0
 80099f4:	eba1 0008 	sub.w	r0, r1, r8
 80099f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80099fa:	eba1 0c03 	sub.w	ip, r1, r3
 80099fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009a02:	fbb2 f2f4 	udiv	r2, r2, r4
 8009a06:	fb0e f403 	mul.w	r4, lr, r3
 8009a0a:	0096      	lsls	r6, r2, #2
 8009a0c:	fb03 f305 	mul.w	r3, r3, r5
 8009a10:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8009a14:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009a16:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 8009a1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a1c:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8009a20:	fb04 f300 	mul.w	r3, r4, r0
 8009a24:	663e      	str	r6, [r7, #96]	; 0x60
 8009a26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009a2e:	1b9b      	subs	r3, r3, r6
 8009a30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a34:	008b      	lsls	r3, r1, #2
 8009a36:	647b      	str	r3, [r7, #68]	; 0x44
 8009a38:	00d3      	lsls	r3, r2, #3
 8009a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009a42:	189e      	adds	r6, r3, r2
 8009a44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f2c0 8138 	blt.w	8009cbe <forward_conv2d+0x5ee>
 8009a4e:	2100      	movs	r1, #0
 8009a50:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8009a52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a56:	4688      	mov	r8, r1
 8009a58:	460d      	mov	r5, r1
 8009a5a:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8009a5e:	f103 3cff 	add.w	ip, r3, #4294967295
 8009a62:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8009a66:	0080      	lsls	r0, r0, #2
 8009a68:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009a6c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009a70:	4422      	add	r2, r4
 8009a72:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8009a76:	4423      	add	r3, r4
 8009a78:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 8009a7c:	42a2      	cmp	r2, r4
 8009a7e:	bf94      	ite	ls
 8009a80:	ebc5 0202 	rsbls	r2, r5, r2
 8009a84:	ebc5 0204 	rsbhi	r2, r5, r4
 8009a88:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
 8009a8c:	eb08 0403 	add.w	r4, r8, r3
 8009a90:	1a52      	subs	r2, r2, r1
 8009a92:	462b      	mov	r3, r5
 8009a94:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8009a98:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8009a9c:	2d00      	cmp	r5, #0
 8009a9e:	bf08      	it	eq
 8009aa0:	4633      	moveq	r3, r6
 8009aa2:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8009aa6:	440a      	add	r2, r1
 8009aa8:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 8009aac:	42b3      	cmp	r3, r6
 8009aae:	f102 36ff 	add.w	r6, r2, #4294967295
 8009ab2:	fb00 5004 	mla	r0, r0, r4, r5
 8009ab6:	460a      	mov	r2, r1
 8009ab8:	fe08 6a06 	vseleq.f32	s12, s16, s12
 8009abc:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8009ac0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ac2:	fb96 f6f1 	sdiv	r6, r6, r1
 8009ac6:	fb9c f5f1 	sdiv	r5, ip, r1
 8009aca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009acc:	440d      	add	r5, r1
 8009ace:	fb06 0112 	mls	r1, r6, r2, r0
 8009ad2:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8009ad6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8009ada:	fb0e 0505 	mla	r5, lr, r5, r0
 8009ade:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8009ae2:	1b92      	subs	r2, r2, r6
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	d073      	beq.n	8009bd0 <forward_conv2d+0x500>
 8009ae8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009aea:	fb02 f80e 	mul.w	r8, r2, lr
 8009aee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009af0:	fb00 fb01 	mul.w	fp, r0, r1
 8009af4:	2a00      	cmp	r2, #0
 8009af6:	d06b      	beq.n	8009bd0 <forward_conv2d+0x500>
 8009af8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009afa:	189a      	adds	r2, r3, r2
 8009afc:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8009b00:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009b04:	1ad3      	subs	r3, r2, r3
 8009b06:	643b      	str	r3, [r7, #64]	; 0x40
 8009b08:	2300      	movs	r3, #0
 8009b0a:	673b      	str	r3, [r7, #112]	; 0x70
 8009b0c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8009b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b14:	4413      	add	r3, r2
 8009b16:	188a      	adds	r2, r1, r2
 8009b18:	657b      	str	r3, [r7, #84]	; 0x54
 8009b1a:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8009b1e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b26:	f1ba 0f00 	cmp.w	sl, #0
 8009b2a:	ecf3 7a01 	vldmia	r3!, {s15}
 8009b2e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009b32:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009b36:	f340 80c0 	ble.w	8009cba <forward_conv2d+0x5ea>
 8009b3a:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8009b3e:	f04f 0c00 	mov.w	ip, #0
 8009b42:	2e00      	cmp	r6, #0
 8009b44:	dd1e      	ble.n	8009b84 <forward_conv2d+0x4b4>
 8009b46:	2100      	movs	r1, #0
 8009b48:	eb00 040e 	add.w	r4, r0, lr
 8009b4c:	4284      	cmp	r4, r0
 8009b4e:	d910      	bls.n	8009b72 <forward_conv2d+0x4a2>
 8009b50:	4603      	mov	r3, r0
 8009b52:	462a      	mov	r2, r5
 8009b54:	ecb3 7a01 	vldmia	r3!, {s14}
 8009b58:	ecf2 6a01 	vldmia	r2!, {s13}
 8009b5c:	429c      	cmp	r4, r3
 8009b5e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009b62:	d8f7      	bhi.n	8009b54 <forward_conv2d+0x484>
 8009b64:	43c3      	mvns	r3, r0
 8009b66:	441c      	add	r4, r3
 8009b68:	f024 0403 	bic.w	r4, r4, #3
 8009b6c:	3404      	adds	r4, #4
 8009b6e:	4425      	add	r5, r4
 8009b70:	4420      	add	r0, r4
 8009b72:	3101      	adds	r1, #1
 8009b74:	4448      	add	r0, r9
 8009b76:	428e      	cmp	r6, r1
 8009b78:	d1e6      	bne.n	8009b48 <forward_conv2d+0x478>
 8009b7a:	e003      	b.n	8009b84 <forward_conv2d+0x4b4>
 8009b7c:	08009051 	.word	0x08009051
 8009b80:	00000000 	.word	0x00000000
 8009b84:	f10c 0c01 	add.w	ip, ip, #1
 8009b88:	4458      	add	r0, fp
 8009b8a:	4445      	add	r5, r8
 8009b8c:	45e2      	cmp	sl, ip
 8009b8e:	d1d8      	bne.n	8009b42 <forward_conv2d+0x472>
 8009b90:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009b94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b98:	441d      	add	r5, r3
 8009b9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009b9e:	ece3 7a01 	vstmia	r3!, {s15}
 8009ba2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009ba6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d1b9      	bne.n	8009b22 <forward_conv2d+0x452>
 8009bae:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8009bb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009bb4:	4472      	add	r2, lr
 8009bb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009bb8:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009bc0:	673b      	str	r3, [r7, #112]	; 0x70
 8009bc2:	1a52      	subs	r2, r2, r1
 8009bc4:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8009bc8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d19d      	bne.n	8009b0c <forward_conv2d+0x43c>
 8009bd0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8009bd4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009bd8:	4608      	mov	r0, r1
 8009bda:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8009bde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009be0:	4410      	add	r0, r2
 8009be2:	3301      	adds	r3, #1
 8009be4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8009be8:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8009bec:	67bb      	str	r3, [r7, #120]	; 0x78
 8009bee:	4401      	add	r1, r0
 8009bf0:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8009bf4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8009bf8:	1a8a      	subs	r2, r1, r2
 8009bfa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009bfe:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8009c02:	429a      	cmp	r2, r3
 8009c04:	f47f af1a 	bne.w	8009a3c <forward_conv2d+0x36c>
 8009c08:	f8d7 b024 	ldr.w	fp, [r7, #36]	; 0x24
 8009c0c:	2400      	movs	r4, #0
 8009c0e:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 8009c12:	f8d7 80e4 	ldr.w	r8, [r7, #228]	; 0xe4
 8009c16:	46a2      	mov	sl, r4
 8009c18:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 8009c1a:	f8d7 90c4 	ldr.w	r9, [r7, #196]	; 0xc4
 8009c1e:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8009c22:	4633      	mov	r3, r6
 8009c24:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009c28:	f10a 0a01 	add.w	sl, sl, #1
 8009c2c:	608d      	str	r5, [r1, #8]
 8009c2e:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8009c32:	4416      	add	r6, r2
 8009c34:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8009c38:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8009c3c:	4405      	add	r5, r0
 8009c3e:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8009c42:	4608      	mov	r0, r1
 8009c44:	47a0      	blx	r4
 8009c46:	eba6 0309 	sub.w	r3, r6, r9
 8009c4a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	bfa8      	it	ge
 8009c52:	464e      	movge	r6, r9
 8009c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c58:	4553      	cmp	r3, sl
 8009c5a:	d1e0      	bne.n	8009c1e <forward_conv2d+0x54e>
 8009c5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009c60:	69fa      	ldr	r2, [r7, #28]
 8009c62:	66be      	str	r6, [r7, #104]	; 0x68
 8009c64:	4413      	add	r3, r2
 8009c66:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009c6a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8009c6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009c70:	4604      	mov	r4, r0
 8009c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c76:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8009c7a:	699b      	ldr	r3, [r3, #24]
 8009c7c:	4414      	add	r4, r2
 8009c7e:	1a82      	subs	r2, r0, r2
 8009c80:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009c84:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8009c88:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8009c8c:	3101      	adds	r1, #1
 8009c8e:	68da      	ldr	r2, [r3, #12]
 8009c90:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 8009c94:	609a      	str	r2, [r3, #8]
 8009c96:	69bc      	ldr	r4, [r7, #24]
 8009c98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c9c:	4420      	add	r0, r4
 8009c9e:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8009ca2:	428b      	cmp	r3, r1
 8009ca4:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8009ca8:	f47f ae51 	bne.w	800994e <forward_conv2d+0x27e>
 8009cac:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	ecbd 8b08 	vpop	{d8-d11}
 8009cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cba:	461a      	mov	r2, r3
 8009cbc:	e76a      	b.n	8009b94 <forward_conv2d+0x4c4>
 8009cbe:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8009cc2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009cc6:	460d      	mov	r5, r1
 8009cc8:	4688      	mov	r8, r1
 8009cca:	1853      	adds	r3, r2, r1
 8009ccc:	4611      	mov	r1, r2
 8009cce:	fb95 f2f2 	sdiv	r2, r5, r2
 8009cd2:	fb01 5212 	mls	r2, r1, r2, r5
 8009cd6:	460c      	mov	r4, r1
 8009cd8:	1a8a      	subs	r2, r1, r2
 8009cda:	fb92 f1f1 	sdiv	r1, r2, r1
 8009cde:	fb04 2111 	mls	r1, r4, r1, r2
 8009ce2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009ce4:	1888      	adds	r0, r1, r2
 8009ce6:	e6b8      	b.n	8009a5a <forward_conv2d+0x38a>
 8009ce8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009cea:	2901      	cmp	r1, #1
 8009cec:	f47f ae47 	bne.w	800997e <forward_conv2d+0x2ae>
 8009cf0:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8009cf4:	2900      	cmp	r1, #0
 8009cf6:	d0b8      	beq.n	8009c6a <forward_conv2d+0x59a>
 8009cf8:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8009cfc:	1a99      	subs	r1, r3, r2
 8009cfe:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8009d02:	0083      	lsls	r3, r0, #2
 8009d04:	fb02 f000 	mul.w	r0, r2, r0
 8009d08:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8009d0c:	6778      	str	r0, [r7, #116]	; 0x74
 8009d0e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8009d12:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 8009d16:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8009d1a:	1a41      	subs	r1, r0, r1
 8009d1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d1e:	fb00 f202 	mul.w	r2, r0, r2
 8009d22:	fb03 f301 	mul.w	r3, r3, r1
 8009d26:	627a      	str	r2, [r7, #36]	; 0x24
 8009d28:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d2e:	2300      	movs	r3, #0
 8009d30:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8009d34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009d38:	67bb      	str	r3, [r7, #120]	; 0x78
 8009d3a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8009d3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009d42:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8009d46:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	ebc3 7283 	rsb	r2, r3, r3, lsl #30
 8009d50:	643b      	str	r3, [r7, #64]	; 0x40
 8009d52:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
 8009d56:	0092      	lsls	r2, r2, #2
 8009d58:	00db      	lsls	r3, r3, #3
 8009d5a:	657a      	str	r2, [r7, #84]	; 0x54
 8009d5c:	603b      	str	r3, [r7, #0]
 8009d5e:	008b      	lsls	r3, r1, #2
 8009d60:	60fb      	str	r3, [r7, #12]
 8009d62:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f2c0 8280 	blt.w	800a26c <forward_conv2d+0xb9c>
 8009d6c:	2400      	movs	r4, #0
 8009d6e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009d70:	4621      	mov	r1, r4
 8009d72:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8009d76:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
 8009d7a:	1818      	adds	r0, r3, r0
 8009d7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009d80:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
 8009d84:	18f3      	adds	r3, r6, r3
 8009d86:	4420      	add	r0, r4
 8009d88:	461c      	mov	r4, r3
 8009d8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d8e:	0080      	lsls	r0, r0, #2
 8009d90:	429c      	cmp	r4, r3
 8009d92:	bf28      	it	cs
 8009d94:	461c      	movcs	r4, r3
 8009d96:	1a64      	subs	r4, r4, r1
 8009d98:	2d00      	cmp	r5, #0
 8009d9a:	f000 8258 	beq.w	800a24e <forward_conv2d+0xb7e>
 8009d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009da2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 8009da6:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8009daa:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 8009dae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009db2:	428d      	cmp	r5, r1
 8009db4:	462a      	mov	r2, r5
 8009db6:	eba6 0104 	sub.w	r1, r6, r4
 8009dba:	eba3 0304 	sub.w	r3, r3, r4
 8009dbe:	fe08 4a04 	vseleq.f32	s8, s16, s8
 8009dc2:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8009dc4:	f8d7 60a8 	ldr.w	r6, [r7, #168]	; 0xa8
 8009dc8:	4428      	add	r0, r5
 8009dca:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 8009dce:	fb05 6e00 	mla	lr, r5, r0, r6
 8009dd2:	eb0e 000b 	add.w	r0, lr, fp
 8009dd6:	4570      	cmp	r0, lr
 8009dd8:	6478      	str	r0, [r7, #68]	; 0x44
 8009dda:	f240 80a7 	bls.w	8009f2c <forward_conv2d+0x85c>
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	fb01 f10b 	mul.w	r1, r1, fp
 8009de4:	f024 0803 	bic.w	r8, r4, #3
 8009de8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dee:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f000 809a 	beq.w	8009f2c <forward_conv2d+0x85c>
 8009df8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009dfa:	f108 33ff 	add.w	r3, r8, #4294967295
 8009dfe:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8009e02:	089b      	lsrs	r3, r3, #2
 8009e04:	4401      	add	r1, r0
 8009e06:	68f8      	ldr	r0, [r7, #12]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	1810      	adds	r0, r2, r0
 8009e0c:	1a8a      	subs	r2, r1, r2
 8009e0e:	617a      	str	r2, [r7, #20]
 8009e10:	fb03 f20a 	mul.w	r2, r3, sl
 8009e14:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
 8009e18:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009e1a:	011a      	lsls	r2, r3, #4
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	663a      	str	r2, [r7, #96]	; 0x60
 8009e20:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e28:	6979      	ldr	r1, [r7, #20]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	188a      	adds	r2, r1, r2
 8009e2e:	613b      	str	r3, [r7, #16]
 8009e30:	673a      	str	r2, [r7, #112]	; 0x70
 8009e32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e3a:	ecf3 6a01 	vldmia	r3!, {s13}
 8009e3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e42:	ee66 6a84 	vmul.f32	s13, s13, s8
 8009e46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	dd57      	ble.n	8009efe <forward_conv2d+0x82e>
 8009e4e:	4676      	mov	r6, lr
 8009e50:	f04f 0c00 	mov.w	ip, #0
 8009e54:	f1b8 0f00 	cmp.w	r8, #0
 8009e58:	f340 81f7 	ble.w	800a24a <forward_conv2d+0xb7a>
 8009e5c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009e60:	f109 0310 	add.w	r3, r9, #16
 8009e64:	2000      	movs	r0, #0
 8009e66:	18b1      	adds	r1, r6, r2
 8009e68:	4632      	mov	r2, r6
 8009e6a:	eb02 050b 	add.w	r5, r2, fp
 8009e6e:	ed53 7a03 	vldr	s15, [r3, #-12]
 8009e72:	ed92 6a00 	vldr	s12, [r2]
 8009e76:	3004      	adds	r0, #4
 8009e78:	ed95 7a00 	vldr	s14, [r5]
 8009e7c:	eb01 050b 	add.w	r5, r1, fp
 8009e80:	ed53 4a04 	vldr	s9, [r3, #-16]
 8009e84:	4540      	cmp	r0, r8
 8009e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e8a:	ed13 5a02 	vldr	s10, [r3, #-8]
 8009e8e:	edd1 5a00 	vldr	s11, [r1]
 8009e92:	4452      	add	r2, sl
 8009e94:	ed95 7a00 	vldr	s14, [r5]
 8009e98:	4451      	add	r1, sl
 8009e9a:	eee4 7a86 	vfma.f32	s15, s9, s12
 8009e9e:	ed13 6a01 	vldr	s12, [r3, #-4]
 8009ea2:	f103 0310 	add.w	r3, r3, #16
 8009ea6:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009eaa:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009eae:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009eb2:	dbda      	blt.n	8009e6a <forward_conv2d+0x79a>
 8009eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009eb6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009eb8:	441e      	add	r6, r3
 8009eba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ebc:	4499      	add	r9, r3
 8009ebe:	4284      	cmp	r4, r0
 8009ec0:	dd11      	ble.n	8009ee6 <forward_conv2d+0x816>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	4633      	mov	r3, r6
 8009ec6:	4649      	mov	r1, r9
 8009ec8:	3201      	adds	r2, #1
 8009eca:	edd3 7a00 	vldr	s15, [r3]
 8009ece:	ecb1 7a01 	vldmia	r1!, {s14}
 8009ed2:	445b      	add	r3, fp
 8009ed4:	42a2      	cmp	r2, r4
 8009ed6:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009eda:	d1f5      	bne.n	8009ec8 <forward_conv2d+0x7f8>
 8009edc:	1a20      	subs	r0, r4, r0
 8009ede:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8009ee2:	fb00 660b 	mla	r6, r0, fp, r6
 8009ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009eea:	f10c 0c01 	add.w	ip, ip, #1
 8009eee:	441e      	add	r6, r3
 8009ef0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009ef4:	4499      	add	r9, r3
 8009ef6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009efa:	4563      	cmp	r3, ip
 8009efc:	d1aa      	bne.n	8009e54 <forward_conv2d+0x784>
 8009efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f00:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009f04:	4499      	add	r9, r3
 8009f06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f08:	ece3 6a01 	vstmia	r3!, {s13}
 8009f0c:	673b      	str	r3, [r7, #112]	; 0x70
 8009f0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d18f      	bne.n	8009e36 <forward_conv2d+0x766>
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	f10e 0e04 	add.w	lr, lr, #4
 8009f1c:	683a      	ldr	r2, [r7, #0]
 8009f1e:	1a9b      	subs	r3, r3, r2
 8009f20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f26:	4573      	cmp	r3, lr
 8009f28:	f63f af7b 	bhi.w	8009e22 <forward_conv2d+0x752>
 8009f2c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009f30:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8009f34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f36:	440a      	add	r2, r1
 8009f38:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	4608      	mov	r0, r1
 8009f40:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8009f44:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8009f48:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009f4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009f4e:	4410      	add	r0, r2
 8009f50:	1a8a      	subs	r2, r1, r2
 8009f52:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8009f56:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8009f5a:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	f47f aeff 	bne.w	8009d62 <forward_conv2d+0x692>
 8009f64:	e652      	b.n	8009c0c <forward_conv2d+0x53c>
 8009f66:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8009f68:	2801      	cmp	r0, #1
 8009f6a:	f47f ad08 	bne.w	800997e <forward_conv2d+0x2ae>
 8009f6e:	1a9b      	subs	r3, r3, r2
 8009f70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f76:	fb00 f101 	mul.w	r1, r0, r1
 8009f7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009f7e:	6779      	str	r1, [r7, #116]	; 0x74
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f000 815c 	beq.w	800a23e <forward_conv2d+0xb6e>
 8009f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	fb03 f202 	mul.w	r2, r3, r2
 8009f8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f92:	4401      	add	r1, r0
 8009f94:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 8009f98:	330a      	adds	r3, #10
 8009f9a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009f9c:	6439      	str	r1, [r7, #64]	; 0x40
 8009f9e:	1a12      	subs	r2, r2, r0
 8009fa0:	f023 0307 	bic.w	r3, r3, #7
 8009fa4:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8009fa8:	647a      	str	r2, [r7, #68]	; 0x44
 8009faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fb0:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8009fb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009fb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fbc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fc8:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 8009fcc:	ebad 0d03 	sub.w	sp, sp, r3
 8009fd0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009fd4:	ab02      	add	r3, sp, #8
 8009fd6:	663b      	str	r3, [r7, #96]	; 0x60
 8009fd8:	b132      	cbz	r2, 8009fe8 <forward_conv2d+0x918>
 8009fda:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8009fe4:	f000 ff62 	bl	800aeac <memcpy>
 8009fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f000 8152 	beq.w	800a296 <forward_conv2d+0xbc6>
 8009ff2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ff6:	ed93 2a00 	vldr	s4, [r3]
 8009ffa:	3304      	adds	r3, #4
 8009ffc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a000:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a004:	2b00      	cmp	r3, #0
 800a006:	f000 8100 	beq.w	800a20a <forward_conv2d+0xb3a>
 800a00a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a00e:	f04f 0b00 	mov.w	fp, #0
 800a012:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a016:	eb03 0802 	add.w	r8, r3, r2
 800a01a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a01c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a022:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a026:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a02a:	67bb      	str	r3, [r7, #120]	; 0x78
 800a02c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a030:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a034:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f2c0 8124 	blt.w	800a286 <forward_conv2d+0xbb6>
 800a03e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800a042:	2300      	movs	r3, #0
 800a044:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a046:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800a04a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800a04e:	4421      	add	r1, r4
 800a050:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 800a052:	4540      	cmp	r0, r8
 800a054:	bf94      	ite	ls
 800a056:	ebc3 0300 	rsbls	r3, r3, r0
 800a05a:	ebc3 0308 	rsbhi	r3, r3, r8
 800a05e:	4422      	add	r2, r4
 800a060:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800a064:	1ac0      	subs	r0, r0, r3
 800a066:	eba4 0903 	sub.w	r9, r4, r3
 800a06a:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 800a06e:	fb03 f304 	mul.w	r3, r3, r4
 800a072:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 800a076:	2c00      	cmp	r4, #0
 800a078:	f340 8102 	ble.w	800a280 <forward_conv2d+0xbb0>
 800a07c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800a07e:	f023 0c0f 	bic.w	ip, r3, #15
 800a082:	eef0 6a42 	vmov.f32	s13, s4
 800a086:	f04f 0e00 	mov.w	lr, #0
 800a08a:	fb04 f000 	mul.w	r0, r4, r0
 800a08e:	fb04 f909 	mul.w	r9, r4, r9
 800a092:	65b8      	str	r0, [r7, #88]	; 0x58
 800a094:	f10c 30ff 	add.w	r0, ip, #4294967295
 800a098:	0900      	lsrs	r0, r0, #4
 800a09a:	3001      	adds	r0, #1
 800a09c:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800a0a0:	0100      	lsls	r0, r0, #4
 800a0a2:	6578      	str	r0, [r7, #84]	; 0x54
 800a0a4:	f1bc 0f00 	cmp.w	ip, #0
 800a0a8:	f340 80e8 	ble.w	800a27c <forward_conv2d+0xbac>
 800a0ac:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800a0b0:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800a0b4:	2500      	movs	r5, #0
 800a0b6:	ed14 7a0f 	vldr	s14, [r4, #-60]	; 0xffffffc4
 800a0ba:	3510      	adds	r5, #16
 800a0bc:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800a0c0:	3440      	adds	r4, #64	; 0x40
 800a0c2:	ed14 6a20 	vldr	s12, [r4, #-128]	; 0xffffff80
 800a0c6:	4565      	cmp	r5, ip
 800a0c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0cc:	ed10 7a10 	vldr	s14, [r0, #-64]	; 0xffffffc0
 800a0d0:	ed14 3a1e 	vldr	s6, [r4, #-120]	; 0xffffff88
 800a0d4:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800a0d8:	ed50 3a1e 	vldr	s7, [r0, #-120]	; 0xffffff88
 800a0dc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a0e0:	ed14 4a1d 	vldr	s8, [r4, #-116]	; 0xffffff8c
 800a0e4:	ed50 4a1d 	vldr	s9, [r0, #-116]	; 0xffffff8c
 800a0e8:	ed14 5a1c 	vldr	s10, [r4, #-112]	; 0xffffff90
 800a0ec:	ed50 5a1c 	vldr	s11, [r0, #-112]	; 0xffffff90
 800a0f0:	ed14 6a1b 	vldr	s12, [r4, #-108]	; 0xffffff94
 800a0f4:	ed10 7a1b 	vldr	s14, [r0, #-108]	; 0xffffff94
 800a0f8:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a0fc:	ed54 ba1a 	vldr	s23, [r4, #-104]	; 0xffffff98
 800a100:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 800a104:	ed54 aa19 	vldr	s21, [r4, #-100]	; 0xffffff9c
 800a108:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 800a10c:	ed50 9a18 	vldr	s19, [r0, #-96]	; 0xffffffa0
 800a110:	ed14 9a18 	vldr	s18, [r4, #-96]	; 0xffffffa0
 800a114:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a118:	ed50 8a17 	vldr	s17, [r0, #-92]	; 0xffffffa4
 800a11c:	ed14 0a17 	vldr	s0, [r4, #-92]	; 0xffffffa4
 800a120:	ed54 0a16 	vldr	s1, [r4, #-88]	; 0xffffffa8
 800a124:	ed10 1a16 	vldr	s2, [r0, #-88]	; 0xffffffa8
 800a128:	ed54 1a15 	vldr	s3, [r4, #-84]	; 0xffffffac
 800a12c:	ed50 2a15 	vldr	s5, [r0, #-84]	; 0xffffffac
 800a130:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a134:	ed14 3a14 	vldr	s6, [r4, #-80]	; 0xffffffb0
 800a138:	ed50 3a14 	vldr	s7, [r0, #-80]	; 0xffffffb0
 800a13c:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 800a140:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 800a144:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 800a148:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800a14c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a150:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 800a154:	ed14 7a11 	vldr	s14, [r4, #-68]	; 0xffffffbc
 800a158:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800a15c:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800a160:	eee9 7a89 	vfma.f32	s15, s19, s18
 800a164:	eee8 7a80 	vfma.f32	s15, s17, s0
 800a168:	eee0 7a81 	vfma.f32	s15, s1, s2
 800a16c:	eee1 7aa2 	vfma.f32	s15, s3, s5
 800a170:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a174:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a178:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a17c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a180:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a184:	db97      	blt.n	800a0b6 <forward_conv2d+0x9e6>
 800a186:	4451      	add	r1, sl
 800a188:	4452      	add	r2, sl
 800a18a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a18c:	4283      	cmp	r3, r0
 800a18e:	dd0f      	ble.n	800a1b0 <forward_conv2d+0xae0>
 800a190:	4604      	mov	r4, r0
 800a192:	460e      	mov	r6, r1
 800a194:	4615      	mov	r5, r2
 800a196:	3401      	adds	r4, #1
 800a198:	ecb5 7a01 	vldmia	r5!, {s14}
 800a19c:	ecf6 7a01 	vldmia	r6!, {s15}
 800a1a0:	42a3      	cmp	r3, r4
 800a1a2:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a1a6:	d1f6      	bne.n	800a196 <forward_conv2d+0xac6>
 800a1a8:	1a18      	subs	r0, r3, r0
 800a1aa:	0080      	lsls	r0, r0, #2
 800a1ac:	4402      	add	r2, r0
 800a1ae:	4401      	add	r1, r0
 800a1b0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a1b2:	f10e 0e01 	add.w	lr, lr, #1
 800a1b6:	4449      	add	r1, r9
 800a1b8:	4402      	add	r2, r0
 800a1ba:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800a1be:	4570      	cmp	r0, lr
 800a1c0:	f47f af70 	bne.w	800a0a4 <forward_conv2d+0x9d4>
 800a1c4:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800a1c8:	f10b 0b01 	add.w	fp, fp, #1
 800a1cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1ce:	4608      	mov	r0, r1
 800a1d0:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800a1d4:	edc3 6a00 	vstr	s13, [r3]
 800a1d8:	440b      	add	r3, r1
 800a1da:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800a1de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a1e2:	67bb      	str	r3, [r7, #120]	; 0x78
 800a1e4:	6a3b      	ldr	r3, [r7, #32]
 800a1e6:	4410      	add	r0, r2
 800a1e8:	eba8 0802 	sub.w	r8, r8, r2
 800a1ec:	1ac9      	subs	r1, r1, r3
 800a1ee:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 800a1f2:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 800a1f6:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800a1fa:	4419      	add	r1, r3
 800a1fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a200:	455b      	cmp	r3, fp
 800a202:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 800a206:	f47f af15 	bne.w	800a034 <forward_conv2d+0x964>
 800a20a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a20e:	3301      	adds	r3, #1
 800a210:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a214:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800a218:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800a21c:	440a      	add	r2, r1
 800a21e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800a222:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800a226:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 800a22a:	3204      	adds	r2, #4
 800a22c:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 800a230:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800a234:	429a      	cmp	r2, r3
 800a236:	f47f aec6 	bne.w	8009fc6 <forward_conv2d+0x8f6>
 800a23a:	f8d7 b024 	ldr.w	fp, [r7, #36]	; 0x24
 800a23e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a242:	2b00      	cmp	r3, #0
 800a244:	f47f ace2 	bne.w	8009c0c <forward_conv2d+0x53c>
 800a248:	e50f      	b.n	8009c6a <forward_conv2d+0x59a>
 800a24a:	2000      	movs	r0, #0
 800a24c:	e637      	b.n	8009ebe <forward_conv2d+0x7ee>
 800a24e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a252:	eeb0 4a48 	vmov.f32	s8, s16
 800a256:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 800a25a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a25e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800a262:	1b19      	subs	r1, r3, r4
 800a264:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a268:	1b1b      	subs	r3, r3, r4
 800a26a:	e5aa      	b.n	8009dc2 <forward_conv2d+0x6f2>
 800a26c:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 800a270:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a272:	4621      	mov	r1, r4
 800a274:	191a      	adds	r2, r3, r4
 800a276:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a27a:	e57a      	b.n	8009d72 <forward_conv2d+0x6a2>
 800a27c:	2000      	movs	r0, #0
 800a27e:	e785      	b.n	800a18c <forward_conv2d+0xabc>
 800a280:	eef0 6a42 	vmov.f32	s13, s4
 800a284:	e79e      	b.n	800a1c4 <forward_conv2d+0xaf4>
 800a286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a28a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a28c:	eba8 0303 	sub.w	r3, r8, r3
 800a290:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a294:	e6d7      	b.n	800a046 <forward_conv2d+0x976>
 800a296:	eeb0 2a48 	vmov.f32	s4, s16
 800a29a:	e6b1      	b.n	800a000 <forward_conv2d+0x930>
 800a29c:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800a2a0:	68ca      	ldr	r2, [r1, #12]
 800a2a2:	2a00      	cmp	r2, #0
 800a2a4:	f43f aad4 	beq.w	8009850 <forward_conv2d+0x180>
 800a2a8:	6973      	ldr	r3, [r6, #20]
 800a2aa:	8818      	ldrh	r0, [r3, #0]
 800a2ac:	2803      	cmp	r0, #3
 800a2ae:	d91b      	bls.n	800a2e8 <forward_conv2d+0xc18>
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b4:	b1ab      	cbz	r3, 800a2e2 <forward_conv2d+0xc12>
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	b19b      	cbz	r3, 800a2e2 <forward_conv2d+0xc12>
 800a2ba:	699c      	ldr	r4, [r3, #24]
 800a2bc:	462b      	mov	r3, r5
 800a2be:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 800a2c2:	6889      	ldr	r1, [r1, #8]
 800a2c4:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800a2c8:	2800      	cmp	r0, #0
 800a2ca:	bf18      	it	ne
 800a2cc:	4605      	movne	r5, r0
 800a2ce:	f8c7 50fc 	str.w	r5, [r7, #252]	; 0xfc
 800a2d2:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 800a2d6:	e9cd 5400 	strd	r5, r4, [sp]
 800a2da:	f7ff f9a9 	bl	8009630 <ai_dict_decompress_f32>
 800a2de:	f7ff bab7 	b.w	8009850 <forward_conv2d+0x180>
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	deff      	udf	#255	; 0xff
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	deff      	udf	#255	; 0xff
 800a2ee:	b178      	cbz	r0, 800a310 <forward_conv2d+0xc40>
 800a2f0:	6883      	ldr	r3, [r0, #8]
 800a2f2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800a2f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a304:	f7ff ba70 	b.w	80097e8 <forward_conv2d+0x118>
 800a308:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a30c:	f7ff ba50 	b.w	80097b0 <forward_conv2d+0xe0>
 800a310:	2301      	movs	r3, #1
 800a312:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a316:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800a31a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a31e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a322:	f7ff ba61 	b.w	80097e8 <forward_conv2d+0x118>
 800a326:	3218      	adds	r2, #24
 800a328:	d007      	beq.n	800a33a <forward_conv2d+0xc6a>
 800a32a:	462b      	mov	r3, r5
 800a32c:	462c      	mov	r4, r5
 800a32e:	462a      	mov	r2, r5
 800a330:	f7ff b9f8 	b.w	8009724 <forward_conv2d+0x54>
 800a334:	2300      	movs	r3, #0
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	deff      	udf	#255	; 0xff
 800a33a:	68d3      	ldr	r3, [r2, #12]
 800a33c:	deff      	udf	#255	; 0xff
 800a33e:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 800a342:	f7ff b9de 	b.w	8009702 <forward_conv2d+0x32>
 800a346:	2300      	movs	r3, #0
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	deff      	udf	#255	; 0xff
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	deff      	udf	#255	; 0xff
 800a350:	2300      	movs	r3, #0
 800a352:	f7ff b9e6 	b.w	8009722 <forward_conv2d+0x52>
 800a356:	bf00      	nop

0800a358 <forward_dense>:
 800a358:	6942      	ldr	r2, [r0, #20]
 800a35a:	8813      	ldrh	r3, [r2, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f000 81c8 	beq.w	800a6f2 <forward_dense+0x39a>
 800a362:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a366:	ed2d 8b08 	vpush	{d8-d11}
 800a36a:	6851      	ldr	r1, [r2, #4]
 800a36c:	b091      	sub	sp, #68	; 0x44
 800a36e:	684d      	ldr	r5, [r1, #4]
 800a370:	b105      	cbz	r5, 800a374 <forward_dense+0x1c>
 800a372:	682d      	ldr	r5, [r5, #0]
 800a374:	2b01      	cmp	r3, #1
 800a376:	f240 81b9 	bls.w	800a6ec <forward_dense+0x394>
 800a37a:	690a      	ldr	r2, [r1, #16]
 800a37c:	b102      	cbz	r2, 800a380 <forward_dense+0x28>
 800a37e:	6812      	ldr	r2, [r2, #0]
 800a380:	2b02      	cmp	r3, #2
 800a382:	f000 81b8 	beq.w	800a6f6 <forward_dense+0x39e>
 800a386:	69cb      	ldr	r3, [r1, #28]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f000 8209 	beq.w	800a7a0 <forward_dense+0x448>
 800a38e:	6818      	ldr	r0, [r3, #0]
 800a390:	9008      	str	r0, [sp, #32]
 800a392:	f111 0018 	adds.w	r0, r1, #24
 800a396:	f000 81dc 	beq.w	800a752 <forward_dense+0x3fa>
 800a39a:	8b09      	ldrh	r1, [r1, #24]
 800a39c:	2901      	cmp	r1, #1
 800a39e:	f240 81fc 	bls.w	800a79a <forward_dense+0x442>
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	f000 81d7 	beq.w	800a756 <forward_dense+0x3fe>
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	9306      	str	r3, [sp, #24]
 800a3ac:	9b08      	ldr	r3, [sp, #32]
 800a3ae:	68d6      	ldr	r6, [r2, #12]
 800a3b0:	699b      	ldr	r3, [r3, #24]
 800a3b2:	68b0      	ldr	r0, [r6, #8]
 800a3b4:	681f      	ldr	r7, [r3, #0]
 800a3b6:	68f4      	ldr	r4, [r6, #12]
 800a3b8:	f3c7 1ec6 	ubfx	lr, r7, #7, #7
 800a3bc:	f3c7 5c41 	ubfx	ip, r7, #21, #2
 800a3c0:	f3c7 4743 	ubfx	r7, r7, #17, #4
 800a3c4:	fb04 f000 	mul.w	r0, r4, r0
 800a3c8:	fa4e f10c 	asr.w	r1, lr, ip
 800a3cc:	2f04      	cmp	r7, #4
 800a3ce:	9007      	str	r0, [sp, #28]
 800a3d0:	910b      	str	r1, [sp, #44]	; 0x2c
 800a3d2:	68e9      	ldr	r1, [r5, #12]
 800a3d4:	6870      	ldr	r0, [r6, #4]
 800a3d6:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800a3da:	f000 81db 	beq.w	800a794 <forward_dense+0x43c>
 800a3de:	2f08      	cmp	r7, #8
 800a3e0:	f000 81d8 	beq.w	800a794 <forward_dense+0x43c>
 800a3e4:	f04f 0a00 	mov.w	sl, #0
 800a3e8:	6992      	ldr	r2, [r2, #24]
 800a3ea:	0080      	lsls	r0, r0, #2
 800a3ec:	69a9      	ldr	r1, [r5, #24]
 800a3ee:	6894      	ldr	r4, [r2, #8]
 800a3f0:	9a08      	ldr	r2, [sp, #32]
 800a3f2:	9009      	str	r0, [sp, #36]	; 0x24
 800a3f4:	1826      	adds	r6, r4, r0
 800a3f6:	6952      	ldr	r2, [r2, #20]
 800a3f8:	9404      	str	r4, [sp, #16]
 800a3fa:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800a3fe:	9a07      	ldr	r2, [sp, #28]
 800a400:	688f      	ldr	r7, [r1, #8]
 800a402:	2a00      	cmp	r2, #0
 800a404:	f000 81c1 	beq.w	800a78a <forward_dense+0x432>
 800a408:	f1a8 0210 	sub.w	r2, r8, #16
 800a40c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800a410:	689d      	ldr	r5, [r3, #8]
 800a412:	0912      	lsrs	r2, r2, #4
 800a414:	910a      	str	r1, [sp, #40]	; 0x28
 800a416:	2100      	movs	r1, #0
 800a418:	9b06      	ldr	r3, [sp, #24]
 800a41a:	3201      	adds	r2, #1
 800a41c:	eddf 2acf 	vldr	s5, [pc, #828]	; 800a75c <forward_dense+0x404>
 800a420:	9105      	str	r1, [sp, #20]
 800a422:	f008 010f 	and.w	r1, r8, #15
 800a426:	0192      	lsls	r2, r2, #6
 800a428:	910d      	str	r1, [sp, #52]	; 0x34
 800a42a:	920c      	str	r2, [sp, #48]	; 0x30
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d042      	beq.n	800a4b6 <forward_dense+0x15e>
 800a430:	699b      	ldr	r3, [r3, #24]
 800a432:	689c      	ldr	r4, [r3, #8]
 800a434:	9b04      	ldr	r3, [sp, #16]
 800a436:	f1ba 0f00 	cmp.w	sl, #0
 800a43a:	d041      	beq.n	800a4c0 <forward_dense+0x168>
 800a43c:	42b3      	cmp	r3, r6
 800a43e:	d229      	bcs.n	800a494 <forward_dense+0x13c>
 800a440:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a442:	469b      	mov	fp, r3
 800a444:	ab0f      	add	r3, sp, #60	; 0x3c
 800a446:	2a04      	cmp	r2, #4
 800a448:	9303      	str	r3, [sp, #12]
 800a44a:	4633      	mov	r3, r6
 800a44c:	4646      	mov	r6, r8
 800a44e:	4698      	mov	r8, r3
 800a450:	f000 8154 	beq.w	800a6fc <forward_dense+0x3a4>
 800a454:	2c00      	cmp	r4, #0
 800a456:	f000 8183 	beq.w	800a760 <forward_dense+0x408>
 800a45a:	f8d4 c000 	ldr.w	ip, [r4]
 800a45e:	463b      	mov	r3, r7
 800a460:	4629      	mov	r1, r5
 800a462:	9600      	str	r6, [sp, #0]
 800a464:	4652      	mov	r2, sl
 800a466:	9803      	ldr	r0, [sp, #12]
 800a468:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800a46c:	f7fe fdf2 	bl	8009054 <ai_dict8_dot_array_f32>
 800a470:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a472:	3404      	adds	r4, #4
 800a474:	444d      	add	r5, r9
 800a476:	f84b 3b04 	str.w	r3, [fp], #4
 800a47a:	45c3      	cmp	fp, r8
 800a47c:	d3ea      	bcc.n	800a454 <forward_dense+0xfc>
 800a47e:	4643      	mov	r3, r8
 800a480:	46b0      	mov	r8, r6
 800a482:	461e      	mov	r6, r3
 800a484:	9a04      	ldr	r2, [sp, #16]
 800a486:	43d3      	mvns	r3, r2
 800a488:	4433      	add	r3, r6
 800a48a:	f023 0303 	bic.w	r3, r3, #3
 800a48e:	3304      	adds	r3, #4
 800a490:	18d3      	adds	r3, r2, r3
 800a492:	9304      	str	r3, [sp, #16]
 800a494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a496:	9b05      	ldr	r3, [sp, #20]
 800a498:	4417      	add	r7, r2
 800a49a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a49c:	3301      	adds	r3, #1
 800a49e:	4416      	add	r6, r2
 800a4a0:	9a07      	ldr	r2, [sp, #28]
 800a4a2:	9305      	str	r3, [sp, #20]
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	f000 8170 	beq.w	800a78a <forward_dense+0x432>
 800a4aa:	9b08      	ldr	r3, [sp, #32]
 800a4ac:	699b      	ldr	r3, [r3, #24]
 800a4ae:	689d      	ldr	r5, [r3, #8]
 800a4b0:	9b06      	ldr	r3, [sp, #24]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1bc      	bne.n	800a430 <forward_dense+0xd8>
 800a4b6:	461c      	mov	r4, r3
 800a4b8:	9b04      	ldr	r3, [sp, #16]
 800a4ba:	f1ba 0f00 	cmp.w	sl, #0
 800a4be:	d1bd      	bne.n	800a43c <forward_dense+0xe4>
 800a4c0:	42b3      	cmp	r3, r6
 800a4c2:	d2e7      	bcs.n	800a494 <forward_dense+0x13c>
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4c8:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800a4cc:	eb07 0c03 	add.w	ip, r7, r3
 800a4d0:	469e      	mov	lr, r3
 800a4d2:	2c00      	cmp	r4, #0
 800a4d4:	f000 80fe 	beq.w	800a6d4 <forward_dense+0x37c>
 800a4d8:	f1b8 0f0f 	cmp.w	r8, #15
 800a4dc:	ed94 6a00 	vldr	s12, [r4]
 800a4e0:	f104 0404 	add.w	r4, r4, #4
 800a4e4:	f240 80fc 	bls.w	800a6e0 <forward_dense+0x388>
 800a4e8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a4ec:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800a4f0:	4641      	mov	r1, r8
 800a4f2:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800a75c <forward_dense+0x404>
 800a4f6:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 800a4fa:	3910      	subs	r1, #16
 800a4fc:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 800a500:	3240      	adds	r2, #64	; 0x40
 800a502:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 800a506:	290f      	cmp	r1, #15
 800a508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a50c:	ed12 7a20 	vldr	s14, [r2, #-128]	; 0xffffff80
 800a510:	ed12 2a1e 	vldr	s4, [r2, #-120]	; 0xffffff88
 800a514:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800a518:	ed13 3a1e 	vldr	s6, [r3, #-120]	; 0xffffff88
 800a51c:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a520:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 800a524:	ed13 4a1d 	vldr	s8, [r3, #-116]	; 0xffffff8c
 800a528:	ed52 4a1c 	vldr	s9, [r2, #-112]	; 0xffffff90
 800a52c:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 800a530:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 800a534:	ed12 7a1b 	vldr	s14, [r2, #-108]	; 0xffffff94
 800a538:	eee2 7a03 	vfma.f32	s15, s4, s6
 800a53c:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 800a540:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 800a544:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 800a548:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 800a54c:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 800a550:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 800a554:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a558:	ed53 8a17 	vldr	s17, [r3, #-92]	; 0xffffffa4
 800a55c:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 800a560:	ed13 0a16 	vldr	s0, [r3, #-88]	; 0xffffffa8
 800a564:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 800a568:	ed12 1a15 	vldr	s2, [r2, #-84]	; 0xffffffac
 800a56c:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 800a570:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a574:	ed13 2a14 	vldr	s4, [r3, #-80]	; 0xffffffb0
 800a578:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800a57c:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 800a580:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 800a584:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 800a588:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 800a58c:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a590:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 800a594:	ed12 7a11 	vldr	s14, [r2, #-68]	; 0xffffffbc
 800a598:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800a59c:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800a5a0:	eee9 7a89 	vfma.f32	s15, s19, s18
 800a5a4:	eee8 7a88 	vfma.f32	s15, s17, s16
 800a5a8:	eee0 7a20 	vfma.f32	s15, s0, s1
 800a5ac:	eee1 7a21 	vfma.f32	s15, s2, s3
 800a5b0:	eee2 7a03 	vfma.f32	s15, s4, s6
 800a5b4:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a5b8:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a5bc:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a5c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a5c4:	d897      	bhi.n	800a4f6 <forward_dense+0x19e>
 800a5c6:	eb05 010e 	add.w	r1, r5, lr
 800a5ca:	465b      	mov	r3, fp
 800a5cc:	4662      	mov	r2, ip
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d075      	beq.n	800a6be <forward_dense+0x366>
 800a5d2:	ed91 7a00 	vldr	s14, [r1]
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	edd2 7a00 	vldr	s15, [r2]
 800a5dc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a5e0:	d06d      	beq.n	800a6be <forward_dense+0x366>
 800a5e2:	ed91 7a01 	vldr	s14, [r1, #4]
 800a5e6:	2b02      	cmp	r3, #2
 800a5e8:	edd2 7a01 	vldr	s15, [r2, #4]
 800a5ec:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a5f0:	d065      	beq.n	800a6be <forward_dense+0x366>
 800a5f2:	ed91 7a02 	vldr	s14, [r1, #8]
 800a5f6:	2b03      	cmp	r3, #3
 800a5f8:	edd2 7a02 	vldr	s15, [r2, #8]
 800a5fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a600:	d05d      	beq.n	800a6be <forward_dense+0x366>
 800a602:	ed91 7a03 	vldr	s14, [r1, #12]
 800a606:	2b04      	cmp	r3, #4
 800a608:	edd2 7a03 	vldr	s15, [r2, #12]
 800a60c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a610:	d055      	beq.n	800a6be <forward_dense+0x366>
 800a612:	ed91 7a04 	vldr	s14, [r1, #16]
 800a616:	2b05      	cmp	r3, #5
 800a618:	edd2 7a04 	vldr	s15, [r2, #16]
 800a61c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a620:	d04d      	beq.n	800a6be <forward_dense+0x366>
 800a622:	ed91 7a05 	vldr	s14, [r1, #20]
 800a626:	2b06      	cmp	r3, #6
 800a628:	edd2 7a05 	vldr	s15, [r2, #20]
 800a62c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a630:	d045      	beq.n	800a6be <forward_dense+0x366>
 800a632:	ed91 7a06 	vldr	s14, [r1, #24]
 800a636:	2b07      	cmp	r3, #7
 800a638:	edd2 7a06 	vldr	s15, [r2, #24]
 800a63c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a640:	d03d      	beq.n	800a6be <forward_dense+0x366>
 800a642:	ed91 7a07 	vldr	s14, [r1, #28]
 800a646:	2b08      	cmp	r3, #8
 800a648:	edd2 7a07 	vldr	s15, [r2, #28]
 800a64c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a650:	d035      	beq.n	800a6be <forward_dense+0x366>
 800a652:	ed91 7a08 	vldr	s14, [r1, #32]
 800a656:	2b09      	cmp	r3, #9
 800a658:	edd2 7a08 	vldr	s15, [r2, #32]
 800a65c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a660:	d02d      	beq.n	800a6be <forward_dense+0x366>
 800a662:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800a666:	2b0a      	cmp	r3, #10
 800a668:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800a66c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a670:	d025      	beq.n	800a6be <forward_dense+0x366>
 800a672:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800a676:	2b0b      	cmp	r3, #11
 800a678:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800a67c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a680:	d01d      	beq.n	800a6be <forward_dense+0x366>
 800a682:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800a686:	2b0c      	cmp	r3, #12
 800a688:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800a68c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a690:	d015      	beq.n	800a6be <forward_dense+0x366>
 800a692:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800a696:	2b0d      	cmp	r3, #13
 800a698:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800a69c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a6a0:	d00d      	beq.n	800a6be <forward_dense+0x366>
 800a6a2:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800a6a6:	2b0e      	cmp	r3, #14
 800a6a8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800a6ac:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a6b0:	d005      	beq.n	800a6be <forward_dense+0x366>
 800a6b2:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800a6b6:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800a6ba:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a6be:	ee76 6a26 	vadd.f32	s13, s12, s13
 800a6c2:	444d      	add	r5, r9
 800a6c4:	ece0 6a01 	vstmia	r0!, {s13}
 800a6c8:	42b0      	cmp	r0, r6
 800a6ca:	f4bf aedb 	bcs.w	800a484 <forward_dense+0x12c>
 800a6ce:	2c00      	cmp	r4, #0
 800a6d0:	f47f af02 	bne.w	800a4d8 <forward_dense+0x180>
 800a6d4:	f1b8 0f0f 	cmp.w	r8, #15
 800a6d8:	eeb0 6a62 	vmov.f32	s12, s5
 800a6dc:	f63f af04 	bhi.w	800a4e8 <forward_dense+0x190>
 800a6e0:	4643      	mov	r3, r8
 800a6e2:	4629      	mov	r1, r5
 800a6e4:	463a      	mov	r2, r7
 800a6e6:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800a75c <forward_dense+0x404>
 800a6ea:	e770      	b.n	800a5ce <forward_dense+0x276>
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	deff      	udf	#255	; 0xff
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	deff      	udf	#255	; 0xff
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	deff      	udf	#255	; 0xff
 800a6fc:	b1a4      	cbz	r4, 800a728 <forward_dense+0x3d0>
 800a6fe:	f8d4 c000 	ldr.w	ip, [r4]
 800a702:	463b      	mov	r3, r7
 800a704:	4629      	mov	r1, r5
 800a706:	9600      	str	r6, [sp, #0]
 800a708:	4652      	mov	r2, sl
 800a70a:	9803      	ldr	r0, [sp, #12]
 800a70c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800a710:	f7fe fed0 	bl	80094b4 <ai_dict4_dot_array_f32>
 800a714:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a716:	3404      	adds	r4, #4
 800a718:	444d      	add	r5, r9
 800a71a:	f84b 3b04 	str.w	r3, [fp], #4
 800a71e:	45c3      	cmp	fp, r8
 800a720:	f4bf aead 	bcs.w	800a47e <forward_dense+0x126>
 800a724:	2c00      	cmp	r4, #0
 800a726:	d1ea      	bne.n	800a6fe <forward_dense+0x3a6>
 800a728:	4634      	mov	r4, r6
 800a72a:	4646      	mov	r6, r8
 800a72c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a730:	463b      	mov	r3, r7
 800a732:	4629      	mov	r1, r5
 800a734:	9400      	str	r4, [sp, #0]
 800a736:	4652      	mov	r2, sl
 800a738:	4640      	mov	r0, r8
 800a73a:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 800a73e:	f7fe feb9 	bl	80094b4 <ai_dict4_dot_array_f32>
 800a742:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a744:	444d      	add	r5, r9
 800a746:	f84b 3b04 	str.w	r3, [fp], #4
 800a74a:	45b3      	cmp	fp, r6
 800a74c:	d3f0      	bcc.n	800a730 <forward_dense+0x3d8>
 800a74e:	46a0      	mov	r8, r4
 800a750:	e698      	b.n	800a484 <forward_dense+0x12c>
 800a752:	9006      	str	r0, [sp, #24]
 800a754:	e62a      	b.n	800a3ac <forward_dense+0x54>
 800a756:	9306      	str	r3, [sp, #24]
 800a758:	e628      	b.n	800a3ac <forward_dense+0x54>
 800a75a:	bf00      	nop
 800a75c:	00000000 	.word	0x00000000
 800a760:	4634      	mov	r4, r6
 800a762:	4646      	mov	r6, r8
 800a764:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a768:	463b      	mov	r3, r7
 800a76a:	4629      	mov	r1, r5
 800a76c:	9400      	str	r4, [sp, #0]
 800a76e:	4652      	mov	r2, sl
 800a770:	4640      	mov	r0, r8
 800a772:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 800a776:	f7fe fc6d 	bl	8009054 <ai_dict8_dot_array_f32>
 800a77a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a77c:	444d      	add	r5, r9
 800a77e:	f84b 3b04 	str.w	r3, [fp], #4
 800a782:	45b3      	cmp	fp, r6
 800a784:	d3f0      	bcc.n	800a768 <forward_dense+0x410>
 800a786:	46a0      	mov	r8, r4
 800a788:	e67c      	b.n	800a484 <forward_dense+0x12c>
 800a78a:	b011      	add	sp, #68	; 0x44
 800a78c:	ecbd 8b08 	vpop	{d8-d11}
 800a790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a794:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800a798:	e626      	b.n	800a3e8 <forward_dense+0x90>
 800a79a:	2300      	movs	r3, #0
 800a79c:	9306      	str	r3, [sp, #24]
 800a79e:	e605      	b.n	800a3ac <forward_dense+0x54>
 800a7a0:	9308      	str	r3, [sp, #32]
 800a7a2:	e5f6      	b.n	800a392 <forward_dense+0x3a>

0800a7a4 <nl_func_relu_generic_array_f32>:
 800a7a4:	b470      	push	{r4, r5, r6}
 800a7a6:	edd3 6a02 	vldr	s13, [r3, #8]
 800a7aa:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 800a7ae:	6880      	ldr	r0, [r0, #8]
 800a7b0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a7b4:	4414      	add	r4, r2
 800a7b6:	688d      	ldr	r5, [r1, #8]
 800a7b8:	00a4      	lsls	r4, r4, #2
 800a7ba:	ed93 7a00 	vldr	s14, [r3]
 800a7be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7c2:	ed93 6a01 	vldr	s12, [r3, #4]
 800a7c6:	eb00 0204 	add.w	r2, r0, r4
 800a7ca:	442c      	add	r4, r5
 800a7cc:	d420      	bmi.n	800a810 <nl_func_relu_generic_array_f32+0x6c>
 800a7ce:	42ac      	cmp	r4, r5
 800a7d0:	d33b      	bcc.n	800a84a <nl_func_relu_generic_array_f32+0xa6>
 800a7d2:	1d23      	adds	r3, r4, #4
 800a7d4:	3204      	adds	r2, #4
 800a7d6:	e010      	b.n	800a7fa <nl_func_relu_generic_array_f32+0x56>
 800a7d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a7dc:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800a7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7e4:	dd01      	ble.n	800a7ea <nl_func_relu_generic_array_f32+0x46>
 800a7e6:	ee65 7a86 	vmul.f32	s15, s11, s12
 800a7ea:	f1a3 0408 	sub.w	r4, r3, #8
 800a7ee:	ed62 7a01 	vstmdb	r2!, {s15}
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	6888      	ldr	r0, [r1, #8]
 800a7f6:	4284      	cmp	r4, r0
 800a7f8:	d327      	bcc.n	800a84a <nl_func_relu_generic_array_f32+0xa6>
 800a7fa:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a7fe:	1f18      	subs	r0, r3, #4
 800a800:	eef4 6ae7 	vcmpe.f32	s13, s15
 800a804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a808:	dce6      	bgt.n	800a7d8 <nl_func_relu_generic_array_f32+0x34>
 800a80a:	eef0 7a66 	vmov.f32	s15, s13
 800a80e:	e7ec      	b.n	800a7ea <nl_func_relu_generic_array_f32+0x46>
 800a810:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800a814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a818:	d019      	beq.n	800a84e <nl_func_relu_generic_array_f32+0xaa>
 800a81a:	42ac      	cmp	r4, r5
 800a81c:	d315      	bcc.n	800a84a <nl_func_relu_generic_array_f32+0xa6>
 800a81e:	1d23      	adds	r3, r4, #4
 800a820:	3204      	adds	r2, #4
 800a822:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a826:	1f18      	subs	r0, r3, #4
 800a828:	f1a3 0508 	sub.w	r5, r3, #8
 800a82c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a830:	4603      	mov	r3, r0
 800a832:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a83a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a83e:	d51c      	bpl.n	800a87a <nl_func_relu_generic_array_f32+0xd6>
 800a840:	ed62 6a01 	vstmdb	r2!, {s13}
 800a844:	6888      	ldr	r0, [r1, #8]
 800a846:	42a8      	cmp	r0, r5
 800a848:	d9eb      	bls.n	800a822 <nl_func_relu_generic_array_f32+0x7e>
 800a84a:	bc70      	pop	{r4, r5, r6}
 800a84c:	4770      	bx	lr
 800a84e:	42ac      	cmp	r4, r5
 800a850:	d3fb      	bcc.n	800a84a <nl_func_relu_generic_array_f32+0xa6>
 800a852:	1d23      	adds	r3, r4, #4
 800a854:	3204      	adds	r2, #4
 800a856:	2600      	movs	r6, #0
 800a858:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a85c:	1f18      	subs	r0, r3, #4
 800a85e:	f1a3 0508 	sub.w	r5, r3, #8
 800a862:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a866:	4603      	mov	r3, r0
 800a868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a86c:	d80b      	bhi.n	800a886 <nl_func_relu_generic_array_f32+0xe2>
 800a86e:	ed62 7a01 	vstmdb	r2!, {s15}
 800a872:	6888      	ldr	r0, [r1, #8]
 800a874:	42a8      	cmp	r0, r5
 800a876:	d9ef      	bls.n	800a858 <nl_func_relu_generic_array_f32+0xb4>
 800a878:	e7e7      	b.n	800a84a <nl_func_relu_generic_array_f32+0xa6>
 800a87a:	ed62 7a01 	vstmdb	r2!, {s15}
 800a87e:	6888      	ldr	r0, [r1, #8]
 800a880:	42a8      	cmp	r0, r5
 800a882:	d9ce      	bls.n	800a822 <nl_func_relu_generic_array_f32+0x7e>
 800a884:	e7e1      	b.n	800a84a <nl_func_relu_generic_array_f32+0xa6>
 800a886:	f842 6d04 	str.w	r6, [r2, #-4]!
 800a88a:	6888      	ldr	r0, [r1, #8]
 800a88c:	42a8      	cmp	r0, r5
 800a88e:	d9e3      	bls.n	800a858 <nl_func_relu_generic_array_f32+0xb4>
 800a890:	e7db      	b.n	800a84a <nl_func_relu_generic_array_f32+0xa6>
 800a892:	bf00      	nop

0800a894 <forward_sm>:
 800a894:	6942      	ldr	r2, [r0, #20]
 800a896:	8813      	ldrh	r3, [r2, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f000 8085 	beq.w	800a9a8 <forward_sm+0x114>
 800a89e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a2:	ed2d 8b04 	vpush	{d8-d9}
 800a8a6:	6852      	ldr	r2, [r2, #4]
 800a8a8:	b085      	sub	sp, #20
 800a8aa:	6855      	ldr	r5, [r2, #4]
 800a8ac:	b105      	cbz	r5, 800a8b0 <forward_sm+0x1c>
 800a8ae:	682d      	ldr	r5, [r5, #0]
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d971      	bls.n	800a998 <forward_sm+0x104>
 800a8b4:	6913      	ldr	r3, [r2, #16]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d06c      	beq.n	800a994 <forward_sm+0x100>
 800a8ba:	681f      	ldr	r7, [r3, #0]
 800a8bc:	68e9      	ldr	r1, [r5, #12]
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	68ab      	ldr	r3, [r5, #8]
 800a8c2:	6850      	ldr	r0, [r2, #4]
 800a8c4:	0a1b      	lsrs	r3, r3, #8
 800a8c6:	684a      	ldr	r2, [r1, #4]
 800a8c8:	9201      	str	r2, [sp, #4]
 800a8ca:	d06f      	beq.n	800a9ac <forward_sm+0x118>
 800a8cc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a8d0:	2401      	movs	r4, #1
 800a8d2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a8d6:	4299      	cmp	r1, r3
 800a8d8:	fb02 f404 	mul.w	r4, r2, r4
 800a8dc:	d1f9      	bne.n	800a8d2 <forward_sm+0x3e>
 800a8de:	9901      	ldr	r1, [sp, #4]
 800a8e0:	69ae      	ldr	r6, [r5, #24]
 800a8e2:	1a63      	subs	r3, r4, r1
 800a8e4:	f8d7 9018 	ldr.w	r9, [r7, #24]
 800a8e8:	1a24      	subs	r4, r4, r0
 800a8ea:	68b5      	ldr	r5, [r6, #8]
 800a8ec:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800a8f0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800a8f4:	68f3      	ldr	r3, [r6, #12]
 800a8f6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a8fa:	429d      	cmp	r5, r3
 800a8fc:	d340      	bcc.n	800a980 <forward_sm+0xec>
 800a8fe:	008b      	lsls	r3, r1, #2
 800a900:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800a904:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800a908:	9300      	str	r3, [sp, #0]
 800a90a:	425b      	negs	r3, r3
 800a90c:	f1c8 0200 	rsb	r2, r8, #0
 800a910:	9302      	str	r3, [sp, #8]
 800a912:	9203      	str	r2, [sp, #12]
 800a914:	9b01      	ldr	r3, [sp, #4]
 800a916:	60b5      	str	r5, [r6, #8]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	f8c9 4008 	str.w	r4, [r9, #8]
 800a91e:	68b2      	ldr	r2, [r6, #8]
 800a920:	ed92 8a00 	vldr	s16, [r2]
 800a924:	d93b      	bls.n	800a99e <forward_sm+0x10a>
 800a926:	9900      	ldr	r1, [sp, #0]
 800a928:	1d13      	adds	r3, r2, #4
 800a92a:	1857      	adds	r7, r2, r1
 800a92c:	ecf3 7a01 	vldmia	r3!, {s15}
 800a930:	429f      	cmp	r7, r3
 800a932:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 800a936:	d1f9      	bne.n	800a92c <forward_sm+0x98>
 800a938:	4692      	mov	sl, r2
 800a93a:	46a3      	mov	fp, r4
 800a93c:	46a0      	mov	r8, r4
 800a93e:	eddf 8a1d 	vldr	s17, [pc, #116]	; 800a9b4 <forward_sm+0x120>
 800a942:	ecba 0a01 	vldmia	sl!, {s0}
 800a946:	ee30 0a48 	vsub.f32	s0, s0, s16
 800a94a:	f002 fb23 	bl	800cf94 <expf>
 800a94e:	4557      	cmp	r7, sl
 800a950:	eca8 0a01 	vstmia	r8!, {s0}
 800a954:	ee78 8a80 	vadd.f32	s17, s17, s0
 800a958:	d1f3      	bne.n	800a942 <forward_sm+0xae>
 800a95a:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800a95e:	9b00      	ldr	r3, [sp, #0]
 800a960:	18e2      	adds	r2, r4, r3
 800a962:	eddb 7a00 	vldr	s15, [fp]
 800a966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a96a:	eceb 7a01 	vstmia	fp!, {s15}
 800a96e:	455a      	cmp	r2, fp
 800a970:	d1f7      	bne.n	800a962 <forward_sm+0xce>
 800a972:	9b02      	ldr	r3, [sp, #8]
 800a974:	9a03      	ldr	r2, [sp, #12]
 800a976:	441d      	add	r5, r3
 800a978:	68f3      	ldr	r3, [r6, #12]
 800a97a:	4414      	add	r4, r2
 800a97c:	429d      	cmp	r5, r3
 800a97e:	d2c9      	bcs.n	800a914 <forward_sm+0x80>
 800a980:	60b3      	str	r3, [r6, #8]
 800a982:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800a986:	f8c9 3008 	str.w	r3, [r9, #8]
 800a98a:	b005      	add	sp, #20
 800a98c:	ecbd 8b04 	vpop	{d8-d9}
 800a990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	deff      	udf	#255	; 0xff
 800a998:	2300      	movs	r3, #0
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	deff      	udf	#255	; 0xff
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d0e7      	beq.n	800a972 <forward_sm+0xde>
 800a9a2:	9b00      	ldr	r3, [sp, #0]
 800a9a4:	18d7      	adds	r7, r2, r3
 800a9a6:	e7c7      	b.n	800a938 <forward_sm+0xa4>
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	deff      	udf	#255	; 0xff
 800a9ac:	2401      	movs	r4, #1
 800a9ae:	4611      	mov	r1, r2
 800a9b0:	e796      	b.n	800a8e0 <forward_sm+0x4c>
 800a9b2:	bf00      	nop
 800a9b4:	00000000 	.word	0x00000000

0800a9b8 <forward_mp>:
 800a9b8:	6943      	ldr	r3, [r0, #20]
 800a9ba:	881a      	ldrh	r2, [r3, #0]
 800a9bc:	2a00      	cmp	r2, #0
 800a9be:	f000 80be 	beq.w	800ab3e <forward_mp+0x186>
 800a9c2:	6859      	ldr	r1, [r3, #4]
 800a9c4:	684b      	ldr	r3, [r1, #4]
 800a9c6:	b103      	cbz	r3, 800a9ca <forward_mp+0x12>
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2a01      	cmp	r2, #1
 800a9cc:	f240 80b4 	bls.w	800ab38 <forward_mp+0x180>
 800a9d0:	690a      	ldr	r2, [r1, #16]
 800a9d2:	2a00      	cmp	r2, #0
 800a9d4:	f000 80ae 	beq.w	800ab34 <forward_mp+0x17c>
 800a9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9dc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a9de:	b093      	sub	sp, #76	; 0x4c
 800a9e0:	6812      	ldr	r2, [r2, #0]
 800a9e2:	68dc      	ldr	r4, [r3, #12]
 800a9e4:	68d5      	ldr	r5, [r2, #12]
 800a9e6:	6996      	ldr	r6, [r2, #24]
 800a9e8:	680a      	ldr	r2, [r1, #0]
 800a9ea:	f8d3 c018 	ldr.w	ip, [r3, #24]
 800a9ee:	4253      	negs	r3, r2
 800a9f0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a9f4:	68ef      	ldr	r7, [r5, #12]
 800a9f6:	9307      	str	r3, [sp, #28]
 800a9f8:	68b3      	ldr	r3, [r6, #8]
 800a9fa:	684e      	ldr	r6, [r1, #4]
 800a9fc:	9308      	str	r3, [sp, #32]
 800a9fe:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800aa02:	68ad      	ldr	r5, [r5, #8]
 800aa04:	9305      	str	r3, [sp, #20]
 800aa06:	970b      	str	r7, [sp, #44]	; 0x2c
 800aa08:	9501      	str	r5, [sp, #4]
 800aa0a:	960f      	str	r6, [sp, #60]	; 0x3c
 800aa0c:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 800aa10:	6984      	ldr	r4, [r0, #24]
 800aa12:	930c      	str	r3, [sp, #48]	; 0x30
 800aa14:	9403      	str	r4, [sp, #12]
 800aa16:	69c4      	ldr	r4, [r0, #28]
 800aa18:	940d      	str	r4, [sp, #52]	; 0x34
 800aa1a:	6a04      	ldr	r4, [r0, #32]
 800aa1c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800aa1e:	9404      	str	r4, [sp, #16]
 800aa20:	900e      	str	r0, [sp, #56]	; 0x38
 800aa22:	2f00      	cmp	r7, #0
 800aa24:	d07f      	beq.n	800ab26 <forward_mp+0x16e>
 800aa26:	188a      	adds	r2, r1, r2
 800aa28:	fb09 f303 	mul.w	r3, r9, r3
 800aa2c:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800aa30:	9209      	str	r2, [sp, #36]	; 0x24
 800aa32:	4272      	negs	r2, r6
 800aa34:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800aa38:	2300      	movs	r3, #0
 800aa3a:	9211      	str	r2, [sp, #68]	; 0x44
 800aa3c:	fb05 f20a 	mul.w	r2, r5, sl
 800aa40:	930a      	str	r3, [sp, #40]	; 0x28
 800aa42:	9210      	str	r2, [sp, #64]	; 0x40
 800aa44:	9a07      	ldr	r2, [sp, #28]
 800aa46:	990d      	ldr	r1, [sp, #52]	; 0x34
 800aa48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa4a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aa4e:	4281      	cmp	r1, r0
 800aa50:	bf94      	ite	ls
 800aa52:	1852      	addls	r2, r2, r1
 800aa54:	1812      	addhi	r2, r2, r0
 800aa56:	9306      	str	r3, [sp, #24]
 800aa58:	4694      	mov	ip, r2
 800aa5a:	9a01      	ldr	r2, [sp, #4]
 800aa5c:	2a00      	cmp	r2, #0
 800aa5e:	d055      	beq.n	800ab0c <forward_mp+0x154>
 800aa60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa62:	f04f 0800 	mov.w	r8, #0
 800aa66:	9d08      	ldr	r5, [sp, #32]
 800aa68:	fb02 f303 	mul.w	r3, r2, r3
 800aa6c:	9302      	str	r3, [sp, #8]
 800aa6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa70:	eb02 0e03 	add.w	lr, r2, r3
 800aa74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	9300      	str	r3, [sp, #0]
 800aa7a:	db57      	blt.n	800ab2c <forward_mp+0x174>
 800aa7c:	9a02      	ldr	r2, [sp, #8]
 800aa7e:	18d4      	adds	r4, r2, r3
 800aa80:	461a      	mov	r2, r3
 800aa82:	9903      	ldr	r1, [sp, #12]
 800aa84:	4571      	cmp	r1, lr
 800aa86:	bf94      	ite	ls
 800aa88:	1852      	addls	r2, r2, r1
 800aa8a:	4472      	addhi	r2, lr
 800aa8c:	4617      	mov	r7, r2
 800aa8e:	9a05      	ldr	r2, [sp, #20]
 800aa90:	1aff      	subs	r7, r7, r3
 800aa92:	fb04 240a 	mla	r4, r4, sl, r2
 800aa96:	f1b9 0f00 	cmp.w	r9, #0
 800aa9a:	d009      	beq.n	800aab0 <forward_mp+0xf8>
 800aa9c:	4623      	mov	r3, r4
 800aa9e:	462a      	mov	r2, r5
 800aaa0:	eb0a 0104 	add.w	r1, sl, r4
 800aaa4:	f853 0b04 	ldr.w	r0, [r3], #4
 800aaa8:	4299      	cmp	r1, r3
 800aaaa:	f842 0b04 	str.w	r0, [r2], #4
 800aaae:	d1f9      	bne.n	800aaa4 <forward_mp+0xec>
 800aab0:	9e06      	ldr	r6, [sp, #24]
 800aab2:	45b4      	cmp	ip, r6
 800aab4:	dd1b      	ble.n	800aaee <forward_mp+0x136>
 800aab6:	fb0a f707 	mul.w	r7, sl, r7
 800aaba:	4648      	mov	r0, r9
 800aabc:	19e1      	adds	r1, r4, r7
 800aabe:	428c      	cmp	r4, r1
 800aac0:	d210      	bcs.n	800aae4 <forward_mp+0x12c>
 800aac2:	b178      	cbz	r0, 800aae4 <forward_mp+0x12c>
 800aac4:	4623      	mov	r3, r4
 800aac6:	462a      	mov	r2, r5
 800aac8:	eb03 090a 	add.w	r9, r3, sl
 800aacc:	ecb3 7a01 	vldmia	r3!, {s14}
 800aad0:	edd2 7a00 	vldr	s15, [r2]
 800aad4:	454b      	cmp	r3, r9
 800aad6:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 800aada:	ece2 7a01 	vstmia	r2!, {s15}
 800aade:	d1f5      	bne.n	800aacc <forward_mp+0x114>
 800aae0:	428b      	cmp	r3, r1
 800aae2:	d3f0      	bcc.n	800aac6 <forward_mp+0x10e>
 800aae4:	3601      	adds	r6, #1
 800aae6:	445c      	add	r4, fp
 800aae8:	45b4      	cmp	ip, r6
 800aaea:	d1e7      	bne.n	800aabc <forward_mp+0x104>
 800aaec:	4681      	mov	r9, r0
 800aaee:	9a04      	ldr	r2, [sp, #16]
 800aaf0:	f108 0801 	add.w	r8, r8, #1
 800aaf4:	9b00      	ldr	r3, [sp, #0]
 800aaf6:	4455      	add	r5, sl
 800aaf8:	ebae 0e02 	sub.w	lr, lr, r2
 800aafc:	4413      	add	r3, r2
 800aafe:	9a01      	ldr	r2, [sp, #4]
 800ab00:	4542      	cmp	r2, r8
 800ab02:	d1b8      	bne.n	800aa76 <forward_mp+0xbe>
 800ab04:	9b08      	ldr	r3, [sp, #32]
 800ab06:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab08:	4413      	add	r3, r2
 800ab0a:	9308      	str	r3, [sp, #32]
 800ab0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab12:	1a89      	subs	r1, r1, r2
 800ab14:	3301      	adds	r3, #1
 800ab16:	9109      	str	r1, [sp, #36]	; 0x24
 800ab18:	9907      	ldr	r1, [sp, #28]
 800ab1a:	930a      	str	r3, [sp, #40]	; 0x28
 800ab1c:	4411      	add	r1, r2
 800ab1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab20:	429a      	cmp	r2, r3
 800ab22:	9107      	str	r1, [sp, #28]
 800ab24:	d18e      	bne.n	800aa44 <forward_mp+0x8c>
 800ab26:	b013      	add	sp, #76	; 0x4c
 800ab28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab2c:	9c02      	ldr	r4, [sp, #8]
 800ab2e:	2300      	movs	r3, #0
 800ab30:	9a00      	ldr	r2, [sp, #0]
 800ab32:	e7a6      	b.n	800aa82 <forward_mp+0xca>
 800ab34:	68d3      	ldr	r3, [r2, #12]
 800ab36:	deff      	udf	#255	; 0xff
 800ab38:	2300      	movs	r3, #0
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	deff      	udf	#255	; 0xff
 800ab3e:	6853      	ldr	r3, [r2, #4]
 800ab40:	deff      	udf	#255	; 0xff
 800ab42:	bf00      	nop

0800ab44 <forward_bn>:
 800ab44:	6943      	ldr	r3, [r0, #20]
 800ab46:	8819      	ldrh	r1, [r3, #0]
 800ab48:	2900      	cmp	r1, #0
 800ab4a:	d061      	beq.n	800ac10 <forward_bn+0xcc>
 800ab4c:	6858      	ldr	r0, [r3, #4]
 800ab4e:	6843      	ldr	r3, [r0, #4]
 800ab50:	b103      	cbz	r3, 800ab54 <forward_bn+0x10>
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	2901      	cmp	r1, #1
 800ab56:	d958      	bls.n	800ac0a <forward_bn+0xc6>
 800ab58:	6902      	ldr	r2, [r0, #16]
 800ab5a:	b102      	cbz	r2, 800ab5e <forward_bn+0x1a>
 800ab5c:	6812      	ldr	r2, [r2, #0]
 800ab5e:	2902      	cmp	r1, #2
 800ab60:	d058      	beq.n	800ac14 <forward_bn+0xd0>
 800ab62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab66:	69c4      	ldr	r4, [r0, #28]
 800ab68:	2c00      	cmp	r4, #0
 800ab6a:	f000 8093 	beq.w	800ac94 <forward_bn+0x150>
 800ab6e:	6821      	ldr	r1, [r4, #0]
 800ab70:	f110 0f18 	cmn.w	r0, #24
 800ab74:	d051      	beq.n	800ac1a <forward_bn+0xd6>
 800ab76:	8b00      	ldrh	r0, [r0, #24]
 800ab78:	2801      	cmp	r0, #1
 800ab7a:	d94e      	bls.n	800ac1a <forward_bn+0xd6>
 800ab7c:	2c00      	cmp	r4, #0
 800ab7e:	d04c      	beq.n	800ac1a <forward_bn+0xd6>
 800ab80:	6996      	ldr	r6, [r2, #24]
 800ab82:	68d8      	ldr	r0, [r3, #12]
 800ab84:	699a      	ldr	r2, [r3, #24]
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	698d      	ldr	r5, [r1, #24]
 800ab8a:	0a1b      	lsrs	r3, r3, #8
 800ab8c:	68b1      	ldr	r1, [r6, #8]
 800ab8e:	6864      	ldr	r4, [r4, #4]
 800ab90:	68ae      	ldr	r6, [r5, #8]
 800ab92:	f8d2 a008 	ldr.w	sl, [r2, #8]
 800ab96:	6845      	ldr	r5, [r0, #4]
 800ab98:	d074      	beq.n	800ac84 <forward_bn+0x140>
 800ab9a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ab9e:	2701      	movs	r7, #1
 800aba0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800aba4:	4298      	cmp	r0, r3
 800aba6:	fb02 f707 	mul.w	r7, r2, r7
 800abaa:	d1f9      	bne.n	800aba0 <forward_bn+0x5c>
 800abac:	2c00      	cmp	r4, #0
 800abae:	d042      	beq.n	800ac36 <forward_bn+0xf2>
 800abb0:	69a3      	ldr	r3, [r4, #24]
 800abb2:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800abb6:	b337      	cbz	r7, 800ac06 <forward_bn+0xc2>
 800abb8:	ea4f 0e85 	mov.w	lr, r5, lsl #2
 800abbc:	2300      	movs	r3, #0
 800abbe:	ebc5 7985 	rsb	r9, r5, r5, lsl #30
 800abc2:	eba1 010e 	sub.w	r1, r1, lr
 800abc6:	eb0a 040e 	add.w	r4, sl, lr
 800abca:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800abce:	eba1 0a0a 	sub.w	sl, r1, sl
 800abd2:	eb05 0c03 	add.w	ip, r5, r3
 800abd6:	459c      	cmp	ip, r3
 800abd8:	d911      	bls.n	800abfe <forward_bn+0xba>
 800abda:	eb09 0304 	add.w	r3, r9, r4
 800abde:	4630      	mov	r0, r6
 800abe0:	4641      	mov	r1, r8
 800abe2:	eb0a 0204 	add.w	r2, sl, r4
 800abe6:	ecf3 6a01 	vldmia	r3!, {s13}
 800abea:	ecb0 7a01 	vldmia	r0!, {s14}
 800abee:	ecf1 7a01 	vldmia	r1!, {s15}
 800abf2:	42a3      	cmp	r3, r4
 800abf4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800abf8:	ece2 7a01 	vstmia	r2!, {s15}
 800abfc:	d1f3      	bne.n	800abe6 <forward_bn+0xa2>
 800abfe:	45bc      	cmp	ip, r7
 800ac00:	4663      	mov	r3, ip
 800ac02:	4474      	add	r4, lr
 800ac04:	d3e5      	bcc.n	800abd2 <forward_bn+0x8e>
 800ac06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	deff      	udf	#255	; 0xff
 800ac10:	684b      	ldr	r3, [r1, #4]
 800ac12:	deff      	udf	#255	; 0xff
 800ac14:	2300      	movs	r3, #0
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	deff      	udf	#255	; 0xff
 800ac1a:	6995      	ldr	r5, [r2, #24]
 800ac1c:	68d8      	ldr	r0, [r3, #12]
 800ac1e:	699a      	ldr	r2, [r3, #24]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	698c      	ldr	r4, [r1, #24]
 800ac24:	0a1b      	lsrs	r3, r3, #8
 800ac26:	68a9      	ldr	r1, [r5, #8]
 800ac28:	68a6      	ldr	r6, [r4, #8]
 800ac2a:	6845      	ldr	r5, [r0, #4]
 800ac2c:	f8d2 a008 	ldr.w	sl, [r2, #8]
 800ac30:	d02e      	beq.n	800ac90 <forward_bn+0x14c>
 800ac32:	2400      	movs	r4, #0
 800ac34:	e7b1      	b.n	800ab9a <forward_bn+0x56>
 800ac36:	2f00      	cmp	r7, #0
 800ac38:	d0e5      	beq.n	800ac06 <forward_bn+0xc2>
 800ac3a:	ea4f 0885 	mov.w	r8, r5, lsl #2
 800ac3e:	2300      	movs	r3, #0
 800ac40:	ebc5 7e85 	rsb	lr, r5, r5, lsl #30
 800ac44:	eba1 0108 	sub.w	r1, r1, r8
 800ac48:	eb0a 0008 	add.w	r0, sl, r8
 800ac4c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800ac50:	eba1 0c0a 	sub.w	ip, r1, sl
 800ac54:	18ec      	adds	r4, r5, r3
 800ac56:	429c      	cmp	r4, r3
 800ac58:	d90e      	bls.n	800ac78 <forward_bn+0x134>
 800ac5a:	eb0e 0300 	add.w	r3, lr, r0
 800ac5e:	4631      	mov	r1, r6
 800ac60:	eb00 020c 	add.w	r2, r0, ip
 800ac64:	ecf3 7a01 	vldmia	r3!, {s15}
 800ac68:	ecb1 7a01 	vldmia	r1!, {s14}
 800ac6c:	4298      	cmp	r0, r3
 800ac6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac72:	ece2 7a01 	vstmia	r2!, {s15}
 800ac76:	d1f5      	bne.n	800ac64 <forward_bn+0x120>
 800ac78:	42bc      	cmp	r4, r7
 800ac7a:	4623      	mov	r3, r4
 800ac7c:	4440      	add	r0, r8
 800ac7e:	d3e9      	bcc.n	800ac54 <forward_bn+0x110>
 800ac80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac84:	b124      	cbz	r4, 800ac90 <forward_bn+0x14c>
 800ac86:	69a3      	ldr	r3, [r4, #24]
 800ac88:	2701      	movs	r7, #1
 800ac8a:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800ac8e:	e793      	b.n	800abb8 <forward_bn+0x74>
 800ac90:	2701      	movs	r7, #1
 800ac92:	e7d2      	b.n	800ac3a <forward_bn+0xf6>
 800ac94:	4621      	mov	r1, r4
 800ac96:	e76b      	b.n	800ab70 <forward_bn+0x2c>

0800ac98 <ai_check_custom_types>:
 800ac98:	4b13      	ldr	r3, [pc, #76]	; (800ace8 <ai_check_custom_types+0x50>)
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	9301      	str	r3, [sp, #4]
 800aca0:	b118      	cbz	r0, 800acaa <ai_check_custom_types+0x12>
 800aca2:	7803      	ldrb	r3, [r0, #0]
 800aca4:	2b03      	cmp	r3, #3
 800aca6:	d002      	beq.n	800acae <ai_check_custom_types+0x16>
 800aca8:	2000      	movs	r0, #0
 800acaa:	b002      	add	sp, #8
 800acac:	4770      	bx	lr
 800acae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d004      	beq.n	800acc0 <ai_check_custom_types+0x28>
 800acb6:	2001      	movs	r0, #1
 800acb8:	f080 0001 	eor.w	r0, r0, #1
 800acbc:	b002      	add	sp, #8
 800acbe:	4770      	bx	lr
 800acc0:	7842      	ldrb	r2, [r0, #1]
 800acc2:	3001      	adds	r0, #1
 800acc4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d1f4      	bne.n	800acb6 <ai_check_custom_types+0x1e>
 800accc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800acd0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d1ee      	bne.n	800acb6 <ai_check_custom_types+0x1e>
 800acd8:	7842      	ldrb	r2, [r0, #1]
 800acda:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d1e9      	bne.n	800acb6 <ai_check_custom_types+0x1e>
 800ace2:	2000      	movs	r0, #0
 800ace4:	e7e8      	b.n	800acb8 <ai_check_custom_types+0x20>
 800ace6:	bf00      	nop
 800ace8:	0800d75c 	.word	0x0800d75c

0800acec <ai_layers_forward_all>:
 800acec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acee:	6d86      	ldr	r6, [r0, #88]	; 0x58
 800acf0:	4604      	mov	r4, r0
 800acf2:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800acf4:	b316      	cbz	r6, 800ad3c <ai_layers_forward_all+0x50>
 800acf6:	b1c5      	cbz	r5, 800ad2a <ai_layers_forward_all+0x3e>
 800acf8:	6545      	str	r5, [r0, #84]	; 0x54
 800acfa:	4629      	mov	r1, r5
 800acfc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800acfe:	2001      	movs	r0, #1
 800ad00:	47b0      	blx	r6
 800ad02:	2700      	movs	r7, #0
 800ad04:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800ad06:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800ad08:	2002      	movs	r0, #2
 800ad0a:	47b0      	blx	r6
 800ad0c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800ad0e:	692b      	ldr	r3, [r5, #16]
 800ad10:	4628      	mov	r0, r5
 800ad12:	4798      	blx	r3
 800ad14:	68eb      	ldr	r3, [r5, #12]
 800ad16:	2003      	movs	r0, #3
 800ad18:	429d      	cmp	r5, r3
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	d006      	beq.n	800ad2c <ai_layers_forward_all+0x40>
 800ad1e:	6563      	str	r3, [r4, #84]	; 0x54
 800ad20:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800ad22:	47b0      	blx	r6
 800ad24:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800ad26:	2900      	cmp	r1, #0
 800ad28:	d1ed      	bne.n	800ad06 <ai_layers_forward_all+0x1a>
 800ad2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad2c:	2100      	movs	r1, #0
 800ad2e:	6567      	str	r7, [r4, #84]	; 0x54
 800ad30:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800ad32:	47b0      	blx	r6
 800ad34:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800ad36:	2900      	cmp	r1, #0
 800ad38:	d1e5      	bne.n	800ad06 <ai_layers_forward_all+0x1a>
 800ad3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad3c:	2d00      	cmp	r5, #0
 800ad3e:	d0f4      	beq.n	800ad2a <ai_layers_forward_all+0x3e>
 800ad40:	6545      	str	r5, [r0, #84]	; 0x54
 800ad42:	692b      	ldr	r3, [r5, #16]
 800ad44:	4628      	mov	r0, r5
 800ad46:	4798      	blx	r3
 800ad48:	68eb      	ldr	r3, [r5, #12]
 800ad4a:	42ab      	cmp	r3, r5
 800ad4c:	461d      	mov	r5, r3
 800ad4e:	d003      	beq.n	800ad58 <ai_layers_forward_all+0x6c>
 800ad50:	6563      	str	r3, [r4, #84]	; 0x54
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d1f5      	bne.n	800ad42 <ai_layers_forward_all+0x56>
 800ad56:	e7e8      	b.n	800ad2a <ai_layers_forward_all+0x3e>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	6563      	str	r3, [r4, #84]	; 0x54
 800ad5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad5e:	bf00      	nop

0800ad60 <ai_array_to_buffer_fmt>:
 800ad60:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800ad64:	2b02      	cmp	r3, #2
 800ad66:	d01f      	beq.n	800ada8 <ai_array_to_buffer_fmt+0x48>
 800ad68:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800ad6c:	4a1b      	ldr	r2, [pc, #108]	; (800addc <ai_array_to_buffer_fmt+0x7c>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d00a      	beq.n	800ad88 <ai_array_to_buffer_fmt+0x28>
 800ad72:	dc0d      	bgt.n	800ad90 <ai_array_to_buffer_fmt+0x30>
 800ad74:	4a1a      	ldr	r2, [pc, #104]	; (800ade0 <ai_array_to_buffer_fmt+0x80>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d006      	beq.n	800ad88 <ai_array_to_buffer_fmt+0x28>
 800ad7a:	dd1d      	ble.n	800adb8 <ai_array_to_buffer_fmt+0x58>
 800ad7c:	4a19      	ldr	r2, [pc, #100]	; (800ade4 <ai_array_to_buffer_fmt+0x84>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d002      	beq.n	800ad88 <ai_array_to_buffer_fmt+0x28>
 800ad82:	320f      	adds	r2, #15
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d10d      	bne.n	800ada4 <ai_array_to_buffer_fmt+0x44>
 800ad88:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ad8c:	4318      	orrs	r0, r3
 800ad8e:	4770      	bx	lr
 800ad90:	4a15      	ldr	r2, [pc, #84]	; (800ade8 <ai_array_to_buffer_fmt+0x88>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d0f8      	beq.n	800ad88 <ai_array_to_buffer_fmt+0x28>
 800ad96:	dd18      	ble.n	800adca <ai_array_to_buffer_fmt+0x6a>
 800ad98:	4a14      	ldr	r2, [pc, #80]	; (800adec <ai_array_to_buffer_fmt+0x8c>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d0f4      	beq.n	800ad88 <ai_array_to_buffer_fmt+0x28>
 800ad9e:	4a14      	ldr	r2, [pc, #80]	; (800adf0 <ai_array_to_buffer_fmt+0x90>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d0f1      	beq.n	800ad88 <ai_array_to_buffer_fmt+0x28>
 800ada4:	2340      	movs	r3, #64	; 0x40
 800ada6:	e7ef      	b.n	800ad88 <ai_array_to_buffer_fmt+0x28>
 800ada8:	4b12      	ldr	r3, [pc, #72]	; (800adf4 <ai_array_to_buffer_fmt+0x94>)
 800adaa:	4003      	ands	r3, r0
 800adac:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800adb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800adb4:	4318      	orrs	r0, r3
 800adb6:	4770      	bx	lr
 800adb8:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d0e3      	beq.n	800ad88 <ai_array_to_buffer_fmt+0x28>
 800adc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d0df      	beq.n	800ad88 <ai_array_to_buffer_fmt+0x28>
 800adc8:	e7ec      	b.n	800ada4 <ai_array_to_buffer_fmt+0x44>
 800adca:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800adce:	4293      	cmp	r3, r2
 800add0:	d0da      	beq.n	800ad88 <ai_array_to_buffer_fmt+0x28>
 800add2:	3207      	adds	r2, #7
 800add4:	4293      	cmp	r3, r2
 800add6:	d0d7      	beq.n	800ad88 <ai_array_to_buffer_fmt+0x28>
 800add8:	e7e4      	b.n	800ada4 <ai_array_to_buffer_fmt+0x44>
 800adda:	bf00      	nop
 800addc:	00840040 	.word	0x00840040
 800ade0:	00040447 	.word	0x00040447
 800ade4:	00040840 	.word	0x00040840
 800ade8:	00840840 	.word	0x00840840
 800adec:	0084084f 	.word	0x0084084f
 800adf0:	01821040 	.word	0x01821040
 800adf4:	00803fff 	.word	0x00803fff

0800adf8 <ai_array_get_byte_size>:
 800adf8:	b1e1      	cbz	r1, 800ae34 <ai_array_get_byte_size+0x3c>
 800adfa:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800adfe:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800ae02:	b410      	push	{r4}
 800ae04:	f3c0 3482 	ubfx	r4, r0, #14, #3
 800ae08:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800ae0c:	4423      	add	r3, r4
 800ae0e:	2804      	cmp	r0, #4
 800ae10:	fb01 f103 	mul.w	r1, r1, r3
 800ae14:	f101 0107 	add.w	r1, r1, #7
 800ae18:	f021 0107 	bic.w	r1, r1, #7
 800ae1c:	fa21 f102 	lsr.w	r1, r1, r2
 800ae20:	d00a      	beq.n	800ae38 <ai_array_get_byte_size+0x40>
 800ae22:	2808      	cmp	r0, #8
 800ae24:	d101      	bne.n	800ae2a <ai_array_get_byte_size+0x32>
 800ae26:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800ae2a:	3107      	adds	r1, #7
 800ae2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae30:	08c8      	lsrs	r0, r1, #3
 800ae32:	4770      	bx	lr
 800ae34:	4608      	mov	r0, r1
 800ae36:	4770      	bx	lr
 800ae38:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800ae3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae40:	3107      	adds	r1, #7
 800ae42:	08c8      	lsrs	r0, r1, #3
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop

0800ae48 <__errno>:
 800ae48:	4b01      	ldr	r3, [pc, #4]	; (800ae50 <__errno+0x8>)
 800ae4a:	6818      	ldr	r0, [r3, #0]
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	20000c78 	.word	0x20000c78

0800ae54 <__libc_init_array>:
 800ae54:	b570      	push	{r4, r5, r6, lr}
 800ae56:	4e0d      	ldr	r6, [pc, #52]	; (800ae8c <__libc_init_array+0x38>)
 800ae58:	4c0d      	ldr	r4, [pc, #52]	; (800ae90 <__libc_init_array+0x3c>)
 800ae5a:	1ba4      	subs	r4, r4, r6
 800ae5c:	10a4      	asrs	r4, r4, #2
 800ae5e:	2500      	movs	r5, #0
 800ae60:	42a5      	cmp	r5, r4
 800ae62:	d109      	bne.n	800ae78 <__libc_init_array+0x24>
 800ae64:	4e0b      	ldr	r6, [pc, #44]	; (800ae94 <__libc_init_array+0x40>)
 800ae66:	4c0c      	ldr	r4, [pc, #48]	; (800ae98 <__libc_init_array+0x44>)
 800ae68:	f002 fc04 	bl	800d674 <_init>
 800ae6c:	1ba4      	subs	r4, r4, r6
 800ae6e:	10a4      	asrs	r4, r4, #2
 800ae70:	2500      	movs	r5, #0
 800ae72:	42a5      	cmp	r5, r4
 800ae74:	d105      	bne.n	800ae82 <__libc_init_array+0x2e>
 800ae76:	bd70      	pop	{r4, r5, r6, pc}
 800ae78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ae7c:	4798      	blx	r3
 800ae7e:	3501      	adds	r5, #1
 800ae80:	e7ee      	b.n	800ae60 <__libc_init_array+0xc>
 800ae82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ae86:	4798      	blx	r3
 800ae88:	3501      	adds	r5, #1
 800ae8a:	e7f2      	b.n	800ae72 <__libc_init_array+0x1e>
 800ae8c:	08033308 	.word	0x08033308
 800ae90:	08033308 	.word	0x08033308
 800ae94:	08033308 	.word	0x08033308
 800ae98:	0803330c 	.word	0x0803330c

0800ae9c <malloc>:
 800ae9c:	4b02      	ldr	r3, [pc, #8]	; (800aea8 <malloc+0xc>)
 800ae9e:	4601      	mov	r1, r0
 800aea0:	6818      	ldr	r0, [r3, #0]
 800aea2:	f000 b865 	b.w	800af70 <_malloc_r>
 800aea6:	bf00      	nop
 800aea8:	20000c78 	.word	0x20000c78

0800aeac <memcpy>:
 800aeac:	b510      	push	{r4, lr}
 800aeae:	1e43      	subs	r3, r0, #1
 800aeb0:	440a      	add	r2, r1
 800aeb2:	4291      	cmp	r1, r2
 800aeb4:	d100      	bne.n	800aeb8 <memcpy+0xc>
 800aeb6:	bd10      	pop	{r4, pc}
 800aeb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aebc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aec0:	e7f7      	b.n	800aeb2 <memcpy+0x6>

0800aec2 <memset>:
 800aec2:	4402      	add	r2, r0
 800aec4:	4603      	mov	r3, r0
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d100      	bne.n	800aecc <memset+0xa>
 800aeca:	4770      	bx	lr
 800aecc:	f803 1b01 	strb.w	r1, [r3], #1
 800aed0:	e7f9      	b.n	800aec6 <memset+0x4>
	...

0800aed4 <_free_r>:
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	4605      	mov	r5, r0
 800aed8:	2900      	cmp	r1, #0
 800aeda:	d045      	beq.n	800af68 <_free_r+0x94>
 800aedc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aee0:	1f0c      	subs	r4, r1, #4
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	bfb8      	it	lt
 800aee6:	18e4      	addlt	r4, r4, r3
 800aee8:	f001 fbc2 	bl	800c670 <__malloc_lock>
 800aeec:	4a1f      	ldr	r2, [pc, #124]	; (800af6c <_free_r+0x98>)
 800aeee:	6813      	ldr	r3, [r2, #0]
 800aef0:	4610      	mov	r0, r2
 800aef2:	b933      	cbnz	r3, 800af02 <_free_r+0x2e>
 800aef4:	6063      	str	r3, [r4, #4]
 800aef6:	6014      	str	r4, [r2, #0]
 800aef8:	4628      	mov	r0, r5
 800aefa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aefe:	f001 bbb8 	b.w	800c672 <__malloc_unlock>
 800af02:	42a3      	cmp	r3, r4
 800af04:	d90c      	bls.n	800af20 <_free_r+0x4c>
 800af06:	6821      	ldr	r1, [r4, #0]
 800af08:	1862      	adds	r2, r4, r1
 800af0a:	4293      	cmp	r3, r2
 800af0c:	bf04      	itt	eq
 800af0e:	681a      	ldreq	r2, [r3, #0]
 800af10:	685b      	ldreq	r3, [r3, #4]
 800af12:	6063      	str	r3, [r4, #4]
 800af14:	bf04      	itt	eq
 800af16:	1852      	addeq	r2, r2, r1
 800af18:	6022      	streq	r2, [r4, #0]
 800af1a:	6004      	str	r4, [r0, #0]
 800af1c:	e7ec      	b.n	800aef8 <_free_r+0x24>
 800af1e:	4613      	mov	r3, r2
 800af20:	685a      	ldr	r2, [r3, #4]
 800af22:	b10a      	cbz	r2, 800af28 <_free_r+0x54>
 800af24:	42a2      	cmp	r2, r4
 800af26:	d9fa      	bls.n	800af1e <_free_r+0x4a>
 800af28:	6819      	ldr	r1, [r3, #0]
 800af2a:	1858      	adds	r0, r3, r1
 800af2c:	42a0      	cmp	r0, r4
 800af2e:	d10b      	bne.n	800af48 <_free_r+0x74>
 800af30:	6820      	ldr	r0, [r4, #0]
 800af32:	4401      	add	r1, r0
 800af34:	1858      	adds	r0, r3, r1
 800af36:	4282      	cmp	r2, r0
 800af38:	6019      	str	r1, [r3, #0]
 800af3a:	d1dd      	bne.n	800aef8 <_free_r+0x24>
 800af3c:	6810      	ldr	r0, [r2, #0]
 800af3e:	6852      	ldr	r2, [r2, #4]
 800af40:	605a      	str	r2, [r3, #4]
 800af42:	4401      	add	r1, r0
 800af44:	6019      	str	r1, [r3, #0]
 800af46:	e7d7      	b.n	800aef8 <_free_r+0x24>
 800af48:	d902      	bls.n	800af50 <_free_r+0x7c>
 800af4a:	230c      	movs	r3, #12
 800af4c:	602b      	str	r3, [r5, #0]
 800af4e:	e7d3      	b.n	800aef8 <_free_r+0x24>
 800af50:	6820      	ldr	r0, [r4, #0]
 800af52:	1821      	adds	r1, r4, r0
 800af54:	428a      	cmp	r2, r1
 800af56:	bf04      	itt	eq
 800af58:	6811      	ldreq	r1, [r2, #0]
 800af5a:	6852      	ldreq	r2, [r2, #4]
 800af5c:	6062      	str	r2, [r4, #4]
 800af5e:	bf04      	itt	eq
 800af60:	1809      	addeq	r1, r1, r0
 800af62:	6021      	streq	r1, [r4, #0]
 800af64:	605c      	str	r4, [r3, #4]
 800af66:	e7c7      	b.n	800aef8 <_free_r+0x24>
 800af68:	bd38      	pop	{r3, r4, r5, pc}
 800af6a:	bf00      	nop
 800af6c:	2000f8a0 	.word	0x2000f8a0

0800af70 <_malloc_r>:
 800af70:	b570      	push	{r4, r5, r6, lr}
 800af72:	1ccd      	adds	r5, r1, #3
 800af74:	f025 0503 	bic.w	r5, r5, #3
 800af78:	3508      	adds	r5, #8
 800af7a:	2d0c      	cmp	r5, #12
 800af7c:	bf38      	it	cc
 800af7e:	250c      	movcc	r5, #12
 800af80:	2d00      	cmp	r5, #0
 800af82:	4606      	mov	r6, r0
 800af84:	db01      	blt.n	800af8a <_malloc_r+0x1a>
 800af86:	42a9      	cmp	r1, r5
 800af88:	d903      	bls.n	800af92 <_malloc_r+0x22>
 800af8a:	230c      	movs	r3, #12
 800af8c:	6033      	str	r3, [r6, #0]
 800af8e:	2000      	movs	r0, #0
 800af90:	bd70      	pop	{r4, r5, r6, pc}
 800af92:	f001 fb6d 	bl	800c670 <__malloc_lock>
 800af96:	4a21      	ldr	r2, [pc, #132]	; (800b01c <_malloc_r+0xac>)
 800af98:	6814      	ldr	r4, [r2, #0]
 800af9a:	4621      	mov	r1, r4
 800af9c:	b991      	cbnz	r1, 800afc4 <_malloc_r+0x54>
 800af9e:	4c20      	ldr	r4, [pc, #128]	; (800b020 <_malloc_r+0xb0>)
 800afa0:	6823      	ldr	r3, [r4, #0]
 800afa2:	b91b      	cbnz	r3, 800afac <_malloc_r+0x3c>
 800afa4:	4630      	mov	r0, r6
 800afa6:	f000 fc99 	bl	800b8dc <_sbrk_r>
 800afaa:	6020      	str	r0, [r4, #0]
 800afac:	4629      	mov	r1, r5
 800afae:	4630      	mov	r0, r6
 800afb0:	f000 fc94 	bl	800b8dc <_sbrk_r>
 800afb4:	1c43      	adds	r3, r0, #1
 800afb6:	d124      	bne.n	800b002 <_malloc_r+0x92>
 800afb8:	230c      	movs	r3, #12
 800afba:	6033      	str	r3, [r6, #0]
 800afbc:	4630      	mov	r0, r6
 800afbe:	f001 fb58 	bl	800c672 <__malloc_unlock>
 800afc2:	e7e4      	b.n	800af8e <_malloc_r+0x1e>
 800afc4:	680b      	ldr	r3, [r1, #0]
 800afc6:	1b5b      	subs	r3, r3, r5
 800afc8:	d418      	bmi.n	800affc <_malloc_r+0x8c>
 800afca:	2b0b      	cmp	r3, #11
 800afcc:	d90f      	bls.n	800afee <_malloc_r+0x7e>
 800afce:	600b      	str	r3, [r1, #0]
 800afd0:	50cd      	str	r5, [r1, r3]
 800afd2:	18cc      	adds	r4, r1, r3
 800afd4:	4630      	mov	r0, r6
 800afd6:	f001 fb4c 	bl	800c672 <__malloc_unlock>
 800afda:	f104 000b 	add.w	r0, r4, #11
 800afde:	1d23      	adds	r3, r4, #4
 800afe0:	f020 0007 	bic.w	r0, r0, #7
 800afe4:	1ac3      	subs	r3, r0, r3
 800afe6:	d0d3      	beq.n	800af90 <_malloc_r+0x20>
 800afe8:	425a      	negs	r2, r3
 800afea:	50e2      	str	r2, [r4, r3]
 800afec:	e7d0      	b.n	800af90 <_malloc_r+0x20>
 800afee:	428c      	cmp	r4, r1
 800aff0:	684b      	ldr	r3, [r1, #4]
 800aff2:	bf16      	itet	ne
 800aff4:	6063      	strne	r3, [r4, #4]
 800aff6:	6013      	streq	r3, [r2, #0]
 800aff8:	460c      	movne	r4, r1
 800affa:	e7eb      	b.n	800afd4 <_malloc_r+0x64>
 800affc:	460c      	mov	r4, r1
 800affe:	6849      	ldr	r1, [r1, #4]
 800b000:	e7cc      	b.n	800af9c <_malloc_r+0x2c>
 800b002:	1cc4      	adds	r4, r0, #3
 800b004:	f024 0403 	bic.w	r4, r4, #3
 800b008:	42a0      	cmp	r0, r4
 800b00a:	d005      	beq.n	800b018 <_malloc_r+0xa8>
 800b00c:	1a21      	subs	r1, r4, r0
 800b00e:	4630      	mov	r0, r6
 800b010:	f000 fc64 	bl	800b8dc <_sbrk_r>
 800b014:	3001      	adds	r0, #1
 800b016:	d0cf      	beq.n	800afb8 <_malloc_r+0x48>
 800b018:	6025      	str	r5, [r4, #0]
 800b01a:	e7db      	b.n	800afd4 <_malloc_r+0x64>
 800b01c:	2000f8a0 	.word	0x2000f8a0
 800b020:	2000f8a4 	.word	0x2000f8a4

0800b024 <__cvt>:
 800b024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b028:	ec55 4b10 	vmov	r4, r5, d0
 800b02c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b02e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b032:	2d00      	cmp	r5, #0
 800b034:	460e      	mov	r6, r1
 800b036:	4691      	mov	r9, r2
 800b038:	4619      	mov	r1, r3
 800b03a:	bfb8      	it	lt
 800b03c:	4622      	movlt	r2, r4
 800b03e:	462b      	mov	r3, r5
 800b040:	f027 0720 	bic.w	r7, r7, #32
 800b044:	bfbb      	ittet	lt
 800b046:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b04a:	461d      	movlt	r5, r3
 800b04c:	2300      	movge	r3, #0
 800b04e:	232d      	movlt	r3, #45	; 0x2d
 800b050:	bfb8      	it	lt
 800b052:	4614      	movlt	r4, r2
 800b054:	2f46      	cmp	r7, #70	; 0x46
 800b056:	700b      	strb	r3, [r1, #0]
 800b058:	d004      	beq.n	800b064 <__cvt+0x40>
 800b05a:	2f45      	cmp	r7, #69	; 0x45
 800b05c:	d100      	bne.n	800b060 <__cvt+0x3c>
 800b05e:	3601      	adds	r6, #1
 800b060:	2102      	movs	r1, #2
 800b062:	e000      	b.n	800b066 <__cvt+0x42>
 800b064:	2103      	movs	r1, #3
 800b066:	ab03      	add	r3, sp, #12
 800b068:	9301      	str	r3, [sp, #4]
 800b06a:	ab02      	add	r3, sp, #8
 800b06c:	9300      	str	r3, [sp, #0]
 800b06e:	4632      	mov	r2, r6
 800b070:	4653      	mov	r3, sl
 800b072:	ec45 4b10 	vmov	d0, r4, r5
 800b076:	f000 fd23 	bl	800bac0 <_dtoa_r>
 800b07a:	2f47      	cmp	r7, #71	; 0x47
 800b07c:	4680      	mov	r8, r0
 800b07e:	d102      	bne.n	800b086 <__cvt+0x62>
 800b080:	f019 0f01 	tst.w	r9, #1
 800b084:	d026      	beq.n	800b0d4 <__cvt+0xb0>
 800b086:	2f46      	cmp	r7, #70	; 0x46
 800b088:	eb08 0906 	add.w	r9, r8, r6
 800b08c:	d111      	bne.n	800b0b2 <__cvt+0x8e>
 800b08e:	f898 3000 	ldrb.w	r3, [r8]
 800b092:	2b30      	cmp	r3, #48	; 0x30
 800b094:	d10a      	bne.n	800b0ac <__cvt+0x88>
 800b096:	2200      	movs	r2, #0
 800b098:	2300      	movs	r3, #0
 800b09a:	4620      	mov	r0, r4
 800b09c:	4629      	mov	r1, r5
 800b09e:	f7f5 fd93 	bl	8000bc8 <__aeabi_dcmpeq>
 800b0a2:	b918      	cbnz	r0, 800b0ac <__cvt+0x88>
 800b0a4:	f1c6 0601 	rsb	r6, r6, #1
 800b0a8:	f8ca 6000 	str.w	r6, [sl]
 800b0ac:	f8da 3000 	ldr.w	r3, [sl]
 800b0b0:	4499      	add	r9, r3
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	4629      	mov	r1, r5
 800b0ba:	f7f5 fd85 	bl	8000bc8 <__aeabi_dcmpeq>
 800b0be:	b938      	cbnz	r0, 800b0d0 <__cvt+0xac>
 800b0c0:	2230      	movs	r2, #48	; 0x30
 800b0c2:	9b03      	ldr	r3, [sp, #12]
 800b0c4:	454b      	cmp	r3, r9
 800b0c6:	d205      	bcs.n	800b0d4 <__cvt+0xb0>
 800b0c8:	1c59      	adds	r1, r3, #1
 800b0ca:	9103      	str	r1, [sp, #12]
 800b0cc:	701a      	strb	r2, [r3, #0]
 800b0ce:	e7f8      	b.n	800b0c2 <__cvt+0x9e>
 800b0d0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b0d4:	9b03      	ldr	r3, [sp, #12]
 800b0d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0d8:	eba3 0308 	sub.w	r3, r3, r8
 800b0dc:	4640      	mov	r0, r8
 800b0de:	6013      	str	r3, [r2, #0]
 800b0e0:	b004      	add	sp, #16
 800b0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b0e6 <__exponent>:
 800b0e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0e8:	2900      	cmp	r1, #0
 800b0ea:	4604      	mov	r4, r0
 800b0ec:	bfba      	itte	lt
 800b0ee:	4249      	neglt	r1, r1
 800b0f0:	232d      	movlt	r3, #45	; 0x2d
 800b0f2:	232b      	movge	r3, #43	; 0x2b
 800b0f4:	2909      	cmp	r1, #9
 800b0f6:	f804 2b02 	strb.w	r2, [r4], #2
 800b0fa:	7043      	strb	r3, [r0, #1]
 800b0fc:	dd20      	ble.n	800b140 <__exponent+0x5a>
 800b0fe:	f10d 0307 	add.w	r3, sp, #7
 800b102:	461f      	mov	r7, r3
 800b104:	260a      	movs	r6, #10
 800b106:	fb91 f5f6 	sdiv	r5, r1, r6
 800b10a:	fb06 1115 	mls	r1, r6, r5, r1
 800b10e:	3130      	adds	r1, #48	; 0x30
 800b110:	2d09      	cmp	r5, #9
 800b112:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b116:	f103 32ff 	add.w	r2, r3, #4294967295
 800b11a:	4629      	mov	r1, r5
 800b11c:	dc09      	bgt.n	800b132 <__exponent+0x4c>
 800b11e:	3130      	adds	r1, #48	; 0x30
 800b120:	3b02      	subs	r3, #2
 800b122:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b126:	42bb      	cmp	r3, r7
 800b128:	4622      	mov	r2, r4
 800b12a:	d304      	bcc.n	800b136 <__exponent+0x50>
 800b12c:	1a10      	subs	r0, r2, r0
 800b12e:	b003      	add	sp, #12
 800b130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b132:	4613      	mov	r3, r2
 800b134:	e7e7      	b.n	800b106 <__exponent+0x20>
 800b136:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b13a:	f804 2b01 	strb.w	r2, [r4], #1
 800b13e:	e7f2      	b.n	800b126 <__exponent+0x40>
 800b140:	2330      	movs	r3, #48	; 0x30
 800b142:	4419      	add	r1, r3
 800b144:	7083      	strb	r3, [r0, #2]
 800b146:	1d02      	adds	r2, r0, #4
 800b148:	70c1      	strb	r1, [r0, #3]
 800b14a:	e7ef      	b.n	800b12c <__exponent+0x46>

0800b14c <_printf_float>:
 800b14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b150:	b08d      	sub	sp, #52	; 0x34
 800b152:	460c      	mov	r4, r1
 800b154:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b158:	4616      	mov	r6, r2
 800b15a:	461f      	mov	r7, r3
 800b15c:	4605      	mov	r5, r0
 800b15e:	f001 fa67 	bl	800c630 <_localeconv_r>
 800b162:	6803      	ldr	r3, [r0, #0]
 800b164:	9304      	str	r3, [sp, #16]
 800b166:	4618      	mov	r0, r3
 800b168:	f7f5 f8b2 	bl	80002d0 <strlen>
 800b16c:	2300      	movs	r3, #0
 800b16e:	930a      	str	r3, [sp, #40]	; 0x28
 800b170:	f8d8 3000 	ldr.w	r3, [r8]
 800b174:	9005      	str	r0, [sp, #20]
 800b176:	3307      	adds	r3, #7
 800b178:	f023 0307 	bic.w	r3, r3, #7
 800b17c:	f103 0208 	add.w	r2, r3, #8
 800b180:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b184:	f8d4 b000 	ldr.w	fp, [r4]
 800b188:	f8c8 2000 	str.w	r2, [r8]
 800b18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b190:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b194:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b198:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b19c:	9307      	str	r3, [sp, #28]
 800b19e:	f8cd 8018 	str.w	r8, [sp, #24]
 800b1a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1a6:	4ba7      	ldr	r3, [pc, #668]	; (800b444 <_printf_float+0x2f8>)
 800b1a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1ac:	f7f5 fd3e 	bl	8000c2c <__aeabi_dcmpun>
 800b1b0:	bb70      	cbnz	r0, 800b210 <_printf_float+0xc4>
 800b1b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1b6:	4ba3      	ldr	r3, [pc, #652]	; (800b444 <_printf_float+0x2f8>)
 800b1b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1bc:	f7f5 fd18 	bl	8000bf0 <__aeabi_dcmple>
 800b1c0:	bb30      	cbnz	r0, 800b210 <_printf_float+0xc4>
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	4640      	mov	r0, r8
 800b1c8:	4649      	mov	r1, r9
 800b1ca:	f7f5 fd07 	bl	8000bdc <__aeabi_dcmplt>
 800b1ce:	b110      	cbz	r0, 800b1d6 <_printf_float+0x8a>
 800b1d0:	232d      	movs	r3, #45	; 0x2d
 800b1d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1d6:	4a9c      	ldr	r2, [pc, #624]	; (800b448 <_printf_float+0x2fc>)
 800b1d8:	4b9c      	ldr	r3, [pc, #624]	; (800b44c <_printf_float+0x300>)
 800b1da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b1de:	bf8c      	ite	hi
 800b1e0:	4690      	movhi	r8, r2
 800b1e2:	4698      	movls	r8, r3
 800b1e4:	2303      	movs	r3, #3
 800b1e6:	f02b 0204 	bic.w	r2, fp, #4
 800b1ea:	6123      	str	r3, [r4, #16]
 800b1ec:	6022      	str	r2, [r4, #0]
 800b1ee:	f04f 0900 	mov.w	r9, #0
 800b1f2:	9700      	str	r7, [sp, #0]
 800b1f4:	4633      	mov	r3, r6
 800b1f6:	aa0b      	add	r2, sp, #44	; 0x2c
 800b1f8:	4621      	mov	r1, r4
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	f000 f9e6 	bl	800b5cc <_printf_common>
 800b200:	3001      	adds	r0, #1
 800b202:	f040 808d 	bne.w	800b320 <_printf_float+0x1d4>
 800b206:	f04f 30ff 	mov.w	r0, #4294967295
 800b20a:	b00d      	add	sp, #52	; 0x34
 800b20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b210:	4642      	mov	r2, r8
 800b212:	464b      	mov	r3, r9
 800b214:	4640      	mov	r0, r8
 800b216:	4649      	mov	r1, r9
 800b218:	f7f5 fd08 	bl	8000c2c <__aeabi_dcmpun>
 800b21c:	b110      	cbz	r0, 800b224 <_printf_float+0xd8>
 800b21e:	4a8c      	ldr	r2, [pc, #560]	; (800b450 <_printf_float+0x304>)
 800b220:	4b8c      	ldr	r3, [pc, #560]	; (800b454 <_printf_float+0x308>)
 800b222:	e7da      	b.n	800b1da <_printf_float+0x8e>
 800b224:	6861      	ldr	r1, [r4, #4]
 800b226:	1c4b      	adds	r3, r1, #1
 800b228:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800b22c:	a80a      	add	r0, sp, #40	; 0x28
 800b22e:	d13e      	bne.n	800b2ae <_printf_float+0x162>
 800b230:	2306      	movs	r3, #6
 800b232:	6063      	str	r3, [r4, #4]
 800b234:	2300      	movs	r3, #0
 800b236:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b23a:	ab09      	add	r3, sp, #36	; 0x24
 800b23c:	9300      	str	r3, [sp, #0]
 800b23e:	ec49 8b10 	vmov	d0, r8, r9
 800b242:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b246:	6022      	str	r2, [r4, #0]
 800b248:	f8cd a004 	str.w	sl, [sp, #4]
 800b24c:	6861      	ldr	r1, [r4, #4]
 800b24e:	4628      	mov	r0, r5
 800b250:	f7ff fee8 	bl	800b024 <__cvt>
 800b254:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800b258:	2b47      	cmp	r3, #71	; 0x47
 800b25a:	4680      	mov	r8, r0
 800b25c:	d109      	bne.n	800b272 <_printf_float+0x126>
 800b25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b260:	1cd8      	adds	r0, r3, #3
 800b262:	db02      	blt.n	800b26a <_printf_float+0x11e>
 800b264:	6862      	ldr	r2, [r4, #4]
 800b266:	4293      	cmp	r3, r2
 800b268:	dd47      	ble.n	800b2fa <_printf_float+0x1ae>
 800b26a:	f1aa 0a02 	sub.w	sl, sl, #2
 800b26e:	fa5f fa8a 	uxtb.w	sl, sl
 800b272:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b276:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b278:	d824      	bhi.n	800b2c4 <_printf_float+0x178>
 800b27a:	3901      	subs	r1, #1
 800b27c:	4652      	mov	r2, sl
 800b27e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b282:	9109      	str	r1, [sp, #36]	; 0x24
 800b284:	f7ff ff2f 	bl	800b0e6 <__exponent>
 800b288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b28a:	1813      	adds	r3, r2, r0
 800b28c:	2a01      	cmp	r2, #1
 800b28e:	4681      	mov	r9, r0
 800b290:	6123      	str	r3, [r4, #16]
 800b292:	dc02      	bgt.n	800b29a <_printf_float+0x14e>
 800b294:	6822      	ldr	r2, [r4, #0]
 800b296:	07d1      	lsls	r1, r2, #31
 800b298:	d501      	bpl.n	800b29e <_printf_float+0x152>
 800b29a:	3301      	adds	r3, #1
 800b29c:	6123      	str	r3, [r4, #16]
 800b29e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d0a5      	beq.n	800b1f2 <_printf_float+0xa6>
 800b2a6:	232d      	movs	r3, #45	; 0x2d
 800b2a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2ac:	e7a1      	b.n	800b1f2 <_printf_float+0xa6>
 800b2ae:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b2b2:	f000 8177 	beq.w	800b5a4 <_printf_float+0x458>
 800b2b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b2ba:	d1bb      	bne.n	800b234 <_printf_float+0xe8>
 800b2bc:	2900      	cmp	r1, #0
 800b2be:	d1b9      	bne.n	800b234 <_printf_float+0xe8>
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	e7b6      	b.n	800b232 <_printf_float+0xe6>
 800b2c4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b2c8:	d119      	bne.n	800b2fe <_printf_float+0x1b2>
 800b2ca:	2900      	cmp	r1, #0
 800b2cc:	6863      	ldr	r3, [r4, #4]
 800b2ce:	dd0c      	ble.n	800b2ea <_printf_float+0x19e>
 800b2d0:	6121      	str	r1, [r4, #16]
 800b2d2:	b913      	cbnz	r3, 800b2da <_printf_float+0x18e>
 800b2d4:	6822      	ldr	r2, [r4, #0]
 800b2d6:	07d2      	lsls	r2, r2, #31
 800b2d8:	d502      	bpl.n	800b2e0 <_printf_float+0x194>
 800b2da:	3301      	adds	r3, #1
 800b2dc:	440b      	add	r3, r1
 800b2de:	6123      	str	r3, [r4, #16]
 800b2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2e2:	65a3      	str	r3, [r4, #88]	; 0x58
 800b2e4:	f04f 0900 	mov.w	r9, #0
 800b2e8:	e7d9      	b.n	800b29e <_printf_float+0x152>
 800b2ea:	b913      	cbnz	r3, 800b2f2 <_printf_float+0x1a6>
 800b2ec:	6822      	ldr	r2, [r4, #0]
 800b2ee:	07d0      	lsls	r0, r2, #31
 800b2f0:	d501      	bpl.n	800b2f6 <_printf_float+0x1aa>
 800b2f2:	3302      	adds	r3, #2
 800b2f4:	e7f3      	b.n	800b2de <_printf_float+0x192>
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e7f1      	b.n	800b2de <_printf_float+0x192>
 800b2fa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b2fe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b302:	4293      	cmp	r3, r2
 800b304:	db05      	blt.n	800b312 <_printf_float+0x1c6>
 800b306:	6822      	ldr	r2, [r4, #0]
 800b308:	6123      	str	r3, [r4, #16]
 800b30a:	07d1      	lsls	r1, r2, #31
 800b30c:	d5e8      	bpl.n	800b2e0 <_printf_float+0x194>
 800b30e:	3301      	adds	r3, #1
 800b310:	e7e5      	b.n	800b2de <_printf_float+0x192>
 800b312:	2b00      	cmp	r3, #0
 800b314:	bfd4      	ite	le
 800b316:	f1c3 0302 	rsble	r3, r3, #2
 800b31a:	2301      	movgt	r3, #1
 800b31c:	4413      	add	r3, r2
 800b31e:	e7de      	b.n	800b2de <_printf_float+0x192>
 800b320:	6823      	ldr	r3, [r4, #0]
 800b322:	055a      	lsls	r2, r3, #21
 800b324:	d407      	bmi.n	800b336 <_printf_float+0x1ea>
 800b326:	6923      	ldr	r3, [r4, #16]
 800b328:	4642      	mov	r2, r8
 800b32a:	4631      	mov	r1, r6
 800b32c:	4628      	mov	r0, r5
 800b32e:	47b8      	blx	r7
 800b330:	3001      	adds	r0, #1
 800b332:	d12b      	bne.n	800b38c <_printf_float+0x240>
 800b334:	e767      	b.n	800b206 <_printf_float+0xba>
 800b336:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b33a:	f240 80dc 	bls.w	800b4f6 <_printf_float+0x3aa>
 800b33e:	2200      	movs	r2, #0
 800b340:	2300      	movs	r3, #0
 800b342:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b346:	f7f5 fc3f 	bl	8000bc8 <__aeabi_dcmpeq>
 800b34a:	2800      	cmp	r0, #0
 800b34c:	d033      	beq.n	800b3b6 <_printf_float+0x26a>
 800b34e:	2301      	movs	r3, #1
 800b350:	4a41      	ldr	r2, [pc, #260]	; (800b458 <_printf_float+0x30c>)
 800b352:	4631      	mov	r1, r6
 800b354:	4628      	mov	r0, r5
 800b356:	47b8      	blx	r7
 800b358:	3001      	adds	r0, #1
 800b35a:	f43f af54 	beq.w	800b206 <_printf_float+0xba>
 800b35e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b362:	429a      	cmp	r2, r3
 800b364:	db02      	blt.n	800b36c <_printf_float+0x220>
 800b366:	6823      	ldr	r3, [r4, #0]
 800b368:	07d8      	lsls	r0, r3, #31
 800b36a:	d50f      	bpl.n	800b38c <_printf_float+0x240>
 800b36c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b370:	4631      	mov	r1, r6
 800b372:	4628      	mov	r0, r5
 800b374:	47b8      	blx	r7
 800b376:	3001      	adds	r0, #1
 800b378:	f43f af45 	beq.w	800b206 <_printf_float+0xba>
 800b37c:	f04f 0800 	mov.w	r8, #0
 800b380:	f104 091a 	add.w	r9, r4, #26
 800b384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b386:	3b01      	subs	r3, #1
 800b388:	4543      	cmp	r3, r8
 800b38a:	dc09      	bgt.n	800b3a0 <_printf_float+0x254>
 800b38c:	6823      	ldr	r3, [r4, #0]
 800b38e:	079b      	lsls	r3, r3, #30
 800b390:	f100 8103 	bmi.w	800b59a <_printf_float+0x44e>
 800b394:	68e0      	ldr	r0, [r4, #12]
 800b396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b398:	4298      	cmp	r0, r3
 800b39a:	bfb8      	it	lt
 800b39c:	4618      	movlt	r0, r3
 800b39e:	e734      	b.n	800b20a <_printf_float+0xbe>
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	464a      	mov	r2, r9
 800b3a4:	4631      	mov	r1, r6
 800b3a6:	4628      	mov	r0, r5
 800b3a8:	47b8      	blx	r7
 800b3aa:	3001      	adds	r0, #1
 800b3ac:	f43f af2b 	beq.w	800b206 <_printf_float+0xba>
 800b3b0:	f108 0801 	add.w	r8, r8, #1
 800b3b4:	e7e6      	b.n	800b384 <_printf_float+0x238>
 800b3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	dc2b      	bgt.n	800b414 <_printf_float+0x2c8>
 800b3bc:	2301      	movs	r3, #1
 800b3be:	4a26      	ldr	r2, [pc, #152]	; (800b458 <_printf_float+0x30c>)
 800b3c0:	4631      	mov	r1, r6
 800b3c2:	4628      	mov	r0, r5
 800b3c4:	47b8      	blx	r7
 800b3c6:	3001      	adds	r0, #1
 800b3c8:	f43f af1d 	beq.w	800b206 <_printf_float+0xba>
 800b3cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ce:	b923      	cbnz	r3, 800b3da <_printf_float+0x28e>
 800b3d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3d2:	b913      	cbnz	r3, 800b3da <_printf_float+0x28e>
 800b3d4:	6823      	ldr	r3, [r4, #0]
 800b3d6:	07d9      	lsls	r1, r3, #31
 800b3d8:	d5d8      	bpl.n	800b38c <_printf_float+0x240>
 800b3da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3de:	4631      	mov	r1, r6
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	47b8      	blx	r7
 800b3e4:	3001      	adds	r0, #1
 800b3e6:	f43f af0e 	beq.w	800b206 <_printf_float+0xba>
 800b3ea:	f04f 0900 	mov.w	r9, #0
 800b3ee:	f104 0a1a 	add.w	sl, r4, #26
 800b3f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3f4:	425b      	negs	r3, r3
 800b3f6:	454b      	cmp	r3, r9
 800b3f8:	dc01      	bgt.n	800b3fe <_printf_float+0x2b2>
 800b3fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3fc:	e794      	b.n	800b328 <_printf_float+0x1dc>
 800b3fe:	2301      	movs	r3, #1
 800b400:	4652      	mov	r2, sl
 800b402:	4631      	mov	r1, r6
 800b404:	4628      	mov	r0, r5
 800b406:	47b8      	blx	r7
 800b408:	3001      	adds	r0, #1
 800b40a:	f43f aefc 	beq.w	800b206 <_printf_float+0xba>
 800b40e:	f109 0901 	add.w	r9, r9, #1
 800b412:	e7ee      	b.n	800b3f2 <_printf_float+0x2a6>
 800b414:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b416:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b418:	429a      	cmp	r2, r3
 800b41a:	bfa8      	it	ge
 800b41c:	461a      	movge	r2, r3
 800b41e:	2a00      	cmp	r2, #0
 800b420:	4691      	mov	r9, r2
 800b422:	dd07      	ble.n	800b434 <_printf_float+0x2e8>
 800b424:	4613      	mov	r3, r2
 800b426:	4631      	mov	r1, r6
 800b428:	4642      	mov	r2, r8
 800b42a:	4628      	mov	r0, r5
 800b42c:	47b8      	blx	r7
 800b42e:	3001      	adds	r0, #1
 800b430:	f43f aee9 	beq.w	800b206 <_printf_float+0xba>
 800b434:	f104 031a 	add.w	r3, r4, #26
 800b438:	f04f 0b00 	mov.w	fp, #0
 800b43c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b440:	9306      	str	r3, [sp, #24]
 800b442:	e015      	b.n	800b470 <_printf_float+0x324>
 800b444:	7fefffff 	.word	0x7fefffff
 800b448:	08033080 	.word	0x08033080
 800b44c:	0803307c 	.word	0x0803307c
 800b450:	08033088 	.word	0x08033088
 800b454:	08033084 	.word	0x08033084
 800b458:	0803308c 	.word	0x0803308c
 800b45c:	2301      	movs	r3, #1
 800b45e:	9a06      	ldr	r2, [sp, #24]
 800b460:	4631      	mov	r1, r6
 800b462:	4628      	mov	r0, r5
 800b464:	47b8      	blx	r7
 800b466:	3001      	adds	r0, #1
 800b468:	f43f aecd 	beq.w	800b206 <_printf_float+0xba>
 800b46c:	f10b 0b01 	add.w	fp, fp, #1
 800b470:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b474:	ebaa 0309 	sub.w	r3, sl, r9
 800b478:	455b      	cmp	r3, fp
 800b47a:	dcef      	bgt.n	800b45c <_printf_float+0x310>
 800b47c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b480:	429a      	cmp	r2, r3
 800b482:	44d0      	add	r8, sl
 800b484:	db15      	blt.n	800b4b2 <_printf_float+0x366>
 800b486:	6823      	ldr	r3, [r4, #0]
 800b488:	07da      	lsls	r2, r3, #31
 800b48a:	d412      	bmi.n	800b4b2 <_printf_float+0x366>
 800b48c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b48e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b490:	eba3 020a 	sub.w	r2, r3, sl
 800b494:	eba3 0a01 	sub.w	sl, r3, r1
 800b498:	4592      	cmp	sl, r2
 800b49a:	bfa8      	it	ge
 800b49c:	4692      	movge	sl, r2
 800b49e:	f1ba 0f00 	cmp.w	sl, #0
 800b4a2:	dc0e      	bgt.n	800b4c2 <_printf_float+0x376>
 800b4a4:	f04f 0800 	mov.w	r8, #0
 800b4a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4ac:	f104 091a 	add.w	r9, r4, #26
 800b4b0:	e019      	b.n	800b4e6 <_printf_float+0x39a>
 800b4b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4b6:	4631      	mov	r1, r6
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	47b8      	blx	r7
 800b4bc:	3001      	adds	r0, #1
 800b4be:	d1e5      	bne.n	800b48c <_printf_float+0x340>
 800b4c0:	e6a1      	b.n	800b206 <_printf_float+0xba>
 800b4c2:	4653      	mov	r3, sl
 800b4c4:	4642      	mov	r2, r8
 800b4c6:	4631      	mov	r1, r6
 800b4c8:	4628      	mov	r0, r5
 800b4ca:	47b8      	blx	r7
 800b4cc:	3001      	adds	r0, #1
 800b4ce:	d1e9      	bne.n	800b4a4 <_printf_float+0x358>
 800b4d0:	e699      	b.n	800b206 <_printf_float+0xba>
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	464a      	mov	r2, r9
 800b4d6:	4631      	mov	r1, r6
 800b4d8:	4628      	mov	r0, r5
 800b4da:	47b8      	blx	r7
 800b4dc:	3001      	adds	r0, #1
 800b4de:	f43f ae92 	beq.w	800b206 <_printf_float+0xba>
 800b4e2:	f108 0801 	add.w	r8, r8, #1
 800b4e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4ea:	1a9b      	subs	r3, r3, r2
 800b4ec:	eba3 030a 	sub.w	r3, r3, sl
 800b4f0:	4543      	cmp	r3, r8
 800b4f2:	dcee      	bgt.n	800b4d2 <_printf_float+0x386>
 800b4f4:	e74a      	b.n	800b38c <_printf_float+0x240>
 800b4f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4f8:	2a01      	cmp	r2, #1
 800b4fa:	dc01      	bgt.n	800b500 <_printf_float+0x3b4>
 800b4fc:	07db      	lsls	r3, r3, #31
 800b4fe:	d53a      	bpl.n	800b576 <_printf_float+0x42a>
 800b500:	2301      	movs	r3, #1
 800b502:	4642      	mov	r2, r8
 800b504:	4631      	mov	r1, r6
 800b506:	4628      	mov	r0, r5
 800b508:	47b8      	blx	r7
 800b50a:	3001      	adds	r0, #1
 800b50c:	f43f ae7b 	beq.w	800b206 <_printf_float+0xba>
 800b510:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b514:	4631      	mov	r1, r6
 800b516:	4628      	mov	r0, r5
 800b518:	47b8      	blx	r7
 800b51a:	3001      	adds	r0, #1
 800b51c:	f108 0801 	add.w	r8, r8, #1
 800b520:	f43f ae71 	beq.w	800b206 <_printf_float+0xba>
 800b524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b526:	2200      	movs	r2, #0
 800b528:	f103 3aff 	add.w	sl, r3, #4294967295
 800b52c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b530:	2300      	movs	r3, #0
 800b532:	f7f5 fb49 	bl	8000bc8 <__aeabi_dcmpeq>
 800b536:	b9c8      	cbnz	r0, 800b56c <_printf_float+0x420>
 800b538:	4653      	mov	r3, sl
 800b53a:	4642      	mov	r2, r8
 800b53c:	4631      	mov	r1, r6
 800b53e:	4628      	mov	r0, r5
 800b540:	47b8      	blx	r7
 800b542:	3001      	adds	r0, #1
 800b544:	d10e      	bne.n	800b564 <_printf_float+0x418>
 800b546:	e65e      	b.n	800b206 <_printf_float+0xba>
 800b548:	2301      	movs	r3, #1
 800b54a:	4652      	mov	r2, sl
 800b54c:	4631      	mov	r1, r6
 800b54e:	4628      	mov	r0, r5
 800b550:	47b8      	blx	r7
 800b552:	3001      	adds	r0, #1
 800b554:	f43f ae57 	beq.w	800b206 <_printf_float+0xba>
 800b558:	f108 0801 	add.w	r8, r8, #1
 800b55c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b55e:	3b01      	subs	r3, #1
 800b560:	4543      	cmp	r3, r8
 800b562:	dcf1      	bgt.n	800b548 <_printf_float+0x3fc>
 800b564:	464b      	mov	r3, r9
 800b566:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b56a:	e6de      	b.n	800b32a <_printf_float+0x1de>
 800b56c:	f04f 0800 	mov.w	r8, #0
 800b570:	f104 0a1a 	add.w	sl, r4, #26
 800b574:	e7f2      	b.n	800b55c <_printf_float+0x410>
 800b576:	2301      	movs	r3, #1
 800b578:	e7df      	b.n	800b53a <_printf_float+0x3ee>
 800b57a:	2301      	movs	r3, #1
 800b57c:	464a      	mov	r2, r9
 800b57e:	4631      	mov	r1, r6
 800b580:	4628      	mov	r0, r5
 800b582:	47b8      	blx	r7
 800b584:	3001      	adds	r0, #1
 800b586:	f43f ae3e 	beq.w	800b206 <_printf_float+0xba>
 800b58a:	f108 0801 	add.w	r8, r8, #1
 800b58e:	68e3      	ldr	r3, [r4, #12]
 800b590:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b592:	1a9b      	subs	r3, r3, r2
 800b594:	4543      	cmp	r3, r8
 800b596:	dcf0      	bgt.n	800b57a <_printf_float+0x42e>
 800b598:	e6fc      	b.n	800b394 <_printf_float+0x248>
 800b59a:	f04f 0800 	mov.w	r8, #0
 800b59e:	f104 0919 	add.w	r9, r4, #25
 800b5a2:	e7f4      	b.n	800b58e <_printf_float+0x442>
 800b5a4:	2900      	cmp	r1, #0
 800b5a6:	f43f ae8b 	beq.w	800b2c0 <_printf_float+0x174>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b5b0:	ab09      	add	r3, sp, #36	; 0x24
 800b5b2:	9300      	str	r3, [sp, #0]
 800b5b4:	ec49 8b10 	vmov	d0, r8, r9
 800b5b8:	6022      	str	r2, [r4, #0]
 800b5ba:	f8cd a004 	str.w	sl, [sp, #4]
 800b5be:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b5c2:	4628      	mov	r0, r5
 800b5c4:	f7ff fd2e 	bl	800b024 <__cvt>
 800b5c8:	4680      	mov	r8, r0
 800b5ca:	e648      	b.n	800b25e <_printf_float+0x112>

0800b5cc <_printf_common>:
 800b5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5d0:	4691      	mov	r9, r2
 800b5d2:	461f      	mov	r7, r3
 800b5d4:	688a      	ldr	r2, [r1, #8]
 800b5d6:	690b      	ldr	r3, [r1, #16]
 800b5d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	bfb8      	it	lt
 800b5e0:	4613      	movlt	r3, r2
 800b5e2:	f8c9 3000 	str.w	r3, [r9]
 800b5e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b5ea:	4606      	mov	r6, r0
 800b5ec:	460c      	mov	r4, r1
 800b5ee:	b112      	cbz	r2, 800b5f6 <_printf_common+0x2a>
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	f8c9 3000 	str.w	r3, [r9]
 800b5f6:	6823      	ldr	r3, [r4, #0]
 800b5f8:	0699      	lsls	r1, r3, #26
 800b5fa:	bf42      	ittt	mi
 800b5fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b600:	3302      	addmi	r3, #2
 800b602:	f8c9 3000 	strmi.w	r3, [r9]
 800b606:	6825      	ldr	r5, [r4, #0]
 800b608:	f015 0506 	ands.w	r5, r5, #6
 800b60c:	d107      	bne.n	800b61e <_printf_common+0x52>
 800b60e:	f104 0a19 	add.w	sl, r4, #25
 800b612:	68e3      	ldr	r3, [r4, #12]
 800b614:	f8d9 2000 	ldr.w	r2, [r9]
 800b618:	1a9b      	subs	r3, r3, r2
 800b61a:	42ab      	cmp	r3, r5
 800b61c:	dc28      	bgt.n	800b670 <_printf_common+0xa4>
 800b61e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b622:	6822      	ldr	r2, [r4, #0]
 800b624:	3300      	adds	r3, #0
 800b626:	bf18      	it	ne
 800b628:	2301      	movne	r3, #1
 800b62a:	0692      	lsls	r2, r2, #26
 800b62c:	d42d      	bmi.n	800b68a <_printf_common+0xbe>
 800b62e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b632:	4639      	mov	r1, r7
 800b634:	4630      	mov	r0, r6
 800b636:	47c0      	blx	r8
 800b638:	3001      	adds	r0, #1
 800b63a:	d020      	beq.n	800b67e <_printf_common+0xb2>
 800b63c:	6823      	ldr	r3, [r4, #0]
 800b63e:	68e5      	ldr	r5, [r4, #12]
 800b640:	f8d9 2000 	ldr.w	r2, [r9]
 800b644:	f003 0306 	and.w	r3, r3, #6
 800b648:	2b04      	cmp	r3, #4
 800b64a:	bf08      	it	eq
 800b64c:	1aad      	subeq	r5, r5, r2
 800b64e:	68a3      	ldr	r3, [r4, #8]
 800b650:	6922      	ldr	r2, [r4, #16]
 800b652:	bf0c      	ite	eq
 800b654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b658:	2500      	movne	r5, #0
 800b65a:	4293      	cmp	r3, r2
 800b65c:	bfc4      	itt	gt
 800b65e:	1a9b      	subgt	r3, r3, r2
 800b660:	18ed      	addgt	r5, r5, r3
 800b662:	f04f 0900 	mov.w	r9, #0
 800b666:	341a      	adds	r4, #26
 800b668:	454d      	cmp	r5, r9
 800b66a:	d11a      	bne.n	800b6a2 <_printf_common+0xd6>
 800b66c:	2000      	movs	r0, #0
 800b66e:	e008      	b.n	800b682 <_printf_common+0xb6>
 800b670:	2301      	movs	r3, #1
 800b672:	4652      	mov	r2, sl
 800b674:	4639      	mov	r1, r7
 800b676:	4630      	mov	r0, r6
 800b678:	47c0      	blx	r8
 800b67a:	3001      	adds	r0, #1
 800b67c:	d103      	bne.n	800b686 <_printf_common+0xba>
 800b67e:	f04f 30ff 	mov.w	r0, #4294967295
 800b682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b686:	3501      	adds	r5, #1
 800b688:	e7c3      	b.n	800b612 <_printf_common+0x46>
 800b68a:	18e1      	adds	r1, r4, r3
 800b68c:	1c5a      	adds	r2, r3, #1
 800b68e:	2030      	movs	r0, #48	; 0x30
 800b690:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b694:	4422      	add	r2, r4
 800b696:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b69a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b69e:	3302      	adds	r3, #2
 800b6a0:	e7c5      	b.n	800b62e <_printf_common+0x62>
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	4622      	mov	r2, r4
 800b6a6:	4639      	mov	r1, r7
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	47c0      	blx	r8
 800b6ac:	3001      	adds	r0, #1
 800b6ae:	d0e6      	beq.n	800b67e <_printf_common+0xb2>
 800b6b0:	f109 0901 	add.w	r9, r9, #1
 800b6b4:	e7d8      	b.n	800b668 <_printf_common+0x9c>
	...

0800b6b8 <_printf_i>:
 800b6b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b6c0:	460c      	mov	r4, r1
 800b6c2:	7e09      	ldrb	r1, [r1, #24]
 800b6c4:	b085      	sub	sp, #20
 800b6c6:	296e      	cmp	r1, #110	; 0x6e
 800b6c8:	4617      	mov	r7, r2
 800b6ca:	4606      	mov	r6, r0
 800b6cc:	4698      	mov	r8, r3
 800b6ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6d0:	f000 80b3 	beq.w	800b83a <_printf_i+0x182>
 800b6d4:	d822      	bhi.n	800b71c <_printf_i+0x64>
 800b6d6:	2963      	cmp	r1, #99	; 0x63
 800b6d8:	d036      	beq.n	800b748 <_printf_i+0x90>
 800b6da:	d80a      	bhi.n	800b6f2 <_printf_i+0x3a>
 800b6dc:	2900      	cmp	r1, #0
 800b6de:	f000 80b9 	beq.w	800b854 <_printf_i+0x19c>
 800b6e2:	2958      	cmp	r1, #88	; 0x58
 800b6e4:	f000 8083 	beq.w	800b7ee <_printf_i+0x136>
 800b6e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b6f0:	e032      	b.n	800b758 <_printf_i+0xa0>
 800b6f2:	2964      	cmp	r1, #100	; 0x64
 800b6f4:	d001      	beq.n	800b6fa <_printf_i+0x42>
 800b6f6:	2969      	cmp	r1, #105	; 0x69
 800b6f8:	d1f6      	bne.n	800b6e8 <_printf_i+0x30>
 800b6fa:	6820      	ldr	r0, [r4, #0]
 800b6fc:	6813      	ldr	r3, [r2, #0]
 800b6fe:	0605      	lsls	r5, r0, #24
 800b700:	f103 0104 	add.w	r1, r3, #4
 800b704:	d52a      	bpl.n	800b75c <_printf_i+0xa4>
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	6011      	str	r1, [r2, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	da03      	bge.n	800b716 <_printf_i+0x5e>
 800b70e:	222d      	movs	r2, #45	; 0x2d
 800b710:	425b      	negs	r3, r3
 800b712:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b716:	486f      	ldr	r0, [pc, #444]	; (800b8d4 <_printf_i+0x21c>)
 800b718:	220a      	movs	r2, #10
 800b71a:	e039      	b.n	800b790 <_printf_i+0xd8>
 800b71c:	2973      	cmp	r1, #115	; 0x73
 800b71e:	f000 809d 	beq.w	800b85c <_printf_i+0x1a4>
 800b722:	d808      	bhi.n	800b736 <_printf_i+0x7e>
 800b724:	296f      	cmp	r1, #111	; 0x6f
 800b726:	d020      	beq.n	800b76a <_printf_i+0xb2>
 800b728:	2970      	cmp	r1, #112	; 0x70
 800b72a:	d1dd      	bne.n	800b6e8 <_printf_i+0x30>
 800b72c:	6823      	ldr	r3, [r4, #0]
 800b72e:	f043 0320 	orr.w	r3, r3, #32
 800b732:	6023      	str	r3, [r4, #0]
 800b734:	e003      	b.n	800b73e <_printf_i+0x86>
 800b736:	2975      	cmp	r1, #117	; 0x75
 800b738:	d017      	beq.n	800b76a <_printf_i+0xb2>
 800b73a:	2978      	cmp	r1, #120	; 0x78
 800b73c:	d1d4      	bne.n	800b6e8 <_printf_i+0x30>
 800b73e:	2378      	movs	r3, #120	; 0x78
 800b740:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b744:	4864      	ldr	r0, [pc, #400]	; (800b8d8 <_printf_i+0x220>)
 800b746:	e055      	b.n	800b7f4 <_printf_i+0x13c>
 800b748:	6813      	ldr	r3, [r2, #0]
 800b74a:	1d19      	adds	r1, r3, #4
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	6011      	str	r1, [r2, #0]
 800b750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b754:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b758:	2301      	movs	r3, #1
 800b75a:	e08c      	b.n	800b876 <_printf_i+0x1be>
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	6011      	str	r1, [r2, #0]
 800b760:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b764:	bf18      	it	ne
 800b766:	b21b      	sxthne	r3, r3
 800b768:	e7cf      	b.n	800b70a <_printf_i+0x52>
 800b76a:	6813      	ldr	r3, [r2, #0]
 800b76c:	6825      	ldr	r5, [r4, #0]
 800b76e:	1d18      	adds	r0, r3, #4
 800b770:	6010      	str	r0, [r2, #0]
 800b772:	0628      	lsls	r0, r5, #24
 800b774:	d501      	bpl.n	800b77a <_printf_i+0xc2>
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	e002      	b.n	800b780 <_printf_i+0xc8>
 800b77a:	0668      	lsls	r0, r5, #25
 800b77c:	d5fb      	bpl.n	800b776 <_printf_i+0xbe>
 800b77e:	881b      	ldrh	r3, [r3, #0]
 800b780:	4854      	ldr	r0, [pc, #336]	; (800b8d4 <_printf_i+0x21c>)
 800b782:	296f      	cmp	r1, #111	; 0x6f
 800b784:	bf14      	ite	ne
 800b786:	220a      	movne	r2, #10
 800b788:	2208      	moveq	r2, #8
 800b78a:	2100      	movs	r1, #0
 800b78c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b790:	6865      	ldr	r5, [r4, #4]
 800b792:	60a5      	str	r5, [r4, #8]
 800b794:	2d00      	cmp	r5, #0
 800b796:	f2c0 8095 	blt.w	800b8c4 <_printf_i+0x20c>
 800b79a:	6821      	ldr	r1, [r4, #0]
 800b79c:	f021 0104 	bic.w	r1, r1, #4
 800b7a0:	6021      	str	r1, [r4, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d13d      	bne.n	800b822 <_printf_i+0x16a>
 800b7a6:	2d00      	cmp	r5, #0
 800b7a8:	f040 808e 	bne.w	800b8c8 <_printf_i+0x210>
 800b7ac:	4665      	mov	r5, ip
 800b7ae:	2a08      	cmp	r2, #8
 800b7b0:	d10b      	bne.n	800b7ca <_printf_i+0x112>
 800b7b2:	6823      	ldr	r3, [r4, #0]
 800b7b4:	07db      	lsls	r3, r3, #31
 800b7b6:	d508      	bpl.n	800b7ca <_printf_i+0x112>
 800b7b8:	6923      	ldr	r3, [r4, #16]
 800b7ba:	6862      	ldr	r2, [r4, #4]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	bfde      	ittt	le
 800b7c0:	2330      	movle	r3, #48	; 0x30
 800b7c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b7c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b7ca:	ebac 0305 	sub.w	r3, ip, r5
 800b7ce:	6123      	str	r3, [r4, #16]
 800b7d0:	f8cd 8000 	str.w	r8, [sp]
 800b7d4:	463b      	mov	r3, r7
 800b7d6:	aa03      	add	r2, sp, #12
 800b7d8:	4621      	mov	r1, r4
 800b7da:	4630      	mov	r0, r6
 800b7dc:	f7ff fef6 	bl	800b5cc <_printf_common>
 800b7e0:	3001      	adds	r0, #1
 800b7e2:	d14d      	bne.n	800b880 <_printf_i+0x1c8>
 800b7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e8:	b005      	add	sp, #20
 800b7ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7ee:	4839      	ldr	r0, [pc, #228]	; (800b8d4 <_printf_i+0x21c>)
 800b7f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b7f4:	6813      	ldr	r3, [r2, #0]
 800b7f6:	6821      	ldr	r1, [r4, #0]
 800b7f8:	1d1d      	adds	r5, r3, #4
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	6015      	str	r5, [r2, #0]
 800b7fe:	060a      	lsls	r2, r1, #24
 800b800:	d50b      	bpl.n	800b81a <_printf_i+0x162>
 800b802:	07ca      	lsls	r2, r1, #31
 800b804:	bf44      	itt	mi
 800b806:	f041 0120 	orrmi.w	r1, r1, #32
 800b80a:	6021      	strmi	r1, [r4, #0]
 800b80c:	b91b      	cbnz	r3, 800b816 <_printf_i+0x15e>
 800b80e:	6822      	ldr	r2, [r4, #0]
 800b810:	f022 0220 	bic.w	r2, r2, #32
 800b814:	6022      	str	r2, [r4, #0]
 800b816:	2210      	movs	r2, #16
 800b818:	e7b7      	b.n	800b78a <_printf_i+0xd2>
 800b81a:	064d      	lsls	r5, r1, #25
 800b81c:	bf48      	it	mi
 800b81e:	b29b      	uxthmi	r3, r3
 800b820:	e7ef      	b.n	800b802 <_printf_i+0x14a>
 800b822:	4665      	mov	r5, ip
 800b824:	fbb3 f1f2 	udiv	r1, r3, r2
 800b828:	fb02 3311 	mls	r3, r2, r1, r3
 800b82c:	5cc3      	ldrb	r3, [r0, r3]
 800b82e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b832:	460b      	mov	r3, r1
 800b834:	2900      	cmp	r1, #0
 800b836:	d1f5      	bne.n	800b824 <_printf_i+0x16c>
 800b838:	e7b9      	b.n	800b7ae <_printf_i+0xf6>
 800b83a:	6813      	ldr	r3, [r2, #0]
 800b83c:	6825      	ldr	r5, [r4, #0]
 800b83e:	6961      	ldr	r1, [r4, #20]
 800b840:	1d18      	adds	r0, r3, #4
 800b842:	6010      	str	r0, [r2, #0]
 800b844:	0628      	lsls	r0, r5, #24
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	d501      	bpl.n	800b84e <_printf_i+0x196>
 800b84a:	6019      	str	r1, [r3, #0]
 800b84c:	e002      	b.n	800b854 <_printf_i+0x19c>
 800b84e:	066a      	lsls	r2, r5, #25
 800b850:	d5fb      	bpl.n	800b84a <_printf_i+0x192>
 800b852:	8019      	strh	r1, [r3, #0]
 800b854:	2300      	movs	r3, #0
 800b856:	6123      	str	r3, [r4, #16]
 800b858:	4665      	mov	r5, ip
 800b85a:	e7b9      	b.n	800b7d0 <_printf_i+0x118>
 800b85c:	6813      	ldr	r3, [r2, #0]
 800b85e:	1d19      	adds	r1, r3, #4
 800b860:	6011      	str	r1, [r2, #0]
 800b862:	681d      	ldr	r5, [r3, #0]
 800b864:	6862      	ldr	r2, [r4, #4]
 800b866:	2100      	movs	r1, #0
 800b868:	4628      	mov	r0, r5
 800b86a:	f7f4 fd39 	bl	80002e0 <memchr>
 800b86e:	b108      	cbz	r0, 800b874 <_printf_i+0x1bc>
 800b870:	1b40      	subs	r0, r0, r5
 800b872:	6060      	str	r0, [r4, #4]
 800b874:	6863      	ldr	r3, [r4, #4]
 800b876:	6123      	str	r3, [r4, #16]
 800b878:	2300      	movs	r3, #0
 800b87a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b87e:	e7a7      	b.n	800b7d0 <_printf_i+0x118>
 800b880:	6923      	ldr	r3, [r4, #16]
 800b882:	462a      	mov	r2, r5
 800b884:	4639      	mov	r1, r7
 800b886:	4630      	mov	r0, r6
 800b888:	47c0      	blx	r8
 800b88a:	3001      	adds	r0, #1
 800b88c:	d0aa      	beq.n	800b7e4 <_printf_i+0x12c>
 800b88e:	6823      	ldr	r3, [r4, #0]
 800b890:	079b      	lsls	r3, r3, #30
 800b892:	d413      	bmi.n	800b8bc <_printf_i+0x204>
 800b894:	68e0      	ldr	r0, [r4, #12]
 800b896:	9b03      	ldr	r3, [sp, #12]
 800b898:	4298      	cmp	r0, r3
 800b89a:	bfb8      	it	lt
 800b89c:	4618      	movlt	r0, r3
 800b89e:	e7a3      	b.n	800b7e8 <_printf_i+0x130>
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	464a      	mov	r2, r9
 800b8a4:	4639      	mov	r1, r7
 800b8a6:	4630      	mov	r0, r6
 800b8a8:	47c0      	blx	r8
 800b8aa:	3001      	adds	r0, #1
 800b8ac:	d09a      	beq.n	800b7e4 <_printf_i+0x12c>
 800b8ae:	3501      	adds	r5, #1
 800b8b0:	68e3      	ldr	r3, [r4, #12]
 800b8b2:	9a03      	ldr	r2, [sp, #12]
 800b8b4:	1a9b      	subs	r3, r3, r2
 800b8b6:	42ab      	cmp	r3, r5
 800b8b8:	dcf2      	bgt.n	800b8a0 <_printf_i+0x1e8>
 800b8ba:	e7eb      	b.n	800b894 <_printf_i+0x1dc>
 800b8bc:	2500      	movs	r5, #0
 800b8be:	f104 0919 	add.w	r9, r4, #25
 800b8c2:	e7f5      	b.n	800b8b0 <_printf_i+0x1f8>
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d1ac      	bne.n	800b822 <_printf_i+0x16a>
 800b8c8:	7803      	ldrb	r3, [r0, #0]
 800b8ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b8ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8d2:	e76c      	b.n	800b7ae <_printf_i+0xf6>
 800b8d4:	0803308e 	.word	0x0803308e
 800b8d8:	0803309f 	.word	0x0803309f

0800b8dc <_sbrk_r>:
 800b8dc:	b538      	push	{r3, r4, r5, lr}
 800b8de:	4c06      	ldr	r4, [pc, #24]	; (800b8f8 <_sbrk_r+0x1c>)
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	4605      	mov	r5, r0
 800b8e4:	4608      	mov	r0, r1
 800b8e6:	6023      	str	r3, [r4, #0]
 800b8e8:	f7f6 ff96 	bl	8002818 <_sbrk>
 800b8ec:	1c43      	adds	r3, r0, #1
 800b8ee:	d102      	bne.n	800b8f6 <_sbrk_r+0x1a>
 800b8f0:	6823      	ldr	r3, [r4, #0]
 800b8f2:	b103      	cbz	r3, 800b8f6 <_sbrk_r+0x1a>
 800b8f4:	602b      	str	r3, [r5, #0]
 800b8f6:	bd38      	pop	{r3, r4, r5, pc}
 800b8f8:	2003b0c4 	.word	0x2003b0c4

0800b8fc <sniprintf>:
 800b8fc:	b40c      	push	{r2, r3}
 800b8fe:	b530      	push	{r4, r5, lr}
 800b900:	4b17      	ldr	r3, [pc, #92]	; (800b960 <sniprintf+0x64>)
 800b902:	1e0c      	subs	r4, r1, #0
 800b904:	b09d      	sub	sp, #116	; 0x74
 800b906:	681d      	ldr	r5, [r3, #0]
 800b908:	da08      	bge.n	800b91c <sniprintf+0x20>
 800b90a:	238b      	movs	r3, #139	; 0x8b
 800b90c:	602b      	str	r3, [r5, #0]
 800b90e:	f04f 30ff 	mov.w	r0, #4294967295
 800b912:	b01d      	add	sp, #116	; 0x74
 800b914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b918:	b002      	add	sp, #8
 800b91a:	4770      	bx	lr
 800b91c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b920:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b924:	bf14      	ite	ne
 800b926:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b92a:	4623      	moveq	r3, r4
 800b92c:	9304      	str	r3, [sp, #16]
 800b92e:	9307      	str	r3, [sp, #28]
 800b930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b934:	9002      	str	r0, [sp, #8]
 800b936:	9006      	str	r0, [sp, #24]
 800b938:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b93c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b93e:	ab21      	add	r3, sp, #132	; 0x84
 800b940:	a902      	add	r1, sp, #8
 800b942:	4628      	mov	r0, r5
 800b944:	9301      	str	r3, [sp, #4]
 800b946:	f001 f9ff 	bl	800cd48 <_svfiprintf_r>
 800b94a:	1c43      	adds	r3, r0, #1
 800b94c:	bfbc      	itt	lt
 800b94e:	238b      	movlt	r3, #139	; 0x8b
 800b950:	602b      	strlt	r3, [r5, #0]
 800b952:	2c00      	cmp	r4, #0
 800b954:	d0dd      	beq.n	800b912 <sniprintf+0x16>
 800b956:	9b02      	ldr	r3, [sp, #8]
 800b958:	2200      	movs	r2, #0
 800b95a:	701a      	strb	r2, [r3, #0]
 800b95c:	e7d9      	b.n	800b912 <sniprintf+0x16>
 800b95e:	bf00      	nop
 800b960:	20000c78 	.word	0x20000c78

0800b964 <siprintf>:
 800b964:	b40e      	push	{r1, r2, r3}
 800b966:	b500      	push	{lr}
 800b968:	b09c      	sub	sp, #112	; 0x70
 800b96a:	ab1d      	add	r3, sp, #116	; 0x74
 800b96c:	9002      	str	r0, [sp, #8]
 800b96e:	9006      	str	r0, [sp, #24]
 800b970:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b974:	4809      	ldr	r0, [pc, #36]	; (800b99c <siprintf+0x38>)
 800b976:	9107      	str	r1, [sp, #28]
 800b978:	9104      	str	r1, [sp, #16]
 800b97a:	4909      	ldr	r1, [pc, #36]	; (800b9a0 <siprintf+0x3c>)
 800b97c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b980:	9105      	str	r1, [sp, #20]
 800b982:	6800      	ldr	r0, [r0, #0]
 800b984:	9301      	str	r3, [sp, #4]
 800b986:	a902      	add	r1, sp, #8
 800b988:	f001 f9de 	bl	800cd48 <_svfiprintf_r>
 800b98c:	9b02      	ldr	r3, [sp, #8]
 800b98e:	2200      	movs	r2, #0
 800b990:	701a      	strb	r2, [r3, #0]
 800b992:	b01c      	add	sp, #112	; 0x70
 800b994:	f85d eb04 	ldr.w	lr, [sp], #4
 800b998:	b003      	add	sp, #12
 800b99a:	4770      	bx	lr
 800b99c:	20000c78 	.word	0x20000c78
 800b9a0:	ffff0208 	.word	0xffff0208

0800b9a4 <quorem>:
 800b9a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a8:	6903      	ldr	r3, [r0, #16]
 800b9aa:	690c      	ldr	r4, [r1, #16]
 800b9ac:	42a3      	cmp	r3, r4
 800b9ae:	4680      	mov	r8, r0
 800b9b0:	f2c0 8082 	blt.w	800bab8 <quorem+0x114>
 800b9b4:	3c01      	subs	r4, #1
 800b9b6:	f101 0714 	add.w	r7, r1, #20
 800b9ba:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b9be:	f100 0614 	add.w	r6, r0, #20
 800b9c2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b9c6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b9ca:	eb06 030c 	add.w	r3, r6, ip
 800b9ce:	3501      	adds	r5, #1
 800b9d0:	eb07 090c 	add.w	r9, r7, ip
 800b9d4:	9301      	str	r3, [sp, #4]
 800b9d6:	fbb0 f5f5 	udiv	r5, r0, r5
 800b9da:	b395      	cbz	r5, 800ba42 <quorem+0x9e>
 800b9dc:	f04f 0a00 	mov.w	sl, #0
 800b9e0:	4638      	mov	r0, r7
 800b9e2:	46b6      	mov	lr, r6
 800b9e4:	46d3      	mov	fp, sl
 800b9e6:	f850 2b04 	ldr.w	r2, [r0], #4
 800b9ea:	b293      	uxth	r3, r2
 800b9ec:	fb05 a303 	mla	r3, r5, r3, sl
 800b9f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	ebab 0303 	sub.w	r3, fp, r3
 800b9fa:	0c12      	lsrs	r2, r2, #16
 800b9fc:	f8de b000 	ldr.w	fp, [lr]
 800ba00:	fb05 a202 	mla	r2, r5, r2, sl
 800ba04:	fa13 f38b 	uxtah	r3, r3, fp
 800ba08:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ba0c:	fa1f fb82 	uxth.w	fp, r2
 800ba10:	f8de 2000 	ldr.w	r2, [lr]
 800ba14:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ba18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba22:	4581      	cmp	r9, r0
 800ba24:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ba28:	f84e 3b04 	str.w	r3, [lr], #4
 800ba2c:	d2db      	bcs.n	800b9e6 <quorem+0x42>
 800ba2e:	f856 300c 	ldr.w	r3, [r6, ip]
 800ba32:	b933      	cbnz	r3, 800ba42 <quorem+0x9e>
 800ba34:	9b01      	ldr	r3, [sp, #4]
 800ba36:	3b04      	subs	r3, #4
 800ba38:	429e      	cmp	r6, r3
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	d330      	bcc.n	800baa0 <quorem+0xfc>
 800ba3e:	f8c8 4010 	str.w	r4, [r8, #16]
 800ba42:	4640      	mov	r0, r8
 800ba44:	f001 f82c 	bl	800caa0 <__mcmp>
 800ba48:	2800      	cmp	r0, #0
 800ba4a:	db25      	blt.n	800ba98 <quorem+0xf4>
 800ba4c:	3501      	adds	r5, #1
 800ba4e:	4630      	mov	r0, r6
 800ba50:	f04f 0c00 	mov.w	ip, #0
 800ba54:	f857 2b04 	ldr.w	r2, [r7], #4
 800ba58:	f8d0 e000 	ldr.w	lr, [r0]
 800ba5c:	b293      	uxth	r3, r2
 800ba5e:	ebac 0303 	sub.w	r3, ip, r3
 800ba62:	0c12      	lsrs	r2, r2, #16
 800ba64:	fa13 f38e 	uxtah	r3, r3, lr
 800ba68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ba6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba70:	b29b      	uxth	r3, r3
 800ba72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba76:	45b9      	cmp	r9, r7
 800ba78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ba7c:	f840 3b04 	str.w	r3, [r0], #4
 800ba80:	d2e8      	bcs.n	800ba54 <quorem+0xb0>
 800ba82:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ba86:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ba8a:	b92a      	cbnz	r2, 800ba98 <quorem+0xf4>
 800ba8c:	3b04      	subs	r3, #4
 800ba8e:	429e      	cmp	r6, r3
 800ba90:	461a      	mov	r2, r3
 800ba92:	d30b      	bcc.n	800baac <quorem+0x108>
 800ba94:	f8c8 4010 	str.w	r4, [r8, #16]
 800ba98:	4628      	mov	r0, r5
 800ba9a:	b003      	add	sp, #12
 800ba9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa0:	6812      	ldr	r2, [r2, #0]
 800baa2:	3b04      	subs	r3, #4
 800baa4:	2a00      	cmp	r2, #0
 800baa6:	d1ca      	bne.n	800ba3e <quorem+0x9a>
 800baa8:	3c01      	subs	r4, #1
 800baaa:	e7c5      	b.n	800ba38 <quorem+0x94>
 800baac:	6812      	ldr	r2, [r2, #0]
 800baae:	3b04      	subs	r3, #4
 800bab0:	2a00      	cmp	r2, #0
 800bab2:	d1ef      	bne.n	800ba94 <quorem+0xf0>
 800bab4:	3c01      	subs	r4, #1
 800bab6:	e7ea      	b.n	800ba8e <quorem+0xea>
 800bab8:	2000      	movs	r0, #0
 800baba:	e7ee      	b.n	800ba9a <quorem+0xf6>
 800babc:	0000      	movs	r0, r0
	...

0800bac0 <_dtoa_r>:
 800bac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac4:	ec57 6b10 	vmov	r6, r7, d0
 800bac8:	b097      	sub	sp, #92	; 0x5c
 800baca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bacc:	9106      	str	r1, [sp, #24]
 800bace:	4604      	mov	r4, r0
 800bad0:	920b      	str	r2, [sp, #44]	; 0x2c
 800bad2:	9312      	str	r3, [sp, #72]	; 0x48
 800bad4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bad8:	e9cd 6700 	strd	r6, r7, [sp]
 800badc:	b93d      	cbnz	r5, 800baee <_dtoa_r+0x2e>
 800bade:	2010      	movs	r0, #16
 800bae0:	f7ff f9dc 	bl	800ae9c <malloc>
 800bae4:	6260      	str	r0, [r4, #36]	; 0x24
 800bae6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800baea:	6005      	str	r5, [r0, #0]
 800baec:	60c5      	str	r5, [r0, #12]
 800baee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800baf0:	6819      	ldr	r1, [r3, #0]
 800baf2:	b151      	cbz	r1, 800bb0a <_dtoa_r+0x4a>
 800baf4:	685a      	ldr	r2, [r3, #4]
 800baf6:	604a      	str	r2, [r1, #4]
 800baf8:	2301      	movs	r3, #1
 800bafa:	4093      	lsls	r3, r2
 800bafc:	608b      	str	r3, [r1, #8]
 800bafe:	4620      	mov	r0, r4
 800bb00:	f000 fdec 	bl	800c6dc <_Bfree>
 800bb04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb06:	2200      	movs	r2, #0
 800bb08:	601a      	str	r2, [r3, #0]
 800bb0a:	1e3b      	subs	r3, r7, #0
 800bb0c:	bfbb      	ittet	lt
 800bb0e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bb12:	9301      	strlt	r3, [sp, #4]
 800bb14:	2300      	movge	r3, #0
 800bb16:	2201      	movlt	r2, #1
 800bb18:	bfac      	ite	ge
 800bb1a:	f8c8 3000 	strge.w	r3, [r8]
 800bb1e:	f8c8 2000 	strlt.w	r2, [r8]
 800bb22:	4baf      	ldr	r3, [pc, #700]	; (800bde0 <_dtoa_r+0x320>)
 800bb24:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bb28:	ea33 0308 	bics.w	r3, r3, r8
 800bb2c:	d114      	bne.n	800bb58 <_dtoa_r+0x98>
 800bb2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bb30:	f242 730f 	movw	r3, #9999	; 0x270f
 800bb34:	6013      	str	r3, [r2, #0]
 800bb36:	9b00      	ldr	r3, [sp, #0]
 800bb38:	b923      	cbnz	r3, 800bb44 <_dtoa_r+0x84>
 800bb3a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800bb3e:	2800      	cmp	r0, #0
 800bb40:	f000 8542 	beq.w	800c5c8 <_dtoa_r+0xb08>
 800bb44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb46:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800bdf4 <_dtoa_r+0x334>
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	f000 8544 	beq.w	800c5d8 <_dtoa_r+0xb18>
 800bb50:	f10b 0303 	add.w	r3, fp, #3
 800bb54:	f000 bd3e 	b.w	800c5d4 <_dtoa_r+0xb14>
 800bb58:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	2300      	movs	r3, #0
 800bb60:	4630      	mov	r0, r6
 800bb62:	4639      	mov	r1, r7
 800bb64:	f7f5 f830 	bl	8000bc8 <__aeabi_dcmpeq>
 800bb68:	4681      	mov	r9, r0
 800bb6a:	b168      	cbz	r0, 800bb88 <_dtoa_r+0xc8>
 800bb6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bb6e:	2301      	movs	r3, #1
 800bb70:	6013      	str	r3, [r2, #0]
 800bb72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	f000 8524 	beq.w	800c5c2 <_dtoa_r+0xb02>
 800bb7a:	4b9a      	ldr	r3, [pc, #616]	; (800bde4 <_dtoa_r+0x324>)
 800bb7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bb7e:	f103 3bff 	add.w	fp, r3, #4294967295
 800bb82:	6013      	str	r3, [r2, #0]
 800bb84:	f000 bd28 	b.w	800c5d8 <_dtoa_r+0xb18>
 800bb88:	aa14      	add	r2, sp, #80	; 0x50
 800bb8a:	a915      	add	r1, sp, #84	; 0x54
 800bb8c:	ec47 6b10 	vmov	d0, r6, r7
 800bb90:	4620      	mov	r0, r4
 800bb92:	f000 fffc 	bl	800cb8e <__d2b>
 800bb96:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bb9a:	9004      	str	r0, [sp, #16]
 800bb9c:	2d00      	cmp	r5, #0
 800bb9e:	d07c      	beq.n	800bc9a <_dtoa_r+0x1da>
 800bba0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bba4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800bba8:	46b2      	mov	sl, r6
 800bbaa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800bbae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bbb2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	4b8b      	ldr	r3, [pc, #556]	; (800bde8 <_dtoa_r+0x328>)
 800bbba:	4650      	mov	r0, sl
 800bbbc:	4659      	mov	r1, fp
 800bbbe:	f7f4 fbe3 	bl	8000388 <__aeabi_dsub>
 800bbc2:	a381      	add	r3, pc, #516	; (adr r3, 800bdc8 <_dtoa_r+0x308>)
 800bbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc8:	f7f4 fd96 	bl	80006f8 <__aeabi_dmul>
 800bbcc:	a380      	add	r3, pc, #512	; (adr r3, 800bdd0 <_dtoa_r+0x310>)
 800bbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd2:	f7f4 fbdb 	bl	800038c <__adddf3>
 800bbd6:	4606      	mov	r6, r0
 800bbd8:	4628      	mov	r0, r5
 800bbda:	460f      	mov	r7, r1
 800bbdc:	f7f4 fd22 	bl	8000624 <__aeabi_i2d>
 800bbe0:	a37d      	add	r3, pc, #500	; (adr r3, 800bdd8 <_dtoa_r+0x318>)
 800bbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe6:	f7f4 fd87 	bl	80006f8 <__aeabi_dmul>
 800bbea:	4602      	mov	r2, r0
 800bbec:	460b      	mov	r3, r1
 800bbee:	4630      	mov	r0, r6
 800bbf0:	4639      	mov	r1, r7
 800bbf2:	f7f4 fbcb 	bl	800038c <__adddf3>
 800bbf6:	4606      	mov	r6, r0
 800bbf8:	460f      	mov	r7, r1
 800bbfa:	f7f5 f82d 	bl	8000c58 <__aeabi_d2iz>
 800bbfe:	2200      	movs	r2, #0
 800bc00:	4682      	mov	sl, r0
 800bc02:	2300      	movs	r3, #0
 800bc04:	4630      	mov	r0, r6
 800bc06:	4639      	mov	r1, r7
 800bc08:	f7f4 ffe8 	bl	8000bdc <__aeabi_dcmplt>
 800bc0c:	b148      	cbz	r0, 800bc22 <_dtoa_r+0x162>
 800bc0e:	4650      	mov	r0, sl
 800bc10:	f7f4 fd08 	bl	8000624 <__aeabi_i2d>
 800bc14:	4632      	mov	r2, r6
 800bc16:	463b      	mov	r3, r7
 800bc18:	f7f4 ffd6 	bl	8000bc8 <__aeabi_dcmpeq>
 800bc1c:	b908      	cbnz	r0, 800bc22 <_dtoa_r+0x162>
 800bc1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc22:	f1ba 0f16 	cmp.w	sl, #22
 800bc26:	d859      	bhi.n	800bcdc <_dtoa_r+0x21c>
 800bc28:	4970      	ldr	r1, [pc, #448]	; (800bdec <_dtoa_r+0x32c>)
 800bc2a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bc2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc36:	f7f4 ffef 	bl	8000c18 <__aeabi_dcmpgt>
 800bc3a:	2800      	cmp	r0, #0
 800bc3c:	d050      	beq.n	800bce0 <_dtoa_r+0x220>
 800bc3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc42:	2300      	movs	r3, #0
 800bc44:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc48:	1b5d      	subs	r5, r3, r5
 800bc4a:	f1b5 0801 	subs.w	r8, r5, #1
 800bc4e:	bf49      	itett	mi
 800bc50:	f1c5 0301 	rsbmi	r3, r5, #1
 800bc54:	2300      	movpl	r3, #0
 800bc56:	9305      	strmi	r3, [sp, #20]
 800bc58:	f04f 0800 	movmi.w	r8, #0
 800bc5c:	bf58      	it	pl
 800bc5e:	9305      	strpl	r3, [sp, #20]
 800bc60:	f1ba 0f00 	cmp.w	sl, #0
 800bc64:	db3e      	blt.n	800bce4 <_dtoa_r+0x224>
 800bc66:	2300      	movs	r3, #0
 800bc68:	44d0      	add	r8, sl
 800bc6a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800bc6e:	9307      	str	r3, [sp, #28]
 800bc70:	9b06      	ldr	r3, [sp, #24]
 800bc72:	2b09      	cmp	r3, #9
 800bc74:	f200 8090 	bhi.w	800bd98 <_dtoa_r+0x2d8>
 800bc78:	2b05      	cmp	r3, #5
 800bc7a:	bfc4      	itt	gt
 800bc7c:	3b04      	subgt	r3, #4
 800bc7e:	9306      	strgt	r3, [sp, #24]
 800bc80:	9b06      	ldr	r3, [sp, #24]
 800bc82:	f1a3 0302 	sub.w	r3, r3, #2
 800bc86:	bfcc      	ite	gt
 800bc88:	2500      	movgt	r5, #0
 800bc8a:	2501      	movle	r5, #1
 800bc8c:	2b03      	cmp	r3, #3
 800bc8e:	f200 808f 	bhi.w	800bdb0 <_dtoa_r+0x2f0>
 800bc92:	e8df f003 	tbb	[pc, r3]
 800bc96:	7f7d      	.short	0x7f7d
 800bc98:	7131      	.short	0x7131
 800bc9a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800bc9e:	441d      	add	r5, r3
 800bca0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800bca4:	2820      	cmp	r0, #32
 800bca6:	dd13      	ble.n	800bcd0 <_dtoa_r+0x210>
 800bca8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800bcac:	9b00      	ldr	r3, [sp, #0]
 800bcae:	fa08 f800 	lsl.w	r8, r8, r0
 800bcb2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800bcb6:	fa23 f000 	lsr.w	r0, r3, r0
 800bcba:	ea48 0000 	orr.w	r0, r8, r0
 800bcbe:	f7f4 fca1 	bl	8000604 <__aeabi_ui2d>
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	4682      	mov	sl, r0
 800bcc6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800bcca:	3d01      	subs	r5, #1
 800bccc:	9313      	str	r3, [sp, #76]	; 0x4c
 800bcce:	e772      	b.n	800bbb6 <_dtoa_r+0xf6>
 800bcd0:	9b00      	ldr	r3, [sp, #0]
 800bcd2:	f1c0 0020 	rsb	r0, r0, #32
 800bcd6:	fa03 f000 	lsl.w	r0, r3, r0
 800bcda:	e7f0      	b.n	800bcbe <_dtoa_r+0x1fe>
 800bcdc:	2301      	movs	r3, #1
 800bcde:	e7b1      	b.n	800bc44 <_dtoa_r+0x184>
 800bce0:	900f      	str	r0, [sp, #60]	; 0x3c
 800bce2:	e7b0      	b.n	800bc46 <_dtoa_r+0x186>
 800bce4:	9b05      	ldr	r3, [sp, #20]
 800bce6:	eba3 030a 	sub.w	r3, r3, sl
 800bcea:	9305      	str	r3, [sp, #20]
 800bcec:	f1ca 0300 	rsb	r3, sl, #0
 800bcf0:	9307      	str	r3, [sp, #28]
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	930e      	str	r3, [sp, #56]	; 0x38
 800bcf6:	e7bb      	b.n	800bc70 <_dtoa_r+0x1b0>
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	930a      	str	r3, [sp, #40]	; 0x28
 800bcfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	dd59      	ble.n	800bdb6 <_dtoa_r+0x2f6>
 800bd02:	9302      	str	r3, [sp, #8]
 800bd04:	4699      	mov	r9, r3
 800bd06:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bd08:	2200      	movs	r2, #0
 800bd0a:	6072      	str	r2, [r6, #4]
 800bd0c:	2204      	movs	r2, #4
 800bd0e:	f102 0014 	add.w	r0, r2, #20
 800bd12:	4298      	cmp	r0, r3
 800bd14:	6871      	ldr	r1, [r6, #4]
 800bd16:	d953      	bls.n	800bdc0 <_dtoa_r+0x300>
 800bd18:	4620      	mov	r0, r4
 800bd1a:	f000 fcab 	bl	800c674 <_Balloc>
 800bd1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd20:	6030      	str	r0, [r6, #0]
 800bd22:	f1b9 0f0e 	cmp.w	r9, #14
 800bd26:	f8d3 b000 	ldr.w	fp, [r3]
 800bd2a:	f200 80e6 	bhi.w	800befa <_dtoa_r+0x43a>
 800bd2e:	2d00      	cmp	r5, #0
 800bd30:	f000 80e3 	beq.w	800befa <_dtoa_r+0x43a>
 800bd34:	ed9d 7b00 	vldr	d7, [sp]
 800bd38:	f1ba 0f00 	cmp.w	sl, #0
 800bd3c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800bd40:	dd74      	ble.n	800be2c <_dtoa_r+0x36c>
 800bd42:	4a2a      	ldr	r2, [pc, #168]	; (800bdec <_dtoa_r+0x32c>)
 800bd44:	f00a 030f 	and.w	r3, sl, #15
 800bd48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bd4c:	ed93 7b00 	vldr	d7, [r3]
 800bd50:	ea4f 162a 	mov.w	r6, sl, asr #4
 800bd54:	06f0      	lsls	r0, r6, #27
 800bd56:	ed8d 7b08 	vstr	d7, [sp, #32]
 800bd5a:	d565      	bpl.n	800be28 <_dtoa_r+0x368>
 800bd5c:	4b24      	ldr	r3, [pc, #144]	; (800bdf0 <_dtoa_r+0x330>)
 800bd5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bd62:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bd66:	f7f4 fdf1 	bl	800094c <__aeabi_ddiv>
 800bd6a:	e9cd 0100 	strd	r0, r1, [sp]
 800bd6e:	f006 060f 	and.w	r6, r6, #15
 800bd72:	2503      	movs	r5, #3
 800bd74:	4f1e      	ldr	r7, [pc, #120]	; (800bdf0 <_dtoa_r+0x330>)
 800bd76:	e04c      	b.n	800be12 <_dtoa_r+0x352>
 800bd78:	2301      	movs	r3, #1
 800bd7a:	930a      	str	r3, [sp, #40]	; 0x28
 800bd7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd7e:	4453      	add	r3, sl
 800bd80:	f103 0901 	add.w	r9, r3, #1
 800bd84:	9302      	str	r3, [sp, #8]
 800bd86:	464b      	mov	r3, r9
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	bfb8      	it	lt
 800bd8c:	2301      	movlt	r3, #1
 800bd8e:	e7ba      	b.n	800bd06 <_dtoa_r+0x246>
 800bd90:	2300      	movs	r3, #0
 800bd92:	e7b2      	b.n	800bcfa <_dtoa_r+0x23a>
 800bd94:	2300      	movs	r3, #0
 800bd96:	e7f0      	b.n	800bd7a <_dtoa_r+0x2ba>
 800bd98:	2501      	movs	r5, #1
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	9306      	str	r3, [sp, #24]
 800bd9e:	950a      	str	r5, [sp, #40]	; 0x28
 800bda0:	f04f 33ff 	mov.w	r3, #4294967295
 800bda4:	9302      	str	r3, [sp, #8]
 800bda6:	4699      	mov	r9, r3
 800bda8:	2200      	movs	r2, #0
 800bdaa:	2312      	movs	r3, #18
 800bdac:	920b      	str	r2, [sp, #44]	; 0x2c
 800bdae:	e7aa      	b.n	800bd06 <_dtoa_r+0x246>
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	930a      	str	r3, [sp, #40]	; 0x28
 800bdb4:	e7f4      	b.n	800bda0 <_dtoa_r+0x2e0>
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	9302      	str	r3, [sp, #8]
 800bdba:	4699      	mov	r9, r3
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	e7f5      	b.n	800bdac <_dtoa_r+0x2ec>
 800bdc0:	3101      	adds	r1, #1
 800bdc2:	6071      	str	r1, [r6, #4]
 800bdc4:	0052      	lsls	r2, r2, #1
 800bdc6:	e7a2      	b.n	800bd0e <_dtoa_r+0x24e>
 800bdc8:	636f4361 	.word	0x636f4361
 800bdcc:	3fd287a7 	.word	0x3fd287a7
 800bdd0:	8b60c8b3 	.word	0x8b60c8b3
 800bdd4:	3fc68a28 	.word	0x3fc68a28
 800bdd8:	509f79fb 	.word	0x509f79fb
 800bddc:	3fd34413 	.word	0x3fd34413
 800bde0:	7ff00000 	.word	0x7ff00000
 800bde4:	0803308d 	.word	0x0803308d
 800bde8:	3ff80000 	.word	0x3ff80000
 800bdec:	080330f0 	.word	0x080330f0
 800bdf0:	080330c8 	.word	0x080330c8
 800bdf4:	080330b9 	.word	0x080330b9
 800bdf8:	07f1      	lsls	r1, r6, #31
 800bdfa:	d508      	bpl.n	800be0e <_dtoa_r+0x34e>
 800bdfc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800be00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be04:	f7f4 fc78 	bl	80006f8 <__aeabi_dmul>
 800be08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800be0c:	3501      	adds	r5, #1
 800be0e:	1076      	asrs	r6, r6, #1
 800be10:	3708      	adds	r7, #8
 800be12:	2e00      	cmp	r6, #0
 800be14:	d1f0      	bne.n	800bdf8 <_dtoa_r+0x338>
 800be16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800be1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be1e:	f7f4 fd95 	bl	800094c <__aeabi_ddiv>
 800be22:	e9cd 0100 	strd	r0, r1, [sp]
 800be26:	e01a      	b.n	800be5e <_dtoa_r+0x39e>
 800be28:	2502      	movs	r5, #2
 800be2a:	e7a3      	b.n	800bd74 <_dtoa_r+0x2b4>
 800be2c:	f000 80a0 	beq.w	800bf70 <_dtoa_r+0x4b0>
 800be30:	f1ca 0600 	rsb	r6, sl, #0
 800be34:	4b9f      	ldr	r3, [pc, #636]	; (800c0b4 <_dtoa_r+0x5f4>)
 800be36:	4fa0      	ldr	r7, [pc, #640]	; (800c0b8 <_dtoa_r+0x5f8>)
 800be38:	f006 020f 	and.w	r2, r6, #15
 800be3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800be48:	f7f4 fc56 	bl	80006f8 <__aeabi_dmul>
 800be4c:	e9cd 0100 	strd	r0, r1, [sp]
 800be50:	1136      	asrs	r6, r6, #4
 800be52:	2300      	movs	r3, #0
 800be54:	2502      	movs	r5, #2
 800be56:	2e00      	cmp	r6, #0
 800be58:	d17f      	bne.n	800bf5a <_dtoa_r+0x49a>
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d1e1      	bne.n	800be22 <_dtoa_r+0x362>
 800be5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be60:	2b00      	cmp	r3, #0
 800be62:	f000 8087 	beq.w	800bf74 <_dtoa_r+0x4b4>
 800be66:	e9dd 6700 	ldrd	r6, r7, [sp]
 800be6a:	2200      	movs	r2, #0
 800be6c:	4b93      	ldr	r3, [pc, #588]	; (800c0bc <_dtoa_r+0x5fc>)
 800be6e:	4630      	mov	r0, r6
 800be70:	4639      	mov	r1, r7
 800be72:	f7f4 feb3 	bl	8000bdc <__aeabi_dcmplt>
 800be76:	2800      	cmp	r0, #0
 800be78:	d07c      	beq.n	800bf74 <_dtoa_r+0x4b4>
 800be7a:	f1b9 0f00 	cmp.w	r9, #0
 800be7e:	d079      	beq.n	800bf74 <_dtoa_r+0x4b4>
 800be80:	9b02      	ldr	r3, [sp, #8]
 800be82:	2b00      	cmp	r3, #0
 800be84:	dd35      	ble.n	800bef2 <_dtoa_r+0x432>
 800be86:	f10a 33ff 	add.w	r3, sl, #4294967295
 800be8a:	9308      	str	r3, [sp, #32]
 800be8c:	4639      	mov	r1, r7
 800be8e:	2200      	movs	r2, #0
 800be90:	4b8b      	ldr	r3, [pc, #556]	; (800c0c0 <_dtoa_r+0x600>)
 800be92:	4630      	mov	r0, r6
 800be94:	f7f4 fc30 	bl	80006f8 <__aeabi_dmul>
 800be98:	e9cd 0100 	strd	r0, r1, [sp]
 800be9c:	9f02      	ldr	r7, [sp, #8]
 800be9e:	3501      	adds	r5, #1
 800bea0:	4628      	mov	r0, r5
 800bea2:	f7f4 fbbf 	bl	8000624 <__aeabi_i2d>
 800bea6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800beaa:	f7f4 fc25 	bl	80006f8 <__aeabi_dmul>
 800beae:	2200      	movs	r2, #0
 800beb0:	4b84      	ldr	r3, [pc, #528]	; (800c0c4 <_dtoa_r+0x604>)
 800beb2:	f7f4 fa6b 	bl	800038c <__adddf3>
 800beb6:	4605      	mov	r5, r0
 800beb8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bebc:	2f00      	cmp	r7, #0
 800bebe:	d15d      	bne.n	800bf7c <_dtoa_r+0x4bc>
 800bec0:	2200      	movs	r2, #0
 800bec2:	4b81      	ldr	r3, [pc, #516]	; (800c0c8 <_dtoa_r+0x608>)
 800bec4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bec8:	f7f4 fa5e 	bl	8000388 <__aeabi_dsub>
 800becc:	462a      	mov	r2, r5
 800bece:	4633      	mov	r3, r6
 800bed0:	e9cd 0100 	strd	r0, r1, [sp]
 800bed4:	f7f4 fea0 	bl	8000c18 <__aeabi_dcmpgt>
 800bed8:	2800      	cmp	r0, #0
 800beda:	f040 8288 	bne.w	800c3ee <_dtoa_r+0x92e>
 800bede:	462a      	mov	r2, r5
 800bee0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bee4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bee8:	f7f4 fe78 	bl	8000bdc <__aeabi_dcmplt>
 800beec:	2800      	cmp	r0, #0
 800beee:	f040 827c 	bne.w	800c3ea <_dtoa_r+0x92a>
 800bef2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bef6:	e9cd 2300 	strd	r2, r3, [sp]
 800befa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800befc:	2b00      	cmp	r3, #0
 800befe:	f2c0 8150 	blt.w	800c1a2 <_dtoa_r+0x6e2>
 800bf02:	f1ba 0f0e 	cmp.w	sl, #14
 800bf06:	f300 814c 	bgt.w	800c1a2 <_dtoa_r+0x6e2>
 800bf0a:	4b6a      	ldr	r3, [pc, #424]	; (800c0b4 <_dtoa_r+0x5f4>)
 800bf0c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bf10:	ed93 7b00 	vldr	d7, [r3]
 800bf14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bf1c:	f280 80d8 	bge.w	800c0d0 <_dtoa_r+0x610>
 800bf20:	f1b9 0f00 	cmp.w	r9, #0
 800bf24:	f300 80d4 	bgt.w	800c0d0 <_dtoa_r+0x610>
 800bf28:	f040 825e 	bne.w	800c3e8 <_dtoa_r+0x928>
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	4b66      	ldr	r3, [pc, #408]	; (800c0c8 <_dtoa_r+0x608>)
 800bf30:	ec51 0b17 	vmov	r0, r1, d7
 800bf34:	f7f4 fbe0 	bl	80006f8 <__aeabi_dmul>
 800bf38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf3c:	f7f4 fe62 	bl	8000c04 <__aeabi_dcmpge>
 800bf40:	464f      	mov	r7, r9
 800bf42:	464e      	mov	r6, r9
 800bf44:	2800      	cmp	r0, #0
 800bf46:	f040 8234 	bne.w	800c3b2 <_dtoa_r+0x8f2>
 800bf4a:	2331      	movs	r3, #49	; 0x31
 800bf4c:	f10b 0501 	add.w	r5, fp, #1
 800bf50:	f88b 3000 	strb.w	r3, [fp]
 800bf54:	f10a 0a01 	add.w	sl, sl, #1
 800bf58:	e22f      	b.n	800c3ba <_dtoa_r+0x8fa>
 800bf5a:	07f2      	lsls	r2, r6, #31
 800bf5c:	d505      	bpl.n	800bf6a <_dtoa_r+0x4aa>
 800bf5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf62:	f7f4 fbc9 	bl	80006f8 <__aeabi_dmul>
 800bf66:	3501      	adds	r5, #1
 800bf68:	2301      	movs	r3, #1
 800bf6a:	1076      	asrs	r6, r6, #1
 800bf6c:	3708      	adds	r7, #8
 800bf6e:	e772      	b.n	800be56 <_dtoa_r+0x396>
 800bf70:	2502      	movs	r5, #2
 800bf72:	e774      	b.n	800be5e <_dtoa_r+0x39e>
 800bf74:	f8cd a020 	str.w	sl, [sp, #32]
 800bf78:	464f      	mov	r7, r9
 800bf7a:	e791      	b.n	800bea0 <_dtoa_r+0x3e0>
 800bf7c:	4b4d      	ldr	r3, [pc, #308]	; (800c0b4 <_dtoa_r+0x5f4>)
 800bf7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bf82:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800bf86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d047      	beq.n	800c01c <_dtoa_r+0x55c>
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	460b      	mov	r3, r1
 800bf90:	2000      	movs	r0, #0
 800bf92:	494e      	ldr	r1, [pc, #312]	; (800c0cc <_dtoa_r+0x60c>)
 800bf94:	f7f4 fcda 	bl	800094c <__aeabi_ddiv>
 800bf98:	462a      	mov	r2, r5
 800bf9a:	4633      	mov	r3, r6
 800bf9c:	f7f4 f9f4 	bl	8000388 <__aeabi_dsub>
 800bfa0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bfa4:	465d      	mov	r5, fp
 800bfa6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfaa:	f7f4 fe55 	bl	8000c58 <__aeabi_d2iz>
 800bfae:	4606      	mov	r6, r0
 800bfb0:	f7f4 fb38 	bl	8000624 <__aeabi_i2d>
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	460b      	mov	r3, r1
 800bfb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfbc:	f7f4 f9e4 	bl	8000388 <__aeabi_dsub>
 800bfc0:	3630      	adds	r6, #48	; 0x30
 800bfc2:	f805 6b01 	strb.w	r6, [r5], #1
 800bfc6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bfca:	e9cd 0100 	strd	r0, r1, [sp]
 800bfce:	f7f4 fe05 	bl	8000bdc <__aeabi_dcmplt>
 800bfd2:	2800      	cmp	r0, #0
 800bfd4:	d163      	bne.n	800c09e <_dtoa_r+0x5de>
 800bfd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfda:	2000      	movs	r0, #0
 800bfdc:	4937      	ldr	r1, [pc, #220]	; (800c0bc <_dtoa_r+0x5fc>)
 800bfde:	f7f4 f9d3 	bl	8000388 <__aeabi_dsub>
 800bfe2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bfe6:	f7f4 fdf9 	bl	8000bdc <__aeabi_dcmplt>
 800bfea:	2800      	cmp	r0, #0
 800bfec:	f040 80b7 	bne.w	800c15e <_dtoa_r+0x69e>
 800bff0:	eba5 030b 	sub.w	r3, r5, fp
 800bff4:	429f      	cmp	r7, r3
 800bff6:	f77f af7c 	ble.w	800bef2 <_dtoa_r+0x432>
 800bffa:	2200      	movs	r2, #0
 800bffc:	4b30      	ldr	r3, [pc, #192]	; (800c0c0 <_dtoa_r+0x600>)
 800bffe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c002:	f7f4 fb79 	bl	80006f8 <__aeabi_dmul>
 800c006:	2200      	movs	r2, #0
 800c008:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c00c:	4b2c      	ldr	r3, [pc, #176]	; (800c0c0 <_dtoa_r+0x600>)
 800c00e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c012:	f7f4 fb71 	bl	80006f8 <__aeabi_dmul>
 800c016:	e9cd 0100 	strd	r0, r1, [sp]
 800c01a:	e7c4      	b.n	800bfa6 <_dtoa_r+0x4e6>
 800c01c:	462a      	mov	r2, r5
 800c01e:	4633      	mov	r3, r6
 800c020:	f7f4 fb6a 	bl	80006f8 <__aeabi_dmul>
 800c024:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c028:	eb0b 0507 	add.w	r5, fp, r7
 800c02c:	465e      	mov	r6, fp
 800c02e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c032:	f7f4 fe11 	bl	8000c58 <__aeabi_d2iz>
 800c036:	4607      	mov	r7, r0
 800c038:	f7f4 faf4 	bl	8000624 <__aeabi_i2d>
 800c03c:	3730      	adds	r7, #48	; 0x30
 800c03e:	4602      	mov	r2, r0
 800c040:	460b      	mov	r3, r1
 800c042:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c046:	f7f4 f99f 	bl	8000388 <__aeabi_dsub>
 800c04a:	f806 7b01 	strb.w	r7, [r6], #1
 800c04e:	42ae      	cmp	r6, r5
 800c050:	e9cd 0100 	strd	r0, r1, [sp]
 800c054:	f04f 0200 	mov.w	r2, #0
 800c058:	d126      	bne.n	800c0a8 <_dtoa_r+0x5e8>
 800c05a:	4b1c      	ldr	r3, [pc, #112]	; (800c0cc <_dtoa_r+0x60c>)
 800c05c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c060:	f7f4 f994 	bl	800038c <__adddf3>
 800c064:	4602      	mov	r2, r0
 800c066:	460b      	mov	r3, r1
 800c068:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c06c:	f7f4 fdd4 	bl	8000c18 <__aeabi_dcmpgt>
 800c070:	2800      	cmp	r0, #0
 800c072:	d174      	bne.n	800c15e <_dtoa_r+0x69e>
 800c074:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c078:	2000      	movs	r0, #0
 800c07a:	4914      	ldr	r1, [pc, #80]	; (800c0cc <_dtoa_r+0x60c>)
 800c07c:	f7f4 f984 	bl	8000388 <__aeabi_dsub>
 800c080:	4602      	mov	r2, r0
 800c082:	460b      	mov	r3, r1
 800c084:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c088:	f7f4 fda8 	bl	8000bdc <__aeabi_dcmplt>
 800c08c:	2800      	cmp	r0, #0
 800c08e:	f43f af30 	beq.w	800bef2 <_dtoa_r+0x432>
 800c092:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c096:	2b30      	cmp	r3, #48	; 0x30
 800c098:	f105 32ff 	add.w	r2, r5, #4294967295
 800c09c:	d002      	beq.n	800c0a4 <_dtoa_r+0x5e4>
 800c09e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c0a2:	e04a      	b.n	800c13a <_dtoa_r+0x67a>
 800c0a4:	4615      	mov	r5, r2
 800c0a6:	e7f4      	b.n	800c092 <_dtoa_r+0x5d2>
 800c0a8:	4b05      	ldr	r3, [pc, #20]	; (800c0c0 <_dtoa_r+0x600>)
 800c0aa:	f7f4 fb25 	bl	80006f8 <__aeabi_dmul>
 800c0ae:	e9cd 0100 	strd	r0, r1, [sp]
 800c0b2:	e7bc      	b.n	800c02e <_dtoa_r+0x56e>
 800c0b4:	080330f0 	.word	0x080330f0
 800c0b8:	080330c8 	.word	0x080330c8
 800c0bc:	3ff00000 	.word	0x3ff00000
 800c0c0:	40240000 	.word	0x40240000
 800c0c4:	401c0000 	.word	0x401c0000
 800c0c8:	40140000 	.word	0x40140000
 800c0cc:	3fe00000 	.word	0x3fe00000
 800c0d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c0d4:	465d      	mov	r5, fp
 800c0d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0da:	4630      	mov	r0, r6
 800c0dc:	4639      	mov	r1, r7
 800c0de:	f7f4 fc35 	bl	800094c <__aeabi_ddiv>
 800c0e2:	f7f4 fdb9 	bl	8000c58 <__aeabi_d2iz>
 800c0e6:	4680      	mov	r8, r0
 800c0e8:	f7f4 fa9c 	bl	8000624 <__aeabi_i2d>
 800c0ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0f0:	f7f4 fb02 	bl	80006f8 <__aeabi_dmul>
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	460b      	mov	r3, r1
 800c0f8:	4630      	mov	r0, r6
 800c0fa:	4639      	mov	r1, r7
 800c0fc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c100:	f7f4 f942 	bl	8000388 <__aeabi_dsub>
 800c104:	f805 6b01 	strb.w	r6, [r5], #1
 800c108:	eba5 060b 	sub.w	r6, r5, fp
 800c10c:	45b1      	cmp	r9, r6
 800c10e:	4602      	mov	r2, r0
 800c110:	460b      	mov	r3, r1
 800c112:	d139      	bne.n	800c188 <_dtoa_r+0x6c8>
 800c114:	f7f4 f93a 	bl	800038c <__adddf3>
 800c118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c11c:	4606      	mov	r6, r0
 800c11e:	460f      	mov	r7, r1
 800c120:	f7f4 fd7a 	bl	8000c18 <__aeabi_dcmpgt>
 800c124:	b9c8      	cbnz	r0, 800c15a <_dtoa_r+0x69a>
 800c126:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c12a:	4630      	mov	r0, r6
 800c12c:	4639      	mov	r1, r7
 800c12e:	f7f4 fd4b 	bl	8000bc8 <__aeabi_dcmpeq>
 800c132:	b110      	cbz	r0, 800c13a <_dtoa_r+0x67a>
 800c134:	f018 0f01 	tst.w	r8, #1
 800c138:	d10f      	bne.n	800c15a <_dtoa_r+0x69a>
 800c13a:	9904      	ldr	r1, [sp, #16]
 800c13c:	4620      	mov	r0, r4
 800c13e:	f000 facd 	bl	800c6dc <_Bfree>
 800c142:	2300      	movs	r3, #0
 800c144:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c146:	702b      	strb	r3, [r5, #0]
 800c148:	f10a 0301 	add.w	r3, sl, #1
 800c14c:	6013      	str	r3, [r2, #0]
 800c14e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c150:	2b00      	cmp	r3, #0
 800c152:	f000 8241 	beq.w	800c5d8 <_dtoa_r+0xb18>
 800c156:	601d      	str	r5, [r3, #0]
 800c158:	e23e      	b.n	800c5d8 <_dtoa_r+0xb18>
 800c15a:	f8cd a020 	str.w	sl, [sp, #32]
 800c15e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c162:	2a39      	cmp	r2, #57	; 0x39
 800c164:	f105 33ff 	add.w	r3, r5, #4294967295
 800c168:	d108      	bne.n	800c17c <_dtoa_r+0x6bc>
 800c16a:	459b      	cmp	fp, r3
 800c16c:	d10a      	bne.n	800c184 <_dtoa_r+0x6c4>
 800c16e:	9b08      	ldr	r3, [sp, #32]
 800c170:	3301      	adds	r3, #1
 800c172:	9308      	str	r3, [sp, #32]
 800c174:	2330      	movs	r3, #48	; 0x30
 800c176:	f88b 3000 	strb.w	r3, [fp]
 800c17a:	465b      	mov	r3, fp
 800c17c:	781a      	ldrb	r2, [r3, #0]
 800c17e:	3201      	adds	r2, #1
 800c180:	701a      	strb	r2, [r3, #0]
 800c182:	e78c      	b.n	800c09e <_dtoa_r+0x5de>
 800c184:	461d      	mov	r5, r3
 800c186:	e7ea      	b.n	800c15e <_dtoa_r+0x69e>
 800c188:	2200      	movs	r2, #0
 800c18a:	4b9b      	ldr	r3, [pc, #620]	; (800c3f8 <_dtoa_r+0x938>)
 800c18c:	f7f4 fab4 	bl	80006f8 <__aeabi_dmul>
 800c190:	2200      	movs	r2, #0
 800c192:	2300      	movs	r3, #0
 800c194:	4606      	mov	r6, r0
 800c196:	460f      	mov	r7, r1
 800c198:	f7f4 fd16 	bl	8000bc8 <__aeabi_dcmpeq>
 800c19c:	2800      	cmp	r0, #0
 800c19e:	d09a      	beq.n	800c0d6 <_dtoa_r+0x616>
 800c1a0:	e7cb      	b.n	800c13a <_dtoa_r+0x67a>
 800c1a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1a4:	2a00      	cmp	r2, #0
 800c1a6:	f000 808b 	beq.w	800c2c0 <_dtoa_r+0x800>
 800c1aa:	9a06      	ldr	r2, [sp, #24]
 800c1ac:	2a01      	cmp	r2, #1
 800c1ae:	dc6e      	bgt.n	800c28e <_dtoa_r+0x7ce>
 800c1b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c1b2:	2a00      	cmp	r2, #0
 800c1b4:	d067      	beq.n	800c286 <_dtoa_r+0x7c6>
 800c1b6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c1ba:	9f07      	ldr	r7, [sp, #28]
 800c1bc:	9d05      	ldr	r5, [sp, #20]
 800c1be:	9a05      	ldr	r2, [sp, #20]
 800c1c0:	2101      	movs	r1, #1
 800c1c2:	441a      	add	r2, r3
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	9205      	str	r2, [sp, #20]
 800c1c8:	4498      	add	r8, r3
 800c1ca:	f000 fb27 	bl	800c81c <__i2b>
 800c1ce:	4606      	mov	r6, r0
 800c1d0:	2d00      	cmp	r5, #0
 800c1d2:	dd0c      	ble.n	800c1ee <_dtoa_r+0x72e>
 800c1d4:	f1b8 0f00 	cmp.w	r8, #0
 800c1d8:	dd09      	ble.n	800c1ee <_dtoa_r+0x72e>
 800c1da:	4545      	cmp	r5, r8
 800c1dc:	9a05      	ldr	r2, [sp, #20]
 800c1de:	462b      	mov	r3, r5
 800c1e0:	bfa8      	it	ge
 800c1e2:	4643      	movge	r3, r8
 800c1e4:	1ad2      	subs	r2, r2, r3
 800c1e6:	9205      	str	r2, [sp, #20]
 800c1e8:	1aed      	subs	r5, r5, r3
 800c1ea:	eba8 0803 	sub.w	r8, r8, r3
 800c1ee:	9b07      	ldr	r3, [sp, #28]
 800c1f0:	b1eb      	cbz	r3, 800c22e <_dtoa_r+0x76e>
 800c1f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d067      	beq.n	800c2c8 <_dtoa_r+0x808>
 800c1f8:	b18f      	cbz	r7, 800c21e <_dtoa_r+0x75e>
 800c1fa:	4631      	mov	r1, r6
 800c1fc:	463a      	mov	r2, r7
 800c1fe:	4620      	mov	r0, r4
 800c200:	f000 fbac 	bl	800c95c <__pow5mult>
 800c204:	9a04      	ldr	r2, [sp, #16]
 800c206:	4601      	mov	r1, r0
 800c208:	4606      	mov	r6, r0
 800c20a:	4620      	mov	r0, r4
 800c20c:	f000 fb0f 	bl	800c82e <__multiply>
 800c210:	9904      	ldr	r1, [sp, #16]
 800c212:	9008      	str	r0, [sp, #32]
 800c214:	4620      	mov	r0, r4
 800c216:	f000 fa61 	bl	800c6dc <_Bfree>
 800c21a:	9b08      	ldr	r3, [sp, #32]
 800c21c:	9304      	str	r3, [sp, #16]
 800c21e:	9b07      	ldr	r3, [sp, #28]
 800c220:	1bda      	subs	r2, r3, r7
 800c222:	d004      	beq.n	800c22e <_dtoa_r+0x76e>
 800c224:	9904      	ldr	r1, [sp, #16]
 800c226:	4620      	mov	r0, r4
 800c228:	f000 fb98 	bl	800c95c <__pow5mult>
 800c22c:	9004      	str	r0, [sp, #16]
 800c22e:	2101      	movs	r1, #1
 800c230:	4620      	mov	r0, r4
 800c232:	f000 faf3 	bl	800c81c <__i2b>
 800c236:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c238:	4607      	mov	r7, r0
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	f000 81d0 	beq.w	800c5e0 <_dtoa_r+0xb20>
 800c240:	461a      	mov	r2, r3
 800c242:	4601      	mov	r1, r0
 800c244:	4620      	mov	r0, r4
 800c246:	f000 fb89 	bl	800c95c <__pow5mult>
 800c24a:	9b06      	ldr	r3, [sp, #24]
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	4607      	mov	r7, r0
 800c250:	dc40      	bgt.n	800c2d4 <_dtoa_r+0x814>
 800c252:	9b00      	ldr	r3, [sp, #0]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d139      	bne.n	800c2cc <_dtoa_r+0x80c>
 800c258:	9b01      	ldr	r3, [sp, #4]
 800c25a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d136      	bne.n	800c2d0 <_dtoa_r+0x810>
 800c262:	9b01      	ldr	r3, [sp, #4]
 800c264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c268:	0d1b      	lsrs	r3, r3, #20
 800c26a:	051b      	lsls	r3, r3, #20
 800c26c:	b12b      	cbz	r3, 800c27a <_dtoa_r+0x7ba>
 800c26e:	9b05      	ldr	r3, [sp, #20]
 800c270:	3301      	adds	r3, #1
 800c272:	9305      	str	r3, [sp, #20]
 800c274:	f108 0801 	add.w	r8, r8, #1
 800c278:	2301      	movs	r3, #1
 800c27a:	9307      	str	r3, [sp, #28]
 800c27c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d12a      	bne.n	800c2d8 <_dtoa_r+0x818>
 800c282:	2001      	movs	r0, #1
 800c284:	e030      	b.n	800c2e8 <_dtoa_r+0x828>
 800c286:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c288:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c28c:	e795      	b.n	800c1ba <_dtoa_r+0x6fa>
 800c28e:	9b07      	ldr	r3, [sp, #28]
 800c290:	f109 37ff 	add.w	r7, r9, #4294967295
 800c294:	42bb      	cmp	r3, r7
 800c296:	bfbf      	itttt	lt
 800c298:	9b07      	ldrlt	r3, [sp, #28]
 800c29a:	9707      	strlt	r7, [sp, #28]
 800c29c:	1afa      	sublt	r2, r7, r3
 800c29e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c2a0:	bfbb      	ittet	lt
 800c2a2:	189b      	addlt	r3, r3, r2
 800c2a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c2a6:	1bdf      	subge	r7, r3, r7
 800c2a8:	2700      	movlt	r7, #0
 800c2aa:	f1b9 0f00 	cmp.w	r9, #0
 800c2ae:	bfb5      	itete	lt
 800c2b0:	9b05      	ldrlt	r3, [sp, #20]
 800c2b2:	9d05      	ldrge	r5, [sp, #20]
 800c2b4:	eba3 0509 	sublt.w	r5, r3, r9
 800c2b8:	464b      	movge	r3, r9
 800c2ba:	bfb8      	it	lt
 800c2bc:	2300      	movlt	r3, #0
 800c2be:	e77e      	b.n	800c1be <_dtoa_r+0x6fe>
 800c2c0:	9f07      	ldr	r7, [sp, #28]
 800c2c2:	9d05      	ldr	r5, [sp, #20]
 800c2c4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c2c6:	e783      	b.n	800c1d0 <_dtoa_r+0x710>
 800c2c8:	9a07      	ldr	r2, [sp, #28]
 800c2ca:	e7ab      	b.n	800c224 <_dtoa_r+0x764>
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	e7d4      	b.n	800c27a <_dtoa_r+0x7ba>
 800c2d0:	9b00      	ldr	r3, [sp, #0]
 800c2d2:	e7d2      	b.n	800c27a <_dtoa_r+0x7ba>
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	9307      	str	r3, [sp, #28]
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c2de:	6918      	ldr	r0, [r3, #16]
 800c2e0:	f000 fa4e 	bl	800c780 <__hi0bits>
 800c2e4:	f1c0 0020 	rsb	r0, r0, #32
 800c2e8:	4440      	add	r0, r8
 800c2ea:	f010 001f 	ands.w	r0, r0, #31
 800c2ee:	d047      	beq.n	800c380 <_dtoa_r+0x8c0>
 800c2f0:	f1c0 0320 	rsb	r3, r0, #32
 800c2f4:	2b04      	cmp	r3, #4
 800c2f6:	dd3b      	ble.n	800c370 <_dtoa_r+0x8b0>
 800c2f8:	9b05      	ldr	r3, [sp, #20]
 800c2fa:	f1c0 001c 	rsb	r0, r0, #28
 800c2fe:	4403      	add	r3, r0
 800c300:	9305      	str	r3, [sp, #20]
 800c302:	4405      	add	r5, r0
 800c304:	4480      	add	r8, r0
 800c306:	9b05      	ldr	r3, [sp, #20]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	dd05      	ble.n	800c318 <_dtoa_r+0x858>
 800c30c:	461a      	mov	r2, r3
 800c30e:	9904      	ldr	r1, [sp, #16]
 800c310:	4620      	mov	r0, r4
 800c312:	f000 fb71 	bl	800c9f8 <__lshift>
 800c316:	9004      	str	r0, [sp, #16]
 800c318:	f1b8 0f00 	cmp.w	r8, #0
 800c31c:	dd05      	ble.n	800c32a <_dtoa_r+0x86a>
 800c31e:	4639      	mov	r1, r7
 800c320:	4642      	mov	r2, r8
 800c322:	4620      	mov	r0, r4
 800c324:	f000 fb68 	bl	800c9f8 <__lshift>
 800c328:	4607      	mov	r7, r0
 800c32a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c32c:	b353      	cbz	r3, 800c384 <_dtoa_r+0x8c4>
 800c32e:	4639      	mov	r1, r7
 800c330:	9804      	ldr	r0, [sp, #16]
 800c332:	f000 fbb5 	bl	800caa0 <__mcmp>
 800c336:	2800      	cmp	r0, #0
 800c338:	da24      	bge.n	800c384 <_dtoa_r+0x8c4>
 800c33a:	2300      	movs	r3, #0
 800c33c:	220a      	movs	r2, #10
 800c33e:	9904      	ldr	r1, [sp, #16]
 800c340:	4620      	mov	r0, r4
 800c342:	f000 f9e2 	bl	800c70a <__multadd>
 800c346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c348:	9004      	str	r0, [sp, #16]
 800c34a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c34e:	2b00      	cmp	r3, #0
 800c350:	f000 814d 	beq.w	800c5ee <_dtoa_r+0xb2e>
 800c354:	2300      	movs	r3, #0
 800c356:	4631      	mov	r1, r6
 800c358:	220a      	movs	r2, #10
 800c35a:	4620      	mov	r0, r4
 800c35c:	f000 f9d5 	bl	800c70a <__multadd>
 800c360:	9b02      	ldr	r3, [sp, #8]
 800c362:	2b00      	cmp	r3, #0
 800c364:	4606      	mov	r6, r0
 800c366:	dc4f      	bgt.n	800c408 <_dtoa_r+0x948>
 800c368:	9b06      	ldr	r3, [sp, #24]
 800c36a:	2b02      	cmp	r3, #2
 800c36c:	dd4c      	ble.n	800c408 <_dtoa_r+0x948>
 800c36e:	e011      	b.n	800c394 <_dtoa_r+0x8d4>
 800c370:	d0c9      	beq.n	800c306 <_dtoa_r+0x846>
 800c372:	9a05      	ldr	r2, [sp, #20]
 800c374:	331c      	adds	r3, #28
 800c376:	441a      	add	r2, r3
 800c378:	9205      	str	r2, [sp, #20]
 800c37a:	441d      	add	r5, r3
 800c37c:	4498      	add	r8, r3
 800c37e:	e7c2      	b.n	800c306 <_dtoa_r+0x846>
 800c380:	4603      	mov	r3, r0
 800c382:	e7f6      	b.n	800c372 <_dtoa_r+0x8b2>
 800c384:	f1b9 0f00 	cmp.w	r9, #0
 800c388:	dc38      	bgt.n	800c3fc <_dtoa_r+0x93c>
 800c38a:	9b06      	ldr	r3, [sp, #24]
 800c38c:	2b02      	cmp	r3, #2
 800c38e:	dd35      	ble.n	800c3fc <_dtoa_r+0x93c>
 800c390:	f8cd 9008 	str.w	r9, [sp, #8]
 800c394:	9b02      	ldr	r3, [sp, #8]
 800c396:	b963      	cbnz	r3, 800c3b2 <_dtoa_r+0x8f2>
 800c398:	4639      	mov	r1, r7
 800c39a:	2205      	movs	r2, #5
 800c39c:	4620      	mov	r0, r4
 800c39e:	f000 f9b4 	bl	800c70a <__multadd>
 800c3a2:	4601      	mov	r1, r0
 800c3a4:	4607      	mov	r7, r0
 800c3a6:	9804      	ldr	r0, [sp, #16]
 800c3a8:	f000 fb7a 	bl	800caa0 <__mcmp>
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	f73f adcc 	bgt.w	800bf4a <_dtoa_r+0x48a>
 800c3b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3b4:	465d      	mov	r5, fp
 800c3b6:	ea6f 0a03 	mvn.w	sl, r3
 800c3ba:	f04f 0900 	mov.w	r9, #0
 800c3be:	4639      	mov	r1, r7
 800c3c0:	4620      	mov	r0, r4
 800c3c2:	f000 f98b 	bl	800c6dc <_Bfree>
 800c3c6:	2e00      	cmp	r6, #0
 800c3c8:	f43f aeb7 	beq.w	800c13a <_dtoa_r+0x67a>
 800c3cc:	f1b9 0f00 	cmp.w	r9, #0
 800c3d0:	d005      	beq.n	800c3de <_dtoa_r+0x91e>
 800c3d2:	45b1      	cmp	r9, r6
 800c3d4:	d003      	beq.n	800c3de <_dtoa_r+0x91e>
 800c3d6:	4649      	mov	r1, r9
 800c3d8:	4620      	mov	r0, r4
 800c3da:	f000 f97f 	bl	800c6dc <_Bfree>
 800c3de:	4631      	mov	r1, r6
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	f000 f97b 	bl	800c6dc <_Bfree>
 800c3e6:	e6a8      	b.n	800c13a <_dtoa_r+0x67a>
 800c3e8:	2700      	movs	r7, #0
 800c3ea:	463e      	mov	r6, r7
 800c3ec:	e7e1      	b.n	800c3b2 <_dtoa_r+0x8f2>
 800c3ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c3f2:	463e      	mov	r6, r7
 800c3f4:	e5a9      	b.n	800bf4a <_dtoa_r+0x48a>
 800c3f6:	bf00      	nop
 800c3f8:	40240000 	.word	0x40240000
 800c3fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3fe:	f8cd 9008 	str.w	r9, [sp, #8]
 800c402:	2b00      	cmp	r3, #0
 800c404:	f000 80fa 	beq.w	800c5fc <_dtoa_r+0xb3c>
 800c408:	2d00      	cmp	r5, #0
 800c40a:	dd05      	ble.n	800c418 <_dtoa_r+0x958>
 800c40c:	4631      	mov	r1, r6
 800c40e:	462a      	mov	r2, r5
 800c410:	4620      	mov	r0, r4
 800c412:	f000 faf1 	bl	800c9f8 <__lshift>
 800c416:	4606      	mov	r6, r0
 800c418:	9b07      	ldr	r3, [sp, #28]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d04c      	beq.n	800c4b8 <_dtoa_r+0x9f8>
 800c41e:	6871      	ldr	r1, [r6, #4]
 800c420:	4620      	mov	r0, r4
 800c422:	f000 f927 	bl	800c674 <_Balloc>
 800c426:	6932      	ldr	r2, [r6, #16]
 800c428:	3202      	adds	r2, #2
 800c42a:	4605      	mov	r5, r0
 800c42c:	0092      	lsls	r2, r2, #2
 800c42e:	f106 010c 	add.w	r1, r6, #12
 800c432:	300c      	adds	r0, #12
 800c434:	f7fe fd3a 	bl	800aeac <memcpy>
 800c438:	2201      	movs	r2, #1
 800c43a:	4629      	mov	r1, r5
 800c43c:	4620      	mov	r0, r4
 800c43e:	f000 fadb 	bl	800c9f8 <__lshift>
 800c442:	9b00      	ldr	r3, [sp, #0]
 800c444:	f8cd b014 	str.w	fp, [sp, #20]
 800c448:	f003 0301 	and.w	r3, r3, #1
 800c44c:	46b1      	mov	r9, r6
 800c44e:	9307      	str	r3, [sp, #28]
 800c450:	4606      	mov	r6, r0
 800c452:	4639      	mov	r1, r7
 800c454:	9804      	ldr	r0, [sp, #16]
 800c456:	f7ff faa5 	bl	800b9a4 <quorem>
 800c45a:	4649      	mov	r1, r9
 800c45c:	4605      	mov	r5, r0
 800c45e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c462:	9804      	ldr	r0, [sp, #16]
 800c464:	f000 fb1c 	bl	800caa0 <__mcmp>
 800c468:	4632      	mov	r2, r6
 800c46a:	9000      	str	r0, [sp, #0]
 800c46c:	4639      	mov	r1, r7
 800c46e:	4620      	mov	r0, r4
 800c470:	f000 fb30 	bl	800cad4 <__mdiff>
 800c474:	68c3      	ldr	r3, [r0, #12]
 800c476:	4602      	mov	r2, r0
 800c478:	bb03      	cbnz	r3, 800c4bc <_dtoa_r+0x9fc>
 800c47a:	4601      	mov	r1, r0
 800c47c:	9008      	str	r0, [sp, #32]
 800c47e:	9804      	ldr	r0, [sp, #16]
 800c480:	f000 fb0e 	bl	800caa0 <__mcmp>
 800c484:	9a08      	ldr	r2, [sp, #32]
 800c486:	4603      	mov	r3, r0
 800c488:	4611      	mov	r1, r2
 800c48a:	4620      	mov	r0, r4
 800c48c:	9308      	str	r3, [sp, #32]
 800c48e:	f000 f925 	bl	800c6dc <_Bfree>
 800c492:	9b08      	ldr	r3, [sp, #32]
 800c494:	b9a3      	cbnz	r3, 800c4c0 <_dtoa_r+0xa00>
 800c496:	9a06      	ldr	r2, [sp, #24]
 800c498:	b992      	cbnz	r2, 800c4c0 <_dtoa_r+0xa00>
 800c49a:	9a07      	ldr	r2, [sp, #28]
 800c49c:	b982      	cbnz	r2, 800c4c0 <_dtoa_r+0xa00>
 800c49e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c4a2:	d029      	beq.n	800c4f8 <_dtoa_r+0xa38>
 800c4a4:	9b00      	ldr	r3, [sp, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	dd01      	ble.n	800c4ae <_dtoa_r+0x9ee>
 800c4aa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c4ae:	9b05      	ldr	r3, [sp, #20]
 800c4b0:	1c5d      	adds	r5, r3, #1
 800c4b2:	f883 8000 	strb.w	r8, [r3]
 800c4b6:	e782      	b.n	800c3be <_dtoa_r+0x8fe>
 800c4b8:	4630      	mov	r0, r6
 800c4ba:	e7c2      	b.n	800c442 <_dtoa_r+0x982>
 800c4bc:	2301      	movs	r3, #1
 800c4be:	e7e3      	b.n	800c488 <_dtoa_r+0x9c8>
 800c4c0:	9a00      	ldr	r2, [sp, #0]
 800c4c2:	2a00      	cmp	r2, #0
 800c4c4:	db04      	blt.n	800c4d0 <_dtoa_r+0xa10>
 800c4c6:	d125      	bne.n	800c514 <_dtoa_r+0xa54>
 800c4c8:	9a06      	ldr	r2, [sp, #24]
 800c4ca:	bb1a      	cbnz	r2, 800c514 <_dtoa_r+0xa54>
 800c4cc:	9a07      	ldr	r2, [sp, #28]
 800c4ce:	bb0a      	cbnz	r2, 800c514 <_dtoa_r+0xa54>
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	ddec      	ble.n	800c4ae <_dtoa_r+0x9ee>
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	9904      	ldr	r1, [sp, #16]
 800c4d8:	4620      	mov	r0, r4
 800c4da:	f000 fa8d 	bl	800c9f8 <__lshift>
 800c4de:	4639      	mov	r1, r7
 800c4e0:	9004      	str	r0, [sp, #16]
 800c4e2:	f000 fadd 	bl	800caa0 <__mcmp>
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	dc03      	bgt.n	800c4f2 <_dtoa_r+0xa32>
 800c4ea:	d1e0      	bne.n	800c4ae <_dtoa_r+0x9ee>
 800c4ec:	f018 0f01 	tst.w	r8, #1
 800c4f0:	d0dd      	beq.n	800c4ae <_dtoa_r+0x9ee>
 800c4f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c4f6:	d1d8      	bne.n	800c4aa <_dtoa_r+0x9ea>
 800c4f8:	9b05      	ldr	r3, [sp, #20]
 800c4fa:	9a05      	ldr	r2, [sp, #20]
 800c4fc:	1c5d      	adds	r5, r3, #1
 800c4fe:	2339      	movs	r3, #57	; 0x39
 800c500:	7013      	strb	r3, [r2, #0]
 800c502:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c506:	2b39      	cmp	r3, #57	; 0x39
 800c508:	f105 32ff 	add.w	r2, r5, #4294967295
 800c50c:	d04f      	beq.n	800c5ae <_dtoa_r+0xaee>
 800c50e:	3301      	adds	r3, #1
 800c510:	7013      	strb	r3, [r2, #0]
 800c512:	e754      	b.n	800c3be <_dtoa_r+0x8fe>
 800c514:	9a05      	ldr	r2, [sp, #20]
 800c516:	2b00      	cmp	r3, #0
 800c518:	f102 0501 	add.w	r5, r2, #1
 800c51c:	dd06      	ble.n	800c52c <_dtoa_r+0xa6c>
 800c51e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c522:	d0e9      	beq.n	800c4f8 <_dtoa_r+0xa38>
 800c524:	f108 0801 	add.w	r8, r8, #1
 800c528:	9b05      	ldr	r3, [sp, #20]
 800c52a:	e7c2      	b.n	800c4b2 <_dtoa_r+0x9f2>
 800c52c:	9a02      	ldr	r2, [sp, #8]
 800c52e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c532:	eba5 030b 	sub.w	r3, r5, fp
 800c536:	4293      	cmp	r3, r2
 800c538:	d021      	beq.n	800c57e <_dtoa_r+0xabe>
 800c53a:	2300      	movs	r3, #0
 800c53c:	220a      	movs	r2, #10
 800c53e:	9904      	ldr	r1, [sp, #16]
 800c540:	4620      	mov	r0, r4
 800c542:	f000 f8e2 	bl	800c70a <__multadd>
 800c546:	45b1      	cmp	r9, r6
 800c548:	9004      	str	r0, [sp, #16]
 800c54a:	f04f 0300 	mov.w	r3, #0
 800c54e:	f04f 020a 	mov.w	r2, #10
 800c552:	4649      	mov	r1, r9
 800c554:	4620      	mov	r0, r4
 800c556:	d105      	bne.n	800c564 <_dtoa_r+0xaa4>
 800c558:	f000 f8d7 	bl	800c70a <__multadd>
 800c55c:	4681      	mov	r9, r0
 800c55e:	4606      	mov	r6, r0
 800c560:	9505      	str	r5, [sp, #20]
 800c562:	e776      	b.n	800c452 <_dtoa_r+0x992>
 800c564:	f000 f8d1 	bl	800c70a <__multadd>
 800c568:	4631      	mov	r1, r6
 800c56a:	4681      	mov	r9, r0
 800c56c:	2300      	movs	r3, #0
 800c56e:	220a      	movs	r2, #10
 800c570:	4620      	mov	r0, r4
 800c572:	f000 f8ca 	bl	800c70a <__multadd>
 800c576:	4606      	mov	r6, r0
 800c578:	e7f2      	b.n	800c560 <_dtoa_r+0xaa0>
 800c57a:	f04f 0900 	mov.w	r9, #0
 800c57e:	2201      	movs	r2, #1
 800c580:	9904      	ldr	r1, [sp, #16]
 800c582:	4620      	mov	r0, r4
 800c584:	f000 fa38 	bl	800c9f8 <__lshift>
 800c588:	4639      	mov	r1, r7
 800c58a:	9004      	str	r0, [sp, #16]
 800c58c:	f000 fa88 	bl	800caa0 <__mcmp>
 800c590:	2800      	cmp	r0, #0
 800c592:	dcb6      	bgt.n	800c502 <_dtoa_r+0xa42>
 800c594:	d102      	bne.n	800c59c <_dtoa_r+0xadc>
 800c596:	f018 0f01 	tst.w	r8, #1
 800c59a:	d1b2      	bne.n	800c502 <_dtoa_r+0xa42>
 800c59c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c5a0:	2b30      	cmp	r3, #48	; 0x30
 800c5a2:	f105 32ff 	add.w	r2, r5, #4294967295
 800c5a6:	f47f af0a 	bne.w	800c3be <_dtoa_r+0x8fe>
 800c5aa:	4615      	mov	r5, r2
 800c5ac:	e7f6      	b.n	800c59c <_dtoa_r+0xadc>
 800c5ae:	4593      	cmp	fp, r2
 800c5b0:	d105      	bne.n	800c5be <_dtoa_r+0xafe>
 800c5b2:	2331      	movs	r3, #49	; 0x31
 800c5b4:	f10a 0a01 	add.w	sl, sl, #1
 800c5b8:	f88b 3000 	strb.w	r3, [fp]
 800c5bc:	e6ff      	b.n	800c3be <_dtoa_r+0x8fe>
 800c5be:	4615      	mov	r5, r2
 800c5c0:	e79f      	b.n	800c502 <_dtoa_r+0xa42>
 800c5c2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c628 <_dtoa_r+0xb68>
 800c5c6:	e007      	b.n	800c5d8 <_dtoa_r+0xb18>
 800c5c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c5ca:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c62c <_dtoa_r+0xb6c>
 800c5ce:	b11b      	cbz	r3, 800c5d8 <_dtoa_r+0xb18>
 800c5d0:	f10b 0308 	add.w	r3, fp, #8
 800c5d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c5d6:	6013      	str	r3, [r2, #0]
 800c5d8:	4658      	mov	r0, fp
 800c5da:	b017      	add	sp, #92	; 0x5c
 800c5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e0:	9b06      	ldr	r3, [sp, #24]
 800c5e2:	2b01      	cmp	r3, #1
 800c5e4:	f77f ae35 	ble.w	800c252 <_dtoa_r+0x792>
 800c5e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c5ea:	9307      	str	r3, [sp, #28]
 800c5ec:	e649      	b.n	800c282 <_dtoa_r+0x7c2>
 800c5ee:	9b02      	ldr	r3, [sp, #8]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	dc03      	bgt.n	800c5fc <_dtoa_r+0xb3c>
 800c5f4:	9b06      	ldr	r3, [sp, #24]
 800c5f6:	2b02      	cmp	r3, #2
 800c5f8:	f73f aecc 	bgt.w	800c394 <_dtoa_r+0x8d4>
 800c5fc:	465d      	mov	r5, fp
 800c5fe:	4639      	mov	r1, r7
 800c600:	9804      	ldr	r0, [sp, #16]
 800c602:	f7ff f9cf 	bl	800b9a4 <quorem>
 800c606:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c60a:	f805 8b01 	strb.w	r8, [r5], #1
 800c60e:	9a02      	ldr	r2, [sp, #8]
 800c610:	eba5 030b 	sub.w	r3, r5, fp
 800c614:	429a      	cmp	r2, r3
 800c616:	ddb0      	ble.n	800c57a <_dtoa_r+0xaba>
 800c618:	2300      	movs	r3, #0
 800c61a:	220a      	movs	r2, #10
 800c61c:	9904      	ldr	r1, [sp, #16]
 800c61e:	4620      	mov	r0, r4
 800c620:	f000 f873 	bl	800c70a <__multadd>
 800c624:	9004      	str	r0, [sp, #16]
 800c626:	e7ea      	b.n	800c5fe <_dtoa_r+0xb3e>
 800c628:	0803308c 	.word	0x0803308c
 800c62c:	080330b0 	.word	0x080330b0

0800c630 <_localeconv_r>:
 800c630:	4b04      	ldr	r3, [pc, #16]	; (800c644 <_localeconv_r+0x14>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	6a18      	ldr	r0, [r3, #32]
 800c636:	4b04      	ldr	r3, [pc, #16]	; (800c648 <_localeconv_r+0x18>)
 800c638:	2800      	cmp	r0, #0
 800c63a:	bf08      	it	eq
 800c63c:	4618      	moveq	r0, r3
 800c63e:	30f0      	adds	r0, #240	; 0xf0
 800c640:	4770      	bx	lr
 800c642:	bf00      	nop
 800c644:	20000c78 	.word	0x20000c78
 800c648:	20000cdc 	.word	0x20000cdc

0800c64c <__ascii_mbtowc>:
 800c64c:	b082      	sub	sp, #8
 800c64e:	b901      	cbnz	r1, 800c652 <__ascii_mbtowc+0x6>
 800c650:	a901      	add	r1, sp, #4
 800c652:	b142      	cbz	r2, 800c666 <__ascii_mbtowc+0x1a>
 800c654:	b14b      	cbz	r3, 800c66a <__ascii_mbtowc+0x1e>
 800c656:	7813      	ldrb	r3, [r2, #0]
 800c658:	600b      	str	r3, [r1, #0]
 800c65a:	7812      	ldrb	r2, [r2, #0]
 800c65c:	1c10      	adds	r0, r2, #0
 800c65e:	bf18      	it	ne
 800c660:	2001      	movne	r0, #1
 800c662:	b002      	add	sp, #8
 800c664:	4770      	bx	lr
 800c666:	4610      	mov	r0, r2
 800c668:	e7fb      	b.n	800c662 <__ascii_mbtowc+0x16>
 800c66a:	f06f 0001 	mvn.w	r0, #1
 800c66e:	e7f8      	b.n	800c662 <__ascii_mbtowc+0x16>

0800c670 <__malloc_lock>:
 800c670:	4770      	bx	lr

0800c672 <__malloc_unlock>:
 800c672:	4770      	bx	lr

0800c674 <_Balloc>:
 800c674:	b570      	push	{r4, r5, r6, lr}
 800c676:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c678:	4604      	mov	r4, r0
 800c67a:	460e      	mov	r6, r1
 800c67c:	b93d      	cbnz	r5, 800c68e <_Balloc+0x1a>
 800c67e:	2010      	movs	r0, #16
 800c680:	f7fe fc0c 	bl	800ae9c <malloc>
 800c684:	6260      	str	r0, [r4, #36]	; 0x24
 800c686:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c68a:	6005      	str	r5, [r0, #0]
 800c68c:	60c5      	str	r5, [r0, #12]
 800c68e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c690:	68eb      	ldr	r3, [r5, #12]
 800c692:	b183      	cbz	r3, 800c6b6 <_Balloc+0x42>
 800c694:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c696:	68db      	ldr	r3, [r3, #12]
 800c698:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c69c:	b9b8      	cbnz	r0, 800c6ce <_Balloc+0x5a>
 800c69e:	2101      	movs	r1, #1
 800c6a0:	fa01 f506 	lsl.w	r5, r1, r6
 800c6a4:	1d6a      	adds	r2, r5, #5
 800c6a6:	0092      	lsls	r2, r2, #2
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	f000 fabf 	bl	800cc2c <_calloc_r>
 800c6ae:	b160      	cbz	r0, 800c6ca <_Balloc+0x56>
 800c6b0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c6b4:	e00e      	b.n	800c6d4 <_Balloc+0x60>
 800c6b6:	2221      	movs	r2, #33	; 0x21
 800c6b8:	2104      	movs	r1, #4
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	f000 fab6 	bl	800cc2c <_calloc_r>
 800c6c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6c2:	60e8      	str	r0, [r5, #12]
 800c6c4:	68db      	ldr	r3, [r3, #12]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d1e4      	bne.n	800c694 <_Balloc+0x20>
 800c6ca:	2000      	movs	r0, #0
 800c6cc:	bd70      	pop	{r4, r5, r6, pc}
 800c6ce:	6802      	ldr	r2, [r0, #0]
 800c6d0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c6da:	e7f7      	b.n	800c6cc <_Balloc+0x58>

0800c6dc <_Bfree>:
 800c6dc:	b570      	push	{r4, r5, r6, lr}
 800c6de:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c6e0:	4606      	mov	r6, r0
 800c6e2:	460d      	mov	r5, r1
 800c6e4:	b93c      	cbnz	r4, 800c6f6 <_Bfree+0x1a>
 800c6e6:	2010      	movs	r0, #16
 800c6e8:	f7fe fbd8 	bl	800ae9c <malloc>
 800c6ec:	6270      	str	r0, [r6, #36]	; 0x24
 800c6ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c6f2:	6004      	str	r4, [r0, #0]
 800c6f4:	60c4      	str	r4, [r0, #12]
 800c6f6:	b13d      	cbz	r5, 800c708 <_Bfree+0x2c>
 800c6f8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c6fa:	686a      	ldr	r2, [r5, #4]
 800c6fc:	68db      	ldr	r3, [r3, #12]
 800c6fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c702:	6029      	str	r1, [r5, #0]
 800c704:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c708:	bd70      	pop	{r4, r5, r6, pc}

0800c70a <__multadd>:
 800c70a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c70e:	690d      	ldr	r5, [r1, #16]
 800c710:	461f      	mov	r7, r3
 800c712:	4606      	mov	r6, r0
 800c714:	460c      	mov	r4, r1
 800c716:	f101 0c14 	add.w	ip, r1, #20
 800c71a:	2300      	movs	r3, #0
 800c71c:	f8dc 0000 	ldr.w	r0, [ip]
 800c720:	b281      	uxth	r1, r0
 800c722:	fb02 7101 	mla	r1, r2, r1, r7
 800c726:	0c0f      	lsrs	r7, r1, #16
 800c728:	0c00      	lsrs	r0, r0, #16
 800c72a:	fb02 7000 	mla	r0, r2, r0, r7
 800c72e:	b289      	uxth	r1, r1
 800c730:	3301      	adds	r3, #1
 800c732:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c736:	429d      	cmp	r5, r3
 800c738:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c73c:	f84c 1b04 	str.w	r1, [ip], #4
 800c740:	dcec      	bgt.n	800c71c <__multadd+0x12>
 800c742:	b1d7      	cbz	r7, 800c77a <__multadd+0x70>
 800c744:	68a3      	ldr	r3, [r4, #8]
 800c746:	42ab      	cmp	r3, r5
 800c748:	dc12      	bgt.n	800c770 <__multadd+0x66>
 800c74a:	6861      	ldr	r1, [r4, #4]
 800c74c:	4630      	mov	r0, r6
 800c74e:	3101      	adds	r1, #1
 800c750:	f7ff ff90 	bl	800c674 <_Balloc>
 800c754:	6922      	ldr	r2, [r4, #16]
 800c756:	3202      	adds	r2, #2
 800c758:	f104 010c 	add.w	r1, r4, #12
 800c75c:	4680      	mov	r8, r0
 800c75e:	0092      	lsls	r2, r2, #2
 800c760:	300c      	adds	r0, #12
 800c762:	f7fe fba3 	bl	800aeac <memcpy>
 800c766:	4621      	mov	r1, r4
 800c768:	4630      	mov	r0, r6
 800c76a:	f7ff ffb7 	bl	800c6dc <_Bfree>
 800c76e:	4644      	mov	r4, r8
 800c770:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c774:	3501      	adds	r5, #1
 800c776:	615f      	str	r7, [r3, #20]
 800c778:	6125      	str	r5, [r4, #16]
 800c77a:	4620      	mov	r0, r4
 800c77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c780 <__hi0bits>:
 800c780:	0c02      	lsrs	r2, r0, #16
 800c782:	0412      	lsls	r2, r2, #16
 800c784:	4603      	mov	r3, r0
 800c786:	b9b2      	cbnz	r2, 800c7b6 <__hi0bits+0x36>
 800c788:	0403      	lsls	r3, r0, #16
 800c78a:	2010      	movs	r0, #16
 800c78c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c790:	bf04      	itt	eq
 800c792:	021b      	lsleq	r3, r3, #8
 800c794:	3008      	addeq	r0, #8
 800c796:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c79a:	bf04      	itt	eq
 800c79c:	011b      	lsleq	r3, r3, #4
 800c79e:	3004      	addeq	r0, #4
 800c7a0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c7a4:	bf04      	itt	eq
 800c7a6:	009b      	lsleq	r3, r3, #2
 800c7a8:	3002      	addeq	r0, #2
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	db06      	blt.n	800c7bc <__hi0bits+0x3c>
 800c7ae:	005b      	lsls	r3, r3, #1
 800c7b0:	d503      	bpl.n	800c7ba <__hi0bits+0x3a>
 800c7b2:	3001      	adds	r0, #1
 800c7b4:	4770      	bx	lr
 800c7b6:	2000      	movs	r0, #0
 800c7b8:	e7e8      	b.n	800c78c <__hi0bits+0xc>
 800c7ba:	2020      	movs	r0, #32
 800c7bc:	4770      	bx	lr

0800c7be <__lo0bits>:
 800c7be:	6803      	ldr	r3, [r0, #0]
 800c7c0:	f013 0207 	ands.w	r2, r3, #7
 800c7c4:	4601      	mov	r1, r0
 800c7c6:	d00b      	beq.n	800c7e0 <__lo0bits+0x22>
 800c7c8:	07da      	lsls	r2, r3, #31
 800c7ca:	d423      	bmi.n	800c814 <__lo0bits+0x56>
 800c7cc:	0798      	lsls	r0, r3, #30
 800c7ce:	bf49      	itett	mi
 800c7d0:	085b      	lsrmi	r3, r3, #1
 800c7d2:	089b      	lsrpl	r3, r3, #2
 800c7d4:	2001      	movmi	r0, #1
 800c7d6:	600b      	strmi	r3, [r1, #0]
 800c7d8:	bf5c      	itt	pl
 800c7da:	600b      	strpl	r3, [r1, #0]
 800c7dc:	2002      	movpl	r0, #2
 800c7de:	4770      	bx	lr
 800c7e0:	b298      	uxth	r0, r3
 800c7e2:	b9a8      	cbnz	r0, 800c810 <__lo0bits+0x52>
 800c7e4:	0c1b      	lsrs	r3, r3, #16
 800c7e6:	2010      	movs	r0, #16
 800c7e8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c7ec:	bf04      	itt	eq
 800c7ee:	0a1b      	lsreq	r3, r3, #8
 800c7f0:	3008      	addeq	r0, #8
 800c7f2:	071a      	lsls	r2, r3, #28
 800c7f4:	bf04      	itt	eq
 800c7f6:	091b      	lsreq	r3, r3, #4
 800c7f8:	3004      	addeq	r0, #4
 800c7fa:	079a      	lsls	r2, r3, #30
 800c7fc:	bf04      	itt	eq
 800c7fe:	089b      	lsreq	r3, r3, #2
 800c800:	3002      	addeq	r0, #2
 800c802:	07da      	lsls	r2, r3, #31
 800c804:	d402      	bmi.n	800c80c <__lo0bits+0x4e>
 800c806:	085b      	lsrs	r3, r3, #1
 800c808:	d006      	beq.n	800c818 <__lo0bits+0x5a>
 800c80a:	3001      	adds	r0, #1
 800c80c:	600b      	str	r3, [r1, #0]
 800c80e:	4770      	bx	lr
 800c810:	4610      	mov	r0, r2
 800c812:	e7e9      	b.n	800c7e8 <__lo0bits+0x2a>
 800c814:	2000      	movs	r0, #0
 800c816:	4770      	bx	lr
 800c818:	2020      	movs	r0, #32
 800c81a:	4770      	bx	lr

0800c81c <__i2b>:
 800c81c:	b510      	push	{r4, lr}
 800c81e:	460c      	mov	r4, r1
 800c820:	2101      	movs	r1, #1
 800c822:	f7ff ff27 	bl	800c674 <_Balloc>
 800c826:	2201      	movs	r2, #1
 800c828:	6144      	str	r4, [r0, #20]
 800c82a:	6102      	str	r2, [r0, #16]
 800c82c:	bd10      	pop	{r4, pc}

0800c82e <__multiply>:
 800c82e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c832:	4614      	mov	r4, r2
 800c834:	690a      	ldr	r2, [r1, #16]
 800c836:	6923      	ldr	r3, [r4, #16]
 800c838:	429a      	cmp	r2, r3
 800c83a:	bfb8      	it	lt
 800c83c:	460b      	movlt	r3, r1
 800c83e:	4688      	mov	r8, r1
 800c840:	bfbc      	itt	lt
 800c842:	46a0      	movlt	r8, r4
 800c844:	461c      	movlt	r4, r3
 800c846:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c84a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c84e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c852:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c856:	eb07 0609 	add.w	r6, r7, r9
 800c85a:	42b3      	cmp	r3, r6
 800c85c:	bfb8      	it	lt
 800c85e:	3101      	addlt	r1, #1
 800c860:	f7ff ff08 	bl	800c674 <_Balloc>
 800c864:	f100 0514 	add.w	r5, r0, #20
 800c868:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c86c:	462b      	mov	r3, r5
 800c86e:	2200      	movs	r2, #0
 800c870:	4573      	cmp	r3, lr
 800c872:	d316      	bcc.n	800c8a2 <__multiply+0x74>
 800c874:	f104 0214 	add.w	r2, r4, #20
 800c878:	f108 0114 	add.w	r1, r8, #20
 800c87c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c880:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c884:	9300      	str	r3, [sp, #0]
 800c886:	9b00      	ldr	r3, [sp, #0]
 800c888:	9201      	str	r2, [sp, #4]
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d80c      	bhi.n	800c8a8 <__multiply+0x7a>
 800c88e:	2e00      	cmp	r6, #0
 800c890:	dd03      	ble.n	800c89a <__multiply+0x6c>
 800c892:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c896:	2b00      	cmp	r3, #0
 800c898:	d05d      	beq.n	800c956 <__multiply+0x128>
 800c89a:	6106      	str	r6, [r0, #16]
 800c89c:	b003      	add	sp, #12
 800c89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a2:	f843 2b04 	str.w	r2, [r3], #4
 800c8a6:	e7e3      	b.n	800c870 <__multiply+0x42>
 800c8a8:	f8b2 b000 	ldrh.w	fp, [r2]
 800c8ac:	f1bb 0f00 	cmp.w	fp, #0
 800c8b0:	d023      	beq.n	800c8fa <__multiply+0xcc>
 800c8b2:	4689      	mov	r9, r1
 800c8b4:	46ac      	mov	ip, r5
 800c8b6:	f04f 0800 	mov.w	r8, #0
 800c8ba:	f859 4b04 	ldr.w	r4, [r9], #4
 800c8be:	f8dc a000 	ldr.w	sl, [ip]
 800c8c2:	b2a3      	uxth	r3, r4
 800c8c4:	fa1f fa8a 	uxth.w	sl, sl
 800c8c8:	fb0b a303 	mla	r3, fp, r3, sl
 800c8cc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c8d0:	f8dc 4000 	ldr.w	r4, [ip]
 800c8d4:	4443      	add	r3, r8
 800c8d6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c8da:	fb0b 840a 	mla	r4, fp, sl, r8
 800c8de:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c8e2:	46e2      	mov	sl, ip
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c8ea:	454f      	cmp	r7, r9
 800c8ec:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c8f0:	f84a 3b04 	str.w	r3, [sl], #4
 800c8f4:	d82b      	bhi.n	800c94e <__multiply+0x120>
 800c8f6:	f8cc 8004 	str.w	r8, [ip, #4]
 800c8fa:	9b01      	ldr	r3, [sp, #4]
 800c8fc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c900:	3204      	adds	r2, #4
 800c902:	f1ba 0f00 	cmp.w	sl, #0
 800c906:	d020      	beq.n	800c94a <__multiply+0x11c>
 800c908:	682b      	ldr	r3, [r5, #0]
 800c90a:	4689      	mov	r9, r1
 800c90c:	46a8      	mov	r8, r5
 800c90e:	f04f 0b00 	mov.w	fp, #0
 800c912:	f8b9 c000 	ldrh.w	ip, [r9]
 800c916:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c91a:	fb0a 440c 	mla	r4, sl, ip, r4
 800c91e:	445c      	add	r4, fp
 800c920:	46c4      	mov	ip, r8
 800c922:	b29b      	uxth	r3, r3
 800c924:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c928:	f84c 3b04 	str.w	r3, [ip], #4
 800c92c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c930:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c934:	0c1b      	lsrs	r3, r3, #16
 800c936:	fb0a b303 	mla	r3, sl, r3, fp
 800c93a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c93e:	454f      	cmp	r7, r9
 800c940:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c944:	d805      	bhi.n	800c952 <__multiply+0x124>
 800c946:	f8c8 3004 	str.w	r3, [r8, #4]
 800c94a:	3504      	adds	r5, #4
 800c94c:	e79b      	b.n	800c886 <__multiply+0x58>
 800c94e:	46d4      	mov	ip, sl
 800c950:	e7b3      	b.n	800c8ba <__multiply+0x8c>
 800c952:	46e0      	mov	r8, ip
 800c954:	e7dd      	b.n	800c912 <__multiply+0xe4>
 800c956:	3e01      	subs	r6, #1
 800c958:	e799      	b.n	800c88e <__multiply+0x60>
	...

0800c95c <__pow5mult>:
 800c95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c960:	4615      	mov	r5, r2
 800c962:	f012 0203 	ands.w	r2, r2, #3
 800c966:	4606      	mov	r6, r0
 800c968:	460f      	mov	r7, r1
 800c96a:	d007      	beq.n	800c97c <__pow5mult+0x20>
 800c96c:	3a01      	subs	r2, #1
 800c96e:	4c21      	ldr	r4, [pc, #132]	; (800c9f4 <__pow5mult+0x98>)
 800c970:	2300      	movs	r3, #0
 800c972:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c976:	f7ff fec8 	bl	800c70a <__multadd>
 800c97a:	4607      	mov	r7, r0
 800c97c:	10ad      	asrs	r5, r5, #2
 800c97e:	d035      	beq.n	800c9ec <__pow5mult+0x90>
 800c980:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c982:	b93c      	cbnz	r4, 800c994 <__pow5mult+0x38>
 800c984:	2010      	movs	r0, #16
 800c986:	f7fe fa89 	bl	800ae9c <malloc>
 800c98a:	6270      	str	r0, [r6, #36]	; 0x24
 800c98c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c990:	6004      	str	r4, [r0, #0]
 800c992:	60c4      	str	r4, [r0, #12]
 800c994:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c998:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c99c:	b94c      	cbnz	r4, 800c9b2 <__pow5mult+0x56>
 800c99e:	f240 2171 	movw	r1, #625	; 0x271
 800c9a2:	4630      	mov	r0, r6
 800c9a4:	f7ff ff3a 	bl	800c81c <__i2b>
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800c9ae:	4604      	mov	r4, r0
 800c9b0:	6003      	str	r3, [r0, #0]
 800c9b2:	f04f 0800 	mov.w	r8, #0
 800c9b6:	07eb      	lsls	r3, r5, #31
 800c9b8:	d50a      	bpl.n	800c9d0 <__pow5mult+0x74>
 800c9ba:	4639      	mov	r1, r7
 800c9bc:	4622      	mov	r2, r4
 800c9be:	4630      	mov	r0, r6
 800c9c0:	f7ff ff35 	bl	800c82e <__multiply>
 800c9c4:	4639      	mov	r1, r7
 800c9c6:	4681      	mov	r9, r0
 800c9c8:	4630      	mov	r0, r6
 800c9ca:	f7ff fe87 	bl	800c6dc <_Bfree>
 800c9ce:	464f      	mov	r7, r9
 800c9d0:	106d      	asrs	r5, r5, #1
 800c9d2:	d00b      	beq.n	800c9ec <__pow5mult+0x90>
 800c9d4:	6820      	ldr	r0, [r4, #0]
 800c9d6:	b938      	cbnz	r0, 800c9e8 <__pow5mult+0x8c>
 800c9d8:	4622      	mov	r2, r4
 800c9da:	4621      	mov	r1, r4
 800c9dc:	4630      	mov	r0, r6
 800c9de:	f7ff ff26 	bl	800c82e <__multiply>
 800c9e2:	6020      	str	r0, [r4, #0]
 800c9e4:	f8c0 8000 	str.w	r8, [r0]
 800c9e8:	4604      	mov	r4, r0
 800c9ea:	e7e4      	b.n	800c9b6 <__pow5mult+0x5a>
 800c9ec:	4638      	mov	r0, r7
 800c9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9f2:	bf00      	nop
 800c9f4:	080331b8 	.word	0x080331b8

0800c9f8 <__lshift>:
 800c9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9fc:	460c      	mov	r4, r1
 800c9fe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca02:	6923      	ldr	r3, [r4, #16]
 800ca04:	6849      	ldr	r1, [r1, #4]
 800ca06:	eb0a 0903 	add.w	r9, sl, r3
 800ca0a:	68a3      	ldr	r3, [r4, #8]
 800ca0c:	4607      	mov	r7, r0
 800ca0e:	4616      	mov	r6, r2
 800ca10:	f109 0501 	add.w	r5, r9, #1
 800ca14:	42ab      	cmp	r3, r5
 800ca16:	db32      	blt.n	800ca7e <__lshift+0x86>
 800ca18:	4638      	mov	r0, r7
 800ca1a:	f7ff fe2b 	bl	800c674 <_Balloc>
 800ca1e:	2300      	movs	r3, #0
 800ca20:	4680      	mov	r8, r0
 800ca22:	f100 0114 	add.w	r1, r0, #20
 800ca26:	461a      	mov	r2, r3
 800ca28:	4553      	cmp	r3, sl
 800ca2a:	db2b      	blt.n	800ca84 <__lshift+0x8c>
 800ca2c:	6920      	ldr	r0, [r4, #16]
 800ca2e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca32:	f104 0314 	add.w	r3, r4, #20
 800ca36:	f016 021f 	ands.w	r2, r6, #31
 800ca3a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca3e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca42:	d025      	beq.n	800ca90 <__lshift+0x98>
 800ca44:	f1c2 0e20 	rsb	lr, r2, #32
 800ca48:	2000      	movs	r0, #0
 800ca4a:	681e      	ldr	r6, [r3, #0]
 800ca4c:	468a      	mov	sl, r1
 800ca4e:	4096      	lsls	r6, r2
 800ca50:	4330      	orrs	r0, r6
 800ca52:	f84a 0b04 	str.w	r0, [sl], #4
 800ca56:	f853 0b04 	ldr.w	r0, [r3], #4
 800ca5a:	459c      	cmp	ip, r3
 800ca5c:	fa20 f00e 	lsr.w	r0, r0, lr
 800ca60:	d814      	bhi.n	800ca8c <__lshift+0x94>
 800ca62:	6048      	str	r0, [r1, #4]
 800ca64:	b108      	cbz	r0, 800ca6a <__lshift+0x72>
 800ca66:	f109 0502 	add.w	r5, r9, #2
 800ca6a:	3d01      	subs	r5, #1
 800ca6c:	4638      	mov	r0, r7
 800ca6e:	f8c8 5010 	str.w	r5, [r8, #16]
 800ca72:	4621      	mov	r1, r4
 800ca74:	f7ff fe32 	bl	800c6dc <_Bfree>
 800ca78:	4640      	mov	r0, r8
 800ca7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca7e:	3101      	adds	r1, #1
 800ca80:	005b      	lsls	r3, r3, #1
 800ca82:	e7c7      	b.n	800ca14 <__lshift+0x1c>
 800ca84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ca88:	3301      	adds	r3, #1
 800ca8a:	e7cd      	b.n	800ca28 <__lshift+0x30>
 800ca8c:	4651      	mov	r1, sl
 800ca8e:	e7dc      	b.n	800ca4a <__lshift+0x52>
 800ca90:	3904      	subs	r1, #4
 800ca92:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca96:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca9a:	459c      	cmp	ip, r3
 800ca9c:	d8f9      	bhi.n	800ca92 <__lshift+0x9a>
 800ca9e:	e7e4      	b.n	800ca6a <__lshift+0x72>

0800caa0 <__mcmp>:
 800caa0:	6903      	ldr	r3, [r0, #16]
 800caa2:	690a      	ldr	r2, [r1, #16]
 800caa4:	1a9b      	subs	r3, r3, r2
 800caa6:	b530      	push	{r4, r5, lr}
 800caa8:	d10c      	bne.n	800cac4 <__mcmp+0x24>
 800caaa:	0092      	lsls	r2, r2, #2
 800caac:	3014      	adds	r0, #20
 800caae:	3114      	adds	r1, #20
 800cab0:	1884      	adds	r4, r0, r2
 800cab2:	4411      	add	r1, r2
 800cab4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cab8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cabc:	4295      	cmp	r5, r2
 800cabe:	d003      	beq.n	800cac8 <__mcmp+0x28>
 800cac0:	d305      	bcc.n	800cace <__mcmp+0x2e>
 800cac2:	2301      	movs	r3, #1
 800cac4:	4618      	mov	r0, r3
 800cac6:	bd30      	pop	{r4, r5, pc}
 800cac8:	42a0      	cmp	r0, r4
 800caca:	d3f3      	bcc.n	800cab4 <__mcmp+0x14>
 800cacc:	e7fa      	b.n	800cac4 <__mcmp+0x24>
 800cace:	f04f 33ff 	mov.w	r3, #4294967295
 800cad2:	e7f7      	b.n	800cac4 <__mcmp+0x24>

0800cad4 <__mdiff>:
 800cad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cad8:	460d      	mov	r5, r1
 800cada:	4607      	mov	r7, r0
 800cadc:	4611      	mov	r1, r2
 800cade:	4628      	mov	r0, r5
 800cae0:	4614      	mov	r4, r2
 800cae2:	f7ff ffdd 	bl	800caa0 <__mcmp>
 800cae6:	1e06      	subs	r6, r0, #0
 800cae8:	d108      	bne.n	800cafc <__mdiff+0x28>
 800caea:	4631      	mov	r1, r6
 800caec:	4638      	mov	r0, r7
 800caee:	f7ff fdc1 	bl	800c674 <_Balloc>
 800caf2:	2301      	movs	r3, #1
 800caf4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800caf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cafc:	bfa4      	itt	ge
 800cafe:	4623      	movge	r3, r4
 800cb00:	462c      	movge	r4, r5
 800cb02:	4638      	mov	r0, r7
 800cb04:	6861      	ldr	r1, [r4, #4]
 800cb06:	bfa6      	itte	ge
 800cb08:	461d      	movge	r5, r3
 800cb0a:	2600      	movge	r6, #0
 800cb0c:	2601      	movlt	r6, #1
 800cb0e:	f7ff fdb1 	bl	800c674 <_Balloc>
 800cb12:	692b      	ldr	r3, [r5, #16]
 800cb14:	60c6      	str	r6, [r0, #12]
 800cb16:	6926      	ldr	r6, [r4, #16]
 800cb18:	f105 0914 	add.w	r9, r5, #20
 800cb1c:	f104 0214 	add.w	r2, r4, #20
 800cb20:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800cb24:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800cb28:	f100 0514 	add.w	r5, r0, #20
 800cb2c:	f04f 0e00 	mov.w	lr, #0
 800cb30:	f852 ab04 	ldr.w	sl, [r2], #4
 800cb34:	f859 4b04 	ldr.w	r4, [r9], #4
 800cb38:	fa1e f18a 	uxtah	r1, lr, sl
 800cb3c:	b2a3      	uxth	r3, r4
 800cb3e:	1ac9      	subs	r1, r1, r3
 800cb40:	0c23      	lsrs	r3, r4, #16
 800cb42:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800cb46:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800cb4a:	b289      	uxth	r1, r1
 800cb4c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800cb50:	45c8      	cmp	r8, r9
 800cb52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800cb56:	4694      	mov	ip, r2
 800cb58:	f845 3b04 	str.w	r3, [r5], #4
 800cb5c:	d8e8      	bhi.n	800cb30 <__mdiff+0x5c>
 800cb5e:	45bc      	cmp	ip, r7
 800cb60:	d304      	bcc.n	800cb6c <__mdiff+0x98>
 800cb62:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800cb66:	b183      	cbz	r3, 800cb8a <__mdiff+0xb6>
 800cb68:	6106      	str	r6, [r0, #16]
 800cb6a:	e7c5      	b.n	800caf8 <__mdiff+0x24>
 800cb6c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cb70:	fa1e f381 	uxtah	r3, lr, r1
 800cb74:	141a      	asrs	r2, r3, #16
 800cb76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cb7a:	b29b      	uxth	r3, r3
 800cb7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb80:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800cb84:	f845 3b04 	str.w	r3, [r5], #4
 800cb88:	e7e9      	b.n	800cb5e <__mdiff+0x8a>
 800cb8a:	3e01      	subs	r6, #1
 800cb8c:	e7e9      	b.n	800cb62 <__mdiff+0x8e>

0800cb8e <__d2b>:
 800cb8e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb92:	460e      	mov	r6, r1
 800cb94:	2101      	movs	r1, #1
 800cb96:	ec59 8b10 	vmov	r8, r9, d0
 800cb9a:	4615      	mov	r5, r2
 800cb9c:	f7ff fd6a 	bl	800c674 <_Balloc>
 800cba0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800cba4:	4607      	mov	r7, r0
 800cba6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cbaa:	bb34      	cbnz	r4, 800cbfa <__d2b+0x6c>
 800cbac:	9301      	str	r3, [sp, #4]
 800cbae:	f1b8 0300 	subs.w	r3, r8, #0
 800cbb2:	d027      	beq.n	800cc04 <__d2b+0x76>
 800cbb4:	a802      	add	r0, sp, #8
 800cbb6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800cbba:	f7ff fe00 	bl	800c7be <__lo0bits>
 800cbbe:	9900      	ldr	r1, [sp, #0]
 800cbc0:	b1f0      	cbz	r0, 800cc00 <__d2b+0x72>
 800cbc2:	9a01      	ldr	r2, [sp, #4]
 800cbc4:	f1c0 0320 	rsb	r3, r0, #32
 800cbc8:	fa02 f303 	lsl.w	r3, r2, r3
 800cbcc:	430b      	orrs	r3, r1
 800cbce:	40c2      	lsrs	r2, r0
 800cbd0:	617b      	str	r3, [r7, #20]
 800cbd2:	9201      	str	r2, [sp, #4]
 800cbd4:	9b01      	ldr	r3, [sp, #4]
 800cbd6:	61bb      	str	r3, [r7, #24]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	bf14      	ite	ne
 800cbdc:	2102      	movne	r1, #2
 800cbde:	2101      	moveq	r1, #1
 800cbe0:	6139      	str	r1, [r7, #16]
 800cbe2:	b1c4      	cbz	r4, 800cc16 <__d2b+0x88>
 800cbe4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800cbe8:	4404      	add	r4, r0
 800cbea:	6034      	str	r4, [r6, #0]
 800cbec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cbf0:	6028      	str	r0, [r5, #0]
 800cbf2:	4638      	mov	r0, r7
 800cbf4:	b003      	add	sp, #12
 800cbf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cbfe:	e7d5      	b.n	800cbac <__d2b+0x1e>
 800cc00:	6179      	str	r1, [r7, #20]
 800cc02:	e7e7      	b.n	800cbd4 <__d2b+0x46>
 800cc04:	a801      	add	r0, sp, #4
 800cc06:	f7ff fdda 	bl	800c7be <__lo0bits>
 800cc0a:	9b01      	ldr	r3, [sp, #4]
 800cc0c:	617b      	str	r3, [r7, #20]
 800cc0e:	2101      	movs	r1, #1
 800cc10:	6139      	str	r1, [r7, #16]
 800cc12:	3020      	adds	r0, #32
 800cc14:	e7e5      	b.n	800cbe2 <__d2b+0x54>
 800cc16:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800cc1a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cc1e:	6030      	str	r0, [r6, #0]
 800cc20:	6918      	ldr	r0, [r3, #16]
 800cc22:	f7ff fdad 	bl	800c780 <__hi0bits>
 800cc26:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800cc2a:	e7e1      	b.n	800cbf0 <__d2b+0x62>

0800cc2c <_calloc_r>:
 800cc2c:	b538      	push	{r3, r4, r5, lr}
 800cc2e:	fb02 f401 	mul.w	r4, r2, r1
 800cc32:	4621      	mov	r1, r4
 800cc34:	f7fe f99c 	bl	800af70 <_malloc_r>
 800cc38:	4605      	mov	r5, r0
 800cc3a:	b118      	cbz	r0, 800cc44 <_calloc_r+0x18>
 800cc3c:	4622      	mov	r2, r4
 800cc3e:	2100      	movs	r1, #0
 800cc40:	f7fe f93f 	bl	800aec2 <memset>
 800cc44:	4628      	mov	r0, r5
 800cc46:	bd38      	pop	{r3, r4, r5, pc}

0800cc48 <_realloc_r>:
 800cc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc4a:	4607      	mov	r7, r0
 800cc4c:	4614      	mov	r4, r2
 800cc4e:	460e      	mov	r6, r1
 800cc50:	b921      	cbnz	r1, 800cc5c <_realloc_r+0x14>
 800cc52:	4611      	mov	r1, r2
 800cc54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cc58:	f7fe b98a 	b.w	800af70 <_malloc_r>
 800cc5c:	b922      	cbnz	r2, 800cc68 <_realloc_r+0x20>
 800cc5e:	f7fe f939 	bl	800aed4 <_free_r>
 800cc62:	4625      	mov	r5, r4
 800cc64:	4628      	mov	r0, r5
 800cc66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc68:	f000 f98c 	bl	800cf84 <_malloc_usable_size_r>
 800cc6c:	42a0      	cmp	r0, r4
 800cc6e:	d20f      	bcs.n	800cc90 <_realloc_r+0x48>
 800cc70:	4621      	mov	r1, r4
 800cc72:	4638      	mov	r0, r7
 800cc74:	f7fe f97c 	bl	800af70 <_malloc_r>
 800cc78:	4605      	mov	r5, r0
 800cc7a:	2800      	cmp	r0, #0
 800cc7c:	d0f2      	beq.n	800cc64 <_realloc_r+0x1c>
 800cc7e:	4631      	mov	r1, r6
 800cc80:	4622      	mov	r2, r4
 800cc82:	f7fe f913 	bl	800aeac <memcpy>
 800cc86:	4631      	mov	r1, r6
 800cc88:	4638      	mov	r0, r7
 800cc8a:	f7fe f923 	bl	800aed4 <_free_r>
 800cc8e:	e7e9      	b.n	800cc64 <_realloc_r+0x1c>
 800cc90:	4635      	mov	r5, r6
 800cc92:	e7e7      	b.n	800cc64 <_realloc_r+0x1c>

0800cc94 <__ssputs_r>:
 800cc94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc98:	688e      	ldr	r6, [r1, #8]
 800cc9a:	429e      	cmp	r6, r3
 800cc9c:	4682      	mov	sl, r0
 800cc9e:	460c      	mov	r4, r1
 800cca0:	4690      	mov	r8, r2
 800cca2:	4699      	mov	r9, r3
 800cca4:	d837      	bhi.n	800cd16 <__ssputs_r+0x82>
 800cca6:	898a      	ldrh	r2, [r1, #12]
 800cca8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ccac:	d031      	beq.n	800cd12 <__ssputs_r+0x7e>
 800ccae:	6825      	ldr	r5, [r4, #0]
 800ccb0:	6909      	ldr	r1, [r1, #16]
 800ccb2:	1a6f      	subs	r7, r5, r1
 800ccb4:	6965      	ldr	r5, [r4, #20]
 800ccb6:	2302      	movs	r3, #2
 800ccb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ccbc:	fb95 f5f3 	sdiv	r5, r5, r3
 800ccc0:	f109 0301 	add.w	r3, r9, #1
 800ccc4:	443b      	add	r3, r7
 800ccc6:	429d      	cmp	r5, r3
 800ccc8:	bf38      	it	cc
 800ccca:	461d      	movcc	r5, r3
 800cccc:	0553      	lsls	r3, r2, #21
 800ccce:	d530      	bpl.n	800cd32 <__ssputs_r+0x9e>
 800ccd0:	4629      	mov	r1, r5
 800ccd2:	f7fe f94d 	bl	800af70 <_malloc_r>
 800ccd6:	4606      	mov	r6, r0
 800ccd8:	b950      	cbnz	r0, 800ccf0 <__ssputs_r+0x5c>
 800ccda:	230c      	movs	r3, #12
 800ccdc:	f8ca 3000 	str.w	r3, [sl]
 800cce0:	89a3      	ldrh	r3, [r4, #12]
 800cce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cce6:	81a3      	strh	r3, [r4, #12]
 800cce8:	f04f 30ff 	mov.w	r0, #4294967295
 800ccec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccf0:	463a      	mov	r2, r7
 800ccf2:	6921      	ldr	r1, [r4, #16]
 800ccf4:	f7fe f8da 	bl	800aeac <memcpy>
 800ccf8:	89a3      	ldrh	r3, [r4, #12]
 800ccfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ccfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd02:	81a3      	strh	r3, [r4, #12]
 800cd04:	6126      	str	r6, [r4, #16]
 800cd06:	6165      	str	r5, [r4, #20]
 800cd08:	443e      	add	r6, r7
 800cd0a:	1bed      	subs	r5, r5, r7
 800cd0c:	6026      	str	r6, [r4, #0]
 800cd0e:	60a5      	str	r5, [r4, #8]
 800cd10:	464e      	mov	r6, r9
 800cd12:	454e      	cmp	r6, r9
 800cd14:	d900      	bls.n	800cd18 <__ssputs_r+0x84>
 800cd16:	464e      	mov	r6, r9
 800cd18:	4632      	mov	r2, r6
 800cd1a:	4641      	mov	r1, r8
 800cd1c:	6820      	ldr	r0, [r4, #0]
 800cd1e:	f000 f918 	bl	800cf52 <memmove>
 800cd22:	68a3      	ldr	r3, [r4, #8]
 800cd24:	1b9b      	subs	r3, r3, r6
 800cd26:	60a3      	str	r3, [r4, #8]
 800cd28:	6823      	ldr	r3, [r4, #0]
 800cd2a:	441e      	add	r6, r3
 800cd2c:	6026      	str	r6, [r4, #0]
 800cd2e:	2000      	movs	r0, #0
 800cd30:	e7dc      	b.n	800ccec <__ssputs_r+0x58>
 800cd32:	462a      	mov	r2, r5
 800cd34:	f7ff ff88 	bl	800cc48 <_realloc_r>
 800cd38:	4606      	mov	r6, r0
 800cd3a:	2800      	cmp	r0, #0
 800cd3c:	d1e2      	bne.n	800cd04 <__ssputs_r+0x70>
 800cd3e:	6921      	ldr	r1, [r4, #16]
 800cd40:	4650      	mov	r0, sl
 800cd42:	f7fe f8c7 	bl	800aed4 <_free_r>
 800cd46:	e7c8      	b.n	800ccda <__ssputs_r+0x46>

0800cd48 <_svfiprintf_r>:
 800cd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd4c:	461d      	mov	r5, r3
 800cd4e:	898b      	ldrh	r3, [r1, #12]
 800cd50:	061f      	lsls	r7, r3, #24
 800cd52:	b09d      	sub	sp, #116	; 0x74
 800cd54:	4680      	mov	r8, r0
 800cd56:	460c      	mov	r4, r1
 800cd58:	4616      	mov	r6, r2
 800cd5a:	d50f      	bpl.n	800cd7c <_svfiprintf_r+0x34>
 800cd5c:	690b      	ldr	r3, [r1, #16]
 800cd5e:	b96b      	cbnz	r3, 800cd7c <_svfiprintf_r+0x34>
 800cd60:	2140      	movs	r1, #64	; 0x40
 800cd62:	f7fe f905 	bl	800af70 <_malloc_r>
 800cd66:	6020      	str	r0, [r4, #0]
 800cd68:	6120      	str	r0, [r4, #16]
 800cd6a:	b928      	cbnz	r0, 800cd78 <_svfiprintf_r+0x30>
 800cd6c:	230c      	movs	r3, #12
 800cd6e:	f8c8 3000 	str.w	r3, [r8]
 800cd72:	f04f 30ff 	mov.w	r0, #4294967295
 800cd76:	e0c8      	b.n	800cf0a <_svfiprintf_r+0x1c2>
 800cd78:	2340      	movs	r3, #64	; 0x40
 800cd7a:	6163      	str	r3, [r4, #20]
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	9309      	str	r3, [sp, #36]	; 0x24
 800cd80:	2320      	movs	r3, #32
 800cd82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd86:	2330      	movs	r3, #48	; 0x30
 800cd88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd8c:	9503      	str	r5, [sp, #12]
 800cd8e:	f04f 0b01 	mov.w	fp, #1
 800cd92:	4637      	mov	r7, r6
 800cd94:	463d      	mov	r5, r7
 800cd96:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cd9a:	b10b      	cbz	r3, 800cda0 <_svfiprintf_r+0x58>
 800cd9c:	2b25      	cmp	r3, #37	; 0x25
 800cd9e:	d13e      	bne.n	800ce1e <_svfiprintf_r+0xd6>
 800cda0:	ebb7 0a06 	subs.w	sl, r7, r6
 800cda4:	d00b      	beq.n	800cdbe <_svfiprintf_r+0x76>
 800cda6:	4653      	mov	r3, sl
 800cda8:	4632      	mov	r2, r6
 800cdaa:	4621      	mov	r1, r4
 800cdac:	4640      	mov	r0, r8
 800cdae:	f7ff ff71 	bl	800cc94 <__ssputs_r>
 800cdb2:	3001      	adds	r0, #1
 800cdb4:	f000 80a4 	beq.w	800cf00 <_svfiprintf_r+0x1b8>
 800cdb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdba:	4453      	add	r3, sl
 800cdbc:	9309      	str	r3, [sp, #36]	; 0x24
 800cdbe:	783b      	ldrb	r3, [r7, #0]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	f000 809d 	beq.w	800cf00 <_svfiprintf_r+0x1b8>
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	f04f 32ff 	mov.w	r2, #4294967295
 800cdcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdd0:	9304      	str	r3, [sp, #16]
 800cdd2:	9307      	str	r3, [sp, #28]
 800cdd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cdd8:	931a      	str	r3, [sp, #104]	; 0x68
 800cdda:	462f      	mov	r7, r5
 800cddc:	2205      	movs	r2, #5
 800cdde:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cde2:	4850      	ldr	r0, [pc, #320]	; (800cf24 <_svfiprintf_r+0x1dc>)
 800cde4:	f7f3 fa7c 	bl	80002e0 <memchr>
 800cde8:	9b04      	ldr	r3, [sp, #16]
 800cdea:	b9d0      	cbnz	r0, 800ce22 <_svfiprintf_r+0xda>
 800cdec:	06d9      	lsls	r1, r3, #27
 800cdee:	bf44      	itt	mi
 800cdf0:	2220      	movmi	r2, #32
 800cdf2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cdf6:	071a      	lsls	r2, r3, #28
 800cdf8:	bf44      	itt	mi
 800cdfa:	222b      	movmi	r2, #43	; 0x2b
 800cdfc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ce00:	782a      	ldrb	r2, [r5, #0]
 800ce02:	2a2a      	cmp	r2, #42	; 0x2a
 800ce04:	d015      	beq.n	800ce32 <_svfiprintf_r+0xea>
 800ce06:	9a07      	ldr	r2, [sp, #28]
 800ce08:	462f      	mov	r7, r5
 800ce0a:	2000      	movs	r0, #0
 800ce0c:	250a      	movs	r5, #10
 800ce0e:	4639      	mov	r1, r7
 800ce10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce14:	3b30      	subs	r3, #48	; 0x30
 800ce16:	2b09      	cmp	r3, #9
 800ce18:	d94d      	bls.n	800ceb6 <_svfiprintf_r+0x16e>
 800ce1a:	b1b8      	cbz	r0, 800ce4c <_svfiprintf_r+0x104>
 800ce1c:	e00f      	b.n	800ce3e <_svfiprintf_r+0xf6>
 800ce1e:	462f      	mov	r7, r5
 800ce20:	e7b8      	b.n	800cd94 <_svfiprintf_r+0x4c>
 800ce22:	4a40      	ldr	r2, [pc, #256]	; (800cf24 <_svfiprintf_r+0x1dc>)
 800ce24:	1a80      	subs	r0, r0, r2
 800ce26:	fa0b f000 	lsl.w	r0, fp, r0
 800ce2a:	4318      	orrs	r0, r3
 800ce2c:	9004      	str	r0, [sp, #16]
 800ce2e:	463d      	mov	r5, r7
 800ce30:	e7d3      	b.n	800cdda <_svfiprintf_r+0x92>
 800ce32:	9a03      	ldr	r2, [sp, #12]
 800ce34:	1d11      	adds	r1, r2, #4
 800ce36:	6812      	ldr	r2, [r2, #0]
 800ce38:	9103      	str	r1, [sp, #12]
 800ce3a:	2a00      	cmp	r2, #0
 800ce3c:	db01      	blt.n	800ce42 <_svfiprintf_r+0xfa>
 800ce3e:	9207      	str	r2, [sp, #28]
 800ce40:	e004      	b.n	800ce4c <_svfiprintf_r+0x104>
 800ce42:	4252      	negs	r2, r2
 800ce44:	f043 0302 	orr.w	r3, r3, #2
 800ce48:	9207      	str	r2, [sp, #28]
 800ce4a:	9304      	str	r3, [sp, #16]
 800ce4c:	783b      	ldrb	r3, [r7, #0]
 800ce4e:	2b2e      	cmp	r3, #46	; 0x2e
 800ce50:	d10c      	bne.n	800ce6c <_svfiprintf_r+0x124>
 800ce52:	787b      	ldrb	r3, [r7, #1]
 800ce54:	2b2a      	cmp	r3, #42	; 0x2a
 800ce56:	d133      	bne.n	800cec0 <_svfiprintf_r+0x178>
 800ce58:	9b03      	ldr	r3, [sp, #12]
 800ce5a:	1d1a      	adds	r2, r3, #4
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	9203      	str	r2, [sp, #12]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	bfb8      	it	lt
 800ce64:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce68:	3702      	adds	r7, #2
 800ce6a:	9305      	str	r3, [sp, #20]
 800ce6c:	4d2e      	ldr	r5, [pc, #184]	; (800cf28 <_svfiprintf_r+0x1e0>)
 800ce6e:	7839      	ldrb	r1, [r7, #0]
 800ce70:	2203      	movs	r2, #3
 800ce72:	4628      	mov	r0, r5
 800ce74:	f7f3 fa34 	bl	80002e0 <memchr>
 800ce78:	b138      	cbz	r0, 800ce8a <_svfiprintf_r+0x142>
 800ce7a:	2340      	movs	r3, #64	; 0x40
 800ce7c:	1b40      	subs	r0, r0, r5
 800ce7e:	fa03 f000 	lsl.w	r0, r3, r0
 800ce82:	9b04      	ldr	r3, [sp, #16]
 800ce84:	4303      	orrs	r3, r0
 800ce86:	3701      	adds	r7, #1
 800ce88:	9304      	str	r3, [sp, #16]
 800ce8a:	7839      	ldrb	r1, [r7, #0]
 800ce8c:	4827      	ldr	r0, [pc, #156]	; (800cf2c <_svfiprintf_r+0x1e4>)
 800ce8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce92:	2206      	movs	r2, #6
 800ce94:	1c7e      	adds	r6, r7, #1
 800ce96:	f7f3 fa23 	bl	80002e0 <memchr>
 800ce9a:	2800      	cmp	r0, #0
 800ce9c:	d038      	beq.n	800cf10 <_svfiprintf_r+0x1c8>
 800ce9e:	4b24      	ldr	r3, [pc, #144]	; (800cf30 <_svfiprintf_r+0x1e8>)
 800cea0:	bb13      	cbnz	r3, 800cee8 <_svfiprintf_r+0x1a0>
 800cea2:	9b03      	ldr	r3, [sp, #12]
 800cea4:	3307      	adds	r3, #7
 800cea6:	f023 0307 	bic.w	r3, r3, #7
 800ceaa:	3308      	adds	r3, #8
 800ceac:	9303      	str	r3, [sp, #12]
 800ceae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceb0:	444b      	add	r3, r9
 800ceb2:	9309      	str	r3, [sp, #36]	; 0x24
 800ceb4:	e76d      	b.n	800cd92 <_svfiprintf_r+0x4a>
 800ceb6:	fb05 3202 	mla	r2, r5, r2, r3
 800ceba:	2001      	movs	r0, #1
 800cebc:	460f      	mov	r7, r1
 800cebe:	e7a6      	b.n	800ce0e <_svfiprintf_r+0xc6>
 800cec0:	2300      	movs	r3, #0
 800cec2:	3701      	adds	r7, #1
 800cec4:	9305      	str	r3, [sp, #20]
 800cec6:	4619      	mov	r1, r3
 800cec8:	250a      	movs	r5, #10
 800ceca:	4638      	mov	r0, r7
 800cecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ced0:	3a30      	subs	r2, #48	; 0x30
 800ced2:	2a09      	cmp	r2, #9
 800ced4:	d903      	bls.n	800cede <_svfiprintf_r+0x196>
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d0c8      	beq.n	800ce6c <_svfiprintf_r+0x124>
 800ceda:	9105      	str	r1, [sp, #20]
 800cedc:	e7c6      	b.n	800ce6c <_svfiprintf_r+0x124>
 800cede:	fb05 2101 	mla	r1, r5, r1, r2
 800cee2:	2301      	movs	r3, #1
 800cee4:	4607      	mov	r7, r0
 800cee6:	e7f0      	b.n	800ceca <_svfiprintf_r+0x182>
 800cee8:	ab03      	add	r3, sp, #12
 800ceea:	9300      	str	r3, [sp, #0]
 800ceec:	4622      	mov	r2, r4
 800ceee:	4b11      	ldr	r3, [pc, #68]	; (800cf34 <_svfiprintf_r+0x1ec>)
 800cef0:	a904      	add	r1, sp, #16
 800cef2:	4640      	mov	r0, r8
 800cef4:	f7fe f92a 	bl	800b14c <_printf_float>
 800cef8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cefc:	4681      	mov	r9, r0
 800cefe:	d1d6      	bne.n	800ceae <_svfiprintf_r+0x166>
 800cf00:	89a3      	ldrh	r3, [r4, #12]
 800cf02:	065b      	lsls	r3, r3, #25
 800cf04:	f53f af35 	bmi.w	800cd72 <_svfiprintf_r+0x2a>
 800cf08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf0a:	b01d      	add	sp, #116	; 0x74
 800cf0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf10:	ab03      	add	r3, sp, #12
 800cf12:	9300      	str	r3, [sp, #0]
 800cf14:	4622      	mov	r2, r4
 800cf16:	4b07      	ldr	r3, [pc, #28]	; (800cf34 <_svfiprintf_r+0x1ec>)
 800cf18:	a904      	add	r1, sp, #16
 800cf1a:	4640      	mov	r0, r8
 800cf1c:	f7fe fbcc 	bl	800b6b8 <_printf_i>
 800cf20:	e7ea      	b.n	800cef8 <_svfiprintf_r+0x1b0>
 800cf22:	bf00      	nop
 800cf24:	080331c4 	.word	0x080331c4
 800cf28:	080331ca 	.word	0x080331ca
 800cf2c:	080331ce 	.word	0x080331ce
 800cf30:	0800b14d 	.word	0x0800b14d
 800cf34:	0800cc95 	.word	0x0800cc95

0800cf38 <__ascii_wctomb>:
 800cf38:	b149      	cbz	r1, 800cf4e <__ascii_wctomb+0x16>
 800cf3a:	2aff      	cmp	r2, #255	; 0xff
 800cf3c:	bf85      	ittet	hi
 800cf3e:	238a      	movhi	r3, #138	; 0x8a
 800cf40:	6003      	strhi	r3, [r0, #0]
 800cf42:	700a      	strbls	r2, [r1, #0]
 800cf44:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf48:	bf98      	it	ls
 800cf4a:	2001      	movls	r0, #1
 800cf4c:	4770      	bx	lr
 800cf4e:	4608      	mov	r0, r1
 800cf50:	4770      	bx	lr

0800cf52 <memmove>:
 800cf52:	4288      	cmp	r0, r1
 800cf54:	b510      	push	{r4, lr}
 800cf56:	eb01 0302 	add.w	r3, r1, r2
 800cf5a:	d807      	bhi.n	800cf6c <memmove+0x1a>
 800cf5c:	1e42      	subs	r2, r0, #1
 800cf5e:	4299      	cmp	r1, r3
 800cf60:	d00a      	beq.n	800cf78 <memmove+0x26>
 800cf62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf66:	f802 4f01 	strb.w	r4, [r2, #1]!
 800cf6a:	e7f8      	b.n	800cf5e <memmove+0xc>
 800cf6c:	4283      	cmp	r3, r0
 800cf6e:	d9f5      	bls.n	800cf5c <memmove+0xa>
 800cf70:	1881      	adds	r1, r0, r2
 800cf72:	1ad2      	subs	r2, r2, r3
 800cf74:	42d3      	cmn	r3, r2
 800cf76:	d100      	bne.n	800cf7a <memmove+0x28>
 800cf78:	bd10      	pop	{r4, pc}
 800cf7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf7e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800cf82:	e7f7      	b.n	800cf74 <memmove+0x22>

0800cf84 <_malloc_usable_size_r>:
 800cf84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf88:	1f18      	subs	r0, r3, #4
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	bfbc      	itt	lt
 800cf8e:	580b      	ldrlt	r3, [r1, r0]
 800cf90:	18c0      	addlt	r0, r0, r3
 800cf92:	4770      	bx	lr

0800cf94 <expf>:
 800cf94:	b530      	push	{r4, r5, lr}
 800cf96:	ed2d 8b02 	vpush	{d8}
 800cf9a:	4d35      	ldr	r5, [pc, #212]	; (800d070 <expf+0xdc>)
 800cf9c:	b08b      	sub	sp, #44	; 0x2c
 800cf9e:	eeb0 8a40 	vmov.f32	s16, s0
 800cfa2:	f000 f937 	bl	800d214 <__ieee754_expf>
 800cfa6:	f995 3000 	ldrsb.w	r3, [r5]
 800cfaa:	3301      	adds	r3, #1
 800cfac:	ee10 4a10 	vmov	r4, s0
 800cfb0:	d030      	beq.n	800d014 <expf+0x80>
 800cfb2:	eeb0 0a48 	vmov.f32	s0, s16
 800cfb6:	f000 fb53 	bl	800d660 <finitef>
 800cfba:	b358      	cbz	r0, 800d014 <expf+0x80>
 800cfbc:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800d074 <expf+0xe0>
 800cfc0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800cfc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfc8:	dd35      	ble.n	800d036 <expf+0xa2>
 800cfca:	2303      	movs	r3, #3
 800cfcc:	9300      	str	r3, [sp, #0]
 800cfce:	4b2a      	ldr	r3, [pc, #168]	; (800d078 <expf+0xe4>)
 800cfd0:	9301      	str	r3, [sp, #4]
 800cfd2:	ee18 0a10 	vmov	r0, s16
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	9308      	str	r3, [sp, #32]
 800cfda:	f7f3 fb35 	bl	8000648 <__aeabi_f2d>
 800cfde:	f995 3000 	ldrsb.w	r3, [r5]
 800cfe2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cfe6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfea:	b9cb      	cbnz	r3, 800d020 <expf+0x8c>
 800cfec:	4b23      	ldr	r3, [pc, #140]	; (800d07c <expf+0xe8>)
 800cfee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800cff2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cff6:	4668      	mov	r0, sp
 800cff8:	f000 fb27 	bl	800d64a <matherr>
 800cffc:	b1b0      	cbz	r0, 800d02c <expf+0x98>
 800cffe:	9b08      	ldr	r3, [sp, #32]
 800d000:	b11b      	cbz	r3, 800d00a <expf+0x76>
 800d002:	f7fd ff21 	bl	800ae48 <__errno>
 800d006:	9b08      	ldr	r3, [sp, #32]
 800d008:	6003      	str	r3, [r0, #0]
 800d00a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d00e:	f7f3 fe6b 	bl	8000ce8 <__aeabi_d2f>
 800d012:	4604      	mov	r4, r0
 800d014:	ee00 4a10 	vmov	s0, r4
 800d018:	b00b      	add	sp, #44	; 0x2c
 800d01a:	ecbd 8b02 	vpop	{d8}
 800d01e:	bd30      	pop	{r4, r5, pc}
 800d020:	4917      	ldr	r1, [pc, #92]	; (800d080 <expf+0xec>)
 800d022:	2000      	movs	r0, #0
 800d024:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d1e4      	bne.n	800cff6 <expf+0x62>
 800d02c:	f7fd ff0c 	bl	800ae48 <__errno>
 800d030:	2322      	movs	r3, #34	; 0x22
 800d032:	6003      	str	r3, [r0, #0]
 800d034:	e7e3      	b.n	800cffe <expf+0x6a>
 800d036:	eddf 7a13 	vldr	s15, [pc, #76]	; 800d084 <expf+0xf0>
 800d03a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d042:	d5e7      	bpl.n	800d014 <expf+0x80>
 800d044:	2304      	movs	r3, #4
 800d046:	9300      	str	r3, [sp, #0]
 800d048:	4b0b      	ldr	r3, [pc, #44]	; (800d078 <expf+0xe4>)
 800d04a:	9301      	str	r3, [sp, #4]
 800d04c:	ee18 0a10 	vmov	r0, s16
 800d050:	2300      	movs	r3, #0
 800d052:	9308      	str	r3, [sp, #32]
 800d054:	f7f3 faf8 	bl	8000648 <__aeabi_f2d>
 800d058:	2300      	movs	r3, #0
 800d05a:	2200      	movs	r2, #0
 800d05c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d060:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d064:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d068:	f995 3000 	ldrsb.w	r3, [r5]
 800d06c:	e7dc      	b.n	800d028 <expf+0x94>
 800d06e:	bf00      	nop
 800d070:	20000e48 	.word	0x20000e48
 800d074:	42b17180 	.word	0x42b17180
 800d078:	080332d6 	.word	0x080332d6
 800d07c:	47efffff 	.word	0x47efffff
 800d080:	7ff00000 	.word	0x7ff00000
 800d084:	c2cff1b5 	.word	0xc2cff1b5

0800d088 <log10f>:
 800d088:	b510      	push	{r4, lr}
 800d08a:	ed2d 8b02 	vpush	{d8}
 800d08e:	b08a      	sub	sp, #40	; 0x28
 800d090:	eeb0 8a40 	vmov.f32	s16, s0
 800d094:	f000 fa80 	bl	800d598 <__ieee754_log10f>
 800d098:	4b31      	ldr	r3, [pc, #196]	; (800d160 <log10f+0xd8>)
 800d09a:	f993 4000 	ldrsb.w	r4, [r3]
 800d09e:	1c63      	adds	r3, r4, #1
 800d0a0:	d059      	beq.n	800d156 <log10f+0xce>
 800d0a2:	eeb4 8a48 	vcmp.f32	s16, s16
 800d0a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0aa:	d654      	bvs.n	800d156 <log10f+0xce>
 800d0ac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0b4:	d84f      	bhi.n	800d156 <log10f+0xce>
 800d0b6:	4b2b      	ldr	r3, [pc, #172]	; (800d164 <log10f+0xdc>)
 800d0b8:	9301      	str	r3, [sp, #4]
 800d0ba:	ee18 0a10 	vmov	r0, s16
 800d0be:	2300      	movs	r3, #0
 800d0c0:	9308      	str	r3, [sp, #32]
 800d0c2:	f7f3 fac1 	bl	8000648 <__aeabi_f2d>
 800d0c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d0ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0ce:	b994      	cbnz	r4, 800d0f6 <log10f+0x6e>
 800d0d0:	4b25      	ldr	r3, [pc, #148]	; (800d168 <log10f+0xe0>)
 800d0d2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d0d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d0e2:	d025      	beq.n	800d130 <log10f+0xa8>
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	2c02      	cmp	r4, #2
 800d0e8:	9300      	str	r3, [sp, #0]
 800d0ea:	d116      	bne.n	800d11a <log10f+0x92>
 800d0ec:	f7fd feac 	bl	800ae48 <__errno>
 800d0f0:	2321      	movs	r3, #33	; 0x21
 800d0f2:	6003      	str	r3, [r0, #0]
 800d0f4:	e016      	b.n	800d124 <log10f+0x9c>
 800d0f6:	4b1d      	ldr	r3, [pc, #116]	; (800d16c <log10f+0xe4>)
 800d0f8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d102:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d106:	d1ed      	bne.n	800d0e4 <log10f+0x5c>
 800d108:	2302      	movs	r3, #2
 800d10a:	429c      	cmp	r4, r3
 800d10c:	9300      	str	r3, [sp, #0]
 800d10e:	d111      	bne.n	800d134 <log10f+0xac>
 800d110:	f7fd fe9a 	bl	800ae48 <__errno>
 800d114:	2322      	movs	r3, #34	; 0x22
 800d116:	6003      	str	r3, [r0, #0]
 800d118:	e011      	b.n	800d13e <log10f+0xb6>
 800d11a:	4668      	mov	r0, sp
 800d11c:	f000 fa95 	bl	800d64a <matherr>
 800d120:	2800      	cmp	r0, #0
 800d122:	d0e3      	beq.n	800d0ec <log10f+0x64>
 800d124:	4812      	ldr	r0, [pc, #72]	; (800d170 <log10f+0xe8>)
 800d126:	f000 fa93 	bl	800d650 <nan>
 800d12a:	ed8d 0b06 	vstr	d0, [sp, #24]
 800d12e:	e006      	b.n	800d13e <log10f+0xb6>
 800d130:	2302      	movs	r3, #2
 800d132:	9300      	str	r3, [sp, #0]
 800d134:	4668      	mov	r0, sp
 800d136:	f000 fa88 	bl	800d64a <matherr>
 800d13a:	2800      	cmp	r0, #0
 800d13c:	d0e8      	beq.n	800d110 <log10f+0x88>
 800d13e:	9b08      	ldr	r3, [sp, #32]
 800d140:	b11b      	cbz	r3, 800d14a <log10f+0xc2>
 800d142:	f7fd fe81 	bl	800ae48 <__errno>
 800d146:	9b08      	ldr	r3, [sp, #32]
 800d148:	6003      	str	r3, [r0, #0]
 800d14a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d14e:	f7f3 fdcb 	bl	8000ce8 <__aeabi_d2f>
 800d152:	ee00 0a10 	vmov	s0, r0
 800d156:	b00a      	add	sp, #40	; 0x28
 800d158:	ecbd 8b02 	vpop	{d8}
 800d15c:	bd10      	pop	{r4, pc}
 800d15e:	bf00      	nop
 800d160:	20000e48 	.word	0x20000e48
 800d164:	080332db 	.word	0x080332db
 800d168:	c7efffff 	.word	0xc7efffff
 800d16c:	fff00000 	.word	0xfff00000
 800d170:	080331c9 	.word	0x080331c9

0800d174 <sqrtf>:
 800d174:	b510      	push	{r4, lr}
 800d176:	ed2d 8b02 	vpush	{d8}
 800d17a:	b08a      	sub	sp, #40	; 0x28
 800d17c:	eeb0 8a40 	vmov.f32	s16, s0
 800d180:	f000 fa60 	bl	800d644 <__ieee754_sqrtf>
 800d184:	4b21      	ldr	r3, [pc, #132]	; (800d20c <sqrtf+0x98>)
 800d186:	f993 4000 	ldrsb.w	r4, [r3]
 800d18a:	1c63      	adds	r3, r4, #1
 800d18c:	d02c      	beq.n	800d1e8 <sqrtf+0x74>
 800d18e:	eeb4 8a48 	vcmp.f32	s16, s16
 800d192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d196:	d627      	bvs.n	800d1e8 <sqrtf+0x74>
 800d198:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d19c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1a0:	d522      	bpl.n	800d1e8 <sqrtf+0x74>
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	9300      	str	r3, [sp, #0]
 800d1a6:	4b1a      	ldr	r3, [pc, #104]	; (800d210 <sqrtf+0x9c>)
 800d1a8:	9301      	str	r3, [sp, #4]
 800d1aa:	ee18 0a10 	vmov	r0, s16
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	9308      	str	r3, [sp, #32]
 800d1b2:	f7f3 fa49 	bl	8000648 <__aeabi_f2d>
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d1bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	b9ac      	cbnz	r4, 800d1f0 <sqrtf+0x7c>
 800d1c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d1c8:	4668      	mov	r0, sp
 800d1ca:	f000 fa3e 	bl	800d64a <matherr>
 800d1ce:	b1b8      	cbz	r0, 800d200 <sqrtf+0x8c>
 800d1d0:	9b08      	ldr	r3, [sp, #32]
 800d1d2:	b11b      	cbz	r3, 800d1dc <sqrtf+0x68>
 800d1d4:	f7fd fe38 	bl	800ae48 <__errno>
 800d1d8:	9b08      	ldr	r3, [sp, #32]
 800d1da:	6003      	str	r3, [r0, #0]
 800d1dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d1e0:	f7f3 fd82 	bl	8000ce8 <__aeabi_d2f>
 800d1e4:	ee00 0a10 	vmov	s0, r0
 800d1e8:	b00a      	add	sp, #40	; 0x28
 800d1ea:	ecbd 8b02 	vpop	{d8}
 800d1ee:	bd10      	pop	{r4, pc}
 800d1f0:	4610      	mov	r0, r2
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	f7f3 fbaa 	bl	800094c <__aeabi_ddiv>
 800d1f8:	2c02      	cmp	r4, #2
 800d1fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d1fe:	d1e3      	bne.n	800d1c8 <sqrtf+0x54>
 800d200:	f7fd fe22 	bl	800ae48 <__errno>
 800d204:	2321      	movs	r3, #33	; 0x21
 800d206:	6003      	str	r3, [r0, #0]
 800d208:	e7e2      	b.n	800d1d0 <sqrtf+0x5c>
 800d20a:	bf00      	nop
 800d20c:	20000e48 	.word	0x20000e48
 800d210:	080332e2 	.word	0x080332e2

0800d214 <__ieee754_expf>:
 800d214:	ee10 2a10 	vmov	r2, s0
 800d218:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800d21c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d220:	d902      	bls.n	800d228 <__ieee754_expf+0x14>
 800d222:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d226:	4770      	bx	lr
 800d228:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800d22c:	d106      	bne.n	800d23c <__ieee754_expf+0x28>
 800d22e:	eddf 7a51 	vldr	s15, [pc, #324]	; 800d374 <__ieee754_expf+0x160>
 800d232:	2b00      	cmp	r3, #0
 800d234:	bf18      	it	ne
 800d236:	eeb0 0a67 	vmovne.f32	s0, s15
 800d23a:	4770      	bx	lr
 800d23c:	484e      	ldr	r0, [pc, #312]	; (800d378 <__ieee754_expf+0x164>)
 800d23e:	4282      	cmp	r2, r0
 800d240:	dd04      	ble.n	800d24c <__ieee754_expf+0x38>
 800d242:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800d37c <__ieee754_expf+0x168>
 800d246:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d24a:	4770      	bx	lr
 800d24c:	2a00      	cmp	r2, #0
 800d24e:	da03      	bge.n	800d258 <__ieee754_expf+0x44>
 800d250:	4a4b      	ldr	r2, [pc, #300]	; (800d380 <__ieee754_expf+0x16c>)
 800d252:	4291      	cmp	r1, r2
 800d254:	f200 808a 	bhi.w	800d36c <__ieee754_expf+0x158>
 800d258:	4a4a      	ldr	r2, [pc, #296]	; (800d384 <__ieee754_expf+0x170>)
 800d25a:	4291      	cmp	r1, r2
 800d25c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d260:	d954      	bls.n	800d30c <__ieee754_expf+0xf8>
 800d262:	4a49      	ldr	r2, [pc, #292]	; (800d388 <__ieee754_expf+0x174>)
 800d264:	4291      	cmp	r1, r2
 800d266:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800d26a:	d836      	bhi.n	800d2da <__ieee754_expf+0xc6>
 800d26c:	4947      	ldr	r1, [pc, #284]	; (800d38c <__ieee754_expf+0x178>)
 800d26e:	4411      	add	r1, r2
 800d270:	ed91 7a00 	vldr	s14, [r1]
 800d274:	4946      	ldr	r1, [pc, #280]	; (800d390 <__ieee754_expf+0x17c>)
 800d276:	440a      	add	r2, r1
 800d278:	edd2 7a00 	vldr	s15, [r2]
 800d27c:	ee30 7a47 	vsub.f32	s14, s0, s14
 800d280:	f1c3 0201 	rsb	r2, r3, #1
 800d284:	1ad2      	subs	r2, r2, r3
 800d286:	ee37 0a67 	vsub.f32	s0, s14, s15
 800d28a:	ee60 6a00 	vmul.f32	s13, s0, s0
 800d28e:	eddf 5a41 	vldr	s11, [pc, #260]	; 800d394 <__ieee754_expf+0x180>
 800d292:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800d398 <__ieee754_expf+0x184>
 800d296:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800d29a:	eddf 5a40 	vldr	s11, [pc, #256]	; 800d39c <__ieee754_expf+0x188>
 800d29e:	eee5 5a26 	vfma.f32	s11, s10, s13
 800d2a2:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800d3a0 <__ieee754_expf+0x18c>
 800d2a6:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800d2aa:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800d3a4 <__ieee754_expf+0x190>
 800d2ae:	eee5 5a26 	vfma.f32	s11, s10, s13
 800d2b2:	eeb0 5a40 	vmov.f32	s10, s0
 800d2b6:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800d2ba:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d2be:	eef0 6a45 	vmov.f32	s13, s10
 800d2c2:	ee20 5a05 	vmul.f32	s10, s0, s10
 800d2c6:	bb92      	cbnz	r2, 800d32e <__ieee754_expf+0x11a>
 800d2c8:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800d2cc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800d2d0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d2d4:	ee36 0a40 	vsub.f32	s0, s12, s0
 800d2d8:	4770      	bx	lr
 800d2da:	4b33      	ldr	r3, [pc, #204]	; (800d3a8 <__ieee754_expf+0x194>)
 800d2dc:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800d3ac <__ieee754_expf+0x198>
 800d2e0:	4413      	add	r3, r2
 800d2e2:	edd3 7a00 	vldr	s15, [r3]
 800d2e6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d2ea:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800d3b0 <__ieee754_expf+0x19c>
 800d2ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d2f2:	ee17 2a90 	vmov	r2, s15
 800d2f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d2fa:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d2fe:	eeb0 7a40 	vmov.f32	s14, s0
 800d302:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800d3b4 <__ieee754_expf+0x1a0>
 800d306:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d30a:	e7bc      	b.n	800d286 <__ieee754_expf+0x72>
 800d30c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800d310:	d20b      	bcs.n	800d32a <__ieee754_expf+0x116>
 800d312:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800d37c <__ieee754_expf+0x168>
 800d316:	ee70 6a26 	vadd.f32	s13, s0, s13
 800d31a:	eef4 6ac6 	vcmpe.f32	s13, s12
 800d31e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d322:	dd02      	ble.n	800d32a <__ieee754_expf+0x116>
 800d324:	ee30 0a06 	vadd.f32	s0, s0, s12
 800d328:	4770      	bx	lr
 800d32a:	2200      	movs	r2, #0
 800d32c:	e7ad      	b.n	800d28a <__ieee754_expf+0x76>
 800d32e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800d332:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800d336:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800d33a:	bfb8      	it	lt
 800d33c:	3264      	addlt	r2, #100	; 0x64
 800d33e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d342:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800d346:	ee76 7a40 	vsub.f32	s15, s12, s0
 800d34a:	ee17 3a90 	vmov	r3, s15
 800d34e:	bfab      	itete	ge
 800d350:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800d354:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800d358:	ee00 3a10 	vmovge	s0, r3
 800d35c:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800d3b8 <__ieee754_expf+0x1a4>
 800d360:	bfbc      	itt	lt
 800d362:	ee00 3a10 	vmovlt	s0, r3
 800d366:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800d36a:	4770      	bx	lr
 800d36c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d374 <__ieee754_expf+0x160>
 800d370:	4770      	bx	lr
 800d372:	bf00      	nop
 800d374:	00000000 	.word	0x00000000
 800d378:	42b17217 	.word	0x42b17217
 800d37c:	7149f2ca 	.word	0x7149f2ca
 800d380:	42cff1b5 	.word	0x42cff1b5
 800d384:	3eb17218 	.word	0x3eb17218
 800d388:	3f851591 	.word	0x3f851591
 800d38c:	080332f0 	.word	0x080332f0
 800d390:	080332f8 	.word	0x080332f8
 800d394:	3331bb4c 	.word	0x3331bb4c
 800d398:	b5ddea0e 	.word	0xb5ddea0e
 800d39c:	388ab355 	.word	0x388ab355
 800d3a0:	bb360b61 	.word	0xbb360b61
 800d3a4:	3e2aaaab 	.word	0x3e2aaaab
 800d3a8:	080332e8 	.word	0x080332e8
 800d3ac:	3fb8aa3b 	.word	0x3fb8aa3b
 800d3b0:	3f317180 	.word	0x3f317180
 800d3b4:	3717f7d1 	.word	0x3717f7d1
 800d3b8:	0d800000 	.word	0x0d800000

0800d3bc <__ieee754_logf>:
 800d3bc:	ee10 3a10 	vmov	r3, s0
 800d3c0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800d3c4:	d106      	bne.n	800d3d4 <__ieee754_logf+0x18>
 800d3c6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800d55c <__ieee754_logf+0x1a0>
 800d3ca:	eddf 7a65 	vldr	s15, [pc, #404]	; 800d560 <__ieee754_logf+0x1a4>
 800d3ce:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800d3d2:	4770      	bx	lr
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	da02      	bge.n	800d3de <__ieee754_logf+0x22>
 800d3d8:	ee30 7a40 	vsub.f32	s14, s0, s0
 800d3dc:	e7f5      	b.n	800d3ca <__ieee754_logf+0xe>
 800d3de:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d3e2:	db02      	blt.n	800d3ea <__ieee754_logf+0x2e>
 800d3e4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d3e8:	4770      	bx	lr
 800d3ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d3ee:	bfbf      	itttt	lt
 800d3f0:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800d564 <__ieee754_logf+0x1a8>
 800d3f4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800d3f8:	f06f 0118 	mvnlt.w	r1, #24
 800d3fc:	ee17 3a90 	vmovlt	r3, s15
 800d400:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800d404:	bfa8      	it	ge
 800d406:	2100      	movge	r1, #0
 800d408:	3a7f      	subs	r2, #127	; 0x7f
 800d40a:	440a      	add	r2, r1
 800d40c:	4956      	ldr	r1, [pc, #344]	; (800d568 <__ieee754_logf+0x1ac>)
 800d40e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d412:	4419      	add	r1, r3
 800d414:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 800d418:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 800d41c:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800d420:	4319      	orrs	r1, r3
 800d422:	ee07 1a90 	vmov	s15, r1
 800d426:	f103 010f 	add.w	r1, r3, #15
 800d42a:	f3c1 0116 	ubfx	r1, r1, #0, #23
 800d42e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d432:	290f      	cmp	r1, #15
 800d434:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d438:	dc31      	bgt.n	800d49e <__ieee754_logf+0xe2>
 800d43a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800d43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d442:	d10f      	bne.n	800d464 <__ieee754_logf+0xa8>
 800d444:	2a00      	cmp	r2, #0
 800d446:	f000 8085 	beq.w	800d554 <__ieee754_logf+0x198>
 800d44a:	ee07 2a90 	vmov	s15, r2
 800d44e:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800d56c <__ieee754_logf+0x1b0>
 800d452:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800d570 <__ieee754_logf+0x1b4>
 800d456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d45a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d45e:	eea7 0a87 	vfma.f32	s0, s15, s14
 800d462:	4770      	bx	lr
 800d464:	eddf 7a43 	vldr	s15, [pc, #268]	; 800d574 <__ieee754_logf+0x1b8>
 800d468:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d46c:	eea0 7a67 	vfms.f32	s14, s0, s15
 800d470:	ee60 7a00 	vmul.f32	s15, s0, s0
 800d474:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d478:	b912      	cbnz	r2, 800d480 <__ieee754_logf+0xc4>
 800d47a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d47e:	4770      	bx	lr
 800d480:	ee07 2a90 	vmov	s15, r2
 800d484:	eddf 6a39 	vldr	s13, [pc, #228]	; 800d56c <__ieee754_logf+0x1b0>
 800d488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d48c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800d490:	ee37 0a40 	vsub.f32	s0, s14, s0
 800d494:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800d570 <__ieee754_logf+0x1b4>
 800d498:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800d49c:	4770      	bx	lr
 800d49e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800d4a2:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d4a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d578 <__ieee754_logf+0x1bc>
 800d4aa:	eddf 4a34 	vldr	s9, [pc, #208]	; 800d57c <__ieee754_logf+0x1c0>
 800d4ae:	4934      	ldr	r1, [pc, #208]	; (800d580 <__ieee754_logf+0x1c4>)
 800d4b0:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800d4b4:	4419      	add	r1, r3
 800d4b6:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800d4ba:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800d4be:	430b      	orrs	r3, r1
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	ee07 2a90 	vmov	s15, r2
 800d4c6:	ee26 5a06 	vmul.f32	s10, s12, s12
 800d4ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d4ce:	ee25 7a05 	vmul.f32	s14, s10, s10
 800d4d2:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800d584 <__ieee754_logf+0x1c8>
 800d4d6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800d4da:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800d588 <__ieee754_logf+0x1cc>
 800d4de:	eee7 5a87 	vfma.f32	s11, s15, s14
 800d4e2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800d58c <__ieee754_logf+0x1d0>
 800d4e6:	eee7 7a24 	vfma.f32	s15, s14, s9
 800d4ea:	eddf 4a29 	vldr	s9, [pc, #164]	; 800d590 <__ieee754_logf+0x1d4>
 800d4ee:	eee7 4a87 	vfma.f32	s9, s15, s14
 800d4f2:	eddf 7a28 	vldr	s15, [pc, #160]	; 800d594 <__ieee754_logf+0x1d8>
 800d4f6:	eee4 7a87 	vfma.f32	s15, s9, s14
 800d4fa:	ee67 7a85 	vmul.f32	s15, s15, s10
 800d4fe:	eee5 7a87 	vfma.f32	s15, s11, s14
 800d502:	dd1c      	ble.n	800d53e <__ieee754_logf+0x182>
 800d504:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d508:	ee20 7a07 	vmul.f32	s14, s0, s14
 800d50c:	ee27 7a00 	vmul.f32	s14, s14, s0
 800d510:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d514:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d518:	b922      	cbnz	r2, 800d524 <__ieee754_logf+0x168>
 800d51a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d51e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d522:	4770      	bx	lr
 800d524:	ed9f 6a11 	vldr	s12, [pc, #68]	; 800d56c <__ieee754_logf+0x1b0>
 800d528:	eee6 7a86 	vfma.f32	s15, s13, s12
 800d52c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d530:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d534:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800d570 <__ieee754_logf+0x1b4>
 800d538:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800d53c:	4770      	bx	lr
 800d53e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d542:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d546:	2a00      	cmp	r2, #0
 800d548:	d0e9      	beq.n	800d51e <__ieee754_logf+0x162>
 800d54a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800d56c <__ieee754_logf+0x1b0>
 800d54e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d552:	e7ed      	b.n	800d530 <__ieee754_logf+0x174>
 800d554:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800d560 <__ieee754_logf+0x1a4>
 800d558:	4770      	bx	lr
 800d55a:	bf00      	nop
 800d55c:	cc000000 	.word	0xcc000000
 800d560:	00000000 	.word	0x00000000
 800d564:	4c000000 	.word	0x4c000000
 800d568:	004afb20 	.word	0x004afb20
 800d56c:	3717f7d1 	.word	0x3717f7d1
 800d570:	3f317180 	.word	0x3f317180
 800d574:	3eaaaaab 	.word	0x3eaaaaab
 800d578:	3e1cd04f 	.word	0x3e1cd04f
 800d57c:	3e178897 	.word	0x3e178897
 800d580:	ffcf5c30 	.word	0xffcf5c30
 800d584:	3e638e29 	.word	0x3e638e29
 800d588:	3ecccccd 	.word	0x3ecccccd
 800d58c:	3e3a3325 	.word	0x3e3a3325
 800d590:	3e924925 	.word	0x3e924925
 800d594:	3f2aaaab 	.word	0x3f2aaaab

0800d598 <__ieee754_log10f>:
 800d598:	b508      	push	{r3, lr}
 800d59a:	ee10 2a10 	vmov	r2, s0
 800d59e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800d5a2:	ed2d 8b02 	vpush	{d8}
 800d5a6:	d108      	bne.n	800d5ba <__ieee754_log10f+0x22>
 800d5a8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800d62c <__ieee754_log10f+0x94>
 800d5ac:	eddf 7a20 	vldr	s15, [pc, #128]	; 800d630 <__ieee754_log10f+0x98>
 800d5b0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800d5b4:	ecbd 8b02 	vpop	{d8}
 800d5b8:	bd08      	pop	{r3, pc}
 800d5ba:	2a00      	cmp	r2, #0
 800d5bc:	da02      	bge.n	800d5c4 <__ieee754_log10f+0x2c>
 800d5be:	ee30 7a40 	vsub.f32	s14, s0, s0
 800d5c2:	e7f3      	b.n	800d5ac <__ieee754_log10f+0x14>
 800d5c4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d5c8:	db02      	blt.n	800d5d0 <__ieee754_log10f+0x38>
 800d5ca:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d5ce:	e7f1      	b.n	800d5b4 <__ieee754_log10f+0x1c>
 800d5d0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800d5d4:	bfbf      	itttt	lt
 800d5d6:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 800d634 <__ieee754_log10f+0x9c>
 800d5da:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800d5de:	f06f 0118 	mvnlt.w	r1, #24
 800d5e2:	ee17 2a90 	vmovlt	r2, s15
 800d5e6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800d5ea:	bfa8      	it	ge
 800d5ec:	2100      	movge	r1, #0
 800d5ee:	3b7f      	subs	r3, #127	; 0x7f
 800d5f0:	440b      	add	r3, r1
 800d5f2:	0fd9      	lsrs	r1, r3, #31
 800d5f4:	440b      	add	r3, r1
 800d5f6:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800d5fa:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 800d5fe:	ee07 3a90 	vmov	s15, r3
 800d602:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 800d606:	ee00 3a10 	vmov	s0, r3
 800d60a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800d60e:	f7ff fed5 	bl	800d3bc <__ieee754_logf>
 800d612:	eddf 7a09 	vldr	s15, [pc, #36]	; 800d638 <__ieee754_log10f+0xa0>
 800d616:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d61a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d63c <__ieee754_log10f+0xa4>
 800d61e:	eea8 0a27 	vfma.f32	s0, s16, s15
 800d622:	eddf 7a07 	vldr	s15, [pc, #28]	; 800d640 <__ieee754_log10f+0xa8>
 800d626:	eea8 0a27 	vfma.f32	s0, s16, s15
 800d62a:	e7c3      	b.n	800d5b4 <__ieee754_log10f+0x1c>
 800d62c:	cc000000 	.word	0xcc000000
 800d630:	00000000 	.word	0x00000000
 800d634:	4c000000 	.word	0x4c000000
 800d638:	3ede5bd9 	.word	0x3ede5bd9
 800d63c:	355427db 	.word	0x355427db
 800d640:	3e9a2080 	.word	0x3e9a2080

0800d644 <__ieee754_sqrtf>:
 800d644:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d648:	4770      	bx	lr

0800d64a <matherr>:
 800d64a:	2000      	movs	r0, #0
 800d64c:	4770      	bx	lr
	...

0800d650 <nan>:
 800d650:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d658 <nan+0x8>
 800d654:	4770      	bx	lr
 800d656:	bf00      	nop
 800d658:	00000000 	.word	0x00000000
 800d65c:	7ff80000 	.word	0x7ff80000

0800d660 <finitef>:
 800d660:	ee10 3a10 	vmov	r3, s0
 800d664:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800d668:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800d66c:	bfac      	ite	ge
 800d66e:	2000      	movge	r0, #0
 800d670:	2001      	movlt	r0, #1
 800d672:	4770      	bx	lr

0800d674 <_init>:
 800d674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d676:	bf00      	nop
 800d678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d67a:	bc08      	pop	{r3}
 800d67c:	469e      	mov	lr, r3
 800d67e:	4770      	bx	lr

0800d680 <_fini>:
 800d680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d682:	bf00      	nop
 800d684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d686:	bc08      	pop	{r3}
 800d688:	469e      	mov	lr, r3
 800d68a:	4770      	bx	lr
